/*
 * $Id: x86_sse2.s,v 1.2 2002/02/28 10:49:34 spoel Exp $
 * 
 *                This source code is part of
 * 
 *                 G   R   O   M   A   C   S
 * 
 *          GROningen MAchine for Chemical Simulations
 * 
 *                        VERSION 3.1
 * Copyright (c) 1991-2001, University of Groningen, The Netherlands
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * If you want to redistribute modifications, please consider that
 * scientific software is very special. Version control is crucial -
 * bugs must be traceable. We will be happy to consider code for
 * inclusion in the official distribution, but derived work must not
 * be called official GROMACS. Details are found in the README & COPYING
 * files - if they are missing, get the official version at www.gromacs.org.
 * 
 * To help us fund GROMACS development, we humbly ask that you cite
 * the papers on the package - you can find them in the top README file.
 * 
 * For more info, check our website at http://www.gromacs.org
 * 
 * And Hey:
 * Gnomes, ROck Monsters And Chili Sauce
 */
.intel_syntax noprefix

/* NB: We prefix all local variables with underscore, to avoid stupid
 * bugs. Otherwise, dx will e.g. be interpreted as a register,
 * without any further warning!
 */

.text
.align 16

sse2_minushalf:	
        .long 0x00000000
	.long 0xbfe00000	
	.long 0000000000
	.long 0xbfe00000	
sse2_half:	
        .long 0x00000000
	.long 0x3fe00000
	.long 0x00000000
	.long 0x3fe00000
sse2_two:	
        .long 0x00000000
	.long 0x40000000
	.long 0x00000000
	.long 0x40000000
sse2_three:	
        .long 0x00000000
	.long 0x40080000
	.long 0x00000000
	.long 0x40080000
sse2_six:
        .long 0x00000000
	.long 0x40180000
	.long 0x00000000
	.long 0x40180000
sse2_twelve:	
        .long 0x00000000
	.long 0x40280000
	.long 0x00000000
	.long 0x40280000


.globl checksse2	 /* try to issue a SSE2 instruction */
	.type checksse2,@function
checksse2:
	emms
	xorpd xmm0,xmm0
	emms
	ret

.align 16
	
.globl vecinvsqrt_sse2
	.type vecinvsqrt_sse2,@function
vecinvsqrt_sse2:	
	push ebp
	mov ebp,esp	
	push eax
	push ebx
	push ecx
	push edx

	mov eax, [ebp + 8]
	mov ebx, [ebp + 12]	
	mov ecx, [ebp + 16]
        mov edx, ecx
	movupd xmm6,[sse2_three]
	movupd xmm7,[sse2_minushalf]
        shr ecx, 2
        jecxz .vecinvsqrt_iter2
        emms	
.vecinvsqrt_loop4:	
	movapd xmm0,[eax]	
	add eax,  16
	cvtpd2ps xmm4, xmm0
	movapd xmm2,[eax]
	add eax,  16
	cvtpd2ps xmm5, xmm2
	rsqrtps xmm1, xmm4	
	rsqrtps xmm3, xmm5
	movapd  xmm4, xmm0	
	movapd  xmm5, xmm2	
	cvtps2pd xmm1, xmm1	
	cvtps2pd xmm3, xmm3	
	mulpd xmm0,xmm1		
        mulpd xmm2,xmm3		
	mulpd xmm0,xmm1		
        mulpd xmm2,xmm3		
	subpd xmm0,xmm6		
	subpd xmm2,xmm6		
	mulpd xmm0,xmm1		
	mulpd xmm2,xmm3
	mulpd xmm0,xmm7		
	mulpd xmm2,xmm7		
	mulpd xmm4,xmm0		
        mulpd xmm5,xmm2		
	mulpd xmm4,xmm0		
        mulpd xmm5,xmm2		
	subpd xmm4,xmm6		
	subpd xmm5,xmm6		
	mulpd xmm4,xmm0		
	mulpd xmm5,xmm2
	mulpd xmm4,xmm7		
	mulpd xmm5,xmm7		
	movapd [ebx],xmm4
	add ebx,  16
	movapd [ebx],xmm5
	add ebx,  16
        dec ecx
        jecxz .vecinvsqrt_iter2
        jmp .vecinvsqrt_loop4
.vecinvsqrt_iter2:
        mov ecx,edx
        and ecx, 2
        jecxz .vecinvsqrt_iter1
	movapd xmm0,[eax]
	add eax,  16
	cvtpd2ps xmm4, xmm0
	rsqrtps xmm1, xmm4
	movapd xmm4, xmm0
	cvtps2pd xmm1, xmm1	
	mulpd xmm0,xmm1
	mulpd xmm0,xmm1		
	subpd xmm0,xmm6		
	mulpd xmm0,xmm1		
	mulpd xmm0,xmm7		
	mulpd xmm4,xmm0		
	mulpd xmm4,xmm0		
	subpd xmm4,xmm6		
	mulpd xmm4,xmm0		
	mulpd xmm4,xmm7			
	movapd [ebx],xmm4
	add ebx,  16        
.vecinvsqrt_iter1:
        mov ecx,edx
        and ecx, 1
        jecxz .vecinvsqrt_end
	movsd xmm0,[eax]
	add eax,  8
	cvtsd2ss xmm4, xmm0
	rsqrtss xmm1, xmm4	
	movsd xmm4, xmm0
	cvtss2sd xmm1, xmm1	
	mulsd xmm0,xmm1
	mulsd xmm0,xmm1		
	subsd xmm0,xmm6		
	mulsd xmm0,xmm1		
	mulsd xmm0,xmm7		
	mulsd xmm4,xmm0		
	mulsd xmm4,xmm0		
	subsd xmm4,xmm6		
	mulsd xmm4,xmm0		
	mulsd xmm4,xmm7			
	movsd [ebx],xmm4
	add ebx,  8
.vecinvsqrt_end:	
	emms
	pop edx
	pop ecx
	pop ebx
	pop eax
	leave
	ret
	
	
.globl vecrecip_sse2
	.type vecrecip_sse2,@function
vecrecip_sse2:	
	push ebp
	mov ebp,esp	
	push eax
	push ebx
	push ecx
	push edx

	mov eax, [ebp + 8]
	mov ebx, [ebp + 12]	
	mov ecx, [ebp + 16]
        mov edx, ecx
	movupd xmm6,[sse2_two]
        shr ecx, 2
        jecxz .vecrecip_iter2
        emms	
.vecrecip_loop4:	
	movapd xmm0,[eax]	/* xa */
	add eax,  16
	cvtpd2ps xmm4, xmm0	
	movapd xmm2,[eax]	/* xb */
	add eax,  16
	cvtpd2ps xmm5, xmm2
	rcpps xmm4, xmm4	
	rcpps xmm5, xmm5
	movapd xmm7, xmm6
	movapd xmm1, xmm0	/* xa */
	movapd xmm3, xmm2	/* xb */
	cvtps2pd xmm4, xmm4	/* lu a */	
	cvtps2pd xmm5, xmm5	/* lu b */
	mulpd xmm0, xmm4	/* x*lu a */
	mulpd xmm2, xmm5	/* x*lu b */
	subpd xmm7, xmm0	/* 2-x*lu a */
	mulpd xmm4, xmm7	/* lu*(2-x*lu) a */
	movapd xmm7, xmm6	/* 2.0 */
	subpd xmm7, xmm2	/* 2-x*lu b */
	mulpd xmm5, xmm7	/* lu*(2-x*lu) b */
	movapd xmm7, xmm6	
	mulpd xmm1, xmm4	/* x*lu a */
	mulpd xmm3, xmm5	/* x*lu b */
	subpd xmm7, xmm1	/* 2-x*lu a */
	mulpd xmm4, xmm7	/* lu*(2-x*lu) a */
	movapd xmm7, xmm6	/* 2.0 */
	subpd xmm7, xmm3	/* 2-x*lu b */
	mulpd xmm5, xmm7	/* lu*(2-x*lu) b */	
	movapd [ebx],xmm4
	add ebx,  16
	movapd [ebx],xmm5
	add ebx,  16
        dec ecx
        jecxz .vecrecip_iter2
        jmp .vecrecip_loop4
.vecrecip_iter2:
        mov ecx,edx
        and ecx, 2
        jecxz .vecrecip_iter1
	movapd xmm0,[eax]	
	add eax,  16
	cvtpd2ps xmm4, xmm0	
	rcpps xmm4, xmm4
	cvtps2pd xmm4, xmm4	/* lu */
	movapd xmm3, xmm6	/* 2 */
	movapd xmm1,xmm0	/* x */
	mulpd xmm0,xmm4		/* lu*x */
	subpd xmm3,xmm0		/* 2-lu*x */
	mulpd xmm4, xmm3	/* iter1: lu=lu*(2-lu*x) */

	movapd xmm3, xmm6
	mulpd xmm1, xmm4	/* x*lu */
	subpd xmm3, xmm1	/* 2-x*lu */
	mulpd xmm4, xmm3	/* 1/x */
	movapd [ebx],xmm4
	add ebx,  16        
.vecrecip_iter1:
        mov ecx,edx
        and ecx, 1
        jecxz .vecrecip_end
	movsd xmm0,[eax]
	cvtsd2ss xmm4, xmm0	
	rcpss xmm4, xmm4
	cvtss2sd xmm4, xmm4	/* lu */
	movapd xmm3, xmm6	/* 2 */
	movsd xmm1,xmm0		/* x */
	mulsd xmm0,xmm4		/* lu*x */
	subsd xmm3,xmm0		/* 2-lu*x */
	mulsd xmm4, xmm3	/* iter1: lu=lu*(2-lu*x) */

	mulsd xmm1, xmm4	/* x*lu */
	subsd xmm6, xmm1	/* 2-x*lu */
	mulsd xmm4, xmm6	/* 1/x */
	movsd [ebx],xmm4
.vecrecip_end:	
	emms
	pop edx
	pop ecx
	pop ebx
	pop eax
	leave
	ret
	
	
.globl inl0100_sse2
	.type inl0100_sse2,@function
inl0100_sse2:	
.equ		_nri, 		8
.equ		_iinr,		12
.equ		_jindex,	16
.equ		_jjnr,		20
.equ		_shift,		24
.equ		_shiftvec,	28
.equ		_fshift,	32
.equ		_gid,		36
.equ		_pos,		40		
.equ		_faction,	44
.equ		_type,		48
.equ		_ntype,		52
.equ		_nbfp,		56	
.equ		_Vnb,		60	
	/* stack offsets for local variables */ 
	/* bottom of stack is cache-aligned for sse use */
.equ		_ix,		0
.equ		_iy,	        16
.equ		_iz,            32
.equ		_dx,            48
.equ		_dy,            64
.equ		_dz,            80
.equ		_two,           96		
.equ		_c6,		112
.equ		_c12,		128
.equ		_six,		144
.equ		_twelve,	160		 
.equ		_vnbtot,	176
.equ		_fix,		192
.equ		_fiy,		208
.equ		_fiz,		224
.equ		_half,		240
.equ		_three,		256
.equ		_is3,		272
.equ		_ii3,		276
.equ		_ntia,		280	
.equ		_innerjjnr,     284
.equ		_innerk,        288
.equ		_salign,        292
	push ebp
	mov ebp,esp	
        push eax
        push ebx
        push ecx
        push edx
	push esi
	push edi
	sub esp, 296		/* local stack space */
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + _salign], eax

	emms

	movupd xmm1, [sse2_two]
	movupd xmm2, [sse2_six]
	movupd xmm3, [sse2_twelve]
	movapd [esp + _two], xmm1
	movapd [esp + _six],  xmm2
	movapd [esp + _twelve], xmm3

	/* assume we have at least one i particle - start directly */	
.i0100_outer:
	mov   eax, [ebp + _shift]      /* eax = pointer into shift[] */
	mov   ebx, [eax]		/* ebx=shift[n] */
	add   dword ptr [ebp + _shift],  4  /* advance pointer one step */

	lea   ebx, [ebx + ebx*2]        /* ebx=3*is */
	mov   [esp + _is3],ebx    	/* store is3 */

	mov   eax, [ebp + _shiftvec]   /* eax = base of shiftvec[] */

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	add   dword ptr [ebp + _iinr],  4   /* advance pointer */
	mov   ebx, [ecx]	        /* ebx =ii */

        mov   edx, [ebp + _type] 
        mov   edx, [edx + ebx*4]
        imul  edx, [ebp + _ntype]
        shl   edx, 1
        mov   [esp + _ntia], edx
		
	lea   ebx, [ebx + ebx*2]	/* ebx = 3*ii=ii3 */
	mov   eax, [ebp + _pos]        /* eax = base of pos[] */ 

	addsd xmm0, [eax + ebx*8]
	addsd xmm1, [eax + ebx*8 + 8]
	addsd xmm2, [eax + ebx*8 + 16]
	
	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0

	movapd [esp + _ix], xmm0
	movapd [esp + _iy], xmm1
	movapd [esp + _iz], xmm2

	mov   [esp + _ii3], ebx
	
	/* clear vnbtot and i forces */
	xorpd xmm4, xmm4
	movapd [esp + _vnbtot], xmm4
	movapd [esp + _fix], xmm4
	movapd [esp + _fiy], xmm4
	movapd [esp + _fiz], xmm4
	
	mov   eax, [ebp + _jindex]
	mov   ecx, [eax]	         /* jindex[n] */
	mov   edx, [eax + 4]	         /* jindex[n+1] */
	add   dword ptr [ebp + _jindex],  4
	sub   edx, ecx                   /* number of innerloop atoms */

	mov   esi, [ebp + _pos]
	mov   edi, [ebp + _faction]	
	mov   eax, [ebp + _jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + _innerjjnr], eax     /* pointer to jjnr[nj0] */
	sub   edx,  2
	mov   [esp + _innerk], edx        /* number of innerloop atoms */
	
	jge   .i0100_unroll_loop
	jmp   .i0100_checksingle
.i0100_unroll_loop:
	/* twice unrolled innerloop here */
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	add   dword ptr [esp + _innerjjnr],  8 /* advance pointer (unrolled 2) */

	movd  mm0, eax		/* use mmx registers as temp storage */
	movd  mm1, ebx
	
	mov esi, [ebp + _type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov esi, [ebp + _nbfp]
	shl eax, 1
	shl ebx, 1
	mov edi, [esp + _ntia]
	add eax, edi
	add ebx, edi

	movupd xmm6, [esi + eax*8]	/* c6a c12a */
	movupd xmm7, [esi + ebx*8]	/* c6b c12b */
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7

	movd  eax, mm0		
	movd  ebx, mm1	
	
	movapd [esp + _c6], xmm4
	movapd [esp + _c12], xmm6

	mov esi, [ebp + _pos]       /* base of pos[] */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */
	lea   ebx, [ebx + ebx*2]	

	/* move two coordinates to xmm0-xmm2 */	

	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]

	/* move ix-iz to xmm4-xmm6 */
	movapd xmm4, [esp + _ix]
	movapd xmm5, [esp + _iy]
	movapd xmm6, [esp + _iz]

	/* calc dr */
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	/* store dr */
	movapd [esp + _dx], xmm4 
	movapd [esp + _dy], xmm5
	movapd [esp + _dz], xmm6
	/* square it */
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6	/* rsq in xmm4 */

	cvtpd2ps xmm6, xmm4	
	rcpps xmm6, xmm6
	cvtps2pd xmm6, xmm6	/* lu in low xmm6 */
	
	/* 1/x lookup seed in xmm6 */
	movapd xmm0, [esp + _two]
	movapd xmm5, xmm4
	mulpd xmm4, xmm6	/* lu*rsq */
	subpd xmm0, xmm4	/* 2-lu*rsq */
	mulpd xmm6, xmm0	/* (new lu) */
	
	movapd xmm0, [esp + _two]
	mulpd xmm5, xmm6	/* lu*rsq */
	subpd xmm0, xmm5	/* 2-lu*rsq */
	mulpd xmm0, xmm6	/* xmm0=rinvsq */

	movapd xmm1, xmm0
	mulpd  xmm1, xmm0
	mulpd  xmm1, xmm0	/* xmm1=rinvsix */
	movapd xmm2, xmm1
	mulpd  xmm2, xmm2	/* xmm2=rinvtwelve */

	mulpd  xmm1, [esp + _c6]
	mulpd  xmm2, [esp + _c12]
	movapd xmm5, xmm2
	subpd  xmm5, xmm1	/* vnb=vnb12-vnb6 */
	addpd  xmm5, [esp + _vnbtot]
	mulpd  xmm1, [esp + _six]
	mulpd  xmm2, [esp + _twelve]
	subpd  xmm2, xmm1
	mulpd  xmm0, xmm2	/* xmm4=total fscal */
	movapd xmm4, xmm0
	
	movapd xmm0, [esp + _dx]
	movapd xmm1, [esp + _dy]
	movapd xmm2, [esp + _dz]

	movapd [esp + _vnbtot], xmm5

	mov    edi, [ebp + _faction]
	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4
	/* xmm0-xmm2 contains tx-tz (partial force) */
	/* now update f_i */
	movapd xmm3, [esp + _fix]
	movapd xmm4, [esp + _fiy]
	movapd xmm5, [esp + _fiz]
	addpd  xmm3, xmm0
	addpd  xmm4, xmm1
	addpd  xmm5, xmm2
	movapd [esp + _fix], xmm3
	movapd [esp + _fiy], xmm4
	movapd [esp + _fiz], xmm5
	
	/* the fj's - start by accumulating forces from memory */
	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	movhpd xmm3, [edi + ebx*8]
	movhpd xmm4, [edi + ebx*8 + 8]
	movhpd xmm5, [edi + ebx*8 + 16]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5
	movhpd [edi + ebx*8], xmm3
	movhpd [edi + ebx*8 + 8], xmm4
	movhpd [edi + ebx*8 + 16], xmm5
		
	/* should we do one more iteration? */
	sub   dword ptr [esp + _innerk],  2
	jl    .i0100_checksingle
	jmp   .i0100_unroll_loop
.i0100_checksingle:				
	mov   edx, [esp + _innerk]
	and   edx, 1
	jnz    .i0100_dosingle
	jmp    .i0100_updateouterdata
.i0100_dosingle:
	mov edi, [ebp + _pos]
	mov   ecx, [esp + _innerjjnr]
	mov   eax, [ecx]		

	movd  mm0, eax		/* use mmx registers as temp storage */	
	mov esi, [ebp + _type]
	mov eax, [esi + eax*4]
	mov esi, [ebp + _nbfp]
	shl eax, 1
	mov edi, [esp + _ntia]
	add eax, edi

	movupd xmm6, [esi + eax*8]	/* c6a c12a */
	xorpd xmm7, xmm7
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7

	movd  eax, mm0		
	
	movapd [esp + _c6], xmm4
	movapd [esp + _c12], xmm6
	
	mov esi, [ebp + _pos]       /* base of pos[] */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */

	/* move coordinates to xmm0-xmm2 */	

	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	
	/* move ix-iz to xmm4-xmm6 */
	movapd xmm4, [esp + _ix]
	movapd xmm5, [esp + _iy]
	movapd xmm6, [esp + _iz]

	/* calc dr */
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	/* store dr */
	movapd [esp + _dx], xmm4 
	movapd [esp + _dy], xmm5
	movapd [esp + _dz], xmm6
	/* square it */
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6	/* rsq in xmm4 */

	cvtsd2ss xmm6, xmm4	
	rcpss xmm6, xmm6
	cvtss2sd xmm6, xmm6	/* lu in low xmm6 */
	
	/* 1/x lookup seed in xmm6 */
	movapd xmm0, [esp + _two]
	movapd xmm5, xmm4
	mulsd xmm4, xmm6	/* lu*rsq */
	subsd xmm0, xmm4	/* 2-lu*rsq */
	mulsd xmm6, xmm0	/* (new lu) */
	
	movapd xmm0, [esp + _two]
	mulsd xmm5, xmm6	/* lu*rsq */
	subsd xmm0, xmm5	/* 2-lu*rsq */
	mulsd xmm0, xmm6	/* xmm0=rinvsq */
	movapd xmm4, xmm0
	
	movapd xmm1, xmm0
	mulsd  xmm1, xmm0
	mulsd  xmm1, xmm0	/* xmm1=rinvsix */
	movapd xmm2, xmm1
	mulsd  xmm2, xmm2	/* xmm2=rinvtwelve */

	mulsd  xmm1, [esp + _c6]
	mulsd  xmm2, [esp + _c12]
	movapd xmm5, xmm2
	subsd  xmm5, xmm1	/* vnb=vnb12-vnb6 */
	addsd  xmm5, [esp + _vnbtot]
	mulsd  xmm1, [esp + _six]
	mulsd  xmm2, [esp + _twelve]
	subsd  xmm2, xmm1
	mulsd  xmm4, xmm2	/* xmm4=total fscal */

	movapd xmm0, [esp + _dx]
	movapd xmm1, [esp + _dy]
	movapd xmm2, [esp + _dz]

	movlpd [esp + _vnbtot], xmm5

	mov    edi, [ebp + _faction]
	mulsd  xmm0, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm2, xmm4
	/* xmm0-xmm2 contains tx-tz (partial force) */
	/* now update f_i */
	movlpd xmm3, [esp + _fix]
	movlpd xmm4, [esp + _fiy]
	movlpd xmm5, [esp + _fiz]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movlpd [esp + _fix], xmm3
	movlpd [esp + _fiy], xmm4
	movlpd [esp + _fiz], xmm5
	
	/* the fj's - start by accumulating forces from memory */
	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5

.i0100_updateouterdata:
	mov   ecx, [esp + _ii3]
	mov   edi, [ebp + _faction]
	mov   esi, [ebp + _fshift]
	mov   edx, [esp + _is3]

	/* accumulate i forces in xmm0, xmm1, xmm2 */
	movapd xmm0, [esp + _fix]
	movapd xmm1, [esp + _fiy]
	movapd xmm2, [esp + _fiz]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 /* sum is in low xmm0-xmm2 */

	/* increment i force */
	movsd  xmm3, [edi + ecx*8]
	movsd  xmm4, [edi + ecx*8 + 8]
	movsd  xmm5, [edi + ecx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8],     xmm3
	movsd  [edi + ecx*8 + 8], xmm4
	movsd  [edi + ecx*8 + 16], xmm5

	/* increment fshift force */ 
	movsd  xmm3, [esi + edx*8]
	movsd  xmm4, [esi + edx*8 + 8]
	movsd  xmm5, [esi + edx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [esi + edx*8],     xmm3
	movsd  [esi + edx*8 + 8], xmm4
	movsd  [esi + edx*8 + 16], xmm5

	/* get group index for i particle */
	mov   edx, [ebp + _gid]      /* get group index for this i particle */
	mov   edx, [edx]
	add   dword ptr [ebp + _gid],  4  /* advance pointer */
	
	/* accumulate total lj energy and update it */
	movapd xmm7, [esp + _vnbtot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 have the sum now */

	/* add earlier value from mem */
	mov   eax, [ebp + _Vnb]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 

	/* finish if last */
	mov   ecx, [ebp + _nri]
	dec ecx
	jecxz .i0100_end

	/* not last, iterate once more! */ 
	mov [ebp + _nri], ecx
	jmp .i0100_outer
.i0100_end:
	emms
	mov eax, [esp + _salign]
	add esp, eax
	add esp, 296
	pop edi
	pop esi
        pop edx
        pop ecx
        pop ebx
        pop eax
	leave
	ret



.globl inl0300_sse2
	.type inl0300_sse2,@function
inl0300_sse2:	
.equ		_nri,		8
.equ		_iinr,		12
.equ		_jindex,	16
.equ		_jjnr,		20
.equ		_shift,		24
.equ		_shiftvec,	28
.equ		_fshift,	32
.equ		_gid,		36
.equ		_pos,		40		
.equ		_faction,	44
.equ		_type,		48
.equ		_ntype,		52
.equ		_nbfp,		56	
.equ		_Vnb,		60
.equ		_tabscale,	64	/* double */
.equ		_VFtab,		72
	/* stack offsets for local variables */ 
	/* bottom of stack is cache-aligned for sse2 use */
.equ		_ix,	        0
.equ		_iy,		16
.equ		_iz,            32
.equ		_dx,            48
.equ		_dy,            64
.equ		_dz,            80
.equ		_two,	        96
.equ		_tsc,		112
.equ		_c6,            128
.equ		_c12,           144
.equ		_fscal,         160
.equ		_vnbtot,        176
.equ		_fix,           192
.equ		_fiy,           208
.equ		_fiz,           224
.equ		_half,          240
.equ		_three,         256
.equ		_is3,           272
.equ		_ii3,           276
.equ		_ntia,	        280	
.equ		_innerjjnr,     284
.equ		_innerk,        288
.equ		_salign,        292
	push ebp
	mov ebp,esp	
        push eax
        push ebx
        push ecx
        push edx
	push esi
	push edi
	sub esp, 296		/* local stack space */
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + _salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_two]
	movupd xmm2, [sse2_three]
	movsd xmm3, [ebp + _tabscale]
	movapd [esp + _half],  xmm0
	movapd [esp + _two], xmm1
	movapd [esp + _three],  xmm2
	shufpd xmm3, xmm3, 0
	movapd [esp + _tsc], xmm3

	/* assume we have at least one i particle - start directly */	
.i0300_outer:
	mov   eax, [ebp + _shift]      /* eax = pointer into shift[] */
	mov   ebx, [eax]		/* ebx=shift[n] */
	add   [ebp + _shift],  4  /* advance pointer one step */
	
	lea   ebx, [ebx + ebx*2]        /* ebx=3*is */
	mov   [esp + _is3],ebx    	/* store is3 */

	mov   eax, [ebp + _shiftvec]   /* eax = base of shiftvec[] */

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	add   [ebp + _iinr],  4   /* advance pointer */
	mov   ebx, [ecx]	        /* ebx =ii */

        mov   edx, [ebp + _type] 
        mov   edx, [edx + ebx*4]
        imul  edx, [ebp + _ntype]
        shl   edx, 1
        mov   [esp + _ntia], edx
		
	lea   ebx, [ebx + ebx*2]	/* ebx = 3*ii=ii3 */
	mov   eax, [ebp + _pos]        /* eax = base of pos[] */ 

	addsd xmm0, [eax + ebx*8]
	addsd xmm1, [eax + ebx*8 + 8]
	addsd xmm2, [eax + ebx*8 + 16]
	
	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0

	movapd [esp + _ix], xmm0
	movapd [esp + _iy], xmm1
	movapd [esp + _iz], xmm2

	mov   [esp + _ii3], ebx
	
	/* clear tot potential and i forces */
	xorpd xmm4, xmm4
	movapd [esp + _vnbtot], xmm4
	movapd [esp + _fix], xmm4
	movapd [esp + _fiy], xmm4
	movapd [esp + _fiz], xmm4
	
	mov   eax, [ebp + _jindex]
	mov   ecx, [eax]	         /* jindex[n] */
	mov   edx, [eax + 4]	         /* jindex[n+1] */
	add   [ebp + _jindex],  4
	sub   edx, ecx                   /* number of innerloop atoms */

	mov   esi, [ebp + _pos]
	mov   edi, [ebp + _faction]	
	mov   eax, [ebp + _jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + _innerjjnr], eax     /* pointer to jjnr[nj0] */
	sub   edx,  2
	mov   [esp + _innerk], edx        /* number of innerloop atoms */
	jge   .i0300_unroll_loop
	jmp   .i0300_checksingle
.i0300_unroll_loop:	
	/* twice unrolled innerloop here */
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]	
	mov   ebx, [edx + 4]
	add   [esp + _innerjjnr],  8 /* advance pointer (unrolled 2) */

	movd  mm0, eax		/* use mmx registers as temp storage */
	movd  mm1, ebx
	
	mov esi, [ebp + _type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov esi, [ebp + _nbfp]
	shl eax, 1	
	shl ebx, 1	
	mov edi, [esp + _ntia]
	add eax, edi
	add ebx, edi

	movupd xmm6, [esi + eax*8]	/* c6a c12a */
	movupd xmm7, [esi + ebx*8]	/* c6b c12b */
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0		
	movd  ebx, mm1

	movapd [esp + _c6], xmm4
	movapd [esp + _c12], xmm6
	
	mov esi, [ebp + _pos]		/* base of pos[] */
	lea   eax, [eax + eax*2]	/* replace jnr with j3 */
	lea   ebx, [ebx + ebx*2]	

	/* move two coordinates to xmm0-xmm2 */	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]

	/* move _ix-iz to xmm4-xmm6 */
	movapd xmm4, [esp + _ix]
	movapd xmm5, [esp + _iy]
	movapd xmm6, [esp + _iz]

	/* calc dr */
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	/* store dr */
	movapd [esp + _dx], xmm4
	movapd [esp + _dy], xmm5
	movapd [esp + _dz], xmm6
	/* square it */
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6
	/* rsq in xmm4 */

	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm5, xmm5
	cvtps2pd xmm2, xmm5	/* lu in low xmm2 */

	/* lookup seed in xmm2 */
	movapd xmm5, xmm2	/* copy of lu */
	mulpd xmm2, xmm2	/* lu*lu */
	movapd xmm1, [esp + _three]
	mulpd xmm2, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subpd xmm1, xmm2	/* 30-rsq*lu*lu */
	mulpd xmm1, xmm5	
	mulpd xmm1, xmm0	/* xmm0=iter1 of rinv (new lu) */

	movapd xmm5, xmm1	/* copy of lu */
	mulpd xmm1, xmm1	/* lu*lu */
	movapd xmm2, [esp + _three]
	mulpd xmm1, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subpd xmm2, xmm1	/* 30-rsq*lu*lu */
	mulpd xmm2, xmm5	
	mulpd xmm0, xmm2	/* xmm0=iter2 of rinv (new lu) */
	
	mulpd xmm4, xmm0	/* xmm4=r */
	mulpd xmm4, [esp + _tsc]
	
	cvttpd2pi mm6, xmm4	/* mm6 = lu idx */
	cvtpi2pd xmm5, mm6
	subpd xmm4, xmm5
	movapd xmm1, xmm4	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */

	pslld mm6, 3		/* idx *= 8 */
	
	movd mm0, eax	
	movd mm1, ebx

	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6

	/* dispersion */
	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* dispersion table ready, in xmm4-xmm7 */	
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	mulpd  xmm7, [esp + _two]	/* two*Heps2 */
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 /* xmm7=FF */
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */

	movapd xmm4, [esp + _c6]
	mulpd  xmm7, xmm4	 /* fijD */
	mulpd  xmm5, xmm4	 /* vnb6 */

	/* put scalar force on stack Update vnbtot directly */
	addpd  xmm5, [esp + _vnbtot]
	movapd [esp + _fscal], xmm7
	movapd [esp + _vnbtot], xmm5

	/* repulsion */
	movupd xmm4, [esi + eax*8 + 32]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8 + 32]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 48]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 48]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	
	/* table ready, in xmm4-xmm7 */	
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	mulpd  xmm7, [esp + _two]	/* two*Heps2 */
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 /* xmm7=FF */
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	
	movapd xmm4, [esp + _c12]
	mulpd  xmm7, xmm4 
	mulpd  xmm5, xmm4  
	addpd  xmm7, [esp + _fscal] 
	
	addpd  xmm5, [esp + _vnbtot]
	movapd [esp + _vnbtot], xmm5
	xorpd  xmm4, xmm4

	mulpd xmm7, [esp + _tsc]
	mulpd xmm7, xmm0
	subpd  xmm4, xmm7

	movapd xmm0, [esp + _dx]
	movapd xmm1, [esp + _dy]
	movapd xmm2, [esp + _dz]

	movd eax, mm0	
	movd ebx, mm1

	mov    edi, [ebp + _faction]
	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4
	/* xmm0-xmm2 contains tx-tz (partial force) */
	/* now update f_i */
	movapd xmm3, [esp + _fix]
	movapd xmm4, [esp + _fiy]
	movapd xmm5, [esp + _fiz]
	addpd  xmm3, xmm0
	addpd  xmm4, xmm1
	addpd  xmm5, xmm2
	movapd [esp + _fix], xmm3
	movapd [esp + _fiy], xmm4
	movapd [esp + _fiz], xmm5
	/* the fj's - start by accumulating forces from memory */
	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	movhpd xmm3, [edi + ebx*8]
	movhpd xmm4, [edi + ebx*8 + 8]
	movhpd xmm5, [edi + ebx*8 + 16]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5
	movhpd [edi + ebx*8], xmm3
	movhpd [edi + ebx*8 + 8], xmm4
	movhpd [edi + ebx*8 + 16], xmm5
		
	/* should we do one more iteration? */
	sub   [esp + _innerk],  2
	jl    .i0300_checksingle
	jmp   .i0300_unroll_loop

.i0300_checksingle:				
	mov   edx, [esp + _innerk]
	and   edx, 1
	jnz    .i0300_dosingle
	jmp    .i0300_updateouterdata
.i0300_dosingle:
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]	

	movd  mm0, eax		/* use mmx registers as temp storage */
	
	mov esi, [ebp + _type]
	mov eax, [esi + eax*4]
	mov esi, [ebp + _nbfp]
	shl eax, 1	
	mov edi, [esp + _ntia]
	add eax, edi

	movupd xmm6, [esi + eax*8]	/* c6a c12a */
	xorpd xmm7, xmm7
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0		

	movapd [esp + _c6], xmm4
	movapd [esp + _c12], xmm6
	
	mov esi, [ebp + _pos]		/* base of pos[] */
	lea   eax, [eax + eax*2]	/* replace jnr with j3 */

	/* move coordinates to xmm0-xmm2 */	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]

	/* move _ix-iz to xmm4-xmm6 */
	movapd xmm4, [esp + _ix]
	movapd xmm5, [esp + _iy]
	movapd xmm6, [esp + _iz]

	/* calc dr */
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	/* store dr */
	movapd [esp + _dx], xmm4
	movapd [esp + _dy], xmm5
	movapd [esp + _dz], xmm6
	/* square it */
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6
	/* rsq in xmm4 */

	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm5, xmm5
	cvtss2sd xmm2, xmm5	/* lu in low xmm2 */

	/* lookup seed in xmm2 */
	movapd xmm5, xmm2	/* copy of lu */
	mulsd xmm2, xmm2	/* lu*lu */
	movapd xmm1, [esp + _three]
	mulsd xmm2, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subsd xmm1, xmm2	/* 30-rsq*lu*lu */
	mulsd xmm1, xmm5	
	mulsd xmm1, xmm0	/* xmm0=iter1 of rinv (new lu) */

	movapd xmm5, xmm1	/* copy of lu */
	mulsd xmm1, xmm1	/* lu*lu */
	movapd xmm2, [esp + _three]
	mulsd xmm1, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subsd xmm2, xmm1	/* 30-rsq*lu*lu */
	mulsd xmm2, xmm5	
	mulsd xmm0, xmm2	/* xmm0=iter2 of rinv (new lu) */
	
	mulsd xmm4, xmm0	/* xmm4=r */
	mulsd xmm4, [esp + _tsc]

	movd mm0, eax
	
	cvttsd2si eax, xmm4	/* mm6 = lu idx */
	cvtsi2sd xmm5, eax
	subsd xmm4, xmm5
	movapd xmm1, xmm4	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	shl eax, 3	

	mov  esi, [ebp + _VFtab]

	/* dispersion */
	movupd xmm4, [esi + eax*8]	/* Y1 F1 */
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1  */
	unpckhpd xmm5, xmm3	/* F1  */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1  */
	unpckhpd xmm7, xmm3	/* H1  */
	/* dispersion table ready, in xmm4-xmm7 */	
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	mulsd  xmm7, [esp + _two]	/* two*Heps2 */
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 /* xmm7=FF */
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */

	movapd xmm4, [esp + _c6]
	mulsd  xmm7, xmm4	 /* fijD */
	mulsd  xmm5, xmm4	 /* vnb6 */

	/* put scalar force on stack Update vnbtot directly */
	addsd  xmm5, [esp + _vnbtot]
	movlpd [esp + _fscal], xmm7
	movlpd [esp + _vnbtot], xmm5

	/* repulsion */
	movupd xmm4, [esi + eax*8 + 32]	/* Y1 F1 */
	xorpd xmm3,xmm3	
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1  */
	unpckhpd xmm5, xmm3	/* F1  */

	movupd xmm6, [esi + eax*8 + 48]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1  */
	unpckhpd xmm7, xmm3	/* H1  */
	
	/* table ready, in xmm4-xmm7 */	
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	mulsd  xmm7, [esp + _two]	/* two*Heps2 */
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 /* xmm7=FF */
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	
	movapd xmm4, [esp + _c12]
	mulsd  xmm7, xmm4 
	mulsd  xmm5, xmm4  
	addsd  xmm7, [esp + _fscal] 
	
	addsd  xmm5, [esp + _vnbtot]
	movlpd [esp + _vnbtot], xmm5
	xorpd  xmm4, xmm4

	mulsd xmm7, [esp + _tsc]
	mulsd xmm7, xmm0
	subsd  xmm4, xmm7

	movapd xmm0, [esp + _dx]
	movapd xmm1, [esp + _dy]
	movapd xmm2, [esp + _dz]

	movd eax, mm0	

	mov    edi, [ebp + _faction]
	mulsd  xmm0, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm2, xmm4
	/* xmm0-xmm2 contains tx-tz (partial force) */
	/* now update f_i */
	movapd xmm3, [esp + _fix]
	movapd xmm4, [esp + _fiy]
	movapd xmm5, [esp + _fiz]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movlpd [esp + _fix], xmm3
	movlpd [esp + _fiy], xmm4
	movlpd [esp + _fiz], xmm5
	/* the fj's - start by accumulating forces from memory */
	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5
.i0300_updateouterdata:
	mov   ecx, [esp + _ii3]
	mov   edi, [ebp + _faction]
	mov   esi, [ebp + _fshift]
	mov   edx, [esp + _is3]

	/* accumulate i forces in xmm0, xmm1, xmm2 */
	movapd xmm0, [esp + _fix]
	movapd xmm1, [esp + _fiy]
	movapd xmm2, [esp + _fiz]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 /* sum is in low xmm0-xmm2 */

	/* increment i force */
	movsd  xmm3, [edi + ecx*8]
	movsd  xmm4, [edi + ecx*8 + 8]
	movsd  xmm5, [edi + ecx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8],     xmm3
	movsd  [edi + ecx*8 + 8], xmm4
	movsd  [edi + ecx*8 + 16], xmm5

	/* increment fshift force */ 
	movsd  xmm3, [esi + edx*8]
	movsd  xmm4, [esi + edx*8 + 8]
	movsd  xmm5, [esi + edx*8 + 16]
	addsd xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [esi + edx*8],     xmm3
	movsd  [esi + edx*8 + 8], xmm4
	movsd  [esi + edx*8 + 16], xmm5

	/* get group index for i particle */
	mov   edx, [ebp + _gid]      /* get group index for this i particle */
	mov   edx, [edx]
	add   [ebp + _gid],  4  /* advance pointer */

	/* accumulate total lj energy and update it */
	movapd xmm7, [esp + _vnbtot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */
	
	/* add earlier value from mem */
	mov   eax, [ebp + _Vnb]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* finish if last */
	mov   ecx, [ebp + _nri]
	dec ecx
	jecxz .i0300_end
	/* not last, iterate once more! */ 
	mov [ebp + _nri], ecx
	jmp .i0300_outer
.i0300_end:
	emms
	mov eax, [esp + _salign]
	add esp, eax
	add esp, 296
	pop edi
	pop esi
        pop edx
        pop ecx
        pop ebx
        pop eax
	leave
	ret

	


.globl inl1000_sse2
	.type inl1000_sse2,@function
inl1000_sse2:	
.equ		_nri,		8
.equ		_iinr,		12
.equ		_jindex,	16
.equ		_jjnr,		20
.equ		_shift,		24
.equ		_shiftvec,	28
.equ		_fshift,	32
.equ		_gid,		36
.equ		_pos,		40		
.equ		_faction,	44
.equ		_charge,	48
.equ		_facel,		52 /* double */
.equ		_Vc,		60
	/* stack offsets for local variables */ 
	/* bottom of stack is cache-aligned for sse2 use */
.equ		_ix,            0
.equ		_iy,	        16
.equ		_iz,            32
.equ		_iq,            48
.equ		_dx,            64
.equ		_dy,            80
.equ		_dz,            96
.equ		_vctot,         112
.equ		_fix,           128
.equ		_fiy,           144
.equ		_fiz,           160
.equ		_half,          176
.equ		_three,         192
.equ		_is3,           208
.equ		_ii3,           212
.equ		_innerjjnr,     216
.equ		_innerk,        220		
.equ		_salign,        224							
	push ebp
	mov ebp,esp	
        push eax
        push ebx
        push ecx
        push edx
	push esi
	push edi
	sub esp, 228		/* local stack space */
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + _salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_three]
	movapd [esp + _half],  xmm0
	movapd [esp + _three], xmm1

	/* assume we have at least one i particle - start directly */	
i1000_outer:
	mov   eax, [ebp + _shift]      /* eax = pointer into shift[] */
	mov   ebx, [eax]		/* ebx=shift[n] */
	add   [ebp + _shift],  4  /* advance pointer one step */
	
	lea   ebx, [ebx + ebx*2]        /* ebx=3*is */
	mov   [esp + _is3],ebx    	/* store is3 */

	mov   eax, [ebp + _shiftvec]   /* eax = base of shiftvec[] */

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	add   [ebp + _iinr],  4   /* advance pointer */
	mov   ebx, [ecx]	        /* ebx =ii */

	mov   edx, [ebp + _charge]
	movsd xmm3, [edx + ebx*8]	
	mulsd xmm3, [ebp + _facel]
	shufpd xmm3, xmm3, 0	
	lea   ebx, [ebx + ebx*2]	/* ebx = 3*ii=ii3 */
	mov   eax, [ebp + _pos]        /* eax = base of pos[] */ 

	addsd xmm0, [eax + ebx*8]
	addsd xmm1, [eax + ebx*8 + 8]
	addsd xmm2, [eax + ebx*8 + 16]

	movapd [esp + _iq], xmm3
	
	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0

	movapd [esp + _ix], xmm0
	movapd [esp + _iy], xmm1
	movapd [esp + _iz], xmm2

	mov   [esp + _ii3], ebx
	
	/* clear vctot and i forces */
	xorpd xmm4, xmm4
	movapd [esp + _vctot], xmm4
	movapd [esp + _fix], xmm4
	movapd [esp + _fiy], xmm4
	movapd [esp + _fiz], xmm4
	
	mov   eax, [ebp + _jindex]
	mov   ecx, [eax]	         /* jindex[n] */
	mov   edx, [eax + 4]	         /* jindex[n+1] */
	add   [ebp + _jindex],  4
	sub   edx, ecx                   /* number of innerloop atoms */

	mov   esi, [ebp + _pos]
	mov   edi, [ebp + _faction]	
	mov   eax, [ebp + _jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + _innerjjnr], eax     /* pointer to jjnr[nj0] */
	sub   edx,  2
	mov   [esp + _innerk], edx        /* number of innerloop atoms */
	jge   i1000_unroll_loop
	jmp   i1000_checksingle
i1000_unroll_loop:	
	/* twice unrolled innerloop here */
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]	
	mov   ebx, [edx + 4]
	add   [esp + _innerjjnr],  8 /* advance pointer (unrolled 2) */

	mov esi, [ebp + _charge]        /* base of charge[] */
	
	movlpd xmm3, [esi + eax*8]	/* jq A */
	movhpd xmm3, [esi + ebx*8]	/* jq B */

	movapd xmm5, [esp + _iq]
	
	mulpd xmm3, xmm5		/* qq */
	
	mov esi, [ebp + _pos]       /* base of pos[] */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */
	lea   ebx, [ebx + ebx*2]	

	/* move two coordinates to xmm0-xmm2 */	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]		

	mov    edi, [ebp + _faction]
	
	/* move _ix-iz to xmm4-xmm6 */
	movapd xmm4, [esp + _ix]
	movapd xmm5, [esp + _iy]
	movapd xmm6, [esp + _iz]

	/* calc dr */
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	/* store dr */
	movapd [esp + _dx], xmm4
	movapd [esp + _dy], xmm5
	movapd [esp + _dz], xmm6
	/* square it */
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6
	/* rsq in xmm4  */

	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm5, xmm5
	cvtps2pd xmm2, xmm5	/* lu in low xmm2 */

	/* lookup seed in xmm2 */
	movapd xmm5, xmm2	/* copy of lu */
	mulpd xmm2, xmm2	/* lu*lu */
	movapd xmm1, [esp + _three]
	mulpd xmm2, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subpd xmm1, xmm2	/* 30-rsq*lu*lu */
	mulpd xmm1, xmm5	
	mulpd xmm1, xmm0	/* xmm0=iter1 of rinv (new lu) */

	movapd xmm5, xmm1	/* copy of lu */
	mulpd xmm1, xmm1	/* lu*lu */
	movapd xmm2, [esp + _three]
	mulpd xmm1, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subpd xmm2, xmm1	/* 30-rsq*lu*lu */
	mulpd xmm2, xmm5	
	mulpd xmm0, xmm2	/* xmm0=iter2 of rinv (new lu) */
	movapd xmm4, xmm0
	mulpd  xmm4, xmm4	/* xmm4=rinvsq */

	
	movapd xmm5, [esp + _vctot]
	mulpd  xmm3, xmm0	/* xmm3=vcoul */
	mulpd  xmm4, xmm3	/* xmm4=fscal */
	addpd  xmm5, xmm3

	movapd xmm0, [esp + _dx]
	movapd xmm1, [esp + _dy]
	movapd xmm2, [esp + _dz]

	movapd [esp + _vctot], xmm5

	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4
	/* xmm0-xmm2 contains tx-tz (partial force) */
	/* now update f_i */
	movapd xmm3, [esp + _fix]
	movapd xmm4, [esp + _fiy]
	movapd xmm5, [esp + _fiz]
	addpd  xmm3, xmm0
	addpd  xmm4, xmm1
	addpd  xmm5, xmm2
	movapd [esp + _fix], xmm3
	movapd [esp + _fiy], xmm4
	movapd [esp + _fiz], xmm5
	/* the fj's - start by accumulating forces from memory */
	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	movhpd xmm3, [edi + ebx*8]
	movhpd xmm4, [edi + ebx*8 + 8]
	movhpd xmm5, [edi + ebx*8 + 16]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5
	movhpd [edi + ebx*8], xmm3
	movhpd [edi + ebx*8 + 8], xmm4
	movhpd [edi + ebx*8 + 16], xmm5
	
	/* should we do one more iteration? */
	sub   [esp + _innerk],  2
	jl    i1000_checksingle
	jmp   i1000_unroll_loop

i1000_checksingle:				
	mov   edx, [esp + _innerk]
	and   edx, 1
	jnz    i1000_dosingle
	jmp    i1000_updateouterdata
i1000_dosingle:			
	mov esi, [ebp + _charge]
	mov edi, [ebp + _pos]

	mov edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov eax, [edx]	

	xorpd xmm3, xmm3
	movsd xmm3, [esi + eax*8]	/* jq A */
	movapd xmm5, [esp + _iq]
	unpcklpd xmm3, xmm6
	mulpd xmm3, xmm5		/* qq */
	
	mov esi, [ebp + _pos]       /* base of pos[] */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */

	/* move two coordinates to xmm0-xmm2 */	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]

	mov    edi, [ebp + _faction]

	/* move _ix-iz to xmm4-xmm6 */
	movapd xmm4, [esp + _ix]
	movapd xmm5, [esp + _iy]
	movapd xmm6, [esp + _iz]

	/* calc dr */
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	/* store dr */
	movlpd [esp + _dx], xmm4
	movlpd [esp + _dy], xmm5
	movlpd [esp + _dz], xmm6
	/* square it */
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6
	/* rsq in xmm4 */

	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm5, xmm5
	cvtss2sd xmm2, xmm5	/* lu in low xmm2 */

	/* lookup seed in xmm2 */
	movapd xmm5, xmm2	/* copy of lu */
	mulsd xmm2, xmm2	/* lu*lu */
	movapd xmm1, [esp + _three]
	mulsd xmm2, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subsd xmm1, xmm2	/* 30-rsq*lu*lu */
	mulsd xmm1, xmm5	
	mulsd xmm1, xmm0	/* xmm0=iter1 of rinv (new lu) */

	movapd xmm5, xmm1	/* copy of lu */
	mulsd xmm1, xmm1	/* lu*lu */
	movapd xmm2, [esp + _three]
	mulsd xmm1, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subsd xmm2, xmm1	/* 30-rsq*lu*lu */
	mulsd xmm2, xmm5	
	mulsd xmm0, xmm2	/* xmm0=iter2 of rinv (new lu) */
	movapd xmm4, xmm0
	mulsd  xmm4, xmm4	/* xmm4=rinvsq */

	movlpd xmm5, [esp + _vctot]
	mulsd  xmm3, xmm0	/* xmm3=vcoul */
	mulsd  xmm4, xmm3	/* xmm4=fscal */
	addsd  xmm5, xmm3

	movapd xmm0, [esp + _dx]
	movapd xmm1, [esp + _dy]
	movapd xmm2, [esp + _dz]

	movlpd [esp + _vctot], xmm5

	mulsd  xmm0, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm2, xmm4
	/* xmm0-xmm2 contains tx-tz (partial force) */
	/* now update f_i */
	movlpd xmm3, [esp + _fix]
	movlpd xmm4, [esp + _fiy]
	movlpd xmm5, [esp + _fiz]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movlpd [esp + _fix], xmm3
	movlpd [esp + _fiy], xmm4
	movlpd [esp + _fiz], xmm5
	/* the fj's - start by accumulating forces from memory */
	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5

i1000_updateouterdata:
	mov   ecx, [esp + _ii3]
	mov   edi, [ebp + _faction]
	mov   esi, [ebp + _fshift]
	mov   edx, [esp + _is3]

	/* accumulate i forces in xmm0, xmm1, xmm2 */
	movapd xmm0, [esp + _fix]
	movapd xmm1, [esp + _fiy]
	movapd xmm2, [esp + _fiz]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 /* sum is in low xmm0-xmm2 */

	/* increment i force */
	movsd  xmm3, [edi + ecx*8]
	movsd  xmm4, [edi + ecx*8 + 8]
	movsd  xmm5, [edi + ecx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8],     xmm3
	movsd  [edi + ecx*8 + 8], xmm4
	movsd  [edi + ecx*8 + 16], xmm5

	/* increment fshift force */ 
	movsd  xmm3, [esi + edx*8]
	movsd  xmm4, [esi + edx*8 + 8]
	movsd  xmm5, [esi + edx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [esi + edx*8],     xmm3
	movsd  [esi + edx*8 + 8], xmm4
	movsd  [esi + edx*8 + 16], xmm5

	/* get group index for i particle */
	mov   edx, [ebp + _gid]      /* get group index for this i particle */
	mov   edx, [edx]
	add   [ebp + _gid],  4  /* advance pointer */

	/* accumulate total potential energy and update it */
	movapd xmm7, [esp + _vctot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */

	/* add earlier value from mem */
	mov   eax, [ebp + _Vc]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* finish if last */
	mov   ecx, [ebp + _nri]
	dec  ecx
	jecxz i1000_end
	/* not last, iterate once more! */ 
	mov [ebp + _nri], ecx
	jmp i1000_outer
i1000_end:
	emms
	mov eax, [esp + _salign]
	add esp, eax
	add esp, 228
	pop edi
	pop esi
        pop edx
        pop ecx
        pop ebx
        pop eax
	leave
	ret





.globl inl1020_sse2
	.type inl1020_sse2,@function
inl1020_sse2:	
.equ		_nri,		8
.equ		_iinr,		12
.equ		_jindex,	16
.equ		_jjnr,		20
.equ		_shift,		24
.equ		_shiftvec,	28
.equ		_fshift,	32
.equ		_gid,		36
.equ		_pos,		40		
.equ		_faction,	44
.equ		_charge,	48
.equ		_facel,		52 /* double */
.equ		_Vc,		60			
	/* stack offsets for local variables */ 
	/* bottom of stack is cache-aligned for sse2 use */
.equ		_ixO,	        0
.equ		_iyO,	        16
.equ		_izO,           32
.equ		_ixH1,	        48
.equ		_iyH1,	        64
.equ		_izH1,          80
.equ		_ixH2,	        96
.equ		_iyH2,	        112
.equ		_izH2,          128
.equ		_iqO,           144 
.equ		_iqH,           160 
.equ		_dxO,           176
.equ		_dyO,           192
.equ		_dzO,           208	
.equ		_dxH1,          224
.equ		_dyH1,          240
.equ		_dzH1,          256	
.equ		_dxH2,          272
.equ		_dyH2,          288
.equ		_dzH2,          304	
.equ		_qqO,           320
.equ		_qqH,           336
.equ		_vctot,         352
.equ		_fixO,          368
.equ		_fiyO,          384
.equ		_fizO,          400
.equ		_fixH1,         416
.equ		_fiyH1,         432
.equ		_fizH1,         448
.equ		_fixH2,         464
.equ		_fiyH2,         480
.equ		_fizH2,         496
.equ		_fjx,	        512
.equ		_fjy,           528
.equ		_fjz,           544
.equ		_half,          560
.equ		_three,         576
.equ		_is3,           592
.equ		_ii3,           596
.equ		_innerjjnr,     600
.equ		_innerk,        604
.equ		_salign,        608
	push ebp
	mov ebp,esp	
        push eax
        push ebx
        push ecx
        push edx
	push esi
	push edi
	sub esp, 612		/* local stack space */
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + _salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_three]
	movapd [esp + _half],  xmm0
	movapd [esp + _three], xmm1

	/* assume we have at least one i particle - start directly */
	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	mov   ebx, [ecx]	        /* ebx =ii */

	mov   edx, [ebp + _charge]
	movsd xmm3, [edx + ebx*8]	
	movsd xmm4, [edx + ebx*8 + 8]	
	movsd xmm5, [ebp + _facel]
	mulsd  xmm3, xmm5
	mulsd  xmm4, xmm5

	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	movapd [esp + _iqO], xmm3
	movapd [esp + _iqH], xmm4
	
i1020_outer:
	mov   eax, [ebp + _shift]      /* eax = pointer into shift[] */
	mov   ebx, [eax]		/* ebx=shift[n] */
	add   [ebp + _shift],  4  /* advance pointer one step */
	
	lea   ebx, [ebx + ebx*2]        /* ebx=3*is */
	mov   [esp + _is3],ebx    	/* store is3 */

	mov   eax, [ebp + _shiftvec]   /* eax = base of shiftvec[] */

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	add   [ebp + _iinr],  4   /* advance pointer */
	mov   ebx, [ecx]	        /* ebx =ii */

	movapd xmm3, xmm0
	movapd xmm4, xmm1
	movapd xmm5, xmm2

	lea   ebx, [ebx + ebx*2]	/* ebx = 3*ii=ii3 */
	mov   eax, [ebp + _pos]        /* eax = base of pos[] */ 
	mov   [esp + _ii3], ebx

	addsd xmm3, [eax + ebx*8]
	addsd xmm4, [eax + ebx*8 + 8]
	addsd xmm5, [eax + ebx*8 + 16]		
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _ixO], xmm3
	movapd [esp + _iyO], xmm4
	movapd [esp + _izO], xmm5

	movsd xmm3, xmm0
	movsd xmm4, xmm1
	movsd xmm5, xmm2
	addsd xmm0, [eax + ebx*8 + 24]
	addsd xmm1, [eax + ebx*8 + 32]
	addsd xmm2, [eax + ebx*8 + 40]		
	addsd xmm3, [eax + ebx*8 + 48]
	addsd xmm4, [eax + ebx*8 + 56]
	addsd xmm5, [eax + ebx*8 + 64]		

	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _ixH1], xmm0
	movapd [esp + _iyH1], xmm1
	movapd [esp + _izH1], xmm2
	movapd [esp + _ixH2], xmm3
	movapd [esp + _iyH2], xmm4
	movapd [esp + _izH2], xmm5
	
	/* clear vctot and i forces */
	xorpd xmm4, xmm4
	movapd [esp + _vctot], xmm4
	movapd [esp + _fixO], xmm4
	movapd [esp + _fiyO], xmm4
	movapd [esp + _fizO], xmm4
	movapd [esp + _fixH1], xmm4
	movapd [esp + _fiyH1], xmm4
	movapd [esp + _fizH1], xmm4
	movapd [esp + _fixH2], xmm4
	movapd [esp + _fiyH2], xmm4
	movapd [esp + _fizH2], xmm4
	
	mov   eax, [ebp + _jindex]
	mov   ecx, [eax]	         /* jindex[n] */
	mov   edx, [eax + 4]	         /* jindex[n+1] */
	add   [ebp + _jindex],  4
	sub   edx, ecx                   /* number of innerloop atoms */

	mov   esi, [ebp + _pos]
	mov   edi, [ebp + _faction]	
	mov   eax, [ebp + _jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + _innerjjnr], eax     /* pointer to jjnr[nj0] */
	sub   edx,  2
	mov   [esp + _innerk], edx        /* number of innerloop atoms */
	jge   i1020_unroll_loop
	jmp   i1020_checksingle
i1020_unroll_loop:
	/* twice unrolled innerloop here */
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              

	add   [esp + _innerjjnr],  8 /* advance pointer (unrolled 2) */

	mov esi, [ebp + _charge]        /* base of charge[] */
	
	
	movlpd xmm6, [esi + eax*8]	/* jq A */
	movhpd xmm6, [esi + ebx*8]	/* jq B */
	movapd xmm3, [esp + _iqO]
	movapd xmm4, [esp + _iqH]
	mulpd xmm3, xmm6		/* qqO */
	mulpd xmm4, xmm6		/* qqH */
	
	movapd  [esp + _qqO], xmm3
	movapd  [esp + _qqH], xmm4	

	mov esi, [ebp + _pos]       /* base of pos[] */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */
	lea   ebx, [ebx + ebx*2]	

	/* move two coordinates to xmm0-xmm2 */	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]		

	/* move ixO-izO to xmm4-xmm6 */
	movapd xmm4, [esp + _ixO]
	movapd xmm5, [esp + _iyO]
	movapd xmm6, [esp + _izO]

	/* calc dr */
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	/* store dr */
	movapd [esp + _dxO], xmm4
	movapd [esp + _dyO], xmm5
	movapd [esp + _dzO], xmm6
	/* square it */
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6
	movapd xmm7, xmm4
	/* rsqO in xmm7 */

	/* move ixH1-izH1 to xmm4-xmm6 */
	movapd xmm4, [esp + _ixH1]
	movapd xmm5, [esp + _iyH1]
	movapd xmm6, [esp + _izH1]

	/* calc dr */
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	/* store dr */
	movapd [esp + _dxH1], xmm4
	movapd [esp + _dyH1], xmm5
	movapd [esp + _dzH1], xmm6
	/* square it */
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm6, xmm5
	addpd xmm6, xmm4
	/* rsqH1 in xmm6 */

	/* move ixH2-izH2 to xmm3-xmm5 */ 
	movapd xmm3, [esp + _ixH2]
	movapd xmm4, [esp + _iyH2]
	movapd xmm5, [esp + _izH2]

	/* calc dr */
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2

	/* store dr */
	movapd [esp + _dxH2], xmm3
	movapd [esp + _dyH2], xmm4
	movapd [esp + _dzH2], xmm5
	/* square it */
	mulpd xmm3,xmm3
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	addpd xmm5, xmm4
	addpd xmm5, xmm3
	/* rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 */

	/* start with rsqO - put seed in xmm2 */
	cvtpd2ps xmm2, xmm7	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulpd   xmm2, xmm7	/* rsq*lu*lu */
	subpd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulpd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulpd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm3, xmm4
	mulpd xmm4, xmm4	/* lu*lu */
	mulpd xmm7, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subpd xmm4, xmm7	/* 3-rsq*lu*lu */
	mulpd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulpd xmm4, [esp + _half] /* rinv */
	movapd  xmm7, xmm4	/* rinvO in xmm7 */
	
	/* rsqH1 - seed in xmm2 */
	cvtpd2ps xmm2, xmm6	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulpd   xmm2, xmm6	/* rsq*lu*lu */
	subpd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulpd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulpd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm3, xmm4
	mulpd xmm4, xmm4	/* lu*lu */
	mulpd xmm6, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subpd xmm4, xmm6	/* 3-rsq*lu*lu */
	mulpd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulpd xmm4, [esp + _half] /* rinv */
	movapd  xmm6, xmm4	/* rinvH1 in xmm6 */
	
	/* rsqH2 - seed in xmm2 */
	cvtpd2ps xmm2, xmm5	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulpd   xmm2, xmm5	/* rsq*lu*lu */
	subpd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulpd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulpd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm3, xmm4
	mulpd xmm4, xmm4	/* lu*lu */
	mulpd xmm5, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subpd xmm4, xmm5	/* 3-rsq*lu*lu */
	mulpd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulpd xmm4, [esp + _half] /* rinv */
	movapd  xmm5, xmm4	/* rinvH2 in xmm5 */

	/* do O interactions */
	movapd  xmm4, xmm7	
	mulpd   xmm4, xmm4	/* xmm7=rinv, xmm4=rinvsq */
	mulpd  xmm7, [esp + _qqO]	/* xmm7=vcoul */
	
	mulpd  xmm4, xmm7	/* total fsO in xmm4 */

	addpd  xmm7, [esp + _vctot]
	
	movapd [esp + _vctot], xmm7

	movapd xmm0, [esp + _dxO]
	movapd xmm1, [esp + _dyO]
	movapd xmm2, [esp + _dzO]
	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4

	/* update O forces */
	movapd xmm3, [esp + _fixO]
	movapd xmm4, [esp + _fiyO]
	movapd xmm7, [esp + _fizO]
	addpd  xmm3, xmm0
	addpd  xmm4, xmm1
	addpd  xmm7, xmm2
	movapd [esp + _fixO], xmm3
	movapd [esp + _fiyO], xmm4
	movapd [esp + _fizO], xmm7
	/* update j forces with water O */
	movapd [esp + _fjx], xmm0
	movapd [esp + _fjy], xmm1
	movapd [esp + _fjz], xmm2

	/* H1 interactions */
	movapd  xmm4, xmm6	
	mulpd   xmm4, xmm4	/* xmm6=rinv, xmm4=rinvsq */
	mulpd  xmm6, [esp + _qqH]	/* xmm6=vcoul */
	mulpd  xmm4, xmm6		/* total fsH1 in xmm4 */
	
	addpd  xmm6, [esp + _vctot]

	movapd xmm0, [esp + _dxH1]
	movapd xmm1, [esp + _dyH1]
	movapd xmm2, [esp + _dzH1]
	movapd [esp + _vctot], xmm6
	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4

	/* update H1 forces */
	movapd xmm3, [esp + _fixH1]
	movapd xmm4, [esp + _fiyH1]
	movapd xmm7, [esp + _fizH1]
	addpd  xmm3, xmm0
	addpd  xmm4, xmm1
	addpd  xmm7, xmm2
	movapd [esp + _fixH1], xmm3
	movapd [esp + _fiyH1], xmm4
	movapd [esp + _fizH1], xmm7
	/* update j forces with water H1 */
	addpd  xmm0, [esp + _fjx]
	addpd  xmm1, [esp + _fjy]
	addpd  xmm2, [esp + _fjz]
	movapd [esp + _fjx], xmm0
	movapd [esp + _fjy], xmm1
	movapd [esp + _fjz], xmm2

	/* H2 interactions */
	movapd  xmm4, xmm5	
	mulpd   xmm4, xmm4	/* xmm5=rinv, xmm4=rinvsq */
	mulpd  xmm5, [esp + _qqH]	/* xmm5=vcoul */
	mulpd  xmm4, xmm5		/* total fsH1 in xmm4 */
	
	addpd  xmm5, [esp + _vctot]

	movapd xmm0, [esp + _dxH2]
	movapd xmm1, [esp + _dyH2]
	movapd xmm2, [esp + _dzH2]
	movapd [esp + _vctot], xmm5
	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4

	/* update H2 forces */
	movapd xmm3, [esp + _fixH2]
	movapd xmm4, [esp + _fiyH2]
	movapd xmm7, [esp + _fizH2]
	addpd  xmm3, xmm0
	addpd  xmm4, xmm1
	addpd  xmm7, xmm2
	movapd [esp + _fixH2], xmm3
	movapd [esp + _fiyH2], xmm4
	movapd [esp + _fizH2], xmm7

	mov edi, [ebp + _faction]
	/* update j forces */
	addpd  xmm0, [esp + _fjx]
	addpd  xmm1, [esp + _fjy]
	addpd  xmm2, [esp + _fjz]

	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	movhpd xmm3, [edi + ebx*8]
	movhpd xmm4, [edi + ebx*8 + 8]
	movhpd xmm5, [edi + ebx*8 + 16]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5
	movhpd [edi + ebx*8], xmm3
	movhpd [edi + ebx*8 + 8], xmm4
	movhpd [edi + ebx*8 + 16], xmm5
	
	/* should we do one more iteration? */
	sub   [esp + _innerk],  2
	jl    i1020_checksingle
	jmp   i1020_unroll_loop
i1020_checksingle:				
	mov   edx, [esp + _innerk]
	and   edx, 1
	jnz    i1020_dosingle
	jmp    i1020_updateouterdata
i1020_dosingle:
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]	

	mov esi, [ebp + _charge]        /* base of charge[] */
	xorpd xmm6, xmm6
	movlpd xmm6, [esi + eax*8]	/* jq A */
	
	movapd xmm3, [esp + _iqO]
	movapd xmm4, [esp + _iqH]
	mulsd xmm3, xmm6		/* qqO */
	mulsd xmm4, xmm6		/* qqH */
	
	movapd  [esp + _qqO], xmm3
	movapd  [esp + _qqH], xmm4	

	mov esi, [ebp + _pos]       /* base of pos[] */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */

	/* move coordinates to xmm0-xmm2 */	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]

	/* move ixO-izO to xmm4-xmm6 */
	movapd xmm4, [esp + _ixO]
	movapd xmm5, [esp + _iyO]
	movapd xmm6, [esp + _izO]

	/* calc dr */
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	/* store dr */
	movapd [esp + _dxO], xmm4
	movapd [esp + _dyO], xmm5
	movapd [esp + _dzO], xmm6
	/* square it */
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6
	movapd xmm7, xmm4
	/* rsqO in xmm7 */

	/* move ixH1-izH1 to xmm4-xmm6 */
	movapd xmm4, [esp + _ixH1]
	movapd xmm5, [esp + _iyH1]
	movapd xmm6, [esp + _izH1]

	/* calc dr */
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	/* store dr */
	movapd [esp + _dxH1], xmm4
	movapd [esp + _dyH1], xmm5
	movapd [esp + _dzH1], xmm6
	/* square it */
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm6, xmm5
	addsd xmm6, xmm4
	/* rsqH1 in xmm6 */

	/* move ixH2-izH2 to xmm3-xmm5 */ 
	movapd xmm3, [esp + _ixH2]
	movapd xmm4, [esp + _iyH2]
	movapd xmm5, [esp + _izH2]

	/* calc dr */
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2

	/* store dr */
	movapd [esp + _dxH2], xmm3
	movapd [esp + _dyH2], xmm4
	movapd [esp + _dzH2], xmm5
	/* square it */
	mulsd xmm3,xmm3
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	addsd xmm5, xmm4
	addsd xmm5, xmm3
	/* rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 */

	/* start with rsqO - put seed in xmm2 */
	cvtsd2ss xmm2, xmm7	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulsd   xmm2, xmm7	/* rsq*lu*lu */
	subsd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulsd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulsd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm3, xmm4
	mulsd xmm4, xmm4	/* lu*lu */
	mulsd xmm7, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subsd xmm4, xmm7	/* 3-rsq*lu*lu */
	mulsd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulsd xmm4, [esp + _half] /* rinv */
	movapd  xmm7, xmm4	/* rinvO in xmm7 */
	
	/* rsqH1 - seed in xmm2 */
	cvtsd2ss xmm2, xmm6	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulsd   xmm2, xmm6	/* rsq*lu*lu */
	subsd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulsd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulsd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm3, xmm4
	mulsd xmm4, xmm4	/* lu*lu */
	mulsd xmm6, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subsd xmm4, xmm6	/* 3-rsq*lu*lu */
	mulsd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulsd xmm4, [esp + _half] /* rinv */
	movapd  xmm6, xmm4	/* rinvH1 in xmm6 */
	
	/* rsqH2 - seed in xmm2 */
	cvtsd2ss xmm2, xmm5	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulsd   xmm2, xmm5	/* rsq*lu*lu */
	subsd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulsd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulsd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm3, xmm4
	mulsd xmm4, xmm4	/* lu*lu */
	mulsd xmm5, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subsd xmm4, xmm5	/* 3-rsq*lu*lu */
	mulsd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulsd xmm4, [esp + _half] /* rinv */
	movapd  xmm5, xmm4	/* rinvH2 in xmm5 */

	/* do O interactions */
	movapd  xmm4, xmm7	
	mulsd   xmm4, xmm4	/* xmm7=rinv, xmm4=rinvsq */
	mulsd  xmm7, [esp + _qqO]	/* xmm7=vcoul */
	
	mulsd  xmm4, xmm7	/* total fsO in xmm4 */

	addsd  xmm7, [esp + _vctot]
	
	movlpd [esp + _vctot], xmm7

	movapd xmm0, [esp + _dxO]
	movapd xmm1, [esp + _dyO]
	movapd xmm2, [esp + _dzO]
	mulsd  xmm0, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm2, xmm4

	/* update O forces */
	movapd xmm3, [esp + _fixO]
	movapd xmm4, [esp + _fiyO]
	movapd xmm7, [esp + _fizO]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm7, xmm2
	movlpd [esp + _fixO], xmm3
	movlpd [esp + _fiyO], xmm4
	movlpd [esp + _fizO], xmm7
	/* update j forces with water O */
	movlpd [esp + _fjx], xmm0
	movlpd [esp + _fjy], xmm1
	movlpd [esp + _fjz], xmm2

	/* H1 interactions */
	movapd  xmm4, xmm6	
	mulsd   xmm4, xmm4	/* xmm6=rinv, xmm4=rinvsq */
	mulsd  xmm6, [esp + _qqH]	/* xmm6=vcoul */
	mulsd  xmm4, xmm6		/* total fsH1 in xmm4 */
	
	addsd  xmm6, [esp + _vctot]

	movapd xmm0, [esp + _dxH1]
	movapd xmm1, [esp + _dyH1]
	movapd xmm2, [esp + _dzH1]
	movlpd [esp + _vctot], xmm6
	mulsd  xmm0, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm2, xmm4

	/* update H1 forces */
	movapd xmm3, [esp + _fixH1]
	movapd xmm4, [esp + _fiyH1]
	movapd xmm7, [esp + _fizH1]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm7, xmm2
	movlpd [esp + _fixH1], xmm3
	movlpd [esp + _fiyH1], xmm4
	movlpd [esp + _fizH1], xmm7
	/* update j forces with water H1 */
	addsd  xmm0, [esp + _fjx]
	addsd  xmm1, [esp + _fjy]
	addsd  xmm2, [esp + _fjz]
	movsd [esp + _fjx], xmm0
	movsd [esp + _fjy], xmm1
	movsd [esp + _fjz], xmm2

	/* H2 interactions */
	movapd  xmm4, xmm5	
	mulsd   xmm4, xmm4	/* xmm5=rinv, xmm4=rinvsq */
	mulsd  xmm5, [esp + _qqH]	/* xmm5=vcoul */
	mulsd  xmm4, xmm5		/* total fsH1 in xmm4 */
	
	addsd  xmm5, [esp + _vctot]

	movapd xmm0, [esp + _dxH2]
	movapd xmm1, [esp + _dyH2]
	movapd xmm2, [esp + _dzH2]
	movlpd [esp + _vctot], xmm5
	mulsd  xmm0, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm2, xmm4

	/* update H2 forces */
	movapd xmm3, [esp + _fixH2]
	movapd xmm4, [esp + _fiyH2]
	movapd xmm7, [esp + _fizH2]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm7, xmm2
	movlpd [esp + _fixH2], xmm3
	movlpd [esp + _fiyH2], xmm4
	movlpd [esp + _fizH2], xmm7

	mov edi, [ebp + _faction]
	/* update j forces */
	addsd  xmm0, [esp + _fjx]
	addsd  xmm1, [esp + _fjy]
	addsd  xmm2, [esp + _fjz]

	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5

i1020_updateouterdata:
	mov   ecx, [esp + _ii3]
	mov   edi, [ebp + _faction]
	mov   esi, [ebp + _fshift]
	mov   edx, [esp + _is3]

	/* accumulate Oi forces in xmm0, xmm1, xmm2 */
	movapd xmm0, [esp + _fixO]
	movapd xmm1, [esp + _fiyO]
	movapd xmm2, [esp + _fizO]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 /* sum is in low xmm0-xmm2 */

	/* increment i force */
	movsd  xmm3, [edi + ecx*8]
	movsd  xmm4, [edi + ecx*8 + 8]
	movsd  xmm5, [edi + ecx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8],     xmm3
	movsd  [edi + ecx*8 + 8], xmm4
	movsd  [edi + ecx*8 + 16], xmm5

	/* accumulate force in xmm6/xmm7 for fshift */
	movapd xmm6, xmm0
	movsd xmm7, xmm2
	unpcklpd xmm6, xmm1

	/* accumulate H1i forces in xmm0, xmm1, xmm2 */
	movapd xmm0, [esp + _fixH1]
	movapd xmm1, [esp + _fiyH1]
	movapd xmm2, [esp + _fizH1]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 /* sum is in low xmm0-xmm2 */

	/* increment i force */
	movsd  xmm3, [edi + ecx*8 + 24]
	movsd  xmm4, [edi + ecx*8 + 32]
	movsd  xmm5, [edi + ecx*8 + 40]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8 + 24], xmm3
	movsd  [edi + ecx*8 + 32], xmm4
	movsd  [edi + ecx*8 + 40], xmm5

	/* accumulate force in xmm6/xmm7 for fshift */
	addsd xmm7, xmm2
	unpcklpd xmm0, xmm1
	addpd xmm6, xmm0

	/* accumulate H2i forces in xmm0, xmm1, xmm2 */
	movapd xmm0, [esp + _fixH2]
	movapd xmm1, [esp + _fiyH2]
	movapd xmm2, [esp + _fizH2]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 /* sum is in low xmm0-xmm2 */

	movapd xmm3, xmm0	
	movapd xmm4, xmm1	
	movapd xmm5, xmm2	

	/* increment i force */
	movsd  xmm3, [edi + ecx*8 + 48]
	movsd  xmm4, [edi + ecx*8 + 56]
	movsd  xmm5, [edi + ecx*8 + 64]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8 + 48], xmm3
	movsd  [edi + ecx*8 + 56], xmm4
	movsd  [edi + ecx*8 + 64], xmm5

	/* accumulate force in xmm6/xmm7 for fshift */
	addsd xmm7, xmm2
	unpcklpd xmm0, xmm1
	addpd xmm6, xmm0

	/* increment fshift force */
	movupd xmm3, [esi + edx*8]
	movsd  xmm4, [esi + edx*8 + 16]
	addpd  xmm3, xmm6
	addsd  xmm4, xmm7
	movupd [esi + edx*8],    xmm3
	movsd  [esi + edx*8 + 16], xmm4

	mov   edx, [ebp + _gid]  
	mov   edx, [edx]
	add   [ebp + _gid],  4	

	/* accumulate total potential energy and update it */
	movapd xmm7, [esp + _vctot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* pos 0-1 in xmm7 have the sum now */
	        
	/* add earlier value from mem */
	mov   eax, [ebp + _Vc]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 	
	
	/* finish if last */
	mov   ecx, [ebp + _nri]
	dec ecx
	jecxz i1020_end
	/* not last, iterate once more! */ 
	mov [ebp + _nri], ecx
	jmp i1020_outer
i1020_end:
	emms
	mov eax, [esp + _salign]
	add esp, eax
	add esp, 612
	pop edi
	pop esi
        pop edx
        pop ecx
        pop ebx
        pop eax
	leave
	ret


	
.globl inl1030_sse2
	.type inl1030_sse2,@function
inl1030_sse2:	
.equ		_nri,		8
.equ		_iinr,		12
.equ		_jindex,	16
.equ		_jjnr,		20
.equ		_shift,		24
.equ		_shiftvec,	28
.equ		_fshift,	32
.equ		_gid,		36
.equ		_pos,		40		
.equ		_faction,	44
.equ		_charge,	48
.equ		_facel,		52 /* double */
.equ		_Vc,		60			
	/* stack offsets for local variables */ 
	/* bottom of stack is cache-aligned for sse2 use */	
.equ		_ixO,	        0
.equ		_iyO,	        16
.equ		_izO,           32
.equ		_ixH1,	        48
.equ		_iyH1,	        64
.equ		_izH1,          80
.equ		_ixH2,	        96
.equ		_iyH2,	        112
.equ		_izH2,          128
.equ		_jxO,	        144
.equ		_jyO,	        160
.equ		_jzO,           176
.equ		_jxH1,	        192
.equ		_jyH1,	        208
.equ		_jzH1,          224
.equ		_jxH2,	        240
.equ		_jyH2,	        256
.equ		_jzH2,          272
.equ		_dxOO,          288
.equ		_dyOO,          304
.equ		_dzOO,          320	
.equ		_dxOH1,         336
.equ		_dyOH1,         352
.equ		_dzOH1,         368	
.equ		_dxOH2,         384
.equ		_dyOH2,         400
.equ		_dzOH2,         416	
.equ		_dxH1O,         432
.equ		_dyH1O,         448
.equ		_dzH1O,         464	
.equ		_dxH1H1,        480
.equ		_dyH1H1,        496
.equ		_dzH1H1,        512	
.equ		_dxH1H2,        528
.equ		_dyH1H2,        544
.equ		_dzH1H2,        560	
.equ		_dxH2O,         576
.equ		_dyH2O,         592
.equ		_dzH2O,         608	
.equ		_dxH2H1,        624
.equ		_dyH2H1,        640
.equ		_dzH2H1,        656	
.equ		_dxH2H2,        672
.equ		_dyH2H2,        688
.equ		_dzH2H2,        704
.equ		_qqOO,          720
.equ		_qqOH,          736
.equ		_qqHH,          752
.equ		_vctot,         768		
.equ		_fixO,          784
.equ		_fiyO,          800
.equ		_fizO,          816
.equ		_fixH1,         832
.equ		_fiyH1,         848
.equ		_fizH1,         864
.equ		_fixH2,         880
.equ		_fiyH2,         896
.equ		_fizH2,         912
.equ		_fjxO,	        928
.equ		_fjyO,          944
.equ		_fjzO,          960
.equ		_fjxH1,	        976
.equ		_fjyH1,         992
.equ		_fjzH1,         1008
.equ		_fjxH2,	        1024
.equ		_fjyH2,         1040
.equ		_fjzH2,         1056
.equ		_half,          1072
.equ		_three,         1088
.equ		_rsqOO,         1104
.equ		_rsqOH1,        1120
.equ		_rsqOH2,        1136
.equ		_rsqH1O,        1152
.equ		_rsqH1H1,       1168
.equ		_rsqH1H2,       1184
.equ		_rsqH2O,        1200
.equ		_rsqH2H1,       1216
.equ		_rsqH2H2,       1232
.equ		_rinvOO,        1248
.equ		_rinvOH1,       1264
.equ		_rinvOH2,       1280
.equ		_rinvH1O,       1296
.equ		_rinvH1H1,      1312
.equ		_rinvH1H2,      1328
.equ		_rinvH2O,       1344
.equ		_rinvH2H1,      1360
.equ		_rinvH2H2,      1376
.equ		_is3,           1392
.equ		_ii3,           1396
.equ		_innerjjnr,     1400
.equ		_innerk,        1404
.equ		_salign,        1408							
	push ebp
	mov ebp,esp	
        push eax
        push ebx
        push ecx
        push edx
	push esi
	push edi
	sub esp, 1412		/* local stack space */
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + _salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_three]
	movapd [esp + _half],  xmm0
	movapd [esp + _three], xmm1
	
	/* assume we have at least one i particle - start directly */
	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	mov   ebx, [ecx]	        /* ebx =ii */

	mov   edx, [ebp + _charge]
	movsd xmm3, [edx + ebx*8]	/* qO */
	movsd xmm4, xmm3		/* qO */
	movsd xmm5, [edx + ebx*8 + 8]	/* qH */
	movsd xmm6, [ebp + _facel]	/* facel */
	mulsd  xmm3, xmm3		/* qO*qO */
	mulsd  xmm4, xmm5		/* qO*qH */
	mulsd  xmm5, xmm5		/* qH*qH */
	mulsd  xmm3, xmm6
	mulsd  xmm4, xmm6
	mulsd  xmm5, xmm6
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _qqOO], xmm3
	movapd [esp + _qqOH], xmm4
	movapd [esp + _qqHH], xmm5

i1030_outer:
	mov   eax, [ebp + _shift]      /* eax = pointer into shift[] */
	mov   ebx, [eax]		/* ebx=shift[n] */
	add   [ebp + _shift],  4  /* advance pointer one step */
	
	lea   ebx, [ebx + ebx*2]        /* ebx=3*is */
	mov   [esp + _is3],ebx    	/* store is3 */

	mov   eax, [ebp + _shiftvec]   /* eax = base of shiftvec[] */

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	add   [ebp + _iinr],  4   /* advance pointer */
	mov   ebx, [ecx]	        /* ebx =ii */

	lea   ebx, [ebx + ebx*2]	/* ebx = 3*ii=ii3 */
	mov   eax, [ebp + _pos]        /* eax = base of pos[] */ 
	mov   [esp + _ii3], ebx	
	
	movapd xmm3, xmm0
	movapd xmm4, xmm1
	movapd xmm5, xmm2
	addsd xmm3, [eax + ebx*8]
	addsd xmm4, [eax + ebx*8 + 8]
	addsd xmm5, [eax + ebx*8 + 16]		
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _ixO], xmm3
	movapd [esp + _iyO], xmm4
	movapd [esp + _izO], xmm5

	movsd xmm3, xmm0
	movsd xmm4, xmm1
	movsd xmm5, xmm2
	addsd xmm0, [eax + ebx*8 + 24]
	addsd xmm1, [eax + ebx*8 + 32]
	addsd xmm2, [eax + ebx*8 + 40]		
	addsd xmm3, [eax + ebx*8 + 48]
	addsd xmm4, [eax + ebx*8 + 56]
	addsd xmm5, [eax + ebx*8 + 64]		

	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _ixH1], xmm0
	movapd [esp + _iyH1], xmm1
	movapd [esp + _izH1], xmm2
	movapd [esp + _ixH2], xmm3
	movapd [esp + _iyH2], xmm4
	movapd [esp + _izH2], xmm5

	/* clear vctot and i forces */
	xorpd xmm4, xmm4
	movapd [esp + _vctot], xmm4
	movapd [esp + _fixO], xmm4
	movapd [esp + _fiyO], xmm4
	movapd [esp + _fizO], xmm4
	movapd [esp + _fixH1], xmm4
	movapd [esp + _fiyH1], xmm4
	movapd [esp + _fizH1], xmm4
	movapd [esp + _fixH2], xmm4
	movapd [esp + _fiyH2], xmm4
	movapd [esp + _fizH2], xmm4
	
	mov   eax, [ebp + _jindex]
	mov   ecx, [eax]	         /* jindex[n] */
	mov   edx, [eax + 4]	         /* jindex[n+1] */
	add   [ebp + _jindex],  4
	sub   edx, ecx                   /* number of innerloop atoms */

	mov   esi, [ebp + _pos]
	mov   edi, [ebp + _faction]	
	mov   eax, [ebp + _jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + _innerjjnr], eax     /* pointer to jjnr[nj0] */
	sub   edx,  2
	mov   [esp + _innerk], edx        /* number of innerloop atoms */
	jge   i1030_unroll_loop
	jmp   i1030_checksingle
i1030_unroll_loop:	
	/* twice unrolled innerloop here */
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]	
	mov   ebx, [edx + 4] 
	
	add   [esp + _innerjjnr], 8 /* advance pointer (unrolled 2) */

	mov esi, [ebp + _pos]       /* base of pos[] */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */
	lea   ebx, [ebx + ebx*2]	
	
	/* move j coordinates to local temp variables */
	movlpd xmm2, [esi + eax*8]
	movlpd xmm3, [esi + eax*8 + 8]
	movlpd xmm4, [esi + eax*8 + 16]
	movlpd xmm5, [esi + eax*8 + 24]
	movlpd xmm6, [esi + eax*8 + 32]
	movlpd xmm7, [esi + eax*8 + 40]
	movhpd xmm2, [esi + ebx*8]
	movhpd xmm3, [esi + ebx*8 + 8]
	movhpd xmm4, [esi + ebx*8 + 16]
	movhpd xmm5, [esi + ebx*8 + 24]
	movhpd xmm6, [esi + ebx*8 + 32]
	movhpd xmm7, [esi + ebx*8 + 40]
	movapd 	[esp + _jxO], xmm2
	movapd 	[esp + _jyO], xmm3
	movapd 	[esp + _jzO], xmm4
	movapd 	[esp + _jxH1], xmm5
	movapd 	[esp + _jyH1], xmm6
	movapd 	[esp + _jzH1], xmm7
	movlpd xmm2, [esi + eax*8 + 48]
	movlpd xmm3, [esi + eax*8 + 56]
	movlpd xmm4, [esi + eax*8 + 64]
	movhpd xmm2, [esi + ebx*8 + 48]
	movhpd xmm3, [esi + ebx*8 + 56]
	movhpd xmm4, [esi + ebx*8 + 64]
	movapd 	[esp + _jxH2], xmm2
	movapd 	[esp + _jyH2], xmm3
	movapd 	[esp + _jzH2], xmm4
	
	movapd xmm0, [esp + _ixO]
	movapd xmm1, [esp + _iyO]
	movapd xmm2, [esp + _izO]
	movapd xmm3, [esp + _ixO]
	movapd xmm4, [esp + _iyO]
	movapd xmm5, [esp + _izO]
	subpd  xmm0, [esp + _jxO]
	subpd  xmm1, [esp + _jyO]
	subpd  xmm2, [esp + _jzO]
	subpd  xmm3, [esp + _jxH1]
	subpd  xmm4, [esp + _jyH1]
	subpd  xmm5, [esp + _jzH1]
	movapd [esp + _dxOO], xmm0
	movapd [esp + _dyOO], xmm1
	movapd [esp + _dzOO], xmm2
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	movapd [esp + _dxOH1], xmm3
	movapd [esp + _dyOH1], xmm4
	movapd [esp + _dzOH1], xmm5
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + _rsqOO], xmm0
	movapd [esp + _rsqOH1], xmm3

	movapd xmm0, [esp + _ixO]
	movapd xmm1, [esp + _iyO]
	movapd xmm2, [esp + _izO]
	movapd xmm3, [esp + _ixH1]
	movapd xmm4, [esp + _iyH1]
	movapd xmm5, [esp + _izH1]
	subpd  xmm0, [esp + _jxH2]
	subpd  xmm1, [esp + _jyH2]
	subpd  xmm2, [esp + _jzH2]
	subpd  xmm3, [esp + _jxO]
	subpd  xmm4, [esp + _jyO]
	subpd  xmm5, [esp + _jzO]
	movapd [esp + _dxOH2], xmm0
	movapd [esp + _dyOH2], xmm1
	movapd [esp + _dzOH2], xmm2
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	movapd [esp + _dxH1O], xmm3
	movapd [esp + _dyH1O], xmm4
	movapd [esp + _dzH1O], xmm5
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + _rsqOH2], xmm0
	movapd [esp + _rsqH1O], xmm3

	movapd xmm0, [esp + _ixH1]
	movapd xmm1, [esp + _iyH1]
	movapd xmm2, [esp + _izH1]
	movapd xmm3, [esp + _ixH1]
	movapd xmm4, [esp + _iyH1]
	movapd xmm5, [esp + _izH1]
	subpd  xmm0, [esp + _jxH1]
	subpd  xmm1, [esp + _jyH1]
	subpd  xmm2, [esp + _jzH1]
	subpd  xmm3, [esp + _jxH2]
	subpd  xmm4, [esp + _jyH2]
	subpd  xmm5, [esp + _jzH2]
	movapd [esp + _dxH1H1], xmm0
	movapd [esp + _dyH1H1], xmm1
	movapd [esp + _dzH1H1], xmm2
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	movapd [esp + _dxH1H2], xmm3
	movapd [esp + _dyH1H2], xmm4
	movapd [esp + _dzH1H2], xmm5
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + _rsqH1H1], xmm0
	movapd [esp + _rsqH1H2], xmm3

	movapd xmm0, [esp + _ixH2]
	movapd xmm1, [esp + _iyH2]
	movapd xmm2, [esp + _izH2]
	movapd xmm3, [esp + _ixH2]
	movapd xmm4, [esp + _iyH2]
	movapd xmm5, [esp + _izH2]
	subpd  xmm0, [esp + _jxO]
	subpd  xmm1, [esp + _jyO]
	subpd  xmm2, [esp + _jzO]
	subpd  xmm3, [esp + _jxH1]
	subpd  xmm4, [esp + _jyH1]
	subpd  xmm5, [esp + _jzH1]
	movapd [esp + _dxH2O], xmm0
	movapd [esp + _dyH2O], xmm1
	movapd [esp + _dzH2O], xmm2
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	movapd [esp + _dxH2H1], xmm3
	movapd [esp + _dyH2H1], xmm4
	movapd [esp + _dzH2H1], xmm5
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm4, xmm3
	addpd  xmm4, xmm5
	movapd [esp + _rsqH2O], xmm0
	movapd [esp + _rsqH2H1], xmm4

	movapd xmm0, [esp + _ixH2]
	movapd xmm1, [esp + _iyH2]
	movapd xmm2, [esp + _izH2]
	subpd  xmm0, [esp + _jxH2]
	subpd  xmm1, [esp + _jyH2]
	subpd  xmm2, [esp + _jzH2]
	movapd [esp + _dxH2H2], xmm0
	movapd [esp + _dyH2H2], xmm1
	movapd [esp + _dzH2H2], xmm2
	mulpd xmm0, xmm0
	mulpd xmm1, xmm1
	mulpd xmm2, xmm2
	addpd xmm0, xmm1
	addpd xmm0, xmm2
	movapd [esp + _rsqH2H2], xmm0
		
	/* start doing invsqrt use rsq values in xmm0 (h2h2) , xmm4 (h2h1) */
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulpd   xmm1, xmm1	/* luA*luA */
	mulpd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	mulpd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subpd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm3, [esp + _half] /* iter1 */
	mulpd   xmm7, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulpd   xmm3, xmm3	/* luA*luA */
	mulpd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	mulpd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subpd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm1, [esp + _half] /* rinv */
	mulpd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvH2H2], xmm1
	movapd [esp + _rinvH2H1], xmm5

	movapd xmm0, [esp + _rsqOO]
	movapd xmm4, [esp + _rsqOH1]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulpd   xmm1, xmm1	/* luA*luA */
	mulpd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	mulpd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subpd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm3, [esp + _half] /* iter1 of  */
	mulpd   xmm7, [esp + _half] /* iter1 of  */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulpd   xmm3, xmm3	/* luA*luA */
	mulpd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	mulpd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subpd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm1, [esp + _half] /* rinv */
	mulpd   xmm5, [esp + _half] /* rinv*/
	movapd [esp + _rinvOO], xmm1
	movapd [esp + _rinvOH1], xmm5

	movapd xmm0, [esp + _rsqOH2]
	movapd xmm4, [esp + _rsqH1O]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulpd   xmm1, xmm1	/* luA*luA */
	mulpd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	mulpd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subpd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm3, [esp + _half] /* iter1 */
	mulpd   xmm7, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulpd   xmm3, xmm3	/* luA*luA */
	mulpd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	mulpd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subpd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm1, [esp + _half] /* rinv */
	mulpd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvOH2], xmm1
	movapd [esp + _rinvH1O], xmm5

	movapd xmm0, [esp + _rsqH1H1]
	movapd xmm4, [esp + _rsqH1H2]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulpd   xmm1, xmm1	/* luA*luA */
	mulpd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	mulpd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subpd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm3, [esp + _half] /* iter1a */
	mulpd   xmm7, [esp + _half] /* iter1b */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulpd   xmm3, xmm3	/* luA*luA */
	mulpd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	mulpd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subpd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm1, [esp + _half] /* rinv */
	mulpd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvH1H1], xmm1
	movapd [esp + _rinvH1H2], xmm5

	movapd xmm0, [esp + _rsqH2O]
	cvtpd2ps xmm1, xmm0	
	rsqrtps xmm1, xmm1
	cvtps2pd xmm1, xmm1
	
	movapd  xmm2, xmm1	/* copy of luA */
	mulpd   xmm1, xmm1	/* luA*luA */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm3, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	mulpd   xmm3, xmm3	/* luA*luA */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm1, [esp + _half] /* rinv */
	movapd [esp + _rinvH2O], xmm1

	/* start with OO interaction */
	movapd xmm0, [esp + _rinvOO]
	movapd xmm7, xmm0
	mulpd  xmm0, xmm0		/* rinvsq */
	mulpd  xmm7, [esp + _qqOO]	
	mulpd  xmm0, xmm7	
	addpd  xmm7, [esp + _vctot] 
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulpd xmm0, [esp + _dxOO]
	mulpd xmm1, [esp + _dyOO]
	mulpd xmm2, [esp + _dzOO]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixO]
	addpd xmm1, [esp + _fiyO]
	addpd xmm2, [esp + _fizO]
	movapd [esp + _fjxO], xmm3
	movapd [esp + _fjyO], xmm4
	movapd [esp + _fjzO], xmm5
	movapd [esp + _fixO], xmm0
	movapd [esp + _fiyO], xmm1
	movapd [esp + _fizO], xmm2

	/* O-H1 interaction */
	movapd xmm0, [esp + _rinvOH1]
	movapd xmm1, xmm0
	mulpd xmm0, xmm0
	mulpd xmm1, [esp + _qqOH]
	mulpd xmm0, xmm1	/* fsOH1  */
	addpd xmm7, xmm1	/* add to local vctot */
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	
	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulpd xmm0, [esp + _dxOH1]
	mulpd xmm1, [esp + _dyOH1]
	mulpd xmm2, [esp + _dzOH1]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixO]
	addpd xmm1, [esp + _fiyO]
	addpd xmm2, [esp + _fizO]
	movapd [esp + _fjxH1], xmm3
	movapd [esp + _fjyH1], xmm4
	movapd [esp + _fjzH1], xmm5
	movapd [esp + _fixO], xmm0
	movapd [esp + _fiyO], xmm1
	movapd [esp + _fizO], xmm2

	/* O-H2 interaction */ 
	movapd xmm0, [esp + _rinvOH2]
	movapd xmm1, xmm0
	mulpd xmm0, xmm0
	mulpd xmm1, [esp + _qqOH]
	mulpd xmm0, xmm1	/* fsOH2 */ 
	addpd xmm7, xmm1	/* add to local vctot */
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	
	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulpd xmm0, [esp + _dxOH2]
	mulpd xmm1, [esp + _dyOH2]
	mulpd xmm2, [esp + _dzOH2]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixO]
	addpd xmm1, [esp + _fiyO]
	addpd xmm2, [esp + _fizO]
	movapd [esp + _fjxH2], xmm3
	movapd [esp + _fjyH2], xmm4
	movapd [esp + _fjzH2], xmm5
	movapd [esp + _fixO], xmm0
	movapd [esp + _fiyO], xmm1
	movapd [esp + _fizO], xmm2

	/* H1-O interaction */
	movapd xmm0, [esp + _rinvH1O]
	movapd xmm1, xmm0
	mulpd xmm0, xmm0
	mulpd xmm1, [esp + _qqOH]
	mulpd xmm0, xmm1	/* fsH1O */
	addpd xmm7, xmm1	/* add to local vctot */
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	movapd xmm3, [esp + _fjxO]
	movapd xmm4, [esp + _fjyO]
	movapd xmm5, [esp + _fjzO]
	mulpd xmm0, [esp + _dxH1O]
	mulpd xmm1, [esp + _dyH1O]
	mulpd xmm2, [esp + _dzH1O]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixH1]
	addpd xmm1, [esp + _fiyH1]
	addpd xmm2, [esp + _fizH1]
	movapd [esp + _fjxO], xmm3
	movapd [esp + _fjyO], xmm4
	movapd [esp + _fjzO], xmm5
	movapd [esp + _fixH1], xmm0
	movapd [esp + _fiyH1], xmm1
	movapd [esp + _fizH1], xmm2

	/* H1-H1 interaction */
	movapd xmm0, [esp + _rinvH1H1]
	movapd xmm1, xmm0
	mulpd xmm0, xmm0
	mulpd xmm1, [esp + _qqHH]
	mulpd xmm0, xmm1	/* fsH1H1 */
	addpd xmm7, xmm1	/* add to local vctot */
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	movapd xmm3, [esp + _fjxH1]
	movapd xmm4, [esp + _fjyH1]
	movapd xmm5, [esp + _fjzH1]
	mulpd xmm0, [esp + _dxH1H1]
	mulpd xmm1, [esp + _dyH1H1]
	mulpd xmm2, [esp + _dzH1H1]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixH1]
	addpd xmm1, [esp + _fiyH1]
	addpd xmm2, [esp + _fizH1]
	movapd [esp + _fjxH1], xmm3
	movapd [esp + _fjyH1], xmm4
	movapd [esp + _fjzH1], xmm5
	movapd [esp + _fixH1], xmm0
	movapd [esp + _fiyH1], xmm1
	movapd [esp + _fizH1], xmm2

	/* H1-H2 interaction */
	movapd xmm0, [esp + _rinvH1H2]
	movapd xmm1, xmm0
	mulpd xmm0, xmm0
	mulpd xmm1, [esp + _qqHH]
	mulpd xmm0, xmm1	/* fsOH2 */ 
	addpd xmm7, xmm1	/* add to local vctot */
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	movapd xmm3, [esp + _fjxH2]
	movapd xmm4, [esp + _fjyH2]
	movapd xmm5, [esp + _fjzH2]
	mulpd xmm0, [esp + _dxH1H2]
	mulpd xmm1, [esp + _dyH1H2]
	mulpd xmm2, [esp + _dzH1H2]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixH1]
	addpd xmm1, [esp + _fiyH1]
	addpd xmm2, [esp + _fizH1]
	movapd [esp + _fjxH2], xmm3
	movapd [esp + _fjyH2], xmm4
	movapd [esp + _fjzH2], xmm5
	movapd [esp + _fixH1], xmm0
	movapd [esp + _fiyH1], xmm1
	movapd [esp + _fizH1], xmm2

	/* H2-O interaction */
	movapd xmm0, [esp + _rinvH2O]
	movapd xmm1, xmm0
	mulpd xmm0, xmm0
	mulpd xmm1, [esp + _qqOH]
	mulpd xmm0, xmm1	/* fsH2O */
	addpd xmm7, xmm1	/* add to local vctot */
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	movapd xmm3, [esp + _fjxO]
	movapd xmm4, [esp + _fjyO]
	movapd xmm5, [esp + _fjzO]
	mulpd xmm0, [esp + _dxH2O]
	mulpd xmm1, [esp + _dyH2O]
	mulpd xmm2, [esp + _dzH2O]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixH2]
	addpd xmm1, [esp + _fiyH2]
	addpd xmm2, [esp + _fizH2]
	movapd [esp + _fjxO], xmm3
	movapd [esp + _fjyO], xmm4
	movapd [esp + _fjzO], xmm5
	movapd [esp + _fixH2], xmm0
	movapd [esp + _fiyH2], xmm1
	movapd [esp + _fizH2], xmm2

	/* H2-H1 interaction */
	movapd xmm0, [esp + _rinvH2H1]
	movapd xmm1, xmm0
	mulpd xmm0, xmm0
	mulpd xmm1, [esp + _qqHH]
	mulpd xmm0, xmm1	/* fsH2H1 */
	addpd xmm7, xmm1	/* add to local vctot */
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	movapd xmm3, [esp + _fjxH1]
	movapd xmm4, [esp + _fjyH1]
	movapd xmm5, [esp + _fjzH1]
	mulpd xmm0, [esp + _dxH2H1]
	mulpd xmm1, [esp + _dyH2H1]
	mulpd xmm2, [esp + _dzH2H1]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixH2]
	addpd xmm1, [esp + _fiyH2]
	addpd xmm2, [esp + _fizH2]
	movapd [esp + _fjxH1], xmm3
	movapd [esp + _fjyH1], xmm4
	movapd [esp + _fjzH1], xmm5
	movapd [esp + _fixH2], xmm0
	movapd [esp + _fiyH2], xmm1
	movapd [esp + _fizH2], xmm2

	/* H2-H2 interaction */
	movapd xmm0, [esp + _rinvH2H2]
	movapd xmm1, xmm0
	mulpd xmm0, xmm0
	mulpd xmm1, [esp + _qqHH]
	mulpd xmm0, xmm1	/* fsH2H2 */
	addpd xmm7, xmm1	/* add to local vctot */
	movapd xmm1, xmm0
	movapd [esp + _vctot], xmm7
	movapd xmm2, xmm0
	movapd xmm3, [esp + _fjxH2]
	movapd xmm4, [esp + _fjyH2]
	movapd xmm5, [esp + _fjzH2]
	mulpd xmm0, [esp + _dxH2H2]
	mulpd xmm1, [esp + _dyH2H2]
	mulpd xmm2, [esp + _dzH2H2]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixH2]
	addpd xmm1, [esp + _fiyH2]
	addpd xmm2, [esp + _fizH2]
	movapd [esp + _fjxH2], xmm3
	movapd [esp + _fjyH2], xmm4
	movapd [esp + _fjzH2], xmm5
	movapd [esp + _fixH2], xmm0
	movapd [esp + _fiyH2], xmm1
	movapd [esp + _fizH2], xmm2

	mov edi, [ebp + _faction]
		
	/* Did all interactions - now update j forces */
	movlpd xmm0, [edi + eax*8]
	movlpd xmm1, [edi + eax*8 + 8]
	movlpd xmm2, [edi + eax*8 + 16]
	movlpd xmm3, [edi + eax*8 + 24]
	movlpd xmm4, [edi + eax*8 + 32]
	movlpd xmm5, [edi + eax*8 + 40]
	movlpd xmm6, [edi + eax*8 + 48]
	movlpd xmm7, [edi + eax*8 + 56]
	movhpd xmm0, [edi + ebx*8]
	movhpd xmm1, [edi + ebx*8 + 8]
	movhpd xmm2, [edi + ebx*8 + 16]
	movhpd xmm3, [edi + ebx*8 + 24]
	movhpd xmm4, [edi + ebx*8 + 32]
	movhpd xmm5, [edi + ebx*8 + 40]
	movhpd xmm6, [edi + ebx*8 + 48]
	movhpd xmm7, [edi + ebx*8 + 56]
	addpd xmm0, [esp + _fjxO]
	addpd xmm1, [esp + _fjyO]
	addpd xmm2, [esp + _fjzO]
	addpd xmm3, [esp + _fjxH1]
	addpd xmm4, [esp + _fjyH1]
	addpd xmm5, [esp + _fjzH1]
	addpd xmm6, [esp + _fjxH2]
	addpd xmm7, [esp + _fjyH2]
	movlpd [edi + eax*8], xmm0
	movlpd [edi + eax*8 + 8], xmm1
	movlpd [edi + eax*8 + 16], xmm2
	movlpd [edi + eax*8 + 24], xmm3
	movlpd [edi + eax*8 + 32], xmm4
	movlpd [edi + eax*8 + 40], xmm5
	movlpd [edi + eax*8 + 48], xmm6
	movlpd [edi + eax*8 + 56], xmm7
	movhpd [edi + ebx*8], xmm0
	movhpd [edi + ebx*8 + 8], xmm1
	movhpd [edi + ebx*8 + 16], xmm2
	movhpd [edi + ebx*8 + 24], xmm3
	movhpd [edi + ebx*8 + 32], xmm4
	movhpd [edi + ebx*8 + 40], xmm5
	movhpd [edi + ebx*8 + 48], xmm6
	movhpd [edi + ebx*8 + 56], xmm7

	movlpd xmm0, [edi + eax*8 + 64]
	movhpd xmm0, [edi + ebx*8 + 64]
	addpd xmm0, [esp + _fjzH2]
	movlpd [edi + eax*8 + 64], xmm0
	movhpd [edi + ebx*8 + 64], xmm0
	
	/* should we do one more iteration? */
	sub   [esp + _innerk],  2
	jl    i1030_checksingle
	jmp   i1030_unroll_loop
i1030_checksingle:
	mov   edx, [esp + _innerk]
	and   edx, 1
	jnz   i1030_dosingle
	jmp   i1030_updateouterdata
i1030_dosingle:
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]	

	mov esi, [ebp + _pos]
	lea   eax, [eax + eax*2]  

	/* move j coordinates to local temp variables */
	movlpd xmm2, [esi + eax*8]
	movlpd xmm3, [esi + eax*8 + 8]
	movlpd xmm4, [esi + eax*8 + 16]
	movlpd xmm5, [esi + eax*8 + 24]
	movlpd xmm6, [esi + eax*8 + 32]
	movlpd xmm7, [esi + eax*8 + 40]
	movapd 	[esp + _jxO], xmm2
	movapd 	[esp + _jyO], xmm3
	movapd 	[esp + _jzO], xmm4
	movapd 	[esp + _jxH1], xmm5
	movapd 	[esp + _jyH1], xmm6
	movapd 	[esp + _jzH1], xmm7
	movlpd xmm2, [esi + eax*8 + 48]
	movlpd xmm3, [esi + eax*8 + 56]
	movlpd xmm4, [esi + eax*8 + 64]
	movapd 	[esp + _jxH2], xmm2
	movapd 	[esp + _jyH2], xmm3
	movapd 	[esp + _jzH2], xmm4
	
	movapd xmm0, [esp + _ixO]
	movapd xmm1, [esp + _iyO]
	movapd xmm2, [esp + _izO]
	movapd xmm3, [esp + _ixO]
	movapd xmm4, [esp + _iyO]
	movapd xmm5, [esp + _izO]
	subsd  xmm0, [esp + _jxO]
	subsd  xmm1, [esp + _jyO]
	subsd  xmm2, [esp + _jzO]
	subsd  xmm3, [esp + _jxH1]
	subsd  xmm4, [esp + _jyH1]
	subsd  xmm5, [esp + _jzH1]
	movapd [esp + _dxOO], xmm0
	movapd [esp + _dyOO], xmm1
	movapd [esp + _dzOO], xmm2
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	movapd [esp + _dxOH1], xmm3
	movapd [esp + _dyOH1], xmm4
	movapd [esp + _dzOH1], xmm5
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + _rsqOO], xmm0
	movapd [esp + _rsqOH1], xmm3

	movapd xmm0, [esp + _ixO]
	movapd xmm1, [esp + _iyO]
	movapd xmm2, [esp + _izO]
	movapd xmm3, [esp + _ixH1]
	movapd xmm4, [esp + _iyH1]
	movapd xmm5, [esp + _izH1]
	subsd  xmm0, [esp + _jxH2]
	subsd  xmm1, [esp + _jyH2]
	subsd  xmm2, [esp + _jzH2]
	subsd  xmm3, [esp + _jxO]
	subsd  xmm4, [esp + _jyO]
	subsd  xmm5, [esp + _jzO]
	movapd [esp + _dxOH2], xmm0
	movapd [esp + _dyOH2], xmm1
	movapd [esp + _dzOH2], xmm2
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	movapd [esp + _dxH1O], xmm3
	movapd [esp + _dyH1O], xmm4
	movapd [esp + _dzH1O], xmm5
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + _rsqOH2], xmm0
	movapd [esp + _rsqH1O], xmm3

	movapd xmm0, [esp + _ixH1]
	movapd xmm1, [esp + _iyH1]
	movapd xmm2, [esp + _izH1]
	movapd xmm3, [esp + _ixH1]
	movapd xmm4, [esp + _iyH1]
	movapd xmm5, [esp + _izH1]
	subsd  xmm0, [esp + _jxH1]
	subsd  xmm1, [esp + _jyH1]
	subsd  xmm2, [esp + _jzH1]
	subsd  xmm3, [esp + _jxH2]
	subsd  xmm4, [esp + _jyH2]
	subsd  xmm5, [esp + _jzH2]
	movapd [esp + _dxH1H1], xmm0
	movapd [esp + _dyH1H1], xmm1
	movapd [esp + _dzH1H1], xmm2
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	movapd [esp + _dxH1H2], xmm3
	movapd [esp + _dyH1H2], xmm4
	movapd [esp + _dzH1H2], xmm5
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + _rsqH1H1], xmm0
	movapd [esp + _rsqH1H2], xmm3

	movapd xmm0, [esp + _ixH2]
	movapd xmm1, [esp + _iyH2]
	movapd xmm2, [esp + _izH2]
	movapd xmm3, [esp + _ixH2]
	movapd xmm4, [esp + _iyH2]
	movapd xmm5, [esp + _izH2]
	subsd  xmm0, [esp + _jxO]
	subsd  xmm1, [esp + _jyO]
	subsd  xmm2, [esp + _jzO]
	subsd  xmm3, [esp + _jxH1]
	subsd  xmm4, [esp + _jyH1]
	subsd  xmm5, [esp + _jzH1]
	movapd [esp + _dxH2O], xmm0
	movapd [esp + _dyH2O], xmm1
	movapd [esp + _dzH2O], xmm2
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	movapd [esp + _dxH2H1], xmm3
	movapd [esp + _dyH2H1], xmm4
	movapd [esp + _dzH2H1], xmm5
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm4, xmm3
	addsd  xmm4, xmm5
	movapd [esp + _rsqH2O], xmm0
	movapd [esp + _rsqH2H1], xmm4

	movapd xmm0, [esp + _ixH2]
	movapd xmm1, [esp + _iyH2]
	movapd xmm2, [esp + _izH2]
	subsd  xmm0, [esp + _jxH2]
	subsd  xmm1, [esp + _jyH2]
	subsd  xmm2, [esp + _jzH2]
	movapd [esp + _dxH2H2], xmm0
	movapd [esp + _dyH2H2], xmm1
	movapd [esp + _dzH2H2], xmm2
	mulsd xmm0, xmm0
	mulsd xmm1, xmm1
	mulsd xmm2, xmm2
	addsd xmm0, xmm1
	addsd xmm0, xmm2
	movapd [esp + _rsqH2H2], xmm0
		
	/* start doing invsqrt use rsq values in xmm0, xmm4 */
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulsd   xmm1, xmm1	/* luA*luA */
	mulsd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	mulsd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subsd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm3, [esp + _half] /* iter1 */
	mulsd   xmm7, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulsd   xmm3, xmm3	/* luA*luA */
	mulsd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	mulsd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subsd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm1, [esp + _half] /* rinv */
	mulsd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvH2H2], xmm1
	movapd [esp + _rinvH2H1], xmm5

	movapd xmm0, [esp + _rsqOO]
	movapd xmm4, [esp + _rsqOH1]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulsd   xmm1, xmm1	/* luA*luA */
	mulsd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	mulsd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subsd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm3, [esp + _half] /* iter1 of  */
	mulsd   xmm7, [esp + _half] /* iter1 of  */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulsd   xmm3, xmm3	/* luA*luA */
	mulsd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	mulsd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subsd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm1, [esp + _half] /* rinv */
	mulsd   xmm5, [esp + _half] /* rinv*/
	movapd [esp + _rinvOO], xmm1
	movapd [esp + _rinvOH1], xmm5

	movapd xmm0, [esp + _rsqOH2]
	movapd xmm4, [esp + _rsqH1O]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulsd   xmm1, xmm1	/* luA*luA */
	mulsd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	mulsd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subsd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm3, [esp + _half] /* iter1 */
	mulsd   xmm7, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulsd   xmm3, xmm3	/* luA*luA */
	mulsd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	mulsd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subsd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm1, [esp + _half] /* rinv */
	mulsd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvOH2], xmm1
	movapd [esp + _rinvH1O], xmm5

	movapd xmm0, [esp + _rsqH1H1]
	movapd xmm4, [esp + _rsqH1H2]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulsd   xmm1, xmm1	/* luA*luA */
	mulsd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	mulsd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subsd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm3, [esp + _half] /* iter1a */
	mulsd   xmm7, [esp + _half] /* iter1b */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulsd   xmm3, xmm3	/* luA*luA */
	mulsd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	mulsd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subsd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm1, [esp + _half] /* rinv */
	mulsd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvH1H1], xmm1
	movapd [esp + _rinvH1H2], xmm5

	movapd xmm0, [esp + _rsqH2O]
	cvtsd2ss xmm1, xmm0	
	rsqrtss xmm1, xmm1
	cvtss2sd xmm1, xmm1
	
	movapd  xmm2, xmm1	/* copy of luA */
	mulsd   xmm1, xmm1	/* luA*luA */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm3, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	mulsd   xmm3, xmm3	/* luA*luA */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm1, [esp + _half] /* rinv */
	movapd [esp + _rinvH2O], xmm1

	/* start with OO interaction */
	movapd xmm0, [esp + _rinvOO]
	movapd xmm7, xmm0
	mulsd  xmm0, xmm0
	mulsd  xmm7, [esp + _qqOO]
	mulsd  xmm0, xmm7	
	addsd  xmm7, [esp + _vctot] 
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulsd xmm0, [esp + _dxOO]
	mulsd xmm1, [esp + _dyOO]
	mulsd xmm2, [esp + _dzOO]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixO]
	addsd xmm1, [esp + _fiyO]
	addsd xmm2, [esp + _fizO]
	movlpd [esp + _fjxO], xmm3
	movlpd [esp + _fjyO], xmm4
	movlpd [esp + _fjzO], xmm5
	movlpd [esp + _fixO], xmm0
	movlpd [esp + _fiyO], xmm1
	movlpd [esp + _fizO], xmm2

	/* O-H1 interaction */
	movapd xmm0, [esp + _rinvOH1]
	movapd xmm1, xmm0
	mulsd xmm0, xmm0
	mulsd xmm1, [esp + _qqOH]
	mulsd xmm0, xmm1	/* fsOH1  */
	addsd xmm7, xmm1	/* add to local vctot */
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	
	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulsd xmm0, [esp + _dxOH1]
	mulsd xmm1, [esp + _dyOH1]
	mulsd xmm2, [esp + _dzOH1]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixO]
	addsd xmm1, [esp + _fiyO]
	addsd xmm2, [esp + _fizO]
	movlpd [esp + _fjxH1], xmm3
	movlpd [esp + _fjyH1], xmm4
	movlpd [esp + _fjzH1], xmm5
	movlpd [esp + _fixO], xmm0
	movlpd [esp + _fiyO], xmm1
	movlpd [esp + _fizO], xmm2

	/* O-H2 interaction */ 
	movapd xmm0, [esp + _rinvOH2]
	movapd xmm1, xmm0
	mulsd xmm0, xmm0
	mulsd xmm1, [esp + _qqOH]
	mulsd xmm0, xmm1	/* fsOH2 */ 
	addsd xmm7, xmm1	/* add to local vctot */
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	
	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulsd xmm0, [esp + _dxOH2]
	mulsd xmm1, [esp + _dyOH2]
	mulsd xmm2, [esp + _dzOH2]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixO]
	addsd xmm1, [esp + _fiyO]
	addsd xmm2, [esp + _fizO]
	movlpd [esp + _fjxH2], xmm3
	movlpd [esp + _fjyH2], xmm4
	movlpd [esp + _fjzH2], xmm5
	movlpd [esp + _fixO], xmm0
	movlpd [esp + _fiyO], xmm1
	movlpd [esp + _fizO], xmm2

	/* H1-O interaction */
	movapd xmm0, [esp + _rinvH1O]
	movapd xmm1, xmm0
	mulsd xmm0, xmm0
	mulsd xmm1, [esp + _qqOH]
	mulsd xmm0, xmm1	/* fsH1O */
	addsd xmm7, xmm1	/* add to local vctot */
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	movapd xmm3, [esp + _fjxO]
	movapd xmm4, [esp + _fjyO]
	movapd xmm5, [esp + _fjzO]
	mulsd xmm0, [esp + _dxH1O]
	mulsd xmm1, [esp + _dyH1O]
	mulsd xmm2, [esp + _dzH1O]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixH1]
	addsd xmm1, [esp + _fiyH1]
	addsd xmm2, [esp + _fizH1]
	movlpd [esp + _fjxO], xmm3
	movlpd [esp + _fjyO], xmm4
	movlpd [esp + _fjzO], xmm5
	movlpd [esp + _fixH1], xmm0
	movlpd [esp + _fiyH1], xmm1
	movlpd [esp + _fizH1], xmm2

	/* H1-H1 interaction */
	movapd xmm0, [esp + _rinvH1H1]
	movapd xmm1, xmm0
	mulsd xmm0, xmm0
	mulsd xmm1, [esp + _qqHH]
	mulsd xmm0, xmm1	/* fsH1H1 */
	addsd xmm7, xmm1	/* add to local vctot */
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	movapd xmm3, [esp + _fjxH1]
	movapd xmm4, [esp + _fjyH1]
	movapd xmm5, [esp + _fjzH1]
	mulsd xmm0, [esp + _dxH1H1]
	mulsd xmm1, [esp + _dyH1H1]
	mulsd xmm2, [esp + _dzH1H1]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixH1]
	addsd xmm1, [esp + _fiyH1]
	addsd xmm2, [esp + _fizH1]
	movlpd [esp + _fjxH1], xmm3
	movlpd [esp + _fjyH1], xmm4
	movlpd [esp + _fjzH1], xmm5
	movlpd [esp + _fixH1], xmm0
	movlpd [esp + _fiyH1], xmm1
	movlpd [esp + _fizH1], xmm2

	/* H1-H2 interaction */
	movapd xmm0, [esp + _rinvH1H2]
	movapd xmm1, xmm0
	mulsd xmm0, xmm0
	mulsd xmm1, [esp + _qqHH]
	mulsd xmm0, xmm1	/* fsOH2 */ 
	addsd xmm7, xmm1	/* add to local vctot */
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	movapd xmm3, [esp + _fjxH2]
	movapd xmm4, [esp + _fjyH2]
	movapd xmm5, [esp + _fjzH2]
	mulsd xmm0, [esp + _dxH1H2]
	mulsd xmm1, [esp + _dyH1H2]
	mulsd xmm2, [esp + _dzH1H2]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixH1]
	addsd xmm1, [esp + _fiyH1]
	addsd xmm2, [esp + _fizH1]
	movlpd [esp + _fjxH2], xmm3
	movlpd [esp + _fjyH2], xmm4
	movlpd [esp + _fjzH2], xmm5
	movlpd [esp + _fixH1], xmm0
	movlpd [esp + _fiyH1], xmm1
	movlpd [esp + _fizH1], xmm2

	/* H2-O interaction */
	movapd xmm0, [esp + _rinvH2O]
	movapd xmm1, xmm0
	mulsd xmm0, xmm0
	mulsd xmm1, [esp + _qqOH]
	mulsd xmm0, xmm1	/* fsH2O */
	addsd xmm7, xmm1	/* add to local vctot */
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	movapd xmm3, [esp + _fjxO]
	movapd xmm4, [esp + _fjyO]
	movapd xmm5, [esp + _fjzO]
	mulsd xmm0, [esp + _dxH2O]
	mulsd xmm1, [esp + _dyH2O]
	mulsd xmm2, [esp + _dzH2O]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixH2]
	addsd xmm1, [esp + _fiyH2]
	addsd xmm2, [esp + _fizH2]
	movlpd [esp + _fjxO], xmm3
	movlpd [esp + _fjyO], xmm4
	movlpd [esp + _fjzO], xmm5
	movlpd [esp + _fixH2], xmm0
	movlpd [esp + _fiyH2], xmm1
	movlpd [esp + _fizH2], xmm2

	/* H2-H1 interaction */
	movapd xmm0, [esp + _rinvH2H1]
	movapd xmm1, xmm0
	mulsd xmm0, xmm0
	mulsd xmm1, [esp + _qqHH]
	mulsd xmm0, xmm1	/* fsH2H1 */
	addsd xmm7, xmm1	/* add to local vctot */
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	movapd xmm3, [esp + _fjxH1]
	movapd xmm4, [esp + _fjyH1]
	movapd xmm5, [esp + _fjzH1]
	mulsd xmm0, [esp + _dxH2H1]
	mulsd xmm1, [esp + _dyH2H1]
	mulsd xmm2, [esp + _dzH2H1]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixH2]
	addsd xmm1, [esp + _fiyH2]
	addsd xmm2, [esp + _fizH2]
	movlpd [esp + _fjxH1], xmm3
	movlpd [esp + _fjyH1], xmm4
	movlpd [esp + _fjzH1], xmm5
	movlpd [esp + _fixH2], xmm0
	movlpd [esp + _fiyH2], xmm1
	movlpd [esp + _fizH2], xmm2

	/* H2-H2 interaction */
	movapd xmm0, [esp + _rinvH2H2]
	movapd xmm1, xmm0
	mulsd xmm0, xmm0
	mulsd xmm1, [esp + _qqHH]
	mulsd xmm0, xmm1	/* fsH2H2 */
	addsd xmm7, xmm1	/* add to local vctot */
	movapd xmm1, xmm0
	movsd [esp + _vctot], xmm7
	movapd xmm2, xmm0
	movapd xmm3, [esp + _fjxH2]
	movapd xmm4, [esp + _fjyH2]
	movapd xmm5, [esp + _fjzH2]
	mulsd xmm0, [esp + _dxH2H2]
	mulsd xmm1, [esp + _dyH2H2]
	mulsd xmm2, [esp + _dzH2H2]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixH2]
	addsd xmm1, [esp + _fiyH2]
	addsd xmm2, [esp + _fizH2]
	movlpd [esp + _fjxH2], xmm3
	movlpd [esp + _fjyH2], xmm4
	movlpd [esp + _fjzH2], xmm5
	movlpd [esp + _fixH2], xmm0
	movlpd [esp + _fiyH2], xmm1
	movlpd [esp + _fizH2], xmm2

	mov edi, [ebp + _faction]
		
	/* Did all interactions - now update j forces */
	movlpd xmm0, [edi + eax*8]
	movlpd xmm1, [edi + eax*8 + 8]
	movlpd xmm2, [edi + eax*8 + 16]
	movlpd xmm3, [edi + eax*8 + 24]
	movlpd xmm4, [edi + eax*8 + 32]
	movlpd xmm5, [edi + eax*8 + 40]
	movlpd xmm6, [edi + eax*8 + 48]
	movlpd xmm7, [edi + eax*8 + 56]
	addsd xmm0, [esp + _fjxO]
	addsd xmm1, [esp + _fjyO]
	addsd xmm2, [esp + _fjzO]
	addsd xmm3, [esp + _fjxH1]
	addsd xmm4, [esp + _fjyH1]
	addsd xmm5, [esp + _fjzH1]
	addsd xmm6, [esp + _fjxH2]
	addsd xmm7, [esp + _fjyH2]
	movlpd [edi + eax*8], xmm0
	movlpd [edi + eax*8 + 8], xmm1
	movlpd [edi + eax*8 + 16], xmm2
	movlpd [edi + eax*8 + 24], xmm3
	movlpd [edi + eax*8 + 32], xmm4
	movlpd [edi + eax*8 + 40], xmm5
	movlpd [edi + eax*8 + 48], xmm6
	movlpd [edi + eax*8 + 56], xmm7

	movlpd xmm0, [edi + eax*8 + 64]
	addsd xmm0, [esp + _fjzH2]
	movlpd [edi + eax*8 + 64], xmm0
	
i1030_updateouterdata:
	mov   ecx, [esp + _ii3]
	mov   edi, [ebp + _faction]
	mov   esi, [ebp + _fshift]
	mov   edx, [esp + _is3]

	/* accumulate Oi forces in xmm0, xmm1, xmm2 */
	movapd xmm0, [esp + _fixO]
	movapd xmm1, [esp + _fiyO] 
	movapd xmm2, [esp + _fizO]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 /* sum is in low xmm0-xmm2 */

	/* increment i force */
	movsd  xmm3, [edi + ecx*8]
	movsd  xmm4, [edi + ecx*8 + 8]
	movsd  xmm5, [edi + ecx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8],     xmm3
	movsd  [edi + ecx*8 + 8], xmm4
	movsd  [edi + ecx*8 + 16], xmm5

	/* accumulate force in xmm6/xmm7 for fshift */
	movapd xmm6, xmm0
	movsd xmm7, xmm2
	unpcklpd xmm6, xmm1

	/* accumulate H1i forces in xmm0, xmm1, xmm2 */
	movapd xmm0, [esp + _fixH1]
	movapd xmm1, [esp + _fiyH1]
	movapd xmm2, [esp + _fizH1]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 /* sum is in low xmm0-xmm2 */

	/* increment i force */
	movsd  xmm3, [edi + ecx*8 + 24]
	movsd  xmm4, [edi + ecx*8 + 32]
	movsd  xmm5, [edi + ecx*8 + 40]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8 + 24], xmm3
	movsd  [edi + ecx*8 + 32], xmm4
	movsd  [edi + ecx*8 + 40], xmm5

	/* accumulate force in xmm6/xmm7 for fshift */
	addsd xmm7, xmm2
	unpcklpd xmm0, xmm1
	addpd xmm6, xmm0

	/* accumulate H2i forces in xmm0, xmm1, xmm2 */
	movapd xmm0, [esp + _fixH2]
	movapd xmm1, [esp + _fiyH2]
	movapd xmm2, [esp + _fizH2]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 /* sum is in low xmm0-xmm2 */

	movapd xmm3, xmm0	
	movapd xmm4, xmm1	
	movapd xmm5, xmm2	

	/* increment i force */
	movsd  xmm3, [edi + ecx*8 + 48]
	movsd  xmm4, [edi + ecx*8 + 56]
	movsd  xmm5, [edi + ecx*8 + 64]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8 + 48], xmm3
	movsd  [edi + ecx*8 + 56], xmm4
	movsd  [edi + ecx*8 + 64], xmm5

	/* accumulate force in xmm6/xmm7 for fshift */
	addsd xmm7, xmm2
	unpcklpd xmm0, xmm1
	addpd xmm6, xmm0

	/* increment fshift force */
	movupd xmm3, [esi + edx*8]
	movsd  xmm4, [esi + edx*8 + 16]
	addpd  xmm3, xmm6
	addsd  xmm4, xmm7
	movupd [esi + edx*8],    xmm3
	movsd  [esi + edx*8 + 16], xmm4

	mov   edx, [ebp + _gid]  
	mov   edx, [edx]
	add   [ebp + _gid],  4	

	/* accumulate total potential energy and update it */
	movapd xmm7, [esp + _vctot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* pos 0-1 in xmm7 have the sum now */
	        
	/* add earlier value from mem */
	mov   eax, [ebp + _Vc]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 	
	
	/* finish if last */
	mov   ecx, [ebp + _nri]
	dec ecx
	jecxz i1030_end
	/* not last, iterate once more! */ 
	mov [ebp + _nri], ecx
	jmp i1030_outer
i1030_end:
	emms
	mov eax, [esp + _salign]
	add esp, eax
	add esp, 1412
	pop edi
	pop esi
        pop edx
        pop ecx
        pop ebx
        pop eax
	leave
	ret







.globl inl1100_sse2
	.type inl1100_sse2,@function
inl1100_sse2:	
.equ		_nri,		8
.equ		_iinr,		12
.equ		_jindex,	16
.equ		_jjnr,		20
.equ		_shift,		24
.equ		_shiftvec,	28
.equ		_fshift,	32
.equ		_gid,		36
.equ		_pos,		40		
.equ		_faction,	44
.equ		_charge,	48
.equ		_facel,		52 /* double */  
.equ		_Vc,		60
.equ		_type,		64
.equ		_ntype,		68
.equ		_nbfp,		72	
.equ		_Vnb,		76	
	/* stack offsets for local variables */ 
	/* bottom of stack is cache-aligned for sse2 use */
.equ		_ix,	        0
.equ		_iy,	        16
.equ		_iz,            32
.equ		_iq,            48
.equ		_dx,            64
.equ		_dy,            80
.equ		_dz,            96	
.equ		_c6,            112
.equ		_c12,           128
.equ		_six,           144
.equ		_twelve,        160		 
.equ		_vctot,         176
.equ		_vnbtot,        192
.equ		_fix,           208
.equ		_fiy,           224
.equ		_fiz,           240
.equ		_half,          256
.equ		_three,         272
.equ		_is3,           288
.equ		_ii3,           292
.equ		_ntia,	        296	
.equ		_innerjjnr,     300
.equ		_innerk,        304
.equ		_salign,        308		
	push ebp
	mov ebp,esp	
        push eax
        push ebx
        push ecx
        push edx
	push esi
	push edi
	sub esp,  312		/* local stack space */
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + _salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_three]
	movupd xmm2, [sse2_six]
	movupd xmm3, [sse2_twelve]
	movapd [esp + _half],  xmm0
	movapd [esp + _three], xmm1
	movapd [esp + _six],  xmm2
	movapd [esp + _twelve], xmm3

	/* assume we have at least one i particle - start directly */	
i1100_outer:
	mov   eax, [ebp + _shift]      /* eax = pointer into shift[] */
	mov   ebx, [eax]		/* ebx=shift[n] */
	add   [ebp + _shift],  4  /* advance pointer one step */
	
	lea   ebx, [ebx + ebx*2]        /* ebx=3*is */
	mov   [esp + _is3],ebx    	/* store is3 */

	mov   eax, [ebp + _shiftvec]   /* eax = base of shiftvec[] */

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	add   [ebp + _iinr],  4   /* advance pointer */
	mov   ebx, [ecx]	        /* ebx =ii */

	mov   edx, [ebp + _charge]
	movsd xmm3, [edx + ebx*8]	
	mulsd xmm3, [ebp + _facel]
	shufpd xmm3, xmm3, 0

        mov   edx, [ebp + _type] 
        mov   edx, [edx + ebx*4]
        imul  edx, [ebp + _ntype]
        shl   edx, 1
        mov   [esp + _ntia], edx
		
	lea   ebx, [ebx + ebx*2]	/* ebx = 3*ii=ii3 */
	mov   eax, [ebp + _pos]        /* eax = base of pos[] */ 

	addsd xmm0, [eax + ebx*8]
	addsd xmm1, [eax + ebx*8 + 8]
	addsd xmm2, [eax + ebx*8 + 16]

	movapd [esp + _iq], xmm3
	
	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0

	movapd [esp + _ix], xmm0
	movapd [esp + _iy], xmm1
	movapd [esp + _iz], xmm2

	mov   [esp + _ii3], ebx
	
	/* clear vctot and i forces */
	xorpd xmm4, xmm4
	movapd [esp + _vctot], xmm4
	movapd [esp + _vnbtot], xmm4
	movapd [esp + _fix], xmm4
	movapd [esp + _fiy], xmm4
	movapd [esp + _fiz], xmm4
	
	mov   eax, [ebp + _jindex]
	mov   ecx, [eax]	         /* jindex[n] */
	mov   edx, [eax + 4]	         /* jindex[n+1] */
	add   [ebp + _jindex],  4
	sub   edx, ecx                   /* number of innerloop atoms */

	mov   esi, [ebp + _pos]
	mov   edi, [ebp + _faction]	
	mov   eax, [ebp + _jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + _innerjjnr], eax     /* pointer to jjnr[nj0] */
	sub   edx,  2
	mov   [esp + _innerk], edx        /* number of innerloop atoms */
	jge   i1100_unroll_loop
	jmp   i1100_checksingle
i1100_unroll_loop:
	/* twice unrolled innerloop here */
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	add   [esp + _innerjjnr],  8	/* advance pointer (unrolled 2) */

	mov esi, [ebp + _charge]        /* base of charge[] */
	
	movlpd xmm3, [esi + eax*8]
	movhpd xmm3, [esi + ebx*8]

	movapd xmm5, [esp + _iq]
	mulpd xmm3, xmm5		/* qq */
	
	movd  mm0, eax		/* use mmx registers as temp storage */
	movd  mm1, ebx
	
	mov esi, [ebp + _type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov esi, [ebp + _nbfp]
	shl eax, 1
	shl ebx, 1
	mov edi, [esp + _ntia]
	add eax, edi
	add ebx, edi

	movupd xmm6, [esi + eax*8]	/* c6a c12a */
	movupd xmm7, [esi + ebx*8]	/* c6b c12b */
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0
	movd  ebx, mm1
	movapd [esp + _c6], xmm4
	movapd [esp + _c12], xmm6
	
	mov esi, [ebp + _pos]       /* base of pos[] */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */
	lea   ebx, [ebx + ebx*2]	

	/* move two coordinates to xmm0-xmm2 */	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]		
	
	/* move ix-iz to xmm4-xmm6 */
	movapd xmm4, [esp + _ix]
	movapd xmm5, [esp + _iy]
	movapd xmm6, [esp + _iz]

	/* calc dr */
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	/* store dr */
	movapd [esp + _dx], xmm4
	movapd [esp + _dy], xmm5
	movapd [esp + _dz], xmm6
	/* square it */
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6
	/* rsq in xmm4 */

	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm5, xmm5
	cvtps2pd xmm2, xmm5	/* lu in low xmm2 */

	/* lookup seed in xmm2 */
	movapd xmm5, xmm2	/* copy of lu */
	mulpd xmm2, xmm2	/* lu*lu */
	movapd xmm1, [esp + _three]
	mulpd xmm2, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subpd xmm1, xmm2	/* 30-rsq*lu*lu */
	mulpd xmm1, xmm5	
	mulpd xmm1, xmm0	/* xmm0=iter1 of rinv (new lu) */

	movapd xmm5, xmm1	/* copy of lu */
	mulpd xmm1, xmm1	/* lu*lu */
	movapd xmm2, [esp + _three]
	mulpd xmm1, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subpd xmm2, xmm1	/* 30-rsq*lu*lu */
	mulpd xmm2, xmm5	
	mulpd xmm0, xmm2	/* xmm0=rinv */
	
	movapd xmm4, xmm0
	mulpd  xmm4, xmm4	/* xmm4=rinvsq */
	movapd xmm1, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm1, xmm4	/* xmm1=rinvsix */
	movapd xmm2, xmm1
	mulpd  xmm2, xmm2	/* xmm2=rinvtwelve */
	mulpd  xmm3, xmm0	/* xmm3=vcoul */
	mulpd  xmm1, [esp + _c6]
	mulpd  xmm2, [esp + _c12]
	movapd xmm5, xmm2
	subpd  xmm5, xmm1	/* vnb=vnb12-vnb6 */
	addpd  xmm5, [esp + _vnbtot]
	mulpd  xmm1, [esp + _six]
	mulpd  xmm2, [esp + _twelve]
	subpd  xmm2, xmm1
	addpd  xmm2, xmm3
	mulpd  xmm4, xmm2	/* xmm4=total fscal */
	addpd  xmm3, [esp + _vctot]

	movapd xmm0, [esp + _dx]
	movapd xmm1, [esp + _dy]
	movapd xmm2, [esp + _dz]

	movapd [esp + _vctot], xmm3
	movapd [esp + _vnbtot], xmm5

	mov    edi, [ebp + _faction]
	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4
	/* xmm0-xmm2 contains tx-tz (partial force) */
	/* now update f_i */
	movapd xmm3, [esp + _fix]
	movapd xmm4, [esp + _fiy]
	movapd xmm5, [esp + _fiz]
	addpd  xmm3, xmm0
	addpd  xmm4, xmm1
	addpd  xmm5, xmm2
	movapd [esp + _fix], xmm3
	movapd [esp + _fiy], xmm4
	movapd [esp + _fiz], xmm5
	/* the fj's - start by accumulating forces from memory */
	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	movhpd xmm3, [edi + ebx*8]
	movhpd xmm4, [edi + ebx*8 + 8]
	movhpd xmm5, [edi + ebx*8 + 16]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5
	movhpd [edi + ebx*8], xmm3
	movhpd [edi + ebx*8 + 8], xmm4
	movhpd [edi + ebx*8 + 16], xmm5
		
	/* should we do one more iteration? */
	sub   [esp + _innerk],  2
	jl    i1100_checksingle
	jmp   i1100_unroll_loop	
i1100_checksingle:
	mov   edx, [esp + _innerk]
	and   edx, 1
	jnz    i1100_dosingle
	jmp    i1100_updateouterdata
i1100_dosingle:
	mov esi, [ebp + _charge]
	mov edi, [ebp + _pos]
	mov ecx, [esp + _innerjjnr]
	mov   eax, [ecx]
	
	xorpd xmm3, xmm3
	movlpd xmm3, [esi + eax*8]

	movapd xmm5, [esp + _iq]
	mulsd xmm3, xmm5		/* qq */
	
	movd  mm0, eax		/* use mmx registers as temp storage */
	
	mov esi, [ebp + _type]
	mov eax, [esi + eax*4]
	mov esi, [ebp + _nbfp]
	shl eax, 1
	mov edi, [esp + _ntia]
	add eax, edi

	movupd xmm6, [esi + eax*8]	/* c6a c12a */
	xorpd xmm7, xmm7
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0
	
	movapd [esp + _c6], xmm4
	movapd [esp + _c12], xmm6
	
	mov esi, [ebp + _pos]       /* base of pos[] */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */

	/* move two coordinates to xmm0-xmm2 */	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	
	/* move ix-iz to xmm4-xmm6 */
	movapd xmm4, [esp + _ix]
	movapd xmm5, [esp + _iy]
	movapd xmm6, [esp + _iz]

	/* calc dr */
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	/* store dr */
	movapd [esp + _dx], xmm4
	movapd [esp + _dy], xmm5
	movapd [esp + _dz], xmm6
	/* square it */
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6
	/* rsq in xmm4 */

	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm5, xmm5
	cvtss2sd xmm2, xmm5	/* lu in low xmm2 */

	/* lookup seed in xmm2 */
	movapd xmm5, xmm2	/* copy of lu */
	mulsd xmm2, xmm2	/* lu*lu */
	movapd xmm1, [esp + _three]
	mulsd xmm2, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subsd xmm1, xmm2	/* 30-rsq*lu*lu */
	mulsd xmm1, xmm5	
	mulsd xmm1, xmm0	/* xmm0=iter1 of rinv (new lu) */

	movapd xmm5, xmm1	/* copy of lu */
	mulsd xmm1, xmm1	/* lu*lu */
	movapd xmm2, [esp + _three]
	mulsd xmm1, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subsd xmm2, xmm1	/* 30-rsq*lu*lu */
	mulsd xmm2, xmm5	
	mulsd xmm0, xmm2	/* xmm0=rinv */
	
	movapd xmm4, xmm0
	mulsd  xmm4, xmm4	/* xmm4=rinvsq */
	movapd xmm1, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm1, xmm4	/* xmm1=rinvsix */
	movapd xmm2, xmm1
	mulsd  xmm2, xmm2	/* xmm2=rinvtwelve */
	mulsd  xmm3, xmm0	/* xmm3=vcoul */
	mulsd  xmm1, [esp + _c6]
	mulsd  xmm2, [esp + _c12]
	movapd xmm5, xmm2
	subsd  xmm5, xmm1	/* vnb=vnb12-vnb6 */
	addsd  xmm5, [esp + _vnbtot]
	mulsd  xmm1, [esp + _six]
	mulsd  xmm2, [esp + _twelve]
	subsd  xmm2, xmm1
	addsd  xmm2, xmm3
	mulsd  xmm4, xmm2	/* xmm4=total fscal */
	addsd  xmm3, [esp + _vctot]

	movapd xmm0, [esp + _dx]
	movapd xmm1, [esp + _dy]
	movapd xmm2, [esp + _dz]

	movlpd [esp + _vctot], xmm3
	movlpd [esp + _vnbtot], xmm5

	mov    edi, [ebp + _faction]
	mulsd  xmm0, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm2, xmm4
	/* xmm0-xmm2 contains tx-tz (partial force) */
	/* now update f_i */
	movlpd xmm3, [esp + _fix]
	movlpd xmm4, [esp + _fiy]
	movlpd xmm5, [esp + _fiz]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movlpd [esp + _fix], xmm3
	movlpd [esp + _fiy], xmm4
	movlpd [esp + _fiz], xmm5
	/* the fj's - start by accumulating forces from memory */
	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5
	
i1100_updateouterdata:
	mov   ecx, [esp + _ii3]
	mov   edi, [ebp + _faction]
	mov   esi, [ebp + _fshift]
	mov   edx, [esp + _is3]

	/* accumulate i forces in xmm0, xmm1, xmm2 */
	movapd xmm0, [esp + _fix]
	movapd xmm1, [esp + _fiy]
	movapd xmm2, [esp + _fiz]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 /* sum is in low xmm0-xmm2 */

	/* increment i force */
	movsd  xmm3, [edi + ecx*8]
	movsd  xmm4, [edi + ecx*8 + 8]
	movsd  xmm5, [edi + ecx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8],     xmm3
	movsd  [edi + ecx*8 + 8], xmm4
	movsd  [edi + ecx*8 + 16], xmm5

	/* increment fshift force */ 
	movsd  xmm3, [esi + edx*8]
	movsd  xmm4, [esi + edx*8 + 8]
	movsd  xmm5, [esi + edx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [esi + edx*8],     xmm3
	movsd  [esi + edx*8 + 8], xmm4
	movsd  [esi + edx*8 + 16], xmm5

	/* get group index for i particle */
	mov   edx, [ebp + _gid]      /* get group index for this i particle */
	mov   edx, [edx]
	add   [ebp + _gid],  4  /* advance pointer */

	/* accumulate total potential energy and update it */
	movapd xmm7, [esp + _vctot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */

	/* add earlier value from mem */
	mov   eax, [ebp + _Vc]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* accumulate total lj energy and update it */
	movapd xmm7, [esp + _vnbtot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */
	
	/* add earlier value from mem */
	mov   eax, [ebp + _Vnb]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* finish if last */
	mov   ecx, [ebp + _nri]
	dec ecx
	jecxz i1100_end
	/* not last, iterate once more! */ 
	mov [ebp + _nri], ecx
	jmp i1100_outer
i1100_end:
	emms
	mov eax, [esp + _salign]
	add esp, eax
	add esp,  312
	pop edi
	pop esi
        pop edx
        pop ecx
        pop ebx
        pop eax
	leave
	ret




.globl inl2100_sse2
	.type inl2100_sse2,@function
inl2100_sse2:	
.equ		_nri,		8
.equ		_iinr,		12
.equ		_jindex,	16
.equ		_jjnr,		20
.equ		_shift,		24
.equ		_shiftvec,	28
.equ		_fshift,	32
.equ		_gid,		36
.equ		_pos,		40		
.equ		_faction,	44
.equ		_charge,	48
.equ		_facel,		52 /* double */ 
.equ		_Vc,		60			
.equ		_argkrf,	64 /* double */	
.equ		_argcrf,	72 /* double */	
.equ		_type,		80
.equ		_ntype,		84
.equ		_nbfp,		88	
.equ		_Vnb,		92	
	/* stack offsets for local variables */ 
	/* bottom of stack is cache-aligned for sse2 use */
.equ		_ix,	        0
.equ		_iy,	        16
.equ		_iz,            32
.equ		_iq,            48
.equ		_dx,            64
.equ		_dy,            80
.equ		_dz,            96	
.equ		_c6,            112
.equ		_c12,           128
.equ		_six,           144
.equ		_twelve,        160		 
.equ		_vctot,         176
.equ		_vnbtot,        192
.equ		_fix,           208
.equ		_fiy,           224
.equ		_fiz,           240
.equ		_half,          256
.equ		_three,         272
.equ		_two,           288
.equ		_krf,		304	 
.equ		_crf,		320	 
.equ		_is3,           336
.equ		_ii3,           340
.equ		_ntia,	        344
.equ		_innerjjnr,     348
.equ		_innerk,        352
.equ		_salign,        356
	push ebp
	mov ebp,esp	
        push eax
        push ebx
        push ecx
        push edx
	push esi
	push edi
	sub esp,  360		/* local stack space */
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + _salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_three]
	movupd xmm2, [sse2_six]
	movupd xmm3, [sse2_twelve]
	movupd xmm4, [sse2_two]
	movsd xmm5, [ebp + _argkrf]
	movsd xmm6, [ebp + _argcrf]
	
	movapd [esp + _half],  xmm0
	movapd [esp + _three], xmm1
	movapd [esp + _six],  xmm2
	movapd [esp + _twelve], xmm3
	movapd [esp + _two], xmm4
	shufpd xmm5, xmm5, 0
	shufpd xmm6, xmm6, 0
	movapd [esp + _krf], xmm5
	movapd [esp + _crf], xmm6

	/* assume we have at least one i particle - start directly */	
.i2100_outer:
	mov   eax, [ebp + _shift]      /* eax = pointer into shift[] */
	mov   ebx, [eax]		/* ebx=shift[n] */
	add   [ebp + _shift],  4  /* advance pointer one step */
	
	lea   ebx, [ebx + ebx*2]        /* ebx=3*is */
	mov   [esp + _is3],ebx    	/* store is3 */

	mov   eax, [ebp + _shiftvec]   /* eax = base of shiftvec[] */

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	add   [ebp + _iinr],  4   /* advance pointer */
	mov   ebx, [ecx]	        /* ebx =ii */

	mov   edx, [ebp + _charge]
	movsd xmm3, [edx + ebx*8]	
	mulsd xmm3, [ebp + _facel]
	shufpd xmm3, xmm3, 0

        mov   edx, [ebp + _type] 
        mov   edx, [edx + ebx*4]
        imul  edx, [ebp + _ntype]
        shl   edx, 1
        mov   [esp + _ntia], edx
		
	lea   ebx, [ebx + ebx*2]	/* ebx = 3*ii=ii3 */
	mov   eax, [ebp + _pos]        /* eax = base of pos[] */ 

	addsd xmm0, [eax + ebx*8]
	addsd xmm1, [eax + ebx*8 + 8]
	addsd xmm2, [eax + ebx*8 + 16]

	movapd [esp + _iq], xmm3
	
	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0

	movapd [esp + _ix], xmm0
	movapd [esp + _iy], xmm1
	movapd [esp + _iz], xmm2

	mov   [esp + _ii3], ebx
	
	/* clear vctot and i forces */
	xorpd xmm4, xmm4
	movapd [esp + _vctot], xmm4
	movapd [esp + _vnbtot], xmm4
	movapd [esp + _fix], xmm4
	movapd [esp + _fiy], xmm4
	movapd [esp + _fiz], xmm4
	
	mov   eax, [ebp + _jindex]
	mov   ecx, [eax]	         /* jindex[n] */
	mov   edx, [eax + 4]	         /* jindex[n+1] */
	add   [ebp + _jindex],  4
	sub   edx, ecx                   /* number of innerloop atoms */

	mov   esi, [ebp + _pos]
	mov   edi, [ebp + _faction]	
	mov   eax, [ebp + _jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + _innerjjnr], eax     /* pointer to jjnr[nj0] */
	sub   edx,  2
	mov   [esp + _innerk], edx        /* number of innerloop atoms */
	jge   .i2100_unroll_loop
	jmp   .i2100_checksingle
.i2100_unroll_loop:	
	/* twice unrolled innerloop here */
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	add   [esp + _innerjjnr],  8	/* advance pointer (unrolled 2) */

	mov esi, [ebp + _charge]        /* base of charge[] */
	
	movlpd xmm3, [esi + eax*8]
	movhpd xmm3, [esi + ebx*8]

	movapd xmm5, [esp + _iq]
	mulpd xmm3, xmm5		/* qq */
	
	movd  mm0, eax		/* use mmx registers as temp storage */
	movd  mm1, ebx
	
	mov esi, [ebp + _type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov esi, [ebp + _nbfp]
	shl eax, 1
	shl ebx, 1
	mov edi, [esp + _ntia]
	add eax, edi
	add ebx, edi

	movupd xmm6, [esi + eax*8]	/* c6a c12a */
	movupd xmm7, [esi + ebx*8]	/* c6b c12b */
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0		
	movd  ebx, mm1
	movapd [esp + _c6], xmm4
	movapd [esp + _c12], xmm6
	
	mov esi, [ebp + _pos]       /* base of pos[] */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */
	lea   ebx, [ebx + ebx*2]	

	/* move two coordinates to xmm0-xmm2 */	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]		
	
	/* move ix-iz to xmm4-xmm6 */
	movapd xmm4, [esp + _ix]
	movapd xmm5, [esp + _iy]
	movapd xmm6, [esp + _iz]

	/* calc dr */
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	/* store dr */
	movapd [esp + _dx], xmm4
	movapd [esp + _dy], xmm5
	movapd [esp + _dz], xmm6
	/* square it */
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6
	/* rsq in xmm4 */

	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm5, xmm5
	cvtps2pd xmm2, xmm5	/* lu in low xmm2 */

	movapd xmm7, [esp + _krf]	
	/* lookup seed in xmm2 */
	movapd xmm5, xmm2	/* copy of lu */
	mulpd xmm2, xmm2	/* lu*lu */
	movapd xmm1, [esp + _three]
	mulpd xmm7, xmm4	/* krsq */
	mulpd xmm2, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subpd xmm1, xmm2	/* 30-rsq*lu*lu */
	mulpd xmm1, xmm5	
	mulpd xmm1, xmm0	/* xmm0=iter1 of rinv (new lu) */

	movapd xmm5, xmm1	/* copy of lu */
	mulpd xmm1, xmm1	/* lu*lu */
	movapd xmm2, [esp + _three]
	mulpd xmm1, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subpd xmm2, xmm1	/* 30-rsq*lu*lu */
	mulpd xmm2, xmm5	
	mulpd xmm0, xmm2	/* xmm0=rinv */
	movapd xmm4, xmm0
	mulpd  xmm4, xmm4	/* xmm4=rinvsq */
	movapd xmm6, xmm0
	addpd  xmm6, xmm7	/* xmm6=rinv+ krsq */
	movapd xmm1, xmm4
	subpd  xmm6, [esp + _crf]
	mulpd  xmm1, xmm4
	mulpd  xmm1, xmm4	/* xmm1=rinvsix */
	movapd xmm2, xmm1
	mulpd  xmm2, xmm2	/* xmm2=rinvtwelve */
	mulpd  xmm6, xmm3	/* xmm6=vcoul=qq*(rinv+ krsq) */
	mulpd  xmm7, [esp + _two]
	mulpd  xmm1, [esp + _c6]
	mulpd  xmm2, [esp + _c12]
	movapd xmm5, xmm2
	subpd  xmm5, xmm1	/* vnb=vnb12-vnb6 */
	addpd  xmm5, [esp + _vnbtot]
	mulpd  xmm1, [esp + _six]
	mulpd  xmm2, [esp + _twelve]
	subpd  xmm2, xmm1
	subpd  xmm0, xmm7
	mulpd  xmm3, xmm0
	addpd  xmm2, xmm3
	mulpd  xmm4, xmm2	/* xmm4=total fscal */
	addpd  xmm6, [esp + _vctot]

	movapd xmm0, [esp + _dx]
	movapd xmm1, [esp + _dy]
	movapd xmm2, [esp + _dz]

	movapd [esp + _vctot], xmm6
	movapd [esp + _vnbtot], xmm5

	mov    edi, [ebp + _faction]
	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4
	/* xmm0-xmm2 contains tx-tz (partial force) */
	/* now update f_i */
	movapd xmm3, [esp + _fix]
	movapd xmm4, [esp + _fiy]
	movapd xmm5, [esp + _fiz]
	addpd  xmm3, xmm0
	addpd  xmm4, xmm1
	addpd  xmm5, xmm2
	movapd [esp + _fix], xmm3
	movapd [esp + _fiy], xmm4
	movapd [esp + _fiz], xmm5
	/* the fj's - start by accumulating forces from memory */
	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	movhpd xmm3, [edi + ebx*8]
	movhpd xmm4, [edi + ebx*8 + 8]
	movhpd xmm5, [edi + ebx*8 + 16]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5
	movhpd [edi + ebx*8], xmm3
	movhpd [edi + ebx*8 + 8], xmm4
	movhpd [edi + ebx*8 + 16], xmm5
	
	/* should we do one more iteration? */
	sub   [esp + _innerk],  2
	jl    .i2100_checksingle
	jmp   .i2100_unroll_loop

.i2100_checksingle:				
	mov   edx, [esp + _innerk]
	and   edx, 1
	jnz    .i2100_dosingle
	jmp    .i2100_updateouterdata
.i2100_dosingle:			
	mov esi, [ebp + _charge]
	mov edi, [ebp + _pos]
	mov   ecx, [esp + _innerjjnr]
	xorpd xmm3, xmm3
	mov   eax, [ecx]

	movlpd xmm3, [esi + eax*8]
	movapd xmm5, [esp + _iq]
	mulpd xmm3, xmm5		/* qq */
	
	movd  mm0, eax		/* use mmx registers as temp storage */
	mov esi, [ebp + _type]
	mov eax, [esi + eax*4]
	mov esi, [ebp + _nbfp]
	shl eax, 1
	mov edi, [esp + _ntia]
	add eax, edi

	movupd xmm6, [esi + eax*8]	/* c6a c12a */
	xorpd xmm7, xmm7
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0		
	movapd [esp + _c6], xmm4
	movapd [esp + _c12], xmm6
	
	mov esi, [ebp + _pos]       /* base of pos[] */

	lea eax, [eax + eax*2]         /* replace jnr with j3 */

	/* move two coordinates to xmm0-xmm2 */	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	
	/* move ix-iz to xmm4-xmm6 */
	movapd xmm4, [esp + _ix]
	movapd xmm5, [esp + _iy]
	movapd xmm6, [esp + _iz]

	/* calc dr */
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	/* store dr */
	movapd [esp + _dx], xmm4
	movapd [esp + _dy], xmm5
	movapd [esp + _dz], xmm6
	/* square it */
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6
	/* rsq in xmm4 */

	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm5, xmm5
	cvtss2sd xmm2, xmm5	/* lu in low xmm2 */

	movapd xmm7, [esp + _krf]	
	/* lookup seed in xmm2 */
	movapd xmm5, xmm2	/* copy of lu */
	mulsd xmm2, xmm2	/* lu*lu */
	movapd xmm1, [esp + _three]
	mulsd xmm7, xmm4	/* krsq */
	mulsd xmm2, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subsd xmm1, xmm2	/* 30-rsq*lu*lu */
	mulsd xmm1, xmm5	
	mulsd xmm1, xmm0	/* xmm0=iter1 of rinv (new lu) */

	movapd xmm5, xmm1	/* copy of lu */
	mulsd xmm1, xmm1	/* lu*lu */
	movapd xmm2, [esp + _three]
	mulsd xmm1, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subsd xmm2, xmm1	/* 30-rsq*lu*lu */
	mulsd xmm2, xmm5	
	mulsd xmm0, xmm2	/* xmm0=rinv */
	movapd xmm4, xmm0
	mulsd  xmm4, xmm4	/* xmm4=rinvsq */
	movapd xmm6, xmm0
	addsd  xmm6, xmm7	/* xmm6=rinv+ krsq */
	movapd xmm1, xmm4
	subsd  xmm6, [esp + _crf]
	mulsd  xmm1, xmm4
	mulsd  xmm1, xmm4	/* xmm1=rinvsix */
	movapd xmm2, xmm1
	mulsd  xmm2, xmm2	/* xmm2=rinvtwelve */
	mulsd  xmm6, xmm3	/* xmm6=vcoul=qq*(rinv+ krsq) */
	mulsd  xmm7, [esp + _two]
	mulsd  xmm1, [esp + _c6]
	mulsd  xmm2, [esp + _c12]
	movapd xmm5, xmm2
	subsd  xmm5, xmm1	/* vnb=vnb12-vnb6 */
	addsd  xmm5, [esp + _vnbtot]
	mulsd  xmm1, [esp + _six]
	mulsd  xmm2, [esp + _twelve]
	subsd  xmm2, xmm1
	subsd  xmm0, xmm7
	mulsd  xmm3, xmm0
	addsd  xmm2, xmm3
	mulsd  xmm4, xmm2	/* xmm4=total fscal */
	addsd  xmm6, [esp + _vctot]

	movlpd xmm0, [esp + _dx]
	movlpd xmm1, [esp + _dy]
	movlpd xmm2, [esp + _dz]

	movlpd [esp + _vctot], xmm6
	movlpd [esp + _vnbtot], xmm5

	mov    edi, [ebp + _faction]
	mulsd  xmm0, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm2, xmm4
	/* xmm0-xmm2 contains tx-tz (partial force) */
	/* now update f_i */
	movlpd xmm3, [esp + _fix]
	movlpd xmm4, [esp + _fiy]
	movlpd xmm5, [esp + _fiz]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movlpd [esp + _fix], xmm3
	movlpd [esp + _fiy], xmm4
	movlpd [esp + _fiz], xmm5
	/* the fj's - start by accumulating forces from memory */
	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5
	
.i2100_updateouterdata:
	mov   ecx, [esp + _ii3]
	mov   edi, [ebp + _faction]
	mov   esi, [ebp + _fshift]
	mov   edx, [esp + _is3]

	/* accumulate i forces in xmm0, xmm1, xmm2 */
	movapd xmm0, [esp + _fix]
	movapd xmm1, [esp + _fiy]
	movapd xmm2, [esp + _fiz]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addpd  xmm0, xmm3
	addpd  xmm1, xmm4
	addpd  xmm2, xmm5 /* sum is in low xmm0-xmm2 */

	/* increment i force */
	movsd  xmm3, [edi + ecx*8]
	movsd  xmm4, [edi + ecx*8 + 8]
	movsd  xmm5, [edi + ecx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8],     xmm3
	movsd  [edi + ecx*8 + 8], xmm4
	movsd  [edi + ecx*8 + 16], xmm5

	/* increment fshift force */ 
	movsd  xmm3, [esi + edx*8]
	movsd  xmm4, [esi + edx*8 + 8]
	movsd  xmm5, [esi + edx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [esi + edx*8],     xmm3
	movsd  [esi + edx*8 + 8], xmm4
	movsd  [esi + edx*8 + 16], xmm5

	/* get group index for i particle */
	mov   edx, [ebp + _gid]      /* get group index for this i particle */
	mov   edx, [edx]
	add   [ebp + _gid],  4  /* advance pointer */

	/* accumulate total potential energy and update it */
	movapd xmm7, [esp + _vctot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */

	/* add earlier value from mem */
	mov   eax, [ebp + _Vc]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* accumulate total lj energy and update it */
	movapd xmm7, [esp + _vnbtot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */

	/* add earlier value from mem */
	mov   eax, [ebp + _Vnb]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* finish if last */
	mov   ecx, [ebp + _nri]
	dec ecx
	jecxz .i2100_end
	/* not last, iterate once more! */ 
	mov [ebp + _nri], ecx
	jmp .i2100_outer
.i2100_end:
	emms
	mov eax, [esp + _salign]
	add esp, eax
	add esp,  360
	pop edi
	pop esi
        pop edx
        pop ecx
        pop ebx
        pop eax
	leave
	ret



.globl inl2000_sse2
	.type inl2000_sse2,@function
inl2000_sse2:	
.equ		_nri,		8
.equ		_iinr,		12
.equ		_jindex,	16
.equ		_jjnr,		20
.equ		_shift,		24
.equ		_shiftvec,	28
.equ		_fshift,	32
.equ		_gid,		36
.equ		_pos,		40		
.equ		_faction,	44
.equ		_charge,	48
.equ		_facel,		52 /* double */ 
.equ		_Vc,		60	
.equ		_argkrf,	64 /* double */ 	
.equ		_argcrf,	72 /* double */ 
	/* stack offsets for local variables */ 
	/* bottom of stack is cache-aligned for sse2 use */
.equ		_ix,	        0
.equ		_iy,	        16
.equ		_iz,            32
.equ		_iq,            48
.equ		_dx,            64
.equ		_dy,            80
.equ		_dz,            96	
.equ		_vctot,         112
.equ		_fix,           128
.equ		_fiy,           144
.equ		_fiz,           160
.equ		_half,          176
.equ		_three,         192
.equ		_two,           208
.equ		_krf,	        224	 
.equ		_crf,	        240	 
.equ		_is3,           256
.equ		_ii3,           260
.equ		_innerjjnr,     264
.equ		_innerk,        268
.equ		_salign,	272								
	push ebp
	mov ebp,esp	
        push eax
        push ebx
        push ecx
        push edx
	push esi
	push edi
	sub esp,  276		/* local stack space */
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + _salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_three]
	movupd xmm4, [sse2_two]
	movsd xmm5, [ebp + _argkrf]
	movsd xmm6, [ebp + _argcrf]
	
	movapd [esp + _half],  xmm0
	movapd [esp + _three], xmm1
	movapd [esp + _two], xmm4
	shufpd xmm5, xmm5, 0
	movapd [esp + _krf], xmm5
	shufpd xmm6, xmm6, 0
	movapd [esp + _crf], xmm6

	/* assume we have at least one i particle - start directly */	
.i2000_outer:
	mov   eax, [ebp + _shift]      /* eax = pointer into shift[] */
	mov   ebx, [eax]		/* ebx=shift[n] */
	add   [ebp + _shift],  4  /* advance pointer one step */
	
	lea   ebx, [ebx + ebx*2]        /* ebx=3*is */
	mov   [esp + _is3],ebx    	/* store is3 */

	mov   eax, [ebp + _shiftvec]   /* eax = base of shiftvec[] */

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	add   [ebp + _iinr],  4   /* advance pointer */
	mov   ebx, [ecx]	        /* ebx =ii */

	mov   edx, [ebp + _charge]
	movsd xmm3, [edx + ebx*8]	
	mulsd xmm3, [ebp + _facel]
	shufpd xmm3, xmm3, 0
		
	lea   ebx, [ebx + ebx*2]	/* ebx = 3*ii=ii3 */
	mov   eax, [ebp + _pos]        /* eax = base of pos[] */ 

	addsd xmm0, [eax + ebx*8]
	addsd xmm1, [eax + ebx*8 + 8]
	addsd xmm2, [eax + ebx*8 + 16]

	movapd [esp + _iq], xmm3
	
	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0

	movapd [esp + _ix], xmm0
	movapd [esp + _iy], xmm1
	movapd [esp + _iz], xmm2

	mov   [esp + _ii3], ebx
	
	/* clear vctot and i forces */
	xorpd xmm4, xmm4
	movapd [esp + _vctot], xmm4
	movapd [esp + _fix], xmm4
	movapd [esp + _fiy], xmm4
	movapd [esp + _fiz], xmm4
	
	mov   eax, [ebp + _jindex]
	mov   ecx, [eax]	         /* jindex[n] */
	mov   edx, [eax + 4]	         /* jindex[n+1] */
	add   [ebp + _jindex],  4
	sub   edx, ecx                   /* number of innerloop atoms */

	mov   esi, [ebp + _pos]
	mov   edi, [ebp + _faction]	
	mov   eax, [ebp + _jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + _innerjjnr], eax     /* pointer to jjnr[nj0] */
	sub   edx,  2
	mov   [esp + _innerk], edx        /* number of innerloop atoms */
	jge   .i2000_unroll_loop
	jmp   .i2000_checksingle
.i2000_unroll_loop:
	/* twice unrolled innerloop here */
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	add   [esp + _innerjjnr],  8	/* advance pointer (unrolled 2) */

	mov esi, [ebp + _charge]        /* base of charge[] */
	
	movlpd xmm3, [esi + eax*8]
	movhpd xmm3, [esi + ebx*8]

	movapd xmm5, [esp + _iq]
	mulpd xmm3, xmm5		/* qq */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */
	lea   ebx, [ebx + ebx*2]	

	mov esi, [ebp + _pos]       /* base of pos[] */

	/* move two coordinates to xmm0-xmm2 */	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]		
	
	/* move ix-iz to xmm4-xmm6 */
	movapd xmm4, [esp + _ix]
	movapd xmm5, [esp + _iy]
	movapd xmm6, [esp + _iz]

	/* calc dr */
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	/* store dr */
	movapd [esp + _dx], xmm4
	movapd [esp + _dy], xmm5
	movapd [esp + _dz], xmm6
	/* square it */
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6
	/* rsq in xmm4 */

	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm5, xmm5
	cvtps2pd xmm2, xmm5	/* lu in low xmm2 */

	movapd xmm7, [esp + _krf]	
	/* lookup seed in xmm2 */
	movapd xmm5, xmm2	/* copy of lu */
	mulpd xmm2, xmm2	/* lu*lu */
	movapd xmm1, [esp + _three]
	mulpd xmm7, xmm4	/* krsq */
	mulpd xmm2, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subpd xmm1, xmm2	/* 30-rsq*lu*lu */
	mulpd xmm1, xmm5	
	mulpd xmm1, xmm0	/* xmm0=iter1 of rinv (new lu) */

	movapd xmm5, xmm1	/* copy of lu */
	mulpd xmm1, xmm1	/* lu*lu */
	movapd xmm2, [esp + _three]
	mulpd xmm1, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subpd xmm2, xmm1	/* 30-rsq*lu*lu */
	mulpd xmm2, xmm5	
	mulpd xmm0, xmm2	/* xmm0=rinv */
	movapd xmm4, xmm0
	mulpd  xmm4, xmm4	/* xmm4=rinvsq */
	movapd xmm6, xmm0
	addpd  xmm6, xmm7	/* xmm6=rinv+ krsq */
	movapd xmm1, xmm4
	subpd  xmm6, [esp + _crf]
	mulpd  xmm6, xmm3	/* xmm6=vcoul=qq*(rinv+ krsq) */
	
	mulpd  xmm7, [esp + _two]

	subpd  xmm0, xmm7
	mulpd  xmm3, xmm0	
	mulpd  xmm4, xmm3	/* xmm4=total fscal */
	addpd  xmm6, [esp + _vctot]

	movapd xmm0, [esp + _dx]
	movapd xmm1, [esp + _dy]
	movapd xmm2, [esp + _dz]

	movapd [esp + _vctot], xmm6

	mov    edi, [ebp + _faction]
	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4
	/* xmm0-xmm2 contains tx-tz (partial force) */
	/* now update f_i */
	movapd xmm3, [esp + _fix]
	movapd xmm4, [esp + _fiy]
	movapd xmm5, [esp + _fiz]
	addpd  xmm3, xmm0
	addpd  xmm4, xmm1
	addpd  xmm5, xmm2
	movapd [esp + _fix], xmm3
	movapd [esp + _fiy], xmm4
	movapd [esp + _fiz], xmm5
	/* the fj's - start by accumulating forces from memory */
	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	movhpd xmm3, [edi + ebx*8]
	movhpd xmm4, [edi + ebx*8 + 8]
	movhpd xmm5, [edi + ebx*8 + 16]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5
	movhpd [edi + ebx*8], xmm3
	movhpd [edi + ebx*8 + 8], xmm4
	movhpd [edi + ebx*8 + 16], xmm5	

	/* should we do one more iteration? */
	sub   [esp + _innerk],  2
	jl    .i2000_checksingle
	jmp   .i2000_unroll_loop

.i2000_checksingle:				
	mov   edx, [esp + _innerk]
	and   edx, 1
	jnz    .i2000_dosingle
	jmp    .i2000_updateouterdata
.i2000_dosingle:			
	mov esi, [ebp + _charge]
	mov edi, [ebp + _pos]
	mov   ecx, [esp + _innerjjnr]
	
	xorpd xmm3, xmm3
	mov   eax, [ecx]

	movlpd xmm3, [esi + eax*8]
	movapd xmm5, [esp + _iq]
	mulpd xmm3, xmm5		/* qq */
	
	mov esi, [ebp + _pos]       /* base of pos[] */

	lea eax, [eax + eax*2]         /* replace jnr with j3 */

	/* move two coordinates to xmm0-xmm2 */	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	
	/* move ix-iz to xmm4-xmm6 */
	movapd xmm4, [esp + _ix]
	movapd xmm5, [esp + _iy]
	movapd xmm6, [esp + _iz]

	/* calc dr */
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	/* store dr */
	movapd [esp + _dx], xmm4
	movapd [esp + _dy], xmm5
	movapd [esp + _dz], xmm6
	/* square it */
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6
	/* rsq in xmm4 */

	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm5, xmm5
	cvtss2sd xmm2, xmm5	/* lu in low xmm2 */

	movapd xmm7, [esp + _krf]	
	/* lookup seed in xmm2 */
	movapd xmm5, xmm2	/* copy of lu */
	mulsd xmm2, xmm2	/* lu*lu */
	movapd xmm1, [esp + _three]
	mulsd xmm7, xmm4	/* krsq */
	mulsd xmm2, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subsd xmm1, xmm2	/* 30-rsq*lu*lu */
	mulsd xmm1, xmm5	
	mulsd xmm1, xmm0	/* xmm0=iter1 of rinv (new lu) */

	movapd xmm5, xmm1	/* copy of lu */
	mulsd xmm1, xmm1	/* lu*lu */
	movapd xmm2, [esp + _three]
	mulsd xmm1, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subsd xmm2, xmm1	/* 30-rsq*lu*lu */
	mulsd xmm2, xmm5	
	mulsd xmm0, xmm2	/* xmm0=rinv */
	movapd xmm4, xmm0
	mulsd  xmm4, xmm4	/* xmm4=rinvsq */
	movapd xmm6, xmm0
	addsd  xmm6, xmm7	/* xmm6=rinv+ krsq */
	movapd xmm1, xmm4
	subsd  xmm6, [esp + _crf]
	mulsd  xmm1, xmm4
	mulsd  xmm1, xmm4	/* xmm1=rinvsix */
	movapd xmm2, xmm1
	mulsd  xmm2, xmm2	/* xmm2=rinvtwelve */
	mulsd  xmm6, xmm3	/* xmm6=vcoul=qq*(rinv+ krsq) */
	mulsd  xmm7, [esp + _two]

	subsd  xmm0, xmm7
	mulsd  xmm3, xmm0
	mulsd  xmm4, xmm3	/* xmm4=total fscal */
	addsd  xmm6, [esp + _vctot]

	movlpd xmm0, [esp + _dx]
	movlpd xmm1, [esp + _dy]
	movlpd xmm2, [esp + _dz]

	movlpd [esp + _vctot], xmm6

	mov    edi, [ebp + _faction]
	mulsd  xmm0, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm2, xmm4
	/* xmm0-xmm2 contains tx-tz (partial force) */
	/* now update f_i */
	movlpd xmm3, [esp + _fix]
	movlpd xmm4, [esp + _fiy]
	movlpd xmm5, [esp + _fiz]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movlpd [esp + _fix], xmm3
	movlpd [esp + _fiy], xmm4
	movlpd [esp + _fiz], xmm5
	/* the fj's - start by accumulating forces from memory */
	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5

.i2000_updateouterdata:
	mov   ecx, [esp + _ii3]
	mov   edi, [ebp + _faction]
	mov   esi, [ebp + _fshift]
	mov   edx, [esp + _is3]

	/* accumulate i forces in xmm0, xmm1, xmm2 */
	movapd xmm0, [esp + _fix]
	movapd xmm1, [esp + _fiy]
	movapd xmm2, [esp + _fiz]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 /* sum is in low xmm0-xmm2 */

	/* increment i force */
	movsd  xmm3, [edi + ecx*8]
	movsd  xmm4, [edi + ecx*8 + 8]
	movsd  xmm5, [edi + ecx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8],     xmm3
	movsd  [edi + ecx*8 + 8], xmm4
	movsd  [edi + ecx*8 + 16], xmm5

	/* increment fshift force */ 
	movsd  xmm3, [esi + edx*8]
	movsd  xmm4, [esi + edx*8 + 8]
	movsd  xmm5, [esi + edx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [esi + edx*8],     xmm3
	movsd  [esi + edx*8 + 8], xmm4
	movsd  [esi + edx*8 + 16], xmm5

	/* get group index for i particle */
	mov   edx, [ebp + _gid]      /* get group index for this i particle */
	mov   edx, [edx]
	add   [ebp + _gid],  4  /* advance pointer */

	/* accumulate total potential energy and update it */
	movapd xmm7, [esp + _vctot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */
	
	/* add earlier value from mem */
	mov   eax, [ebp + _Vc]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* finish if last */
	mov   ecx, [ebp + _nri]
	dec ecx
	jecxz .i2000_end
	/* not last, iterate once more! */ 
	mov [ebp + _nri], ecx
	jmp .i2000_outer
.i2000_end:
	emms
	mov eax, [esp + _salign]
	add esp, eax
	add esp,  276
	pop edi
	pop esi
        pop edx
        pop ecx
        pop ebx
        pop eax
	leave
	ret




.globl inl1120_sse2
	.type inl1120_sse2,@function
inl1120_sse2:	
.equ		_nri,		8
.equ		_iinr,		12
.equ		_jindex,	16
.equ		_jjnr,		20
.equ		_shift,		24
.equ		_shiftvec,	28
.equ		_fshift,	32
.equ		_gid,		36
.equ		_pos,		40		
.equ		_faction,	44
.equ		_charge,	48
.equ		_facel,		52 /* double */ 
.equ		_Vc,		60			
.equ		_type,		64
.equ		_ntype,		68
.equ		_nbfp,		72	
.equ		_Vnb,		76	
	/* stack offsets for local variables */ 
	/* bottom of stack is cache-aligned for sse2 use */
.equ		_ixO,	        0
.equ		_iyO,	        16
.equ		_izO,           32
.equ		_ixH1,	        48
.equ		_iyH1,	        64
.equ		_izH1,          80
.equ		_ixH2,	        96
.equ		_iyH2,	        112
.equ		_izH2,          128
.equ		_iqO,           144 
.equ		_iqH,           160 
.equ		_dxO,           176
.equ		_dyO,           192
.equ		_dzO,           208	
.equ		_dxH1,          224
.equ		_dyH1,          240
.equ		_dzH1,          256	
.equ		_dxH2,          272
.equ		_dyH2,          288
.equ		_dzH2,          304	
.equ		_qqO,           320
.equ		_qqH,           336
.equ		_c6,            352
.equ		_c12,           368
.equ		_six,           384
.equ		_twelve,        400		 
.equ		_vctot,         416
.equ		_vnbtot,        432
.equ		_fixO,          448
.equ		_fiyO,          464
.equ		_fizO,          480
.equ		_fixH1,         496
.equ		_fiyH1,         512
.equ		_fizH1,         528
.equ		_fixH2,         544
.equ		_fiyH2,         560
.equ		_fizH2,         576
.equ		_fjx,	        592
.equ		_fjy,           608
.equ		_fjz,           624
.equ		_half,          640
.equ		_three,         656
.equ		_is3,           672
.equ		_ii3,           676
.equ		_ntia,	        680	
.equ		_innerjjnr,     684
.equ		_innerk,        688
.equ		_salign,        692
	push ebp
	mov ebp,esp	
        push eax
        push ebx
        push ecx
        push edx
	push esi
	push edi
	sub esp, 696		/* local stack space */
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + _salign], eax
	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_three]
	movupd xmm2, [sse2_six]
	movupd xmm3, [sse2_twelve]
	movapd [esp + _half],  xmm0
	movapd [esp + _three], xmm1
	movapd [esp + _six],  xmm2
	movapd [esp + _twelve], xmm3

	/* assume we have at least one i particle - start directly */
	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	mov   ebx, [ecx]	        /* ebx =ii */

	mov   edx, [ebp + _charge]
	movsd xmm3, [edx + ebx*8]	
	movsd xmm4, [edx + ebx*8 + 8]	
	movsd xmm5, [ebp + _facel]
	mulsd  xmm3, xmm5
	mulsd  xmm4, xmm5

	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	movapd [esp + _iqO], xmm3
	movapd [esp + _iqH], xmm4
	
	mov   edx, [ebp + _type]
	mov   ecx, [edx + ebx*4]
	shl   ecx, 1
	imul  ecx, [ebp + _ntype]      /* ecx = ntia = 2*ntype*type[ii0] */
	mov   [esp + _ntia], ecx		
i1120_outer:
	mov   eax, [ebp + _shift]      /* eax = pointer into shift[] */
	mov   ebx, [eax]		/* ebx=shift[n] */
	add   [ebp + _shift],  4  /* advance pointer one step */
	
	lea   ebx, [ebx + ebx*2]        /* ebx=3*is */
	mov   [esp + _is3],ebx    	/* store is3 */

	mov   eax, [ebp + _shiftvec]   /* eax = base of shiftvec[] */

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	add   [ebp + _iinr],  4   /* advance pointer */
	mov   ebx, [ecx]	        /* ebx =ii */

	movapd xmm3, xmm0
	movapd xmm4, xmm1
	movapd xmm5, xmm2

	lea   ebx, [ebx + ebx*2]	/* ebx = 3*ii=ii3 */
	mov   eax, [ebp + _pos]        /* eax = base of pos[] */ 
	mov   [esp + _ii3], ebx

	addsd xmm3, [eax + ebx*8]
	addsd xmm4, [eax + ebx*8 + 8]
	addsd xmm5, [eax + ebx*8 + 16]		
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _ixO], xmm3
	movapd [esp + _iyO], xmm4
	movapd [esp + _izO], xmm5

	movsd xmm3, xmm0
	movsd xmm4, xmm1
	movsd xmm5, xmm2
	addsd xmm0, [eax + ebx*8 + 24]
	addsd xmm1, [eax + ebx*8 + 32]
	addsd xmm2, [eax + ebx*8 + 40]		
	addsd xmm3, [eax + ebx*8 + 48]
	addsd xmm4, [eax + ebx*8 + 56]
	addsd xmm5, [eax + ebx*8 + 64]		

	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _ixH1], xmm0
	movapd [esp + _iyH1], xmm1
	movapd [esp + _izH1], xmm2
	movapd [esp + _ixH2], xmm3
	movapd [esp + _iyH2], xmm4
	movapd [esp + _izH2], xmm5
	
	/* clear vctot and i forces */
	xorpd xmm4, xmm4
	movapd [esp + _vctot], xmm4
	movapd [esp + _vnbtot], xmm4
	movapd [esp + _fixO], xmm4
	movapd [esp + _fiyO], xmm4
	movapd [esp + _fizO], xmm4
	movapd [esp + _fixH1], xmm4
	movapd [esp + _fiyH1], xmm4
	movapd [esp + _fizH1], xmm4
	movapd [esp + _fixH2], xmm4
	movapd [esp + _fiyH2], xmm4
	movapd [esp + _fizH2], xmm4
	
	mov   eax, [ebp + _jindex]
	mov   ecx, [eax]	         /* jindex[n] */
	mov   edx, [eax + 4]	         /* jindex[n+1] */
	add   [ebp + _jindex],  4
	sub   edx, ecx                   /* number of innerloop atoms */

	mov   esi, [ebp + _pos]
	mov   edi, [ebp + _faction]	
	mov   eax, [ebp + _jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + _innerjjnr], eax     /* pointer to jjnr[nj0] */
	sub   edx,  2
	mov   [esp + _innerk], edx        /* number of innerloop atoms */
	jge   i1120_unroll_loop
	jmp   i1120_checksingle
i1120_unroll_loop:
	/* twice unrolled innerloop here */
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]	
	mov   ebx, [edx + 4]

	add   [esp + _innerjjnr],  8	/* advance pointer (unrolled 2) */

	mov esi, [ebp + _charge]        /* base of charge[] */
	
	movlpd xmm3, [esi + eax*8]
	movhpd xmm3, [esi + ebx*8]
	movapd xmm4, xmm3
	mulpd  xmm3, [esp + _iqO]
	mulpd  xmm4, [esp + _iqH]

	movd  mm0, eax		/* use mmx registers as temp storage */
	movd  mm1, ebx

	movapd  [esp + _qqO], xmm3
	movapd  [esp + _qqH], xmm4
	
	mov esi, [ebp + _type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov esi, [ebp + _nbfp]
	shl eax, 1	
	shl ebx, 1	
	mov edi, [esp + _ntia]
	add eax, edi
	add ebx, edi

	movupd xmm6, [esi + eax*8]	/* c6a c12a */
	movupd xmm7, [esi + ebx*8]	/* c6b c12b */
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0
	movd  ebx, mm1
	movapd [esp + _c6], xmm4
	movapd [esp + _c12], xmm6
	
	mov esi, [ebp + _pos]       /* base of pos[] */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */
	lea   ebx, [ebx + ebx*2]	

	/* move two coordinates to xmm0-xmm2 */
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]		

	/* move ixO-izO to xmm4-xmm6 */
	movapd xmm4, [esp + _ixO]
	movapd xmm5, [esp + _iyO]
	movapd xmm6, [esp + _izO]

	/* calc dr */
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	/* store dr */
	movapd [esp + _dxO], xmm4
	movapd [esp + _dyO], xmm5
	movapd [esp + _dzO], xmm6
	/* square it */
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6
	movapd xmm7, xmm4
	/* rsqO in xmm7 */

	/* move ixH1-izH1 to xmm4-xmm6 */
	movapd xmm4, [esp + _ixH1]
	movapd xmm5, [esp + _iyH1]
	movapd xmm6, [esp + _izH1]

	/* calc dr */
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	/* store dr */
	movapd [esp + _dxH1], xmm4
	movapd [esp + _dyH1], xmm5
	movapd [esp + _dzH1], xmm6
	/* square it */
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm6, xmm5
	addpd xmm6, xmm4
	/* rsqH1 in xmm6 */

	/* move ixH2-izH2 to xmm3-xmm5 */ 
	movapd xmm3, [esp + _ixH2]
	movapd xmm4, [esp + _iyH2]
	movapd xmm5, [esp + _izH2]

	/* calc dr */
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2

	/* store dr */
	movapd [esp + _dxH2], xmm3
	movapd [esp + _dyH2], xmm4
	movapd [esp + _dzH2], xmm5
	/* square it */
	mulpd xmm3,xmm3
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	addpd xmm5, xmm4
	addpd xmm5, xmm3
	/* rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 */

	/* start with rsqO - put seed in xmm2 */
	cvtpd2ps xmm2, xmm7	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulpd   xmm2, xmm7	/* rsq*lu*lu */
	subpd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulpd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulpd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm3, xmm4
	mulpd xmm4, xmm4	/* lu*lu */
	mulpd xmm7, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subpd xmm4, xmm7	/* 3-rsq*lu*lu */
	mulpd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulpd xmm4, [esp + _half] /* rinv */
	movapd  xmm7, xmm4	/* rinvO in xmm7 */
	
	/* rsqH1 - seed in xmm2 */
	cvtpd2ps xmm2, xmm6	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulpd   xmm2, xmm6	/* rsq*lu*lu */
	subpd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulpd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulpd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm3, xmm4
	mulpd xmm4, xmm4	/* lu*lu */
	mulpd xmm6, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subpd xmm4, xmm6	/* 3-rsq*lu*lu */
	mulpd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulpd xmm4, [esp + _half] /* rinv */
	movapd  xmm6, xmm4	/* rinvH1 in xmm6 */
	
	/* rsqH2 - seed in xmm2 */
	cvtpd2ps xmm2, xmm5	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulpd   xmm2, xmm5	/* rsq*lu*lu */
	subpd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulpd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulpd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm3, xmm4
	mulpd xmm4, xmm4	/* lu*lu */
	mulpd xmm5, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subpd xmm4, xmm5	/* 3-rsq*lu*lu */
	mulpd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulpd xmm4, [esp + _half] /* rinv */
	movapd  xmm5, xmm4	/* rinvH2 in xmm5 */

	/* do O interactions */
	movapd  xmm4, xmm7	
	mulpd   xmm4, xmm4	/* xmm7=rinv, xmm4=rinvsq */
	movapd xmm1, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm1, xmm4	/* xmm1=rinvsix */
	movapd xmm2, xmm1
	mulpd  xmm2, xmm2	/* xmm2=rinvtwelve */
	mulpd  xmm7, [esp + _qqO]	/* xmm7=vcoul */
	
	mulpd  xmm1, [esp + _c6]
	mulpd  xmm2, [esp + _c12]
	movapd xmm3, xmm2
	subpd  xmm3, xmm1	/* vnb=vnb12-vnb6 */		
	addpd  xmm3, [esp + _vnbtot]
	mulpd  xmm1, [esp + _six]
	mulpd  xmm2, [esp + _twelve]
	subpd  xmm2, xmm1
	addpd  xmm2, xmm7	
	mulpd  xmm4, xmm2	/* total fsO in xmm4 */

	addpd  xmm7, [esp + _vctot]
	
	movapd [esp + _vnbtot], xmm3
	movapd [esp + _vctot], xmm7

	movapd xmm0, [esp + _dxO]
	movapd xmm1, [esp + _dyO]
	movapd xmm2, [esp + _dzO]
	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4

	/* update O forces */
	movapd xmm3, [esp + _fixO]
	movapd xmm4, [esp + _fiyO]
	movapd xmm7, [esp + _fizO]
	addpd  xmm3, xmm0
	addpd  xmm4, xmm1
	addpd  xmm7, xmm2
	movapd [esp + _fixO], xmm3
	movapd [esp + _fiyO], xmm4
	movapd [esp + _fizO], xmm7
	/* update j forces with water O */
	movapd [esp + _fjx], xmm0
	movapd [esp + _fjy], xmm1
	movapd [esp + _fjz], xmm2

	/* H1 interactions */
	movapd  xmm4, xmm6	
	mulpd   xmm4, xmm4	/* xmm6=rinv, xmm4=rinvsq */
	mulpd  xmm6, [esp + _qqH]	/* xmm6=vcoul */
	mulpd  xmm4, xmm6		/* total fsH1 in xmm4 */
	
	addpd  xmm6, [esp + _vctot]

	movapd xmm0, [esp + _dxH1]
	movapd xmm1, [esp + _dyH1]
	movapd xmm2, [esp + _dzH1]
	movapd [esp + _vctot], xmm6
	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4

	/* update H1 forces */
	movapd xmm3, [esp + _fixH1]
	movapd xmm4, [esp + _fiyH1]
	movapd xmm7, [esp + _fizH1]
	addpd  xmm3, xmm0
	addpd  xmm4, xmm1
	addpd  xmm7, xmm2
	movapd [esp + _fixH1], xmm3
	movapd [esp + _fiyH1], xmm4
	movapd [esp + _fizH1], xmm7
	/* update j forces with water H1 */
	addpd  xmm0, [esp + _fjx]
	addpd  xmm1, [esp + _fjy]
	addpd  xmm2, [esp + _fjz]
	movapd [esp + _fjx], xmm0
	movapd [esp + _fjy], xmm1
	movapd [esp + _fjz], xmm2

	/* H2 interactions */
	movapd  xmm4, xmm5	
	mulpd   xmm4, xmm4	/* xmm5=rinv, xmm4=rinvsq */
	mulpd  xmm5, [esp + _qqH]	/* xmm5=vcoul */
	mulpd  xmm4, xmm5		/* total fsH1 in xmm4 */
	
	addpd  xmm5, [esp + _vctot]

	movapd xmm0, [esp + _dxH2]
	movapd xmm1, [esp + _dyH2]
	movapd xmm2, [esp + _dzH2]
	movapd [esp + _vctot], xmm5
	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4

	/* update H2 forces */
	movapd xmm3, [esp + _fixH2]
	movapd xmm4, [esp + _fiyH2]
	movapd xmm7, [esp + _fizH2]
	addpd  xmm3, xmm0
	addpd  xmm4, xmm1
	addpd  xmm7, xmm2
	movapd [esp + _fixH2], xmm3
	movapd [esp + _fiyH2], xmm4
	movapd [esp + _fizH2], xmm7

	mov edi, [ebp + _faction]
	/* update j forces */
	addpd  xmm0, [esp + _fjx]
	addpd  xmm1, [esp + _fjy]
	addpd  xmm2, [esp + _fjz]
	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	movhpd xmm3, [edi + ebx*8]
	movhpd xmm4, [edi + ebx*8 + 8]
	movhpd xmm5, [edi + ebx*8 + 16]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5
	movhpd [edi + ebx*8], xmm3
	movhpd [edi + ebx*8 + 8], xmm4
	movhpd [edi + ebx*8 + 16], xmm5
	
	/* should we do one more iteration? */
	sub   [esp + _innerk],  2
	jl    i1120_checksingle
	jmp   i1120_unroll_loop
i1120_checksingle:	
	mov   edx, [esp + _innerk]
	and   edx, 1
	jnz   i1120_dosingle
	jmp   i1120_updateouterdata
i1120_dosingle:
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]	
	add   [esp + _innerjjnr],  4	

	mov esi, [ebp + _charge]        /* base of charge[] */

	xorpd xmm3, xmm3
	movlpd xmm3, [esi + eax*8]
	movapd xmm4, xmm3
	mulpd  xmm3, [esp + _iqO]
	mulpd  xmm4, [esp + _iqH]

	movd  mm0, eax		/* use mmx registers as temp storage */

	movapd  [esp + _qqO], xmm3
	movapd  [esp + _qqH], xmm4
	
	mov esi, [ebp + _type]
	mov eax, [esi + eax*4]
	mov esi, [ebp + _nbfp]
	shl eax, 1	
	mov edi, [esp + _ntia]
	add eax, edi

	movupd xmm6, [esi + eax*8]	/* c6a c12a */
	xorpd xmm7, xmm7
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0
	movd  ebx, mm1
	movapd [esp + _c6], xmm4
	movapd [esp + _c12], xmm6
	
	mov esi, [ebp + _pos]       /* base of pos[] */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */

	/* move coordinates to xmm0-xmm2 */
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]

	/* move ixO-izO to xmm4-xmm6 */
	movapd xmm4, [esp + _ixO]
	movapd xmm5, [esp + _iyO]
	movapd xmm6, [esp + _izO]

	/* calc dr */
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	/* store dr */
	movapd [esp + _dxO], xmm4
	movapd [esp + _dyO], xmm5
	movapd [esp + _dzO], xmm6
	/* square it */
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6
	movapd xmm7, xmm4
	/* rsqO in xmm7 */

	/* move ixH1-izH1 to xmm4-xmm6 */
	movapd xmm4, [esp + _ixH1]
	movapd xmm5, [esp + _iyH1]
	movapd xmm6, [esp + _izH1]

	/* calc dr */
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	/* store dr */
	movapd [esp + _dxH1], xmm4
	movapd [esp + _dyH1], xmm5
	movapd [esp + _dzH1], xmm6
	/* square it */
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm6, xmm5
	addsd xmm6, xmm4
	/* rsqH1 in xmm6 */

	/* move ixH2-izH2 to xmm3-xmm5 */ 
	movapd xmm3, [esp + _ixH2]
	movapd xmm4, [esp + _iyH2]
	movapd xmm5, [esp + _izH2]

	/* calc dr */
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2

	/* store dr */
	movapd [esp + _dxH2], xmm3
	movapd [esp + _dyH2], xmm4
	movapd [esp + _dzH2], xmm5
	/* square it */
	mulsd xmm3,xmm3
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	addsd xmm5, xmm4
	addsd xmm5, xmm3
	/* rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 */

	/* start with rsqO - put seed in xmm2 */
	cvtsd2ss xmm2, xmm7	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulsd   xmm2, xmm7	/* rsq*lu*lu */
	subsd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulsd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulsd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm3, xmm4
	mulsd xmm4, xmm4	/* lu*lu */
	mulsd xmm7, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subsd xmm4, xmm7	/* 3-rsq*lu*lu */
	mulsd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulsd xmm4, [esp + _half] /* rinv */
	movapd  xmm7, xmm4	/* rinvO in xmm7 */
	
	/* rsqH1 - seed in xmm2 */
	cvtsd2ss xmm2, xmm6	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulsd   xmm2, xmm6	/* rsq*lu*lu */
	subsd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulsd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulsd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm3, xmm4
	mulsd xmm4, xmm4	/* lu*lu */
	mulsd xmm6, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subsd xmm4, xmm6	/* 3-rsq*lu*lu */
	mulsd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulsd xmm4, [esp + _half] /* rinv */
	movapd  xmm6, xmm4	/* rinvH1 in xmm6 */
	
	/* rsqH2 - seed in xmm2 */
	cvtsd2ss xmm2, xmm5	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulsd   xmm2, xmm5	/* rsq*lu*lu */
	subsd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulsd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulsd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm3, xmm4
	mulsd xmm4, xmm4	/* lu*lu */
	mulsd xmm5, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subsd xmm4, xmm5	/* 3-rsq*lu*lu */
	mulsd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulsd xmm4, [esp + _half] /* rinv */
	movapd  xmm5, xmm4	/* rinvH2 in xmm5 */

	/* do O interactions */
	movapd  xmm4, xmm7	
	mulsd   xmm4, xmm4	/* xmm7=rinv, xmm4=rinvsq */
	movapd xmm1, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm1, xmm4	/* xmm1=rinvsix */
	movapd xmm2, xmm1
	mulsd  xmm2, xmm2	/* xmm2=rinvtwelve */
	mulsd  xmm7, [esp + _qqO]	/* xmm7=vcoul */
	
	mulsd  xmm1, [esp + _c6]
	mulsd  xmm2, [esp + _c12]
	movapd xmm3, xmm2
	subsd  xmm3, xmm1	/* vnb=vnb12-vnb6 */		
	addsd  xmm3, [esp + _vnbtot]
	mulsd  xmm1, [esp + _six]
	mulsd  xmm2, [esp + _twelve]
	subsd  xmm2, xmm1
	addsd  xmm2, xmm7	
	mulsd  xmm4, xmm2	/* total fsO in xmm4 */

	addsd  xmm7, [esp + _vctot]
	
	movsd [esp + _vnbtot], xmm3
	movsd [esp + _vctot], xmm7

	movapd xmm0, [esp + _dxO]
	movapd xmm1, [esp + _dyO]
	movapd xmm2, [esp + _dzO]
	mulsd  xmm0, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm2, xmm4

	/* update O forces */
	movapd xmm3, [esp + _fixO]
	movapd xmm4, [esp + _fiyO]
	movapd xmm7, [esp + _fizO]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm7, xmm2
	movsd [esp + _fixO], xmm3
	movsd [esp + _fiyO], xmm4
	movsd [esp + _fizO], xmm7
	/* update j forces with water O */
	movsd [esp + _fjx], xmm0
	movsd [esp + _fjy], xmm1
	movsd [esp + _fjz], xmm2

	/* H1 interactions */
	movapd  xmm4, xmm6	
	mulsd   xmm4, xmm4	/* xmm6=rinv, xmm4=rinvsq */
	mulsd  xmm6, [esp + _qqH]	/* xmm6=vcoul */
	mulsd  xmm4, xmm6		/* total fsH1 in xmm4 */
	
	addsd  xmm6, [esp + _vctot]

	movapd xmm0, [esp + _dxH1]
	movapd xmm1, [esp + _dyH1]
	movapd xmm2, [esp + _dzH1]
	movsd [esp + _vctot], xmm6
	mulsd  xmm0, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm2, xmm4

	/* update H1 forces */
	movapd xmm3, [esp + _fixH1]
	movapd xmm4, [esp + _fiyH1]
	movapd xmm7, [esp + _fizH1]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm7, xmm2
	movsd [esp + _fixH1], xmm3
	movsd [esp + _fiyH1], xmm4
	movsd [esp + _fizH1], xmm7
	/* update j forces with water H1 */
	addsd  xmm0, [esp + _fjx]
	addsd  xmm1, [esp + _fjy]
	addsd  xmm2, [esp + _fjz]
	movsd [esp + _fjx], xmm0
	movsd [esp + _fjy], xmm1
	movsd [esp + _fjz], xmm2

	/* H2 interactions */
	movapd  xmm4, xmm5	
	mulsd   xmm4, xmm4	/* xmm5=rinv, xmm4=rinvsq */
	mulsd  xmm5, [esp + _qqH]	/* xmm5=vcoul */
	mulsd  xmm4, xmm5		/* total fsH1 in xmm4 */
	
	addsd  xmm5, [esp + _vctot]

	movapd xmm0, [esp + _dxH2]
	movapd xmm1, [esp + _dyH2]
	movapd xmm2, [esp + _dzH2]
	movsd [esp + _vctot], xmm5
	mulsd  xmm0, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm2, xmm4

	/* update H2 forces */
	movapd xmm3, [esp + _fixH2]
	movapd xmm4, [esp + _fiyH2]
	movapd xmm7, [esp + _fizH2]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm7, xmm2
	movsd [esp + _fixH2], xmm3
	movsd [esp + _fiyH2], xmm4
	movsd [esp + _fizH2], xmm7

	mov edi, [ebp + _faction]
	/* update j forces */
	addsd  xmm0, [esp + _fjx]
	addsd  xmm1, [esp + _fjy]
	addsd  xmm2, [esp + _fjz]
	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5

i1120_updateouterdata:
	mov   ecx, [esp + _ii3]
	mov   edi, [ebp + _faction]
	mov   esi, [ebp + _fshift]
	mov   edx, [esp + _is3]

	/* accumulate  Oi forces in xmm0, xmm1, xmm2 */
	movapd xmm0, [esp + _fixO]
	movapd xmm1, [esp + _fiyO]
	movapd xmm2, [esp + _fizO]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 /* sum is in low xmm0-xmm2 */

	/* increment i force */
	movsd  xmm3, [edi + ecx*8]
	movsd  xmm4, [edi + ecx*8 + 8]
	movsd  xmm5, [edi + ecx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8],     xmm3
	movsd  [edi + ecx*8 + 8], xmm4
	movsd  [edi + ecx*8 + 16], xmm5

	/* accumulate force in xmm6/xmm7 for fshift */
	movapd xmm6, xmm0
	movsd xmm7, xmm2
	unpcklpd xmm6,xmm1 

	/* accumulate H1i forces in xmm0, xmm1, xmm2 */
	movapd xmm0, [esp + _fixH1]
	movapd xmm1, [esp + _fiyH1]
	movapd xmm2, [esp + _fizH1]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 /* sum is in low xmm0-xmm2 */

	/* increment i force */
	movsd  xmm3, [edi + ecx*8 + 24]
	movsd  xmm4, [edi + ecx*8 + 32]
	movsd  xmm5, [edi + ecx*8 + 40]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8 + 24], xmm3
	movsd  [edi + ecx*8 + 32], xmm4
	movsd  [edi + ecx*8 + 40], xmm5

	/* accumulate force in xmm6/xmm7 for fshift */
	addsd xmm7, xmm2
	unpcklpd xmm0, xmm1
	addpd xmm6, xmm0

	/* accumulate H2i forces in xmm0, xmm1, xmm2 */
	movapd xmm0, [esp + _fixH2]
	movapd xmm1, [esp + _fiyH2]
	movapd xmm2, [esp + _fizH2]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 /* sum is in low xmm0-xmm2 */

	/* increment i force */
	movsd  xmm3, [edi + ecx*8 + 48]
	movsd  xmm4, [edi + ecx*8 + 56]
	movsd  xmm5, [edi + ecx*8 + 64]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8 + 48], xmm3
	movsd  [edi + ecx*8 + 56], xmm4
	movsd  [edi + ecx*8 + 64], xmm5

	/* accumulate force in xmm6/xmm7 for fshift */
	addsd xmm7, xmm2
	unpcklpd xmm0, xmm1
	addpd xmm6, xmm0

	/* increment fshift force */
	movupd xmm3, [esi + edx*8]
	movsd  xmm4, [esi + edx*8 + 16]
	addpd  xmm3, xmm6
	addsd  xmm4, xmm7
	movupd [esi + edx*8],    xmm3
	movsd  [esi + edx*8 + 16], xmm4

	mov   edx, [ebp + _gid]  
	mov   edx, [edx]
	add   [ebp + _gid],  4	

	/* accumulate total potential energy and update it */
	movapd xmm7, [esp + _vctot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */
        
	/* add earlier value from mem */
	mov   eax, [ebp + _Vc]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* accumulate total lj energy and update it */
	movapd xmm7, [esp + _vnbtot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */

	/* add earlier value from mem */
	mov   eax, [ebp + _Vnb]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* finish if last */
	mov   ecx, [ebp + _nri]
	dec ecx
	jecxz i1120_end
	/* not last, iterate once more! */ 
	mov [ebp + _nri], ecx
	jmp i1120_outer
i1120_end:
	emms
	mov eax, [esp + _salign]
	add esp, eax
	add esp, 696
	pop edi
	pop esi
        pop edx
        pop ecx
        pop ebx
        pop eax
	leave
	ret


	
.globl inl1130_sse2
	.type inl1130_sse2,@function
inl1130_sse2:	
.equ		_nri,		8
.equ		_iinr,		12
.equ		_jindex,	16
.equ		_jjnr,		20
.equ		_shift,		24
.equ		_shiftvec,	28
.equ		_fshift,	32
.equ		_gid,		36
.equ		_pos,		40		
.equ		_faction,	44
.equ		_charge,	48
.equ		_facel,		52 /* double */ 
.equ		_Vc,		60			
.equ		_type,		64
.equ		_ntype,		68
.equ		_nbfp,		72
.equ		_Vnb,		76
	/* stack offsets for local variables */ 
	/* bottom of stack is cache-aligned for sse2 use */
.equ		_ixO,		0
.equ		_iyO,		16
.equ		_izO,		32
.equ		_ixH1,		48
.equ		_iyH1,		64
.equ		_izH1,		80
.equ		_ixH2,		96
.equ		_iyH2,		112
.equ		_izH2,		128
.equ		_jxO,		144
.equ		_jyO,		160
.equ		_jzO,		176
.equ		_jxH1,		192
.equ		_jyH1,		208
.equ		_jzH1,		224
.equ		_jxH2,		240
.equ		_jyH2,		256
.equ		_jzH2,		272
.equ		_dxOO,		288
.equ		_dyOO,		304
.equ		_dzOO,		320	
.equ		_dxOH1,		336
.equ		_dyOH1,		352
.equ		_dzOH1,		368	
.equ		_dxOH2,		384
.equ		_dyOH2,		400
.equ		_dzOH2,		416	
.equ		_dxH1O,		432
.equ		_dyH1O,		448
.equ		_dzH1O,		464	
.equ		_dxH1H1,	480
.equ		_dyH1H1,	496
.equ		_dzH1H1,	512	
.equ		_dxH1H2,	528
.equ		_dyH1H2,	544
.equ		_dzH1H2,	560	
.equ		_dxH2O,		576
.equ		_dyH2O,		592
.equ		_dzH2O,		608	
.equ		_dxH2H1,	624
.equ		_dyH2H1,	640
.equ		_dzH2H1,	656	
.equ		_dxH2H2,	672
.equ		_dyH2H2,	688
.equ		_dzH2H2,	704
.equ		_qqOO,		720
.equ		_qqOH,		736
.equ		_qqHH,		752
.equ		_c6,		768
.equ		_c12,		784
.equ		_six,		800
.equ		_twelve,	816		 
.equ		_vctot,		832
.equ		_vnbtot,	848
.equ		_fixO,		864
.equ		_fiyO,		880
.equ		_fizO,		896
.equ		_fixH1,		912
.equ		_fiyH1,		928
.equ		_fizH1,		944
.equ		_fixH2,		960
.equ		_fiyH2,		976
.equ		_fizH2,		992
.equ		_fjxO,		1008
.equ		_fjyO,		1024
.equ		_fjzO,		1040
.equ		_fjxH1,		1056
.equ		_fjyH1,		1072
.equ		_fjzH1,		1088
.equ		_fjxH2,		1104
.equ		_fjyH2,		1120
.equ		_fjzH2,		1136
.equ		_half,		1152
.equ		_three,		1168
.equ		_rsqOO,		1184
.equ		_rsqOH1,	1200
.equ		_rsqOH2,	1216
.equ		_rsqH1O,	1232
.equ		_rsqH1H1,	1248
.equ		_rsqH1H2,	1264
.equ		_rsqH2O,	1280
.equ		_rsqH2H1,	1296
.equ		_rsqH2H2,	1312
.equ		_rinvOO,	1328
.equ		_rinvOH1,	1344
.equ		_rinvOH2,	1360
.equ		_rinvH1O,	1376
.equ		_rinvH1H1,	1392
.equ		_rinvH1H2,	1408
.equ		_rinvH2O,	1424
.equ		_rinvH2H1,	1440
.equ		_rinvH2H2,	1456
.equ		_is3,		1472
.equ		_ii3,		1476
.equ		_innerjjnr,	1480
.equ		_innerk,	1484
.equ		_salign,	1488
	push ebp
	mov ebp,esp	
        push eax
        push ebx
        push ecx
        push edx
	push esi
	push edi
	sub esp, 1492		/* local stack space */
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + _salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_three]
	movupd xmm2, [sse2_six]
	movupd xmm3, [sse2_twelve]
	movapd [esp + _half],  xmm0
	movapd [esp + _three], xmm1
	movapd [esp + _six],  xmm2
	movapd [esp + _twelve], xmm3

	/* assume we have at least one i particle - start directly */
	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	mov   ebx, [ecx]	        /* ebx =ii */

	mov   edx, [ebp + _charge]
	movsd xmm3, [edx + ebx*8]	
	movsd xmm4, xmm3	
	movsd xmm5, [edx + ebx*8 + 8]	
	movsd xmm6, [ebp + _facel]
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm5
	mulsd  xmm5, xmm5
	mulsd  xmm3, xmm6
	mulsd  xmm4, xmm6
	mulsd  xmm5, xmm6
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _qqOO], xmm3
	movapd [esp + _qqOH], xmm4
	movapd [esp + _qqHH], xmm5
		
	xorpd xmm0, xmm0
	mov   edx, [ebp + _type]
	mov   ecx, [edx + ebx*4]
	shl   ecx, 1
	mov   edx, ecx
	imul  ecx, [ebp + _ntype]      /* ecx = ntia = 2*ntype*type[ii0] */
	add   edx, ecx
	mov   eax, [ebp + _nbfp]
	movupd xmm0, [eax + edx*8]
	movhlps xmm1, xmm0
	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0	
	movapd [esp + _c6], xmm0
	movapd [esp + _c12], xmm1

i1130_outer:
	mov   eax, [ebp + _shift]      /* eax = pointer into shift[] */
	mov   ebx, [eax]		/* ebx=shift[n] */
	add   [ebp + _shift],  4  /* advance pointer one step */
	
	lea   ebx, [ebx + ebx*2]        /* ebx=3*is */
	mov   [esp + _is3],ebx    	/* store is3 */

	mov   eax, [ebp + _shiftvec]   /* eax = base of shiftvec[] */

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	add   [ebp + _iinr],  4   /* advance pointer */
	mov   ebx, [ecx]	        /* ebx =ii */

	lea   ebx, [ebx + ebx*2]	/* ebx = 3*ii=ii3 */
	mov   eax, [ebp + _pos]        /* eax = base of pos[] */ 
	mov   [esp + _ii3], ebx	
	
	movapd xmm3, xmm0
	movapd xmm4, xmm1
	movapd xmm5, xmm2
	addsd xmm3, [eax + ebx*8]
	addsd xmm4, [eax + ebx*8 + 8]
	addsd xmm5, [eax + ebx*8 + 16]		
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _ixO], xmm3
	movapd [esp + _iyO], xmm4
	movapd [esp + _izO], xmm5

	movsd xmm3, xmm0
	movsd xmm4, xmm1
	movsd xmm5, xmm2
	addsd xmm0, [eax + ebx*8 + 24]
	addsd xmm1, [eax + ebx*8 + 32]
	addsd xmm2, [eax + ebx*8 + 40]		
	addsd xmm3, [eax + ebx*8 + 48]
	addsd xmm4, [eax + ebx*8 + 56]
	addsd xmm5, [eax + ebx*8 + 64]		

	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _ixH1], xmm0
	movapd [esp + _iyH1], xmm1
	movapd [esp + _izH1], xmm2
	movapd [esp + _ixH2], xmm3
	movapd [esp + _iyH2], xmm4
	movapd [esp + _izH2], xmm5

	/* clear vctot and i forces */
	xorpd xmm4, xmm4
	movapd [esp + _vctot], xmm4
	movapd [esp + _vnbtot], xmm4
	movapd [esp + _fixO], xmm4
	movapd [esp + _fiyO], xmm4
	movapd [esp + _fizO], xmm4
	movapd [esp + _fixH1], xmm4
	movapd [esp + _fiyH1], xmm4
	movapd [esp + _fizH1], xmm4
	movapd [esp + _fixH2], xmm4
	movapd [esp + _fiyH2], xmm4
	movapd [esp + _fizH2], xmm4
	
	mov   eax, [ebp + _jindex]
	mov   ecx, [eax]	         /* jindex[n] */
	mov   edx, [eax + 4]	         /* jindex[n+1] */
	add   [ebp + _jindex],  4
	sub   edx, ecx                   /* number of innerloop atoms */

	mov   esi, [ebp + _pos]
	mov   edi, [ebp + _faction]	
	mov   eax, [ebp + _jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + _innerjjnr], eax     /* pointer to jjnr[nj0] */
	sub   edx,  2
	mov   [esp + _innerk], edx        /* number of innerloop atoms */
	jge   i1130_unroll_loop
	jmp   i1130_checksingle
i1130_unroll_loop:
	/* twice unrolled innerloop here */
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]	
	mov   ebx, [edx + 4] 
	
	add   [esp + _innerjjnr],  8	/* advance pointer (unrolled 2) */

	mov esi, [ebp + _pos]       /* base of pos[] */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */
	lea   ebx, [ebx + ebx*2]	
	
	/* move j coordinates to local temp variables */
	movlpd xmm2, [esi + eax*8]
	movlpd xmm3, [esi + eax*8 + 8]
	movlpd xmm4, [esi + eax*8 + 16]
	movlpd xmm5, [esi + eax*8 + 24]
	movlpd xmm6, [esi + eax*8 + 32]
	movlpd xmm7, [esi + eax*8 + 40]
	movhpd xmm2, [esi + ebx*8]
	movhpd xmm3, [esi + ebx*8 + 8]
	movhpd xmm4, [esi + ebx*8 + 16]
	movhpd xmm5, [esi + ebx*8 + 24]
	movhpd xmm6, [esi + ebx*8 + 32]
	movhpd xmm7, [esi + ebx*8 + 40]
	movapd 	[esp + _jxO], xmm2
	movapd 	[esp + _jyO], xmm3
	movapd 	[esp + _jzO], xmm4
	movapd 	[esp + _jxH1], xmm5
	movapd 	[esp + _jyH1], xmm6
	movapd 	[esp + _jzH1], xmm7
	movlpd xmm2, [esi + eax*8 + 48]
	movlpd xmm3, [esi + eax*8 + 56]
	movlpd xmm4, [esi + eax*8 + 64]
	movhpd xmm2, [esi + ebx*8 + 48]
	movhpd xmm3, [esi + ebx*8 + 56]
	movhpd xmm4, [esi + ebx*8 + 64]
	movapd 	[esp + _jxH2], xmm2
	movapd 	[esp + _jyH2], xmm3
	movapd 	[esp + _jzH2], xmm4
	
	movapd xmm0, [esp + _ixO]
	movapd xmm1, [esp + _iyO]
	movapd xmm2, [esp + _izO]
	movapd xmm3, [esp + _ixO]
	movapd xmm4, [esp + _iyO]
	movapd xmm5, [esp + _izO]
	subpd  xmm0, [esp + _jxO]
	subpd  xmm1, [esp + _jyO]
	subpd  xmm2, [esp + _jzO]
	subpd  xmm3, [esp + _jxH1]
	subpd  xmm4, [esp + _jyH1]
	subpd  xmm5, [esp + _jzH1]
	movapd [esp + _dxOO], xmm0
	movapd [esp + _dyOO], xmm1
	movapd [esp + _dzOO], xmm2
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	movapd [esp + _dxOH1], xmm3
	movapd [esp + _dyOH1], xmm4
	movapd [esp + _dzOH1], xmm5
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + _rsqOO], xmm0
	movapd [esp + _rsqOH1], xmm3

	movapd xmm0, [esp + _ixO]
	movapd xmm1, [esp + _iyO]
	movapd xmm2, [esp + _izO]
	movapd xmm3, [esp + _ixH1]
	movapd xmm4, [esp + _iyH1]
	movapd xmm5, [esp + _izH1]
	subpd  xmm0, [esp + _jxH2]
	subpd  xmm1, [esp + _jyH2]
	subpd  xmm2, [esp + _jzH2]
	subpd  xmm3, [esp + _jxO]
	subpd  xmm4, [esp + _jyO]
	subpd  xmm5, [esp + _jzO]
	movapd [esp + _dxOH2], xmm0
	movapd [esp + _dyOH2], xmm1
	movapd [esp + _dzOH2], xmm2
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	movapd [esp + _dxH1O], xmm3
	movapd [esp + _dyH1O], xmm4
	movapd [esp + _dzH1O], xmm5
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + _rsqOH2], xmm0
	movapd [esp + _rsqH1O], xmm3

	movapd xmm0, [esp + _ixH1]
	movapd xmm1, [esp + _iyH1]
	movapd xmm2, [esp + _izH1]
	movapd xmm3, [esp + _ixH1]
	movapd xmm4, [esp + _iyH1]
	movapd xmm5, [esp + _izH1]
	subpd  xmm0, [esp + _jxH1]
	subpd  xmm1, [esp + _jyH1]
	subpd  xmm2, [esp + _jzH1]
	subpd  xmm3, [esp + _jxH2]
	subpd  xmm4, [esp + _jyH2]
	subpd  xmm5, [esp + _jzH2]
	movapd [esp + _dxH1H1], xmm0
	movapd [esp + _dyH1H1], xmm1
	movapd [esp + _dzH1H1], xmm2
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	movapd [esp + _dxH1H2], xmm3
	movapd [esp + _dyH1H2], xmm4
	movapd [esp + _dzH1H2], xmm5
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + _rsqH1H1], xmm0
	movapd [esp + _rsqH1H2], xmm3

	movapd xmm0, [esp + _ixH2]
	movapd xmm1, [esp + _iyH2]
	movapd xmm2, [esp + _izH2]
	movapd xmm3, [esp + _ixH2]
	movapd xmm4, [esp + _iyH2]
	movapd xmm5, [esp + _izH2]
	subpd  xmm0, [esp + _jxO]
	subpd  xmm1, [esp + _jyO]
	subpd  xmm2, [esp + _jzO]
	subpd  xmm3, [esp + _jxH1]
	subpd  xmm4, [esp + _jyH1]
	subpd  xmm5, [esp + _jzH1]
	movapd [esp + _dxH2O], xmm0
	movapd [esp + _dyH2O], xmm1
	movapd [esp + _dzH2O], xmm2
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	movapd [esp + _dxH2H1], xmm3
	movapd [esp + _dyH2H1], xmm4
	movapd [esp + _dzH2H1], xmm5
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm4, xmm3
	addpd  xmm4, xmm5
	movapd [esp + _rsqH2O], xmm0
	movapd [esp + _rsqH2H1], xmm4

	movapd xmm0, [esp + _ixH2]
	movapd xmm1, [esp + _iyH2]
	movapd xmm2, [esp + _izH2]
	subpd  xmm0, [esp + _jxH2]
	subpd  xmm1, [esp + _jyH2]
	subpd  xmm2, [esp + _jzH2]
	movapd [esp + _dxH2H2], xmm0
	movapd [esp + _dyH2H2], xmm1
	movapd [esp + _dzH2H2], xmm2
	mulpd xmm0, xmm0
	mulpd xmm1, xmm1
	mulpd xmm2, xmm2
	addpd xmm0, xmm1
	addpd xmm0, xmm2
	movapd [esp + _rsqH2H2], xmm0
		
	/* start doing invsqrt use rsq values in xmm0, xmm4 */
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulpd   xmm1, xmm1	/* luA*luA */
	mulpd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	mulpd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subpd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm3, [esp + _half] /* iter1 */
	mulpd   xmm7, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulpd   xmm3, xmm3	/* luA*luA */
	mulpd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	mulpd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subpd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm1, [esp + _half] /* rinv */
	mulpd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvH2H2], xmm1
	movapd [esp + _rinvH2H1], xmm5

	movapd xmm0, [esp + _rsqOO]
	movapd xmm4, [esp + _rsqOH1]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulpd   xmm1, xmm1	/* luA*luA */
	mulpd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	mulpd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subpd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm3, [esp + _half] /* iter1 of  */
	mulpd   xmm7, [esp + _half] /* iter1 of  */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulpd   xmm3, xmm3	/* luA*luA */
	mulpd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	mulpd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subpd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm1, [esp + _half] /* rinv */
	mulpd   xmm5, [esp + _half] /* rinv*/
	movapd [esp + _rinvOO], xmm1
	movapd [esp + _rinvOH1], xmm5

	movapd xmm0, [esp + _rsqOH2]
	movapd xmm4, [esp + _rsqH1O]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulpd   xmm1, xmm1	/* luA*luA */
	mulpd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	mulpd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subpd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm3, [esp + _half] /* iter1 */
	mulpd   xmm7, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulpd   xmm3, xmm3	/* luA*luA */
	mulpd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	mulpd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subpd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm1, [esp + _half] /* rinv */
	mulpd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvOH2], xmm1
	movapd [esp + _rinvH1O], xmm5

	movapd xmm0, [esp + _rsqH1H1]
	movapd xmm4, [esp + _rsqH1H2]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulpd   xmm1, xmm1	/* luA*luA */
	mulpd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	mulpd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subpd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm3, [esp + _half] /* iter1a */
	mulpd   xmm7, [esp + _half] /* iter1b */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulpd   xmm3, xmm3	/* luA*luA */
	mulpd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	mulpd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subpd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm1, [esp + _half] /* rinv */
	mulpd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvH1H1], xmm1
	movapd [esp + _rinvH1H2], xmm5

	movapd xmm0, [esp + _rsqH2O]
	cvtpd2ps xmm1, xmm0	
	rsqrtps xmm1, xmm1
	cvtps2pd xmm1, xmm1
	
	movapd  xmm2, xmm1	/* copy of luA */
	mulpd   xmm1, xmm1	/* luA*luA */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm3, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	mulpd   xmm3, xmm3	/* luA*luA */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm1, [esp + _half] /* rinv */
	movapd [esp + _rinvH2O], xmm1

	/* start with OO interaction */
	movapd xmm0, [esp + _rinvOO]
	movapd xmm7, xmm0
	mulpd  xmm0, xmm0
	movapd xmm1, xmm0
	mulpd  xmm1, xmm0
	mulpd  xmm1, xmm0	/* xmm1=rinvsix */
	mulpd  xmm7, [esp + _qqOO]
	movapd xmm2, xmm1
	mulpd  xmm2, xmm2	/* xmm2=rinvtwelve */
	mulpd  xmm1, [esp + _c6]	
	mulpd  xmm2, [esp + _c12]	
	movapd xmm3, xmm2
	subpd  xmm3, xmm1	/* xmm3=vnb12-vnb6 */
	addpd  xmm3, [esp + _vnbtot]
	mulpd  xmm1, [esp + _six]
	mulpd  xmm2, [esp + _twelve]
	movapd [esp + _vnbtot], xmm3
	subpd  xmm2, xmm1
	addpd  xmm2, xmm7
	addpd  xmm7, [esp + _vctot]
	mulpd  xmm0, xmm2	
 
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulpd xmm0, [esp + _dxOO]
	mulpd xmm1, [esp + _dyOO]
	mulpd xmm2, [esp + _dzOO]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixO]
	addpd xmm1, [esp + _fiyO]
	addpd xmm2, [esp + _fizO]
	movapd [esp + _fjxO], xmm3
	movapd [esp + _fjyO], xmm4
	movapd [esp + _fjzO], xmm5
	movapd [esp + _fixO], xmm0
	movapd [esp + _fiyO], xmm1
	movapd [esp + _fizO], xmm2

	/* O-H1 interaction */
	movapd xmm0, [esp + _rinvOH1]
	movapd xmm1, xmm0
	mulpd xmm0, xmm0
	mulpd xmm1, [esp + _qqOH]
	mulpd xmm0, xmm1	/* fsOH1  */
	addpd xmm7, xmm1	/* add to local vctot */
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	
	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulpd xmm0, [esp + _dxOH1]
	mulpd xmm1, [esp + _dyOH1]
	mulpd xmm2, [esp + _dzOH1]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixO]
	addpd xmm1, [esp + _fiyO]
	addpd xmm2, [esp + _fizO]
	movapd [esp + _fjxH1], xmm3
	movapd [esp + _fjyH1], xmm4
	movapd [esp + _fjzH1], xmm5
	movapd [esp + _fixO], xmm0
	movapd [esp + _fiyO], xmm1
	movapd [esp + _fizO], xmm2

	/* O-H2 interaction */ 
	movapd xmm0, [esp + _rinvOH2]
	movapd xmm1, xmm0
	mulpd xmm0, xmm0
	mulpd xmm1, [esp + _qqOH]
	mulpd xmm0, xmm1	/* fsOH2 */ 
	addpd xmm7, xmm1	/* add to local vctot */
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	
	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulpd xmm0, [esp + _dxOH2]
	mulpd xmm1, [esp + _dyOH2]
	mulpd xmm2, [esp + _dzOH2]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixO]
	addpd xmm1, [esp + _fiyO]
	addpd xmm2, [esp + _fizO]
	movapd [esp + _fjxH2], xmm3
	movapd [esp + _fjyH2], xmm4
	movapd [esp + _fjzH2], xmm5
	movapd [esp + _fixO], xmm0
	movapd [esp + _fiyO], xmm1
	movapd [esp + _fizO], xmm2

	/* H1-O interaction */
	movapd xmm0, [esp + _rinvH1O]
	movapd xmm1, xmm0
	mulpd xmm0, xmm0
	mulpd xmm1, [esp + _qqOH]
	mulpd xmm0, xmm1	/* fsH1O */
	addpd xmm7, xmm1	/* add to local vctot */
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	movapd xmm3, [esp + _fjxO]
	movapd xmm4, [esp + _fjyO]
	movapd xmm5, [esp + _fjzO]
	mulpd xmm0, [esp + _dxH1O]
	mulpd xmm1, [esp + _dyH1O]
	mulpd xmm2, [esp + _dzH1O]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixH1]
	addpd xmm1, [esp + _fiyH1]
	addpd xmm2, [esp + _fizH1]
	movapd [esp + _fjxO], xmm3
	movapd [esp + _fjyO], xmm4
	movapd [esp + _fjzO], xmm5
	movapd [esp + _fixH1], xmm0
	movapd [esp + _fiyH1], xmm1
	movapd [esp + _fizH1], xmm2

	/* H1-H1 interaction */
	movapd xmm0, [esp + _rinvH1H1]
	movapd xmm1, xmm0
	mulpd xmm0, xmm0
	mulpd xmm1, [esp + _qqHH]
	mulpd xmm0, xmm1	/* fsH1H1 */
	addpd xmm7, xmm1	/* add to local vctot */
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	movapd xmm3, [esp + _fjxH1]
	movapd xmm4, [esp + _fjyH1]
	movapd xmm5, [esp + _fjzH1]
	mulpd xmm0, [esp + _dxH1H1]
	mulpd xmm1, [esp + _dyH1H1]
	mulpd xmm2, [esp + _dzH1H1]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixH1]
	addpd xmm1, [esp + _fiyH1]
	addpd xmm2, [esp + _fizH1]
	movapd [esp + _fjxH1], xmm3
	movapd [esp + _fjyH1], xmm4
	movapd [esp + _fjzH1], xmm5
	movapd [esp + _fixH1], xmm0
	movapd [esp + _fiyH1], xmm1
	movapd [esp + _fizH1], xmm2

	/* H1-H2 interaction */
	movapd xmm0, [esp + _rinvH1H2]
	movapd xmm1, xmm0
	mulpd xmm0, xmm0
	mulpd xmm1, [esp + _qqHH]
	mulpd xmm0, xmm1	/* fsOH2 */ 
	addpd xmm7, xmm1	/* add to local vctot */
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	movapd xmm3, [esp + _fjxH2]
	movapd xmm4, [esp + _fjyH2]
	movapd xmm5, [esp + _fjzH2]
	mulpd xmm0, [esp + _dxH1H2]
	mulpd xmm1, [esp + _dyH1H2]
	mulpd xmm2, [esp + _dzH1H2]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixH1]
	addpd xmm1, [esp + _fiyH1]
	addpd xmm2, [esp + _fizH1]
	movapd [esp + _fjxH2], xmm3
	movapd [esp + _fjyH2], xmm4
	movapd [esp + _fjzH2], xmm5
	movapd [esp + _fixH1], xmm0
	movapd [esp + _fiyH1], xmm1
	movapd [esp + _fizH1], xmm2

	/* H2-O interaction */
	movapd xmm0, [esp + _rinvH2O]
	movapd xmm1, xmm0
	mulpd xmm0, xmm0
	mulpd xmm1, [esp + _qqOH]
	mulpd xmm0, xmm1	/* fsH2O */
	addpd xmm7, xmm1	/* add to local vctot */
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	movapd xmm3, [esp + _fjxO]
	movapd xmm4, [esp + _fjyO]
	movapd xmm5, [esp + _fjzO]
	mulpd xmm0, [esp + _dxH2O]
	mulpd xmm1, [esp + _dyH2O]
	mulpd xmm2, [esp + _dzH2O]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixH2]
	addpd xmm1, [esp + _fiyH2]
	addpd xmm2, [esp + _fizH2]
	movapd [esp + _fjxO], xmm3
	movapd [esp + _fjyO], xmm4
	movapd [esp + _fjzO], xmm5
	movapd [esp + _fixH2], xmm0
	movapd [esp + _fiyH2], xmm1
	movapd [esp + _fizH2], xmm2

	/* H2-H1 interaction */
	movapd xmm0, [esp + _rinvH2H1]
	movapd xmm1, xmm0
	mulpd xmm0, xmm0
	mulpd xmm1, [esp + _qqHH]
	mulpd xmm0, xmm1	/* fsH2H1 */
	addpd xmm7, xmm1	/* add to local vctot */
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	movapd xmm3, [esp + _fjxH1]
	movapd xmm4, [esp + _fjyH1]
	movapd xmm5, [esp + _fjzH1]
	mulpd xmm0, [esp + _dxH2H1]
	mulpd xmm1, [esp + _dyH2H1]
	mulpd xmm2, [esp + _dzH2H1]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixH2]
	addpd xmm1, [esp + _fiyH2]
	addpd xmm2, [esp + _fizH2]
	movapd [esp + _fjxH1], xmm3
	movapd [esp + _fjyH1], xmm4
	movapd [esp + _fjzH1], xmm5
	movapd [esp + _fixH2], xmm0
	movapd [esp + _fiyH2], xmm1
	movapd [esp + _fizH2], xmm2

	/* H2-H2 interaction */
	movapd xmm0, [esp + _rinvH2H2]
	movapd xmm1, xmm0
	mulpd xmm0, xmm0
	mulpd xmm1, [esp + _qqHH]
	mulpd xmm0, xmm1	/* fsH2H2 */
	addpd xmm7, xmm1	/* add to local vctot */
	movapd xmm1, xmm0
	movapd [esp + _vctot], xmm7
	movapd xmm2, xmm0
	movapd xmm3, [esp + _fjxH2]
	movapd xmm4, [esp + _fjyH2]
	movapd xmm5, [esp + _fjzH2]
	mulpd xmm0, [esp + _dxH2H2]
	mulpd xmm1, [esp + _dyH2H2]
	mulpd xmm2, [esp + _dzH2H2]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixH2]
	addpd xmm1, [esp + _fiyH2]
	addpd xmm2, [esp + _fizH2]
	movapd [esp + _fjxH2], xmm3
	movapd [esp + _fjyH2], xmm4
	movapd [esp + _fjzH2], xmm5
	movapd [esp + _fixH2], xmm0
	movapd [esp + _fiyH2], xmm1
	movapd [esp + _fizH2], xmm2

	mov edi, [ebp + _faction]
		
	/* Did all interactions - now update j forces */
	movlpd xmm0, [edi + eax*8]
	movlpd xmm1, [edi + eax*8 + 8]
	movlpd xmm2, [edi + eax*8 + 16]
	movlpd xmm3, [edi + eax*8 + 24]
	movlpd xmm4, [edi + eax*8 + 32]
	movlpd xmm5, [edi + eax*8 + 40]
	movlpd xmm6, [edi + eax*8 + 48]
	movlpd xmm7, [edi + eax*8 + 56]
	movhpd xmm0, [edi + ebx*8]
	movhpd xmm1, [edi + ebx*8 + 8]
	movhpd xmm2, [edi + ebx*8 + 16]
	movhpd xmm3, [edi + ebx*8 + 24]
	movhpd xmm4, [edi + ebx*8 + 32]
	movhpd xmm5, [edi + ebx*8 + 40]
	movhpd xmm6, [edi + ebx*8 + 48]
	movhpd xmm7, [edi + ebx*8 + 56]
	addpd xmm0, [esp + _fjxO]
	addpd xmm1, [esp + _fjyO]
	addpd xmm2, [esp + _fjzO]
	addpd xmm3, [esp + _fjxH1]
	addpd xmm4, [esp + _fjyH1]
	addpd xmm5, [esp + _fjzH1]
	addpd xmm6, [esp + _fjxH2]
	addpd xmm7, [esp + _fjyH2]
	movlpd [edi + eax*8], xmm0
	movlpd [edi + eax*8 + 8], xmm1
	movlpd [edi + eax*8 + 16], xmm2
	movlpd [edi + eax*8 + 24], xmm3
	movlpd [edi + eax*8 + 32], xmm4
	movlpd [edi + eax*8 + 40], xmm5
	movlpd [edi + eax*8 + 48], xmm6
	movlpd [edi + eax*8 + 56], xmm7
	movhpd [edi + ebx*8], xmm0
	movhpd [edi + ebx*8 + 8], xmm1
	movhpd [edi + ebx*8 + 16], xmm2
	movhpd [edi + ebx*8 + 24], xmm3
	movhpd [edi + ebx*8 + 32], xmm4
	movhpd [edi + ebx*8 + 40], xmm5
	movhpd [edi + ebx*8 + 48], xmm6
	movhpd [edi + ebx*8 + 56], xmm7

	movlpd xmm0, [edi + eax*8 + 64]
	movhpd xmm0, [edi + ebx*8 + 64]
	addpd xmm0, [esp + _fjzH2]
	movlpd [edi + eax*8 + 64], xmm0
	movhpd [edi + ebx*8 + 64], xmm0
	
	/* should we do one more iteration? */
	sub   [esp + _innerk],  2
	jl    i1130_checksingle
	jmp   i1130_unroll_loop
i1130_checksingle:
	mov   edx, [esp + _innerk]
	and   edx, 1
	jnz   i1130_dosingle
	jmp   i1130_updateouterdata
i1130_dosingle:
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]	
	add   [esp + _innerjjnr],  4	

	mov esi, [ebp + _pos]
	lea   eax, [eax + eax*2]  

	/* fetch j coordinates */
	movlpd xmm2, [esi + eax*8]
	movlpd xmm3, [esi + eax*8 + 8]
	movlpd xmm4, [esi + eax*8 + 16]
	movlpd xmm5, [esi + eax*8 + 24]
	movlpd xmm6, [esi + eax*8 + 32]
	movlpd xmm7, [esi + eax*8 + 40]
	movapd 	[esp + _jxO], xmm2
	movapd 	[esp + _jyO], xmm3
	movapd 	[esp + _jzO], xmm4
	movapd 	[esp + _jxH1], xmm5
	movapd 	[esp + _jyH1], xmm6
	movapd 	[esp + _jzH1], xmm7
	movlpd xmm2, [esi + eax*8 + 48]
	movlpd xmm3, [esi + eax*8 + 56]
	movlpd xmm4, [esi + eax*8 + 64]
	movapd 	[esp + _jxH2], xmm2
	movapd 	[esp + _jyH2], xmm3
	movapd 	[esp + _jzH2], xmm4
	
	movapd xmm0, [esp + _ixO]
	movapd xmm1, [esp + _iyO]
	movapd xmm2, [esp + _izO]
	movapd xmm3, [esp + _ixO]
	movapd xmm4, [esp + _iyO]
	movapd xmm5, [esp + _izO]
	subsd  xmm0, [esp + _jxO]
	subsd  xmm1, [esp + _jyO]
	subsd  xmm2, [esp + _jzO]
	subsd  xmm3, [esp + _jxH1]
	subsd  xmm4, [esp + _jyH1]
	subsd  xmm5, [esp + _jzH1]
	movapd [esp + _dxOO], xmm0
	movapd [esp + _dyOO], xmm1
	movapd [esp + _dzOO], xmm2
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	movapd [esp + _dxOH1], xmm3
	movapd [esp + _dyOH1], xmm4
	movapd [esp + _dzOH1], xmm5
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + _rsqOO], xmm0
	movapd [esp + _rsqOH1], xmm3

	movapd xmm0, [esp + _ixO]
	movapd xmm1, [esp + _iyO]
	movapd xmm2, [esp + _izO]
	movapd xmm3, [esp + _ixH1]
	movapd xmm4, [esp + _iyH1]
	movapd xmm5, [esp + _izH1]
	subsd  xmm0, [esp + _jxH2]
	subsd  xmm1, [esp + _jyH2]
	subsd  xmm2, [esp + _jzH2]
	subsd  xmm3, [esp + _jxO]
	subsd  xmm4, [esp + _jyO]
	subsd  xmm5, [esp + _jzO]
	movapd [esp + _dxOH2], xmm0
	movapd [esp + _dyOH2], xmm1
	movapd [esp + _dzOH2], xmm2
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	movapd [esp + _dxH1O], xmm3
	movapd [esp + _dyH1O], xmm4
	movapd [esp + _dzH1O], xmm5
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + _rsqOH2], xmm0
	movapd [esp + _rsqH1O], xmm3

	movapd xmm0, [esp + _ixH1]
	movapd xmm1, [esp + _iyH1]
	movapd xmm2, [esp + _izH1]
	movapd xmm3, [esp + _ixH1]
	movapd xmm4, [esp + _iyH1]
	movapd xmm5, [esp + _izH1]
	subsd  xmm0, [esp + _jxH1]
	subsd  xmm1, [esp + _jyH1]
	subsd  xmm2, [esp + _jzH1]
	subsd  xmm3, [esp + _jxH2]
	subsd  xmm4, [esp + _jyH2]
	subsd  xmm5, [esp + _jzH2]
	movapd [esp + _dxH1H1], xmm0
	movapd [esp + _dyH1H1], xmm1
	movapd [esp + _dzH1H1], xmm2
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	movapd [esp + _dxH1H2], xmm3
	movapd [esp + _dyH1H2], xmm4
	movapd [esp + _dzH1H2], xmm5
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + _rsqH1H1], xmm0
	movapd [esp + _rsqH1H2], xmm3

	movapd xmm0, [esp + _ixH2]
	movapd xmm1, [esp + _iyH2]
	movapd xmm2, [esp + _izH2]
	movapd xmm3, [esp + _ixH2]
	movapd xmm4, [esp + _iyH2]
	movapd xmm5, [esp + _izH2]
	subsd  xmm0, [esp + _jxO]
	subsd  xmm1, [esp + _jyO]
	subsd  xmm2, [esp + _jzO]
	subsd  xmm3, [esp + _jxH1]
	subsd  xmm4, [esp + _jyH1]
	subsd  xmm5, [esp + _jzH1]
	movapd [esp + _dxH2O], xmm0
	movapd [esp + _dyH2O], xmm1
	movapd [esp + _dzH2O], xmm2
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	movapd [esp + _dxH2H1], xmm3
	movapd [esp + _dyH2H1], xmm4
	movapd [esp + _dzH2H1], xmm5
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm4, xmm3
	addsd  xmm4, xmm5
	movapd [esp + _rsqH2O], xmm0
	movapd [esp + _rsqH2H1], xmm4

	movapd xmm0, [esp + _ixH2]
	movapd xmm1, [esp + _iyH2]
	movapd xmm2, [esp + _izH2]
	subsd  xmm0, [esp + _jxH2]
	subsd  xmm1, [esp + _jyH2]
	subsd  xmm2, [esp + _jzH2]
	movapd [esp + _dxH2H2], xmm0
	movapd [esp + _dyH2H2], xmm1
	movapd [esp + _dzH2H2], xmm2
	mulsd xmm0, xmm0
	mulsd xmm1, xmm1
	mulsd xmm2, xmm2
	addsd xmm0, xmm1
	addsd xmm0, xmm2
	movapd [esp + _rsqH2H2], xmm0
		
	/* start doing invsqrt use rsq values in xmm0, xmm4 */
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulsd   xmm1, xmm1	/* luA*luA */
	mulsd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	mulsd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subsd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm3, [esp + _half] /* iter1 */
	mulsd   xmm7, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulsd   xmm3, xmm3	/* luA*luA */
	mulsd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	mulsd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subsd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm1, [esp + _half] /* rinv */
	mulsd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvH2H2], xmm1
	movapd [esp + _rinvH2H1], xmm5

	movapd xmm0, [esp + _rsqOO]
	movapd xmm4, [esp + _rsqOH1]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulsd   xmm1, xmm1	/* luA*luA */
	mulsd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	mulsd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subsd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm3, [esp + _half] /* iter1 of  */
	mulsd   xmm7, [esp + _half] /* iter1 of  */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulsd   xmm3, xmm3	/* luA*luA */
	mulsd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	mulsd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subsd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm1, [esp + _half] /* rinv */
	mulsd   xmm5, [esp + _half] /* rinv*/
	movapd [esp + _rinvOO], xmm1
	movapd [esp + _rinvOH1], xmm5

	movapd xmm0, [esp + _rsqOH2]
	movapd xmm4, [esp + _rsqH1O]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulsd   xmm1, xmm1	/* luA*luA */
	mulsd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	mulsd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subsd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm3, [esp + _half] /* iter1 */
	mulsd   xmm7, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulsd   xmm3, xmm3	/* luA*luA */
	mulsd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	mulsd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subsd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm1, [esp + _half] /* rinv */
	mulsd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvOH2], xmm1
	movapd [esp + _rinvH1O], xmm5

	movapd xmm0, [esp + _rsqH1H1]
	movapd xmm4, [esp + _rsqH1H2]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulsd   xmm1, xmm1	/* luA*luA */
	mulsd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	mulsd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subsd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm3, [esp + _half] /* iter1a */
	mulsd   xmm7, [esp + _half] /* iter1b */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulsd   xmm3, xmm3	/* luA*luA */
	mulsd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	mulsd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subsd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm1, [esp + _half] /* rinv */
	mulsd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvH1H1], xmm1
	movapd [esp + _rinvH1H2], xmm5

	movapd xmm0, [esp + _rsqH2O]
	cvtsd2ss xmm1, xmm0	
	rsqrtss xmm1, xmm1
	cvtss2sd xmm1, xmm1
	
	movapd  xmm2, xmm1	/* copy of luA */
	mulsd   xmm1, xmm1	/* luA*luA */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm3, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	mulsd   xmm3, xmm3	/* luA*luA */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm1, [esp + _half] /* rinv */
	movapd [esp + _rinvH2O], xmm1

	/* start with OO interaction */
	movapd xmm0, [esp + _rinvOO]
	movapd xmm7, xmm0
	mulsd  xmm0, xmm0
	movapd xmm1, xmm0
	mulsd  xmm1, xmm0
	mulsd  xmm1, xmm0	/* xmm1=rinvsix */
	mulsd  xmm7, [esp + _qqOO]
	movapd xmm2, xmm1
	mulsd  xmm2, xmm2	/* xmm2=rinvtwelve */
	mulsd  xmm1, [esp + _c6]	
	mulsd  xmm2, [esp + _c12]	
	movapd xmm3, xmm2
	subsd  xmm3, xmm1	/* xmm3=vnb12-vnb6 */
	addsd  xmm3, [esp + _vnbtot]
	mulsd  xmm1, [esp + _six]
	mulsd  xmm2, [esp + _twelve]
	movlpd [esp + _vnbtot], xmm3
	subsd  xmm2, xmm1
	addsd  xmm2, xmm7
	addsd  xmm7, [esp + _vctot]
	mulsd  xmm0, xmm2	
 
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulsd xmm0, [esp + _dxOO]
	mulsd xmm1, [esp + _dyOO]
	mulsd xmm2, [esp + _dzOO]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixO]
	addsd xmm1, [esp + _fiyO]
	addsd xmm2, [esp + _fizO]
	movlpd [esp + _fjxO], xmm3
	movlpd [esp + _fjyO], xmm4
	movlpd [esp + _fjzO], xmm5
	movlpd [esp + _fixO], xmm0
	movlpd [esp + _fiyO], xmm1
	movlpd [esp + _fizO], xmm2

	/* O-H1 interaction */
	movapd xmm0, [esp + _rinvOH1]
	movapd xmm1, xmm0
	mulsd xmm0, xmm0
	mulsd xmm1, [esp + _qqOH]
	mulsd xmm0, xmm1	/* fsOH1  */
	addsd xmm7, xmm1	/* add to local vctot */
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	
	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulsd xmm0, [esp + _dxOH1]
	mulsd xmm1, [esp + _dyOH1]
	mulsd xmm2, [esp + _dzOH1]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixO]
	addsd xmm1, [esp + _fiyO]
	addsd xmm2, [esp + _fizO]
	movlpd [esp + _fjxH1], xmm3
	movlpd [esp + _fjyH1], xmm4
	movlpd [esp + _fjzH1], xmm5
	movlpd [esp + _fixO], xmm0
	movlpd [esp + _fiyO], xmm1
	movlpd [esp + _fizO], xmm2

	/* O-H2 interaction */ 
	movapd xmm0, [esp + _rinvOH2]
	movapd xmm1, xmm0
	mulsd xmm0, xmm0
	mulsd xmm1, [esp + _qqOH]
	mulsd xmm0, xmm1	/* fsOH2 */ 
	addsd xmm7, xmm1	/* add to local vctot */
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	
	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulsd xmm0, [esp + _dxOH2]
	mulsd xmm1, [esp + _dyOH2]
	mulsd xmm2, [esp + _dzOH2]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixO]
	addsd xmm1, [esp + _fiyO]
	addsd xmm2, [esp + _fizO]
	movlpd [esp + _fjxH2], xmm3
	movlpd [esp + _fjyH2], xmm4
	movlpd [esp + _fjzH2], xmm5
	movlpd [esp + _fixO], xmm0
	movlpd [esp + _fiyO], xmm1
	movlpd [esp + _fizO], xmm2

	/* H1-O interaction */
	movapd xmm0, [esp + _rinvH1O]
	movapd xmm1, xmm0
	mulsd xmm0, xmm0
	mulsd xmm1, [esp + _qqOH]
	mulsd xmm0, xmm1	/* fsH1O */
	addsd xmm7, xmm1	/* add to local vctot */
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	movapd xmm3, [esp + _fjxO]
	movapd xmm4, [esp + _fjyO]
	movapd xmm5, [esp + _fjzO]
	mulsd xmm0, [esp + _dxH1O]
	mulsd xmm1, [esp + _dyH1O]
	mulsd xmm2, [esp + _dzH1O]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixH1]
	addsd xmm1, [esp + _fiyH1]
	addsd xmm2, [esp + _fizH1]
	movlpd [esp + _fjxO], xmm3
	movlpd [esp + _fjyO], xmm4
	movlpd [esp + _fjzO], xmm5
	movlpd [esp + _fixH1], xmm0
	movlpd [esp + _fiyH1], xmm1
	movlpd [esp + _fizH1], xmm2

	/* H1-H1 interaction */
	movapd xmm0, [esp + _rinvH1H1]
	movapd xmm1, xmm0
	mulsd xmm0, xmm0
	mulsd xmm1, [esp + _qqHH]
	mulsd xmm0, xmm1	/* fsH1H1 */
	addsd xmm7, xmm1	/* add to local vctot */
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	movapd xmm3, [esp + _fjxH1]
	movapd xmm4, [esp + _fjyH1]
	movapd xmm5, [esp + _fjzH1]
	mulsd xmm0, [esp + _dxH1H1]
	mulsd xmm1, [esp + _dyH1H1]
	mulsd xmm2, [esp + _dzH1H1]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixH1]
	addsd xmm1, [esp + _fiyH1]
	addsd xmm2, [esp + _fizH1]
	movlpd [esp + _fjxH1], xmm3
	movlpd [esp + _fjyH1], xmm4
	movlpd [esp + _fjzH1], xmm5
	movlpd [esp + _fixH1], xmm0
	movlpd [esp + _fiyH1], xmm1
	movlpd [esp + _fizH1], xmm2

	/* H1-H2 interaction */
	movapd xmm0, [esp + _rinvH1H2]
	movapd xmm1, xmm0
	mulsd xmm0, xmm0
	mulsd xmm1, [esp + _qqHH]
	mulsd xmm0, xmm1	/* fsOH2 */ 
	addsd xmm7, xmm1	/* add to local vctot */
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	movapd xmm3, [esp + _fjxH2]
	movapd xmm4, [esp + _fjyH2]
	movapd xmm5, [esp + _fjzH2]
	mulsd xmm0, [esp + _dxH1H2]
	mulsd xmm1, [esp + _dyH1H2]
	mulsd xmm2, [esp + _dzH1H2]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixH1]
	addsd xmm1, [esp + _fiyH1]
	addsd xmm2, [esp + _fizH1]
	movlpd [esp + _fjxH2], xmm3
	movlpd [esp + _fjyH2], xmm4
	movlpd [esp + _fjzH2], xmm5
	movlpd [esp + _fixH1], xmm0
	movlpd [esp + _fiyH1], xmm1
	movlpd [esp + _fizH1], xmm2

	/* H2-O interaction */
	movapd xmm0, [esp + _rinvH2O]
	movapd xmm1, xmm0
	mulsd xmm0, xmm0
	mulsd xmm1, [esp + _qqOH]
	mulsd xmm0, xmm1	/* fsH2O */
	addsd xmm7, xmm1	/* add to local vctot */
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	movapd xmm3, [esp + _fjxO]
	movapd xmm4, [esp + _fjyO]
	movapd xmm5, [esp + _fjzO]
	mulsd xmm0, [esp + _dxH2O]
	mulsd xmm1, [esp + _dyH2O]
	mulsd xmm2, [esp + _dzH2O]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixH2]
	addsd xmm1, [esp + _fiyH2]
	addsd xmm2, [esp + _fizH2]
	movlpd [esp + _fjxO], xmm3
	movlpd [esp + _fjyO], xmm4
	movlpd [esp + _fjzO], xmm5
	movlpd [esp + _fixH2], xmm0
	movlpd [esp + _fiyH2], xmm1
	movlpd [esp + _fizH2], xmm2

	/* H2-H1 interaction */
	movapd xmm0, [esp + _rinvH2H1]
	movapd xmm1, xmm0
	mulsd xmm0, xmm0
	mulsd xmm1, [esp + _qqHH]
	mulsd xmm0, xmm1	/* fsH2H1 */
	addsd xmm7, xmm1	/* add to local vctot */
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	movapd xmm3, [esp + _fjxH1]
	movapd xmm4, [esp + _fjyH1]
	movapd xmm5, [esp + _fjzH1]
	mulsd xmm0, [esp + _dxH2H1]
	mulsd xmm1, [esp + _dyH2H1]
	mulsd xmm2, [esp + _dzH2H1]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixH2]
	addsd xmm1, [esp + _fiyH2]
	addsd xmm2, [esp + _fizH2]
	movlpd [esp + _fjxH1], xmm3
	movlpd [esp + _fjyH1], xmm4
	movlpd [esp + _fjzH1], xmm5
	movlpd [esp + _fixH2], xmm0
	movlpd [esp + _fiyH2], xmm1
	movlpd [esp + _fizH2], xmm2

	/* H2-H2 interaction */
	movapd xmm0, [esp + _rinvH2H2]
	movapd xmm1, xmm0
	mulsd xmm0, xmm0
	mulsd xmm1, [esp + _qqHH]
	mulsd xmm0, xmm1	/* fsH2H2 */
	addsd xmm7, xmm1	/* add to local vctot */
	movapd xmm1, xmm0
	movlpd [esp + _vctot], xmm7
	movapd xmm2, xmm0
	movlpd xmm3, [esp + _fjxH2]
	movlpd xmm4, [esp + _fjyH2]
	movlpd xmm5, [esp + _fjzH2]
	mulsd xmm0, [esp + _dxH2H2]
	mulsd xmm1, [esp + _dyH2H2]
	mulsd xmm2, [esp + _dzH2H2]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixH2]
	addsd xmm1, [esp + _fiyH2]
	addsd xmm2, [esp + _fizH2]
	movlpd [esp + _fjxH2], xmm3
	movlpd [esp + _fjyH2], xmm4
	movlpd [esp + _fjzH2], xmm5
	movlpd [esp + _fixH2], xmm0
	movlpd [esp + _fiyH2], xmm1
	movlpd [esp + _fizH2], xmm2

	mov edi, [ebp + _faction]
		
	/* Did all interactions - now update j forces */
	movlpd xmm0, [edi + eax*8]
	movlpd xmm1, [edi + eax*8 + 8]
	movlpd xmm2, [edi + eax*8 + 16]
	movlpd xmm3, [edi + eax*8 + 24]
	movlpd xmm4, [edi + eax*8 + 32]
	movlpd xmm5, [edi + eax*8 + 40]
	movlpd xmm6, [edi + eax*8 + 48]
	movlpd xmm7, [edi + eax*8 + 56]
	addsd xmm0, [esp + _fjxO]
	addsd xmm1, [esp + _fjyO]
	addsd xmm2, [esp + _fjzO]
	addsd xmm3, [esp + _fjxH1]
	addsd xmm4, [esp + _fjyH1]
	addsd xmm5, [esp + _fjzH1]
	addsd xmm6, [esp + _fjxH2]
	addsd xmm7, [esp + _fjyH2]
	movlpd [edi + eax*8], xmm0
	movlpd [edi + eax*8 + 8], xmm1
	movlpd [edi + eax*8 + 16], xmm2
	movlpd [edi + eax*8 + 24], xmm3
	movlpd [edi + eax*8 + 32], xmm4
	movlpd [edi + eax*8 + 40], xmm5
	movlpd [edi + eax*8 + 48], xmm6
	movlpd [edi + eax*8 + 56], xmm7

	movlpd xmm0, [edi + eax*8 + 64]
	addsd xmm0, [esp + _fjzH2]
	movlpd [edi + eax*8 + 64], xmm0
i1130_updateouterdata:
	mov   ecx, [esp + _ii3]
	mov   edi, [ebp + _faction]
	mov   esi, [ebp + _fshift]
	mov   edx, [esp + _is3]

	/* accumulate  Oi forces in xmm0, xmm1, xmm2 */
	movapd xmm0, [esp + _fixO]
	movapd xmm1, [esp + _fiyO]
	movapd xmm2, [esp + _fizO]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 /* sum is in low xmm0-xmm2 */

	movapd xmm3, xmm0	
	movapd xmm4, xmm1	
	movapd xmm5, xmm2	

	/* increment i force */
	movsd  xmm3, [edi + ecx*8]
	movsd  xmm4, [edi + ecx*8 + 8]
	movsd  xmm5, [edi + ecx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8],     xmm3
	movsd  [edi + ecx*8 + 8], xmm4
	movsd  [edi + ecx*8 + 16], xmm5

	/* accumulate force in xmm6/xmm7 for fshift */
	movapd xmm6, xmm0
	movsd xmm7, xmm2
	unpcklpd xmm6, xmm1

	/* accumulate H1i forces in xmm0, xmm1, xmm2 */
	movapd xmm0, [esp + _fixH1]
	movapd xmm1, [esp + _fiyH1]
	movapd xmm2, [esp + _fizH1]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 /* sum is in low xmm0-xmm2 */

	/* increment i force */
	movsd  xmm3, [edi + ecx*8 + 24]
	movsd  xmm4, [edi + ecx*8 + 32]
	movsd  xmm5, [edi + ecx*8 + 40]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8 + 24], xmm3
	movsd  [edi + ecx*8 + 32], xmm4
	movsd  [edi + ecx*8 + 40], xmm5

	/* accumulate force in xmm6/xmm7 for fshift */
	addsd xmm7, xmm2
	unpcklpd xmm0, xmm1
	addpd xmm6, xmm0

	/* accumulate H2i forces in xmm0, xmm1, xmm2 */
	movapd xmm0, [esp + _fixH2]
	movapd xmm1, [esp + _fiyH2]
	movapd xmm2, [esp + _fizH2]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 /* sum is in low xmm0-xmm2 */

	movapd xmm3, xmm0	
	movapd xmm4, xmm1	
	movapd xmm5, xmm2	

	/* increment i force */
	movsd  xmm3, [edi + ecx*8 + 48]
	movsd  xmm4, [edi + ecx*8 + 56]
	movsd  xmm5, [edi + ecx*8 + 64]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8 + 48], xmm3
	movsd  [edi + ecx*8 + 56], xmm4
	movsd  [edi + ecx*8 + 64], xmm5

	/* accumulate force in xmm6/xmm7 for fshift */
	addsd xmm7, xmm2
	unpcklpd xmm0, xmm1
	addpd xmm6, xmm0

	/* increment fshift force */
	movupd xmm3, [esi + edx*8]
	movsd  xmm4, [esi + edx*8 + 16]
	addpd  xmm3, xmm6
	addsd  xmm4, xmm7
	movupd [esi + edx*8],    xmm3
	movsd  [esi + edx*8 + 16], xmm4

	mov   edx, [ebp + _gid]  
	mov   edx, [edx]
	add   [ebp + _gid],  4	

	/* accumulate total potential energy and update it */
	movapd xmm7, [esp + _vctot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */

	/* add earlier value from mem */
	mov   eax, [ebp + _Vc]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* accumulate total lj energy and update it */
	movapd xmm7, [esp + _vnbtot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */
	
	/* add earlier value from mem */
	mov   eax, [ebp + _Vnb]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* finish if last */
	mov   ecx, [ebp + _nri]
	dec ecx
	jecxz i1130_end
	/* not last, iterate once more! */ 
	mov [ebp + _nri], ecx
	jmp i1130_outer
i1130_end:
	emms
	mov eax, [esp + _salign]
	add esp, eax
	add esp, 1492
	pop edi
	pop esi
        pop edx
        pop ecx
        pop ebx
        pop eax
	leave
	ret


.globl inl2120_sse2
	.type inl2120_sse2,@function
inl2120_sse2:	
.equ		_nri,		8
.equ		_iinr,		12
.equ		_jindex,	16
.equ		_jjnr,		20
.equ		_shift,		24
.equ		_shiftvec,	28
.equ		_fshift,	32
.equ		_gid,		36
.equ		_pos,		40		
.equ		_faction,	44
.equ		_charge,	48
.equ		_facel,		52 /* double */ 
.equ		_Vc,		60			
.equ		_argkrf,	64 /* double */ 	
.equ		_argcrf,	72 /* double */ 	
.equ		_type,		80
.equ		_ntype,		84
.equ		_nbfp,		88	
.equ		_Vnb,		92	
	/* stack offsets for local variables */ 
	/* bottom of stack is cache-aligned for sse2 use */
.equ		_ixO,		0
.equ		_iyO,		16
.equ		_izO,		32
.equ		_ixH1,		48
.equ		_iyH1,		64
.equ		_izH1,		80
.equ		_ixH2,		96
.equ		_iyH2,		112
.equ		_izH2,		128
.equ		_iqO,		144 
.equ		_iqH,		160 
.equ		_dxO,		176
.equ		_dyO,		192
.equ		_dzO,		208	
.equ		_dxH1,		224
.equ		_dyH1,		240
.equ		_dzH1,		256	
.equ		_dxH2,		272
.equ		_dyH2,		288
.equ		_dzH2,		304	
.equ		_qqO,		320
.equ		_qqH,		336
.equ		_c6,		352
.equ		_c12,		368
.equ		_six,		384
.equ		_twelve,	400		 
.equ		_vctot,		416
.equ		_vnbtot,	432
.equ		_fixO,		448
.equ		_fiyO,		464
.equ		_fizO,		480
.equ		_fixH1,		496
.equ		_fiyH1,		512
.equ		_fizH1,		528
.equ		_fixH2,		544
.equ		_fiyH2,		560
.equ		_fizH2,		576
.equ		_fjx,		592
.equ		_fjy,		608
.equ		_fjz,		624
.equ		_half,		640
.equ		_three,		656
.equ		_two,		672
.equ		_krf,		688
.equ		_crf,		704
.equ		_krsqO,		720
.equ		_krsqH1,	736
.equ		_krsqH2,	752	 		
.equ		_is3,		768
.equ		_ii3,		772
.equ		_ntia,		776	
.equ		_innerjjnr,	780
.equ		_innerk,	784
.equ		_salign,	788
	push ebp
	mov ebp,esp	
        push eax
        push ebx
        push ecx
        push edx
	push esi
	push edi
	sub esp, 792		/* local stack space */
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + _salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_three]
	movupd xmm2, [sse2_six]
	movupd xmm3, [sse2_twelve]
	movupd xmm4, [sse2_two]
	movsd xmm5, [ebp + _argkrf]
	movsd xmm6, [ebp + _argcrf]

	movapd [esp + _half],  xmm0
	movapd [esp + _three], xmm1
	movapd [esp + _six],  xmm2
	movapd [esp + _twelve], xmm3
	movapd [esp + _two], xmm4
	shufpd xmm5, xmm5, 0
	shufpd xmm6, xmm6, 0
	movapd [esp + _krf], xmm5
	movapd [esp + _crf], xmm6
	
	/* assume we have at least one i particle - start directly */
	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	mov   ebx, [ecx]	        /* ebx =ii */

	mov   edx, [ebp + _charge]
	movsd xmm3, [edx + ebx*8]	
	movsd xmm4, [edx + ebx*8 + 8]	
	movsd xmm5, [ebp + _facel]
	mulsd  xmm3, xmm5
	mulsd  xmm4, xmm5

	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	movapd [esp + _iqO], xmm3
	movapd [esp + _iqH], xmm4
	
	mov   edx, [ebp + _type]
	mov   ecx, [edx + ebx*4]
	shl   ecx, 1
	imul  ecx, [ebp + _ntype]      /* ecx = ntia = 2*ntype*type[ii0] */
	mov   [esp + _ntia], ecx		
.i2120_outer:
	mov   eax, [ebp + _shift]      /* eax = pointer into shift[] */
	mov   ebx, [eax]		/* ebx=shift[n] */
	add   [ebp + _shift],  4  /* advance pointer one step */
	
	lea   ebx, [ebx + ebx*2]        /* ebx=3*is */
	mov   [esp + _is3],ebx    	/* store is3 */

	mov   eax, [ebp + _shiftvec]   /* eax = base of shiftvec[] */

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	add   [ebp + _iinr],  4   /* advance pointer */
	mov   ebx, [ecx]	        /* ebx =ii */

	movapd xmm3, xmm0
	movapd xmm4, xmm1
	movapd xmm5, xmm2

	lea   ebx, [ebx + ebx*2]	/* ebx = 3*ii=ii3 */
	mov   eax, [ebp + _pos]        /* eax = base of pos[] */ 
	mov   [esp + _ii3], ebx

	addsd xmm3, [eax + ebx*8]
	addsd xmm4, [eax + ebx*8 + 8]
	addsd xmm5, [eax + ebx*8 + 16]		
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _ixO], xmm3
	movapd [esp + _iyO], xmm4
	movapd [esp + _izO], xmm5

	movsd xmm3, xmm0
	movsd xmm4, xmm1
	movsd xmm5, xmm2
	addsd xmm0, [eax + ebx*8 + 24]
	addsd xmm1, [eax + ebx*8 + 32]
	addsd xmm2, [eax + ebx*8 + 40]		
	addsd xmm3, [eax + ebx*8 + 48]
	addsd xmm4, [eax + ebx*8 + 56]
	addsd xmm5, [eax + ebx*8 + 64]		

	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _ixH1], xmm0
	movapd [esp + _iyH1], xmm1
	movapd [esp + _izH1], xmm2
	movapd [esp + _ixH2], xmm3
	movapd [esp + _iyH2], xmm4
	movapd [esp + _izH2], xmm5
	
	/* clear vctot and i forces */
	xorpd xmm4, xmm4
	movapd [esp + _vctot], xmm4
	movapd [esp + _vnbtot], xmm4
	movapd [esp + _fixO], xmm4
	movapd [esp + _fiyO], xmm4
	movapd [esp + _fizO], xmm4
	movapd [esp + _fixH1], xmm4
	movapd [esp + _fiyH1], xmm4
	movapd [esp + _fizH1], xmm4
	movapd [esp + _fixH2], xmm4
	movapd [esp + _fiyH2], xmm4
	movapd [esp + _fizH2], xmm4
	
	mov   eax, [ebp + _jindex]
	mov   ecx, [eax]	         /* jindex[n] */
	mov   edx, [eax + 4]	         /* jindex[n+1] */
	add   [ebp + _jindex],  4
	sub   edx, ecx                   /* number of innerloop atoms */

	mov   esi, [ebp + _pos]
	mov   edi, [ebp + _faction]	
	mov   eax, [ebp + _jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + _innerjjnr], eax     /* pointer to jjnr[nj0] */
	sub   edx,  2
	mov   [esp + _innerk], edx        /* number of innerloop atoms */
	jge   .i2120_unroll_loop
	jmp   .i2120_checksingle
.i2120_unroll_loop:
	/* twice unrolled innerloop here */
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]	
	mov   ebx, [edx + 4]

	add   [esp + _innerjjnr],  8	/* advance pointer (unrolled 2) */

	mov esi, [ebp + _charge]        /* base of charge[] */
	
	movlpd xmm3, [esi + eax*8]
	movhpd xmm3, [esi + ebx*8]
	movapd xmm4, xmm3
	mulpd  xmm3, [esp + _iqO]
	mulpd  xmm4, [esp + _iqH]

	movd  mm0, eax		/* use mmx registers as temp storage */
	movd  mm1, ebx

	movapd  [esp + _qqO], xmm3
	movapd  [esp + _qqH], xmm4
	
	mov esi, [ebp + _type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov esi, [ebp + _nbfp]
	shl eax, 1	
	shl ebx, 1	
	mov edi, [esp + _ntia]
	add eax, edi
	add ebx, edi

	movupd xmm6, [esi + eax*8]	/* c6a c12a */
	movupd xmm7, [esi + ebx*8]	/* c6b c12b */
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0
	movd  ebx, mm1
	movapd [esp + _c6], xmm4
	movapd [esp + _c12], xmm6
	
	mov esi, [ebp + _pos]       /* base of pos[] */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */
	lea   ebx, [ebx + ebx*2]	

	/* move two coordinates to xmm0-xmm2 */
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]		

	/* move ixO-izO to xmm4-xmm6 */
	movapd xmm4, [esp + _ixO]
	movapd xmm5, [esp + _iyO]
	movapd xmm6, [esp + _izO]

	/* calc dr */
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	/* store dr */
	movapd [esp + _dxO], xmm4
	movapd [esp + _dyO], xmm5
	movapd [esp + _dzO], xmm6
	/* square it */
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6
	movapd xmm7, xmm4
	/* rsqO in xmm7 */

	/* move ixH1-izH1 to xmm4-xmm6 */
	movapd xmm4, [esp + _ixH1]
	movapd xmm5, [esp + _iyH1]
	movapd xmm6, [esp + _izH1]

	/* calc dr */
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	/* store dr */
	movapd [esp + _dxH1], xmm4
	movapd [esp + _dyH1], xmm5
	movapd [esp + _dzH1], xmm6
	/* square it */
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm6, xmm5
	addpd xmm6, xmm4
	/* rsqH1 in xmm6 */

	/* move ixH2-izH2 to xmm3-xmm5 */ 
	movapd xmm3, [esp + _ixH2]
	movapd xmm4, [esp + _iyH2]
	movapd xmm5, [esp + _izH2]

	/* calc dr */
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2

	/* store dr */
	movapd [esp + _dxH2], xmm3
	movapd [esp + _dyH2], xmm4
	movapd [esp + _dzH2], xmm5
	/* square it */
	mulpd xmm3,xmm3
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	addpd xmm5, xmm4
	addpd xmm5, xmm3
	/* rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 */

	movapd xmm0, xmm5
	movapd xmm1, xmm6
	movapd xmm2, xmm7

	mulpd  xmm0, [esp + _krf]	
	mulpd  xmm1, [esp + _krf]	
	mulpd  xmm2, [esp + _krf]	

	movapd [esp + _krsqH2], xmm0
	movapd [esp + _krsqH1], xmm1
	movapd [esp + _krsqO], xmm2
		
	/* start with rsqO - put seed in xmm2 */
	cvtpd2ps xmm2, xmm7	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulpd   xmm2, xmm7	/* rsq*lu*lu */
	subpd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulpd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulpd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm3, xmm4
	mulpd xmm4, xmm4	/* lu*lu */
	mulpd xmm7, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subpd xmm4, xmm7	/* 3-rsq*lu*lu */
	mulpd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulpd xmm4, [esp + _half] /* rinv */
	movapd  xmm7, xmm4	/* rinvO in xmm7 */
	
	/* rsqH1 - seed in xmm2 */
	cvtpd2ps xmm2, xmm6	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulpd   xmm2, xmm6	/* rsq*lu*lu */
	subpd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulpd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulpd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm3, xmm4
	mulpd xmm4, xmm4	/* lu*lu */
	mulpd xmm6, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subpd xmm4, xmm6	/* 3-rsq*lu*lu */
	mulpd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulpd xmm4, [esp + _half] /* rinv */
	movapd  xmm6, xmm4	/* rinvH1 in xmm6 */
	
	/* rsqH2 - seed in xmm2 */
	cvtpd2ps xmm2, xmm5	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulpd   xmm2, xmm5	/* rsq*lu*lu */
	subpd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulpd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulpd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm3, xmm4
	mulpd xmm4, xmm4	/* lu*lu */
	mulpd xmm5, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subpd xmm4, xmm5	/* 3-rsq*lu*lu */
	mulpd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulpd xmm4, [esp + _half] /* rinv */
	movapd  xmm5, xmm4	/* rinvH2 in xmm5 */

	/* do O interactions */
	movapd  xmm4, xmm7	
	mulpd   xmm4, xmm4	/* xmm7=rinv, xmm4=rinvsq */
	movapd xmm1, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm1, xmm4	/* xmm1=rinvsix */
	movapd xmm2, xmm1
	mulpd  xmm2, xmm2	/* xmm2=rinvtwelve */
	mulpd  xmm1, [esp + _c6]
	mulpd  xmm2, [esp + _c12]
	movapd xmm3, xmm2
	subpd  xmm3, xmm1	/* vnb=vnb12-vnb6 */		
	addpd  xmm3, [esp + _vnbtot]
	mulpd  xmm1, [esp + _six]
	mulpd  xmm2, [esp + _twelve]
	subpd  xmm2, xmm1	/* nb part of fs */ 

	movapd xmm0, xmm7
	movapd xmm1, [esp + _krsqO]
	addpd  xmm0, xmm1
	mulpd  xmm1, [esp + _two]
	subpd  xmm0, [esp + _crf] /* xmm0=rinv+ krsq-crf */
	subpd  xmm7, xmm1
	mulpd  xmm0, [esp + _qqO]
	mulpd  xmm7, [esp + _qqO]
	addpd  xmm2, xmm7

	mulpd  xmm4, xmm2	/* total fsO in xmm4 */

	addpd  xmm0, [esp + _vctot]
	movapd [esp + _vnbtot], xmm3
	movapd [esp + _vctot], xmm0

	movapd xmm0, [esp + _dxO]
	movapd xmm1, [esp + _dyO]
	movapd xmm2, [esp + _dzO]
	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4

	/* update O forces */
	movapd xmm3, [esp + _fixO]
	movapd xmm4, [esp + _fiyO]
	movapd xmm7, [esp + _fizO]
	addpd  xmm3, xmm0
	addpd  xmm4, xmm1
	addpd  xmm7, xmm2
	movapd [esp + _fixO], xmm3
	movapd [esp + _fiyO], xmm4
	movapd [esp + _fizO], xmm7
	/* update j forces with water O */
	movapd [esp + _fjx], xmm0
	movapd [esp + _fjy], xmm1
	movapd [esp + _fjz], xmm2

	/* H1 interactions */
	movapd  xmm4, xmm6	
	mulpd   xmm4, xmm4	/* xmm6=rinv, xmm4=rinvsq */
	movapd  xmm7, xmm6
	movapd  xmm0, [esp + _krsqH1]
	addpd   xmm6, xmm0	/* xmm6=rinv+ krsq */
	mulpd   xmm0, [esp + _two]
	subpd   xmm6, [esp + _crf]
	subpd   xmm7, xmm0	/* xmm7=rinv-2*krsq */
	mulpd   xmm6, [esp + _qqH] /* vcoul */
	mulpd   xmm7, [esp + _qqH]
	mulpd  xmm4, xmm7		/* total fsH1 in xmm4 */
	
	addpd  xmm6, [esp + _vctot]

	movapd xmm0, [esp + _dxH1]
	movapd xmm1, [esp + _dyH1]
	movapd xmm2, [esp + _dzH1]
	movapd [esp + _vctot], xmm6
	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4

	/* update H1 forces */
	movapd xmm3, [esp + _fixH1]
	movapd xmm4, [esp + _fiyH1]
	movapd xmm7, [esp + _fizH1]
	addpd  xmm3, xmm0
	addpd  xmm4, xmm1
	addpd  xmm7, xmm2
	movapd [esp + _fixH1], xmm3
	movapd [esp + _fiyH1], xmm4
	movapd [esp + _fizH1], xmm7
	/* update j forces with water H1 */
	addpd  xmm0, [esp + _fjx]
	addpd  xmm1, [esp + _fjy]
	addpd  xmm2, [esp + _fjz]
	movapd [esp + _fjx], xmm0
	movapd [esp + _fjy], xmm1
	movapd [esp + _fjz], xmm2

	/* H2 interactions */
	movapd  xmm4, xmm5	
	mulpd   xmm4, xmm4	/* xmm5=rinv, xmm4=rinvsq */
	movapd  xmm7, xmm5
	movapd  xmm0, [esp + _krsqH2]
	addpd   xmm5, xmm0	/* xmm5=rinv+ krsq */
	mulpd   xmm0, [esp + _two]
	subpd   xmm5, [esp + _crf]
	subpd   xmm7, xmm0	/* xmm7=rinv-2*krsq */
	mulpd   xmm5, [esp + _qqH] /* vcoul */
	mulpd   xmm7, [esp + _qqH]
	mulpd  xmm4, xmm7		/* total fsH2 in xmm4 */
	
	addpd  xmm5, [esp + _vctot]

	movapd xmm0, [esp + _dxH2]
	movapd xmm1, [esp + _dyH2]
	movapd xmm2, [esp + _dzH2]
	movapd [esp + _vctot], xmm5
	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4

	/* update H2 forces */
	movapd xmm3, [esp + _fixH2]
	movapd xmm4, [esp + _fiyH2]
	movapd xmm7, [esp + _fizH2]
	addpd  xmm3, xmm0
	addpd  xmm4, xmm1
	addpd  xmm7, xmm2
	movapd [esp + _fixH2], xmm3
	movapd [esp + _fiyH2], xmm4
	movapd [esp + _fizH2], xmm7

	mov edi, [ebp + _faction]
	/* update j forces */
	addpd  xmm0, [esp + _fjx]
	addpd  xmm1, [esp + _fjy]
	addpd  xmm2, [esp + _fjz]
	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	movhpd xmm3, [edi + ebx*8]
	movhpd xmm4, [edi + ebx*8 + 8]
	movhpd xmm5, [edi + ebx*8 + 16]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5
	movhpd [edi + ebx*8], xmm3
	movhpd [edi + ebx*8 + 8], xmm4
	movhpd [edi + ebx*8 + 16], xmm5	
	
	/* should we do one more iteration? */
	sub   [esp + _innerk],  2
	jl    .i2120_checksingle
	jmp   .i2120_unroll_loop
.i2120_checksingle:	
	mov   edx, [esp + _innerk]
	and   edx, 1
	jnz   .i2120_dosingle
	jmp   .i2120_updateouterdata
.i2120_dosingle:
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]	
	add   [esp + _innerjjnr],  4	

	mov esi, [ebp + _charge]        /* base of charge[] */
	xorpd xmm3, xmm3
	movlpd xmm3, [esi + eax*8]
	movapd xmm4, xmm3
	mulpd  xmm3, [esp + _iqO]
	mulpd  xmm4, [esp + _iqH]

	movd  mm0, eax		/* use mmx registers as temp storage */

	movapd  [esp + _qqO], xmm3
	movapd  [esp + _qqH], xmm4
	
	mov esi, [ebp + _type]
	mov eax, [esi + eax*4]
	mov esi, [ebp + _nbfp]
	shl eax, 1	
	mov edi, [esp + _ntia]
	add eax, edi

	movupd xmm6, [esi + eax*8]	/* c6a c12a */
	xorpd xmm7, xmm7
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0
	movapd [esp + _c6], xmm4
	movapd [esp + _c12], xmm6
	
	mov esi, [ebp + _pos]       /* base of pos[] */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */

	/* move coordinates to xmm0-xmm2 */
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]

	/* move ixO-izO to xmm4-xmm6 */
	movapd xmm4, [esp + _ixO]
	movapd xmm5, [esp + _iyO]
	movapd xmm6, [esp + _izO]

	/* calc dr */
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	/* store dr */
	movapd [esp + _dxO], xmm4
	movapd [esp + _dyO], xmm5
	movapd [esp + _dzO], xmm6
	/* square it */
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6
	movapd xmm7, xmm4
	/* rsqO in xmm7 */

	/* move ixH1-izH1 to xmm4-xmm6 */
	movapd xmm4, [esp + _ixH1]
	movapd xmm5, [esp + _iyH1]
	movapd xmm6, [esp + _izH1]

	/* calc dr */
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	/* store dr */
	movapd [esp + _dxH1], xmm4
	movapd [esp + _dyH1], xmm5
	movapd [esp + _dzH1], xmm6
	/* square it */
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm6, xmm5
	addsd xmm6, xmm4
	/* rsqH1 in xmm6 */

	/* move ixH2-izH2 to xmm3-xmm5 */ 
	movapd xmm3, [esp + _ixH2]
	movapd xmm4, [esp + _iyH2]
	movapd xmm5, [esp + _izH2]

	/* calc dr */
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2

	/* store dr */
	movapd [esp + _dxH2], xmm3
	movapd [esp + _dyH2], xmm4
	movapd [esp + _dzH2], xmm5
	/* square it */
	mulsd xmm3,xmm3
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	addsd xmm5, xmm4
	addsd xmm5, xmm3
	/* rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 */

	movapd xmm0, xmm5
	movapd xmm1, xmm6
	movapd xmm2, xmm7

	mulsd  xmm0, [esp + _krf]	
	mulsd  xmm1, [esp + _krf]	
	mulsd  xmm2, [esp + _krf]	

	movapd [esp + _krsqH2], xmm0
	movapd [esp + _krsqH1], xmm1
	movapd [esp + _krsqO], xmm2

	/* start with rsqO - put seed in xmm2 */
	cvtsd2ss xmm2, xmm7	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulsd   xmm2, xmm7	/* rsq*lu*lu */
	subsd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulsd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulsd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm3, xmm4
	mulsd xmm4, xmm4	/* lu*lu */
	mulsd xmm7, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subsd xmm4, xmm7	/* 3-rsq*lu*lu */
	mulsd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulsd xmm4, [esp + _half] /* rinv */
	movapd  xmm7, xmm4	/* rinvO in xmm7 */
	
	/* rsqH1 - seed in xmm2 */
	cvtsd2ss xmm2, xmm6	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulsd   xmm2, xmm6	/* rsq*lu*lu */
	subsd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulsd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulsd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm3, xmm4
	mulsd xmm4, xmm4	/* lu*lu */
	mulsd xmm6, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subsd xmm4, xmm6	/* 3-rsq*lu*lu */
	mulsd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulsd xmm4, [esp + _half] /* rinv */
	movapd  xmm6, xmm4	/* rinvH1 in xmm6 */
	
	/* rsqH2 - seed in xmm2 */
	cvtsd2ss xmm2, xmm5	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulsd   xmm2, xmm5	/* rsq*lu*lu */
	subsd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulsd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulsd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm3, xmm4
	mulsd xmm4, xmm4	/* lu*lu */
	mulsd xmm5, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subsd xmm4, xmm5	/* 3-rsq*lu*lu */
	mulsd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulsd xmm4, [esp + _half] /* rinv */
	movapd  xmm5, xmm4	/* rinvH2 in xmm5 */

	/* do O interactions */
	movapd  xmm4, xmm7	
	mulsd   xmm4, xmm4	/* xmm7=rinv, xmm4=rinvsq */
	movapd xmm1, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm1, xmm4	/* xmm1=rinvsix */
	movapd xmm2, xmm1
	mulsd  xmm2, xmm2	/* xmm2=rinvtwelve */
	mulsd  xmm1, [esp + _c6]
	mulsd  xmm2, [esp + _c12]
	movapd xmm3, xmm2
	subsd  xmm3, xmm1	/* vnb=vnb12-vnb6 */		
	addsd  xmm3, [esp + _vnbtot]
	mulsd  xmm1, [esp + _six]
	mulsd  xmm2, [esp + _twelve]
	subsd  xmm2, xmm1	/* nb part of fs */ 

	movapd xmm0, xmm7
	movapd xmm1, [esp + _krsqO]
	addsd  xmm0, xmm1
	mulsd  xmm1, [esp + _two]
	subsd  xmm0, [esp + _crf] /* xmm0=rinv+ krsq-crf */
	subsd  xmm7, xmm1
	mulsd  xmm0, [esp + _qqO]
	mulsd  xmm7, [esp + _qqO]
	addsd  xmm2, xmm7

	mulsd  xmm4, xmm2	/* total fsO in xmm4 */

	addsd  xmm0, [esp + _vctot]
	movlpd [esp + _vnbtot], xmm3
	movlpd [esp + _vctot], xmm0

	movapd xmm0, [esp + _dxO]
	movapd xmm1, [esp + _dyO]
	movapd xmm2, [esp + _dzO]
	mulsd  xmm0, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm2, xmm4

	/* update O forces */
	movapd xmm3, [esp + _fixO]
	movapd xmm4, [esp + _fiyO]
	movapd xmm7, [esp + _fizO]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm7, xmm2
	movlpd [esp + _fixO], xmm3
	movlpd [esp + _fiyO], xmm4
	movlpd [esp + _fizO], xmm7
	/* update j forces with water O */
	movlpd [esp + _fjx], xmm0
	movlpd [esp + _fjy], xmm1
	movlpd [esp + _fjz], xmm2

	/* H1 interactions */
	movapd  xmm4, xmm6	
	mulsd   xmm4, xmm4	/* xmm6=rinv, xmm4=rinvsq */
	movapd  xmm7, xmm6
	movapd  xmm0, [esp + _krsqH1]
	addsd   xmm6, xmm0	/* xmm6=rinv+ krsq */
	mulsd   xmm0, [esp + _two]
	subsd   xmm6, [esp + _crf]
	subsd   xmm7, xmm0	/* xmm7=rinv-2*krsq */
	mulsd   xmm6, [esp + _qqH] /* vcoul */
	mulsd   xmm7, [esp + _qqH]
	mulsd  xmm4, xmm7		/* total fsH1 in xmm4 */
	
	addsd  xmm6, [esp + _vctot]

	movapd xmm0, [esp + _dxH1]
	movapd xmm1, [esp + _dyH1]
	movapd xmm2, [esp + _dzH1]
	movlpd [esp + _vctot], xmm6
	mulsd  xmm0, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm2, xmm4

	/* update H1 forces */
	movapd xmm3, [esp + _fixH1]
	movapd xmm4, [esp + _fiyH1]
	movapd xmm7, [esp + _fizH1]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm7, xmm2
	movlpd [esp + _fixH1], xmm3
	movlpd [esp + _fiyH1], xmm4
	movlpd [esp + _fizH1], xmm7
	/* update j forces with water H1 */
	addsd  xmm0, [esp + _fjx]
	addsd  xmm1, [esp + _fjy]
	addsd  xmm2, [esp + _fjz]
	movlpd [esp + _fjx], xmm0
	movlpd [esp + _fjy], xmm1
	movlpd [esp + _fjz], xmm2

	/* H2 interactions */
	movapd  xmm4, xmm5	
	mulsd   xmm4, xmm4	/* xmm5=rinv, xmm4=rinvsq */
	movapd  xmm7, xmm5
	movapd  xmm0, [esp + _krsqH2]
	addsd   xmm5, xmm0	/* xmm5=rinv+ krsq */
	mulsd   xmm0, [esp + _two]
	subsd   xmm5, [esp + _crf]
	subsd   xmm7, xmm0	/* xmm7=rinv-2*krsq */
	mulsd   xmm5, [esp + _qqH] /* vcoul */
	mulsd   xmm7, [esp + _qqH]
	mulsd  xmm4, xmm7		/* total fsH2 in xmm4 */
	
	addsd  xmm5, [esp + _vctot]

	movapd xmm0, [esp + _dxH2]
	movapd xmm1, [esp + _dyH2]
	movapd xmm2, [esp + _dzH2]
	movlpd [esp + _vctot], xmm5
	mulsd  xmm0, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm2, xmm4

	/* update H2 forces */
	movapd xmm3, [esp + _fixH2]
	movapd xmm4, [esp + _fiyH2]
	movapd xmm7, [esp + _fizH2]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm7, xmm2
	movlpd [esp + _fixH2], xmm3
	movlpd [esp + _fiyH2], xmm4
	movlpd [esp + _fizH2], xmm7

	mov edi, [ebp + _faction]
	/* update j forces */
	addsd  xmm0, [esp + _fjx]
	addsd  xmm1, [esp + _fjy]
	addsd  xmm2, [esp + _fjz]
	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5	

.i2120_updateouterdata:
	mov   ecx, [esp + _ii3]
	mov   edi, [ebp + _faction]
	mov   esi, [ebp + _fshift]
	mov   edx, [esp + _is3]

	/* accumulate  Oi forces in xmm0, xmm1, xmm2 */
	movapd xmm0, [esp + _fixO]
	movapd xmm1, [esp + _fiyO]
	movapd xmm2, [esp + _fizO]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 /* sum is in low xmm0-xmm2 */

	movapd xmm3, xmm0	
	movapd xmm4, xmm1	
	movapd xmm5, xmm2	

	/* increment i force */
	movsd  xmm3, [edi + ecx*8]
	movsd  xmm4, [edi + ecx*8 + 8]
	movsd  xmm5, [edi + ecx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8],     xmm3
	movsd  [edi + ecx*8 + 8], xmm4
	movsd  [edi + ecx*8 + 16], xmm5

	/* accumulate force in xmm6/xmm7 for fshift */
	movapd xmm6, xmm0
	movsd xmm7, xmm2
	unpcklpd xmm6, xmm1

	/* accumulate H1i forces in xmm0, xmm1, xmm2 */
	movapd xmm0, [esp + _fixH1]
	movapd xmm1, [esp + _fiyH1]
	movapd xmm2, [esp + _fizH1]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 /* sum is in low xmm0-xmm2 */

	/* increment i force */
	movsd  xmm3, [edi + ecx*8 + 24]
	movsd  xmm4, [edi + ecx*8 + 32]
	movsd  xmm5, [edi + ecx*8 + 40]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8 + 24], xmm3
	movsd  [edi + ecx*8 + 32], xmm4
	movsd  [edi + ecx*8 + 40], xmm5

	/* accumulate force in xmm6/xmm7 for fshift */
	addsd xmm7, xmm2
	unpcklpd xmm0, xmm1
	addpd xmm6, xmm0

	/* accumulate H2i forces in xmm0, xmm1, xmm2 */
	movapd xmm0, [esp + _fixH2]
	movapd xmm1, [esp + _fiyH2]
	movapd xmm2, [esp + _fizH2]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 /* sum is in low xmm0-xmm2 */

	movapd xmm3, xmm0	
	movapd xmm4, xmm1	
	movapd xmm5, xmm2	

	/* increment i force */
	movsd  xmm3, [edi + ecx*8 + 48]
	movsd  xmm4, [edi + ecx*8 + 56]
	movsd  xmm5, [edi + ecx*8 + 64]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8 + 48], xmm3
	movsd  [edi + ecx*8 + 56], xmm4
	movsd  [edi + ecx*8 + 64], xmm5

	/* accumulate force in xmm6/xmm7 for fshift */
	addsd xmm7, xmm2
	unpcklpd xmm0, xmm1
	addpd xmm6, xmm0

	/* increment fshift force */
	movupd xmm3, [esi + edx*8]
	movsd  xmm4, [esi + edx*8 + 16]
	addpd  xmm3, xmm6
	addsd  xmm4, xmm7
	movupd [esi + edx*8],    xmm3
	movsd  [esi + edx*8 + 16], xmm4

	mov   edx, [ebp + _gid]  
	mov   edx, [edx]
	add   [ebp + _gid],  4	

	/* accumulate total potential energy and update it */
	movapd xmm7, [esp + _vctot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */

	/* add earlier value from mem */
	mov   eax, [ebp + _Vc]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* accumulate total lj energy and update it */
	movapd xmm7, [esp + _vnbtot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */
	
	/* add earlier value from mem */
	mov   eax, [ebp + _Vnb]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* finish if last */
	mov   ecx, [ebp + _nri]
	dec ecx
	jecxz .i2120_end
	/* not last, iterate once more! */ 
	mov [ebp + _nri], ecx
	jmp .i2120_outer
.i2120_end:
	emms
	mov eax, [esp + _salign]
	add esp, eax
	add esp, 792
	pop edi
	pop esi
        pop edx
        pop ecx
        pop ebx
        pop eax
	leave
	ret


	
.globl inl2130_sse2
	.type inl2130_sse2,@function
inl2130_sse2:	
.equ		_nri,		8
.equ		_iinr,		12
.equ		_jindex,	16
.equ		_jjnr,		20
.equ		_shift,		24
.equ		_shiftvec,	28
.equ		_fshift,	32
.equ		_gid,		36
.equ		_pos,		40		
.equ		_faction,	44
.equ		_charge,	48
.equ		_facel,		52 /* double */ 
.equ		_Vc,		60	
.equ		_argkrf,	64 /* double */ 
.equ		_argcrf,	72 /* double */ 
.equ		_type,		80
.equ		_ntype,		84
.equ		_nbfp,		88	
.equ		_Vnb,		92
	/* stack offsets for local variables */ 
	/* bottom of stack is cache-aligned for sse2 use */
.equ		_ixO,		0
.equ		_iyO,		16
.equ		_izO,		32
.equ		_ixH1,		48
.equ		_iyH1,		64
.equ		_izH1,		80
.equ		_ixH2,		96
.equ		_iyH2,		112
.equ		_izH2,		128
.equ		_jxO,		144
.equ		_jyO,		160
.equ		_jzO,		176
.equ		_jxH1,		192
.equ		_jyH1,		208
.equ		_jzH1,		224
.equ		_jxH2,		240
.equ		_jyH2,		256
.equ		_jzH2,		272
.equ		_dxOO,		288
.equ		_dyOO,		304
.equ		_dzOO,		320	
.equ		_dxOH1,		336
.equ		_dyOH1,		352
.equ		_dzOH1,		368	
.equ		_dxOH2,		384
.equ		_dyOH2,		400
.equ		_dzOH2,		416	
.equ		_dxH1O,		432
.equ		_dyH1O,		448
.equ		_dzH1O,		464	
.equ		_dxH1H1,	480
.equ		_dyH1H1,	496
.equ		_dzH1H1,	512	
.equ		_dxH1H2,	528
.equ		_dyH1H2,	544
.equ		_dzH1H2,	560	
.equ		_dxH2O,		576
.equ		_dyH2O,		592
.equ		_dzH2O,		608	
.equ		_dxH2H1,	624
.equ		_dyH2H1,	640
.equ		_dzH2H1,	656	
.equ		_dxH2H2,	672
.equ		_dyH2H2,	688
.equ		_dzH2H2,	704
.equ		_qqOO,		720
.equ		_qqOH,		736
.equ		_qqHH,		752
.equ		_c6,		768
.equ		_c12,		784
.equ		_six,		800
.equ		_twelve,	816		 
.equ		_vctot,		832
.equ		_vnbtot,	848
.equ		_fixO,		864
.equ		_fiyO,		880
.equ		_fizO,		896
.equ		_fixH1,		912
.equ		_fiyH1,		928
.equ		_fizH1,		944
.equ		_fixH2,		960
.equ		_fiyH2,		976
.equ		_fizH2,		992
.equ		_fjxO,		1008
.equ		_fjyO,		1024
.equ		_fjzO,		1040
.equ		_fjxH1,		1056
.equ		_fjyH1,		1072
.equ		_fjzH1,		1088
.equ		_fjxH2,		1104
.equ		_fjyH2,		1120
.equ		_fjzH2,		1136
.equ		_half,		1152
.equ		_three,		1168
.equ		_rsqOO,		1184
.equ		_rsqOH1,	1200
.equ		_rsqOH2,	1216
.equ		_rsqH1O,	1232
.equ		_rsqH1H1,	1248
.equ		_rsqH1H2,	1264
.equ		_rsqH2O,	1280
.equ		_rsqH2H1,	1296
.equ		_rsqH2H2,	1312
.equ		_rinvOO,	1328
.equ		_rinvOH1,	1344
.equ		_rinvOH2,	1360
.equ		_rinvH1O,	1376
.equ		_rinvH1H1,	1392
.equ		_rinvH1H2,	1408
.equ		_rinvH2O,	1424
.equ		_rinvH2H1,	1440
.equ		_rinvH2H2,	1456
.equ		_two,		1472
.equ		_krf,		1488	
.equ		_crf,		1504
.equ		_is3,		1520
.equ		_ii3,		1524
.equ		_innerjjnr,	1528
.equ		_innerk,	1532
.equ		_salign,	1536
	push ebp
	mov ebp,esp	
        push eax
        push ebx
        push ecx
        push edx
	push esi
	push edi
	sub esp, 1540		/* local stack space */
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + _salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_three]
	movupd xmm2, [sse2_six]
	movupd xmm3, [sse2_twelve]
	movupd xmm4, [sse2_two]
	movsd xmm5, [ebp + _argkrf]
	movsd xmm6, [ebp + _argcrf]
	
	movapd [esp + _half],  xmm0
	movapd [esp + _three], xmm1
	movapd [esp + _six],  xmm2
	movapd [esp + _twelve], xmm3
	movapd [esp + _two], xmm4
	shufpd xmm5, xmm5, 0
	shufpd xmm6, xmm6, 0
	movapd [esp + _krf], xmm5
	movapd [esp + _crf], xmm6
	
	/* assume we have at least one i particle - start directly */
	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	mov   ebx, [ecx]	        /* ebx =ii */

	mov   edx, [ebp + _charge]
	movsd xmm3, [edx + ebx*8]	
	movsd xmm4, xmm3	
	movsd xmm5, [edx + ebx*8 + 8]	
	movsd xmm6, [ebp + _facel]
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm5
	mulsd  xmm5, xmm5
	mulsd  xmm3, xmm6
	mulsd  xmm4, xmm6
	mulsd  xmm5, xmm6
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _qqOO], xmm3
	movapd [esp + _qqOH], xmm4
	movapd [esp + _qqHH], xmm5
		
	xorpd xmm0, xmm0
	mov   edx, [ebp + _type]
	mov   ecx, [edx + ebx*4]
	shl   ecx, 1
	mov   edx, ecx
	imul  ecx, [ebp + _ntype]      /* ecx = ntia = 2*ntype*type[ii0] */
	add   edx, ecx
	mov   eax, [ebp + _nbfp]
	movupd xmm0, [eax + edx*8] 
	movhlps xmm1, xmm0
	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	movapd [esp + _c6], xmm0
	movapd [esp + _c12], xmm1

.i2130_outer:
	mov   eax, [ebp + _shift]      /* eax = pointer into shift[] */
	mov   ebx, [eax]		/* ebx=shift[n] */
	add   [ebp + _shift],  4  /* advance pointer one step */
	
	lea   ebx, [ebx + ebx*2]        /* ebx=3*is */
	mov   [esp + _is3],ebx    	/* store is3 */

	mov   eax, [ebp + _shiftvec]   /* eax = base of shiftvec[] */

	movlpd xmm0, [eax + ebx*8]
	movlpd xmm1, [eax + ebx*8 + 8]
	movlpd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	add   [ebp + _iinr],  4   /* advance pointer */
	mov   ebx, [ecx]	        /* ebx =ii */

	lea   ebx, [ebx + ebx*2]	/* ebx = 3*ii=ii3 */
	mov   eax, [ebp + _pos]        /* eax = base of pos[] */ 
	mov   [esp + _ii3], ebx	
	
	movapd xmm3, xmm0
	movapd xmm4, xmm1
	movapd xmm5, xmm2
	addsd xmm3, [eax + ebx*8]
	addsd xmm4, [eax + ebx*8 + 8]
	addsd xmm5, [eax + ebx*8 + 16]		
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _ixO], xmm3
	movapd [esp + _iyO], xmm4
	movapd [esp + _izO], xmm5

	movsd xmm3, xmm0
	movsd xmm4, xmm1
	movsd xmm5, xmm2
	addsd xmm0, [eax + ebx*8 + 24]
	addsd xmm1, [eax + ebx*8 + 32]
	addsd xmm2, [eax + ebx*8 + 40]		
	addsd xmm3, [eax + ebx*8 + 48]
	addsd xmm4, [eax + ebx*8 + 56]
	addsd xmm5, [eax + ebx*8 + 64]		

	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _ixH1], xmm0
	movapd [esp + _iyH1], xmm1
	movapd [esp + _izH1], xmm2
	movapd [esp + _ixH2], xmm3
	movapd [esp + _iyH2], xmm4
	movapd [esp + _izH2], xmm5

	/* clear vctot and i forces */
	xorpd xmm4, xmm4
	movapd [esp + _vctot], xmm4
	movapd [esp + _vnbtot], xmm4
	movapd [esp + _fixO], xmm4
	movapd [esp + _fiyO], xmm4
	movapd [esp + _fizO], xmm4
	movapd [esp + _fixH1], xmm4
	movapd [esp + _fiyH1], xmm4
	movapd [esp + _fizH1], xmm4
	movapd [esp + _fixH2], xmm4
	movapd [esp + _fiyH2], xmm4
	movapd [esp + _fizH2], xmm4
	
	mov   eax, [ebp + _jindex]
	mov   ecx, [eax]	         /* jindex[n] */
	mov   edx, [eax + 4]	         /* jindex[n+1] */
	add   [ebp + _jindex],  4
	sub   edx, ecx                   /* number of innerloop atoms */

	mov   esi, [ebp + _pos]
	mov   edi, [ebp + _faction]	
	mov   eax, [ebp + _jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + _innerjjnr], eax     /* pointer to jjnr[nj0] */
	sub   edx,  2
	mov   [esp + _innerk], edx        /* number of innerloop atoms */
	jge   .i2130_unroll_loop
	jmp   .i2130_checksingle
.i2130_unroll_loop:
	/* twice unrolled innerloop here */
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]	
	mov   ebx, [edx + 4] 
	
	add   [esp + _innerjjnr],  8	/* advance pointer (unrolled 2) */

	mov esi, [ebp + _pos]       /* base of pos[] */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */
	lea   ebx, [ebx + ebx*2]	
	
	/* move j coordinates to local temp variables */
	movlpd xmm2, [esi + eax*8]
	movlpd xmm3, [esi + eax*8 + 8]
	movlpd xmm4, [esi + eax*8 + 16]
	movlpd xmm5, [esi + eax*8 + 24]
	movlpd xmm6, [esi + eax*8 + 32]
	movlpd xmm7, [esi + eax*8 + 40]
	movhpd xmm2, [esi + ebx*8]
	movhpd xmm3, [esi + ebx*8 + 8]
	movhpd xmm4, [esi + ebx*8 + 16]
	movhpd xmm5, [esi + ebx*8 + 24]
	movhpd xmm6, [esi + ebx*8 + 32]
	movhpd xmm7, [esi + ebx*8 + 40]
	movapd 	[esp + _jxO], xmm2
	movapd 	[esp + _jyO], xmm3
	movapd 	[esp + _jzO], xmm4
	movapd 	[esp + _jxH1], xmm5
	movapd 	[esp + _jyH1], xmm6
	movapd 	[esp + _jzH1], xmm7
	movlpd xmm2, [esi + eax*8 + 48]
	movlpd xmm3, [esi + eax*8 + 56]
	movlpd xmm4, [esi + eax*8 + 64]
	movhpd xmm2, [esi + ebx*8 + 48]
	movhpd xmm3, [esi + ebx*8 + 56]
	movhpd xmm4, [esi + ebx*8 + 64]
	movapd 	[esp + _jxH2], xmm2
	movapd 	[esp + _jyH2], xmm3
	movapd 	[esp + _jzH2], xmm4
	
	movapd xmm0, [esp + _ixO]
	movapd xmm1, [esp + _iyO]
	movapd xmm2, [esp + _izO]
	movapd xmm3, [esp + _ixO]
	movapd xmm4, [esp + _iyO]
	movapd xmm5, [esp + _izO]
	subpd  xmm0, [esp + _jxO]
	subpd  xmm1, [esp + _jyO]
	subpd  xmm2, [esp + _jzO]
	subpd  xmm3, [esp + _jxH1]
	subpd  xmm4, [esp + _jyH1]
	subpd  xmm5, [esp + _jzH1]
	movapd [esp + _dxOO], xmm0
	movapd [esp + _dyOO], xmm1
	movapd [esp + _dzOO], xmm2
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	movapd [esp + _dxOH1], xmm3
	movapd [esp + _dyOH1], xmm4
	movapd [esp + _dzOH1], xmm5
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + _rsqOO], xmm0
	movapd [esp + _rsqOH1], xmm3

	movapd xmm0, [esp + _ixO]
	movapd xmm1, [esp + _iyO]
	movapd xmm2, [esp + _izO]
	movapd xmm3, [esp + _ixH1]
	movapd xmm4, [esp + _iyH1]
	movapd xmm5, [esp + _izH1]
	subpd  xmm0, [esp + _jxH2]
	subpd  xmm1, [esp + _jyH2]
	subpd  xmm2, [esp + _jzH2]
	subpd  xmm3, [esp + _jxO]
	subpd  xmm4, [esp + _jyO]
	subpd  xmm5, [esp + _jzO]
	movapd [esp + _dxOH2], xmm0
	movapd [esp + _dyOH2], xmm1
	movapd [esp + _dzOH2], xmm2
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	movapd [esp + _dxH1O], xmm3
	movapd [esp + _dyH1O], xmm4
	movapd [esp + _dzH1O], xmm5
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + _rsqOH2], xmm0
	movapd [esp + _rsqH1O], xmm3

	movapd xmm0, [esp + _ixH1]
	movapd xmm1, [esp + _iyH1]
	movapd xmm2, [esp + _izH1]
	movapd xmm3, [esp + _ixH1]
	movapd xmm4, [esp + _iyH1]
	movapd xmm5, [esp + _izH1]
	subpd  xmm0, [esp + _jxH1]
	subpd  xmm1, [esp + _jyH1]
	subpd  xmm2, [esp + _jzH1]
	subpd  xmm3, [esp + _jxH2]
	subpd  xmm4, [esp + _jyH2]
	subpd  xmm5, [esp + _jzH2]
	movapd [esp + _dxH1H1], xmm0
	movapd [esp + _dyH1H1], xmm1
	movapd [esp + _dzH1H1], xmm2
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	movapd [esp + _dxH1H2], xmm3
	movapd [esp + _dyH1H2], xmm4
	movapd [esp + _dzH1H2], xmm5
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + _rsqH1H1], xmm0
	movapd [esp + _rsqH1H2], xmm3

	movapd xmm0, [esp + _ixH2]
	movapd xmm1, [esp + _iyH2]
	movapd xmm2, [esp + _izH2]
	movapd xmm3, [esp + _ixH2]
	movapd xmm4, [esp + _iyH2]
	movapd xmm5, [esp + _izH2]
	subpd  xmm0, [esp + _jxO]
	subpd  xmm1, [esp + _jyO]
	subpd  xmm2, [esp + _jzO]
	subpd  xmm3, [esp + _jxH1]
	subpd  xmm4, [esp + _jyH1]
	subpd  xmm5, [esp + _jzH1]
	movapd [esp + _dxH2O], xmm0
	movapd [esp + _dyH2O], xmm1
	movapd [esp + _dzH2O], xmm2
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	movapd [esp + _dxH2H1], xmm3
	movapd [esp + _dyH2H1], xmm4
	movapd [esp + _dzH2H1], xmm5
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm4, xmm3
	addpd  xmm4, xmm5
	movapd [esp + _rsqH2O], xmm0
	movapd [esp + _rsqH2H1], xmm4

	movapd xmm0, [esp + _ixH2]
	movapd xmm1, [esp + _iyH2]
	movapd xmm2, [esp + _izH2]
	subpd  xmm0, [esp + _jxH2]
	subpd  xmm1, [esp + _jyH2]
	subpd  xmm2, [esp + _jzH2]
	movapd [esp + _dxH2H2], xmm0
	movapd [esp + _dyH2H2], xmm1
	movapd [esp + _dzH2H2], xmm2
	mulpd xmm0, xmm0
	mulpd xmm1, xmm1
	mulpd xmm2, xmm2
	addpd xmm0, xmm1
	addpd xmm0, xmm2
	movapd [esp + _rsqH2H2], xmm0
		
	/* start doing invsqrt use rsq values in xmm0, xmm4 */
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulpd   xmm1, xmm1	/* luA*luA */
	mulpd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	mulpd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subpd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm3, [esp + _half] /* iter1 */
	mulpd   xmm7, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulpd   xmm3, xmm3	/* luA*luA */
	mulpd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	mulpd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subpd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm1, [esp + _half] /* rinv */
	mulpd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvH2H2], xmm1
	movapd [esp + _rinvH2H1], xmm5

	movapd xmm0, [esp + _rsqOO]
	movapd xmm4, [esp + _rsqOH1]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulpd   xmm1, xmm1	/* luA*luA */
	mulpd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	mulpd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subpd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm3, [esp + _half] /* iter1 of  */
	mulpd   xmm7, [esp + _half] /* iter1 of  */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulpd   xmm3, xmm3	/* luA*luA */
	mulpd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	mulpd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subpd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm1, [esp + _half] /* rinv */
	mulpd   xmm5, [esp + _half] /* rinv*/
	movapd [esp + _rinvOO], xmm1
	movapd [esp + _rinvOH1], xmm5

	movapd xmm0, [esp + _rsqOH2]
	movapd xmm4, [esp + _rsqH1O]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulpd   xmm1, xmm1	/* luA*luA */
	mulpd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	mulpd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subpd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm3, [esp + _half] /* iter1 */
	mulpd   xmm7, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulpd   xmm3, xmm3	/* luA*luA */
	mulpd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	mulpd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subpd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm1, [esp + _half] /* rinv */
	mulpd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvOH2], xmm1
	movapd [esp + _rinvH1O], xmm5

	movapd xmm0, [esp + _rsqH1H1]
	movapd xmm4, [esp + _rsqH1H2]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulpd   xmm1, xmm1	/* luA*luA */
	mulpd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	mulpd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subpd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm3, [esp + _half] /* iter1a */
	mulpd   xmm7, [esp + _half] /* iter1b */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulpd   xmm3, xmm3	/* luA*luA */
	mulpd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	mulpd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subpd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm1, [esp + _half] /* rinv */
	mulpd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvH1H1], xmm1
	movapd [esp + _rinvH1H2], xmm5

	movapd xmm0, [esp + _rsqH2O]
	cvtpd2ps xmm1, xmm0	
	rsqrtps xmm1, xmm1
	cvtps2pd xmm1, xmm1
	
	movapd  xmm2, xmm1	/* copy of luA */
	mulpd   xmm1, xmm1	/* luA*luA */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm3, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	mulpd   xmm3, xmm3	/* luA*luA */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm1, [esp + _half] /* rinv */
	movapd [esp + _rinvH2O], xmm1
	
	/* start with OO interaction */
	movapd xmm0, [esp + _rinvOO]
	movapd xmm7, xmm0		/* xmm7=rinv */
	movapd xmm5, [esp + _krf]
	mulpd  xmm0, xmm0		/* xmm0=rinvsq */
	movapd xmm1, xmm0
	mulpd  xmm1, xmm0		/* rinvsq*rinvsq */
	mulpd  xmm1, xmm0		/* xmm1=rinvsix */
	mulpd  xmm5, [esp + _rsqOO]	/* xmm5=krsq */
	movapd xmm6, xmm5		/* krsq */
	addpd  xmm6, xmm7		/* xmm6=rinv+ krsq */
	subpd  xmm6, [esp + _crf]	/* rinv+krsq-crf */
	
	mulpd  xmm6, [esp + _qqOO]	/* xmm6=voul=qq*(rinv+ krsq-crf) */
	mulpd  xmm5, [esp + _two]	/* 2*krsq */
	subpd  xmm7, xmm5		/* xmm7=rinv-2*krsq */
	mulpd  xmm7, [esp + _qqOO]	/* xmm7 = qq*(rinv-2*krsq) */

	movapd xmm2, xmm1		/* rinv6 */
	mulpd  xmm2, xmm2		/* xmm2=rinvtwelve */
	mulpd  xmm1, [esp + _c6]	/* c6*rinv6 */
	mulpd  xmm2, [esp + _c12]	/* c12*rinv12 */
	movapd xmm3, xmm2		/* c12*rinv12 */
	subpd  xmm3, xmm1		/* vnb12-vnb6 */
	addpd  xmm3, [esp + _vnbtot]	
	mulpd  xmm1, [esp + _six]	/* 6.0*vnb6 */
	mulpd  xmm2, [esp + _twelve]	/* 12*vnb12 */
	movapd [esp + _vnbtot], xmm3	
	subpd  xmm2, xmm1		/* 12*vnb12-6*vnb6 */
	addpd  xmm2, xmm7		/* 12*vnb12-6*vnb6+qq*(rinv-2*krsq) */
	addpd  xmm6, [esp + _vctot] /* local vctot summation variable */
	mulpd  xmm0, xmm2		/* (12*vnb12-6*vnb6+qq*(rinv-2*krsq))*rinvsq */
	
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulpd xmm0, [esp + _dxOO]
	mulpd xmm1, [esp + _dyOO]
	mulpd xmm2, [esp + _dzOO]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixO]
	addpd xmm1, [esp + _fiyO]
	addpd xmm2, [esp + _fizO]
	movapd [esp + _fjxO], xmm3
	movapd [esp + _fjyO], xmm4
	movapd [esp + _fjzO], xmm5
	movapd [esp + _fixO], xmm0
	movapd [esp + _fiyO], xmm1
	movapd [esp + _fizO], xmm2

	/* O-H1 interaction */
	movapd xmm0, [esp + _rinvOH1]
	movapd xmm7, xmm0	/* xmm7=rinv */
	movapd xmm5, [esp + _krf]
	movapd xmm1, xmm0
	mulpd  xmm5, [esp + _rsqOH1] /* xmm5=krsq */
	movapd xmm4, xmm5
	addpd  xmm4, xmm7	/* xmm4=rinv+ krsq */
	mulpd  xmm0, xmm0
	subpd  xmm4, [esp + _crf]
	mulpd  xmm4, [esp + _qqOH] /* xmm4=voul=qq*(rinv+ krsq) */
	mulpd  xmm5, [esp + _two]
	subpd  xmm7, xmm5	/* xmm7=rinv-2*krsq */
	mulpd  xmm7, [esp + _qqOH] /* xmm7 = coul part of fscal */
	addpd  xmm6, xmm4	/* add to local vctot */
	mulpd xmm0, xmm7	/* fsOH1  */
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	
	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulpd xmm0, [esp + _dxOH1]
	mulpd xmm1, [esp + _dyOH1]
	mulpd xmm2, [esp + _dzOH1]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixO]
	addpd xmm1, [esp + _fiyO]
	addpd xmm2, [esp + _fizO]
	movapd [esp + _fjxH1], xmm3
	movapd [esp + _fjyH1], xmm4
	movapd [esp + _fjzH1], xmm5
	movapd [esp + _fixO], xmm0
	movapd [esp + _fiyO], xmm1
	movapd [esp + _fizO], xmm2

	/* O-H2 interaction */ 
	movapd xmm0, [esp + _rinvOH2]
	movapd xmm7, xmm0	/* xmm7=rinv */
	movapd xmm5, [esp + _krf]	
	movapd xmm1, xmm0
	mulpd  xmm5, [esp + _rsqOH2] /* xmm5=krsq */
	movapd xmm4, xmm5
	addpd  xmm4, xmm7	/* xmm4=r inv+ krsq */
	mulpd xmm0, xmm0
	subpd  xmm4, [esp + _crf]
	mulpd  xmm4, [esp + _qqOH] /* xmm4=voul=qq*(rinv+ krsq) */
	mulpd  xmm5, [esp + _two]
	subpd  xmm7, xmm5	/* xmm7=rinv-2*krsq */
	mulpd  xmm7, [esp + _qqOH] /* xmm7 = coul part of fscal */
	addpd  xmm6, xmm4	/* add to local vctot */
	mulpd xmm0, xmm7	/* fsOH2 */
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulpd xmm0, [esp + _dxOH2]
	mulpd xmm1, [esp + _dyOH2]
	mulpd xmm2, [esp + _dzOH2]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixO]
	addpd xmm1, [esp + _fiyO]
	addpd xmm2, [esp + _fizO]
	movapd [esp + _fjxH2], xmm3
	movapd [esp + _fjyH2], xmm4
	movapd [esp + _fjzH2], xmm5
	movapd [esp + _fixO], xmm0
	movapd [esp + _fiyO], xmm1
	movapd [esp + _fizO], xmm2

	/* H1-O interaction */
	movapd xmm0, [esp + _rinvH1O]
	movapd xmm7, xmm0	/* xmm7=rinv */
	movapd xmm5, [esp + _krf]	
	movapd xmm1, xmm0
	mulpd  xmm5, [esp + _rsqH1O] /* xmm5=krsq */
	movapd xmm4, xmm5
	addpd  xmm4, xmm7	/* xmm4=rinv+ krsq */
	mulpd xmm0, xmm0
	subpd  xmm4, [esp + _crf]
	mulpd  xmm4, [esp + _qqOH] /* xmm4=voul=qq*(rinv+ krsq) */
	mulpd  xmm5, [esp + _two]
	subpd  xmm7, xmm5	/* xmm7=rinv-2*krsq */
	mulpd  xmm7, [esp + _qqOH] /* xmm7 = coul part of fscal */
	addpd  xmm6, xmm4	/* add to local vctot */
	mulpd xmm0, xmm7	/* fsOH2 */
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	movapd xmm3, [esp + _fjxO]
	movapd xmm4, [esp + _fjyO]
	movapd xmm5, [esp + _fjzO]
	mulpd xmm0, [esp + _dxH1O]
	mulpd xmm1, [esp + _dyH1O]
	mulpd xmm2, [esp + _dzH1O]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixH1]
	addpd xmm1, [esp + _fiyH1]
	addpd xmm2, [esp + _fizH1]
	movapd [esp + _fjxO], xmm3
	movapd [esp + _fjyO], xmm4
	movapd [esp + _fjzO], xmm5
	movapd [esp + _fixH1], xmm0
	movapd [esp + _fiyH1], xmm1
	movapd [esp + _fizH1], xmm2

	/* H1-H1 interaction */
	movapd xmm0, [esp + _rinvH1H1]
	movapd xmm7, xmm0	/* xmm7=rinv */
	movapd xmm5, [esp + _krf]	
	movapd xmm1, xmm0
	mulpd  xmm5, [esp + _rsqH1H1] /* xmm5=krsq */
	movapd xmm4, xmm5
	addpd  xmm4, xmm7	/* xmm4=r inv+ krsq */
	subpd  xmm4, [esp + _crf]
	mulpd xmm0, xmm0
	mulpd  xmm4, [esp + _qqHH] /* xmm4=voul=qq*(rinv+ krsq) */
	mulpd  xmm5, [esp + _two]
	subpd  xmm7, xmm5	/* xmm7=rinv-2*krsq */
	mulpd  xmm7, [esp + _qqHH] /* xmm7 = coul part of fscal */
	addpd  xmm6, xmm4	/* add to local vctot */
	mulpd xmm0, xmm7	/* fsOH2 */
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	movapd xmm3, [esp + _fjxH1]
	movapd xmm4, [esp + _fjyH1]
	movapd xmm5, [esp + _fjzH1]
	mulpd xmm0, [esp + _dxH1H1]
	mulpd xmm1, [esp + _dyH1H1]
	mulpd xmm2, [esp + _dzH1H1]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixH1]
	addpd xmm1, [esp + _fiyH1]
	addpd xmm2, [esp + _fizH1]
	movapd [esp + _fjxH1], xmm3
	movapd [esp + _fjyH1], xmm4
	movapd [esp + _fjzH1], xmm5
	movapd [esp + _fixH1], xmm0
	movapd [esp + _fiyH1], xmm1
	movapd [esp + _fizH1], xmm2

	/* H1-H2 interaction */
	movapd xmm0, [esp + _rinvH1H2]
	movapd xmm7, xmm0	/* xmm7=rinv */
	movapd xmm5, [esp + _krf]	
	movapd xmm1, xmm0
	mulpd  xmm5, [esp + _rsqH1H2] /* xmm5=krsq */
	movapd xmm4, xmm5
	addpd  xmm4, xmm7	/* xmm4=r inv+ krsq */
	mulpd xmm0, xmm0
	subpd  xmm4, [esp + _crf]
	mulpd  xmm4, [esp + _qqHH] /* xmm4=voul=qq*(rinv+ krsq) */
	mulpd  xmm5, [esp + _two]
	subpd  xmm7, xmm5	/* xmm7=rinv-2*krsq */
	mulpd  xmm7, [esp + _qqHH] /* xmm7 = coul part of fscal */
	addpd  xmm6, xmm4	/* add to local vctot */
	mulpd xmm0, xmm7	/* fsOH2 */
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	
	movapd xmm3, [esp + _fjxH2]
	movapd xmm4, [esp + _fjyH2]
	movapd xmm5, [esp + _fjzH2]
	mulpd xmm0, [esp + _dxH1H2]
	mulpd xmm1, [esp + _dyH1H2]
	mulpd xmm2, [esp + _dzH1H2]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixH1]
	addpd xmm1, [esp + _fiyH1]
	addpd xmm2, [esp + _fizH1]
	movapd [esp + _fjxH2], xmm3
	movapd [esp + _fjyH2], xmm4
	movapd [esp + _fjzH2], xmm5
	movapd [esp + _fixH1], xmm0
	movapd [esp + _fiyH1], xmm1
	movapd [esp + _fizH1], xmm2

	/* H2-O interaction */
	movapd xmm0, [esp + _rinvH2O]
	movapd xmm7, xmm0	/* xmm7=rinv */
	movapd xmm5, [esp + _krf]	
	movapd xmm1, xmm0
	mulpd  xmm5, [esp + _rsqH2O] /* xmm5=krsq */
	movapd xmm4, xmm5
	addpd  xmm4, xmm7	/* xmm4=r inv+ krsq */
	subpd  xmm4, [esp + _crf]
	mulpd xmm0, xmm0
	mulpd  xmm4, [esp + _qqOH] /* xmm4=voul=qq*(rinv+ krsq) */
	mulpd  xmm5, [esp + _two]
	subpd  xmm7, xmm5	/* xmm7=rinv-2*krsq */
	mulpd  xmm7, [esp + _qqOH] /* xmm7 = coul part of fscal */
	addpd  xmm6, xmm4	/* add to local vctot */
	mulpd xmm0, xmm7	/* fsOH2 */
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	movapd xmm3, [esp + _fjxO]
	movapd xmm4, [esp + _fjyO]
	movapd xmm5, [esp + _fjzO]
	mulpd xmm0, [esp + _dxH2O]
	mulpd xmm1, [esp + _dyH2O]
	mulpd xmm2, [esp + _dzH2O]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixH2]
	addpd xmm1, [esp + _fiyH2]
	addpd xmm2, [esp + _fizH2]
	movapd [esp + _fjxO], xmm3
	movapd [esp + _fjyO], xmm4
	movapd [esp + _fjzO], xmm5
	movapd [esp + _fixH2], xmm0
	movapd [esp + _fiyH2], xmm1
	movapd [esp + _fizH2], xmm2

	/* H2-H1 interaction */
	movapd xmm0, [esp + _rinvH2H1]
	movapd xmm7, xmm0	/* xmm7=rinv */
	movapd xmm5, [esp + _krf]	
	movapd xmm1, xmm0
	mulpd  xmm5, [esp + _rsqH2H1] /* xmm5=krsq */
	movapd xmm4, xmm5
	addpd  xmm4, xmm7	/* xmm4=r inv+ krsq */
	subpd  xmm4, [esp + _crf]
	mulpd xmm0, xmm0
	mulpd  xmm4, [esp + _qqHH] /* xmm4=voul=qq*(rinv+ krsq) */
	mulpd  xmm5, [esp + _two]
	subpd  xmm7, xmm5	/* xmm7=rinv-2*krsq */
	mulpd  xmm7, [esp + _qqHH] /* xmm7 = coul part of fscal */
	addpd  xmm6, xmm4	/* add to local vctot */
	mulpd xmm0, xmm7	/* fsOH2 */
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	movapd xmm3, [esp + _fjxH1]
	movapd xmm4, [esp + _fjyH1]
	movapd xmm5, [esp + _fjzH1]
	mulpd xmm0, [esp + _dxH2H1]
	mulpd xmm1, [esp + _dyH2H1]
	mulpd xmm2, [esp + _dzH2H1]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixH2]
	addpd xmm1, [esp + _fiyH2]
	addpd xmm2, [esp + _fizH2]
	movapd [esp + _fjxH1], xmm3
	movapd [esp + _fjyH1], xmm4
	movapd [esp + _fjzH1], xmm5
	movapd [esp + _fixH2], xmm0
	movapd [esp + _fiyH2], xmm1
	movapd [esp + _fizH2], xmm2

	/* H2-H2 interaction */
	movapd xmm0, [esp + _rinvH2H2]
	movapd xmm7, xmm0	/* xmm7=rinv */
	movapd xmm5, [esp + _krf]	
	movapd xmm1, xmm0
	mulpd  xmm5, [esp + _rsqH2H2] /* xmm5=krsq */
	movapd xmm4, xmm5
	addpd  xmm4, xmm7	/* xmm4=r inv+ krsq */
	subpd  xmm4, [esp + _crf]
	mulpd xmm0, xmm0
	mulpd  xmm4, [esp + _qqHH] /* xmm4=voul=qq*(rinv+ krsq) */
	mulpd  xmm5, [esp + _two]
	subpd  xmm7, xmm5	/* xmm7=rinv-2*krsq */
	mulpd  xmm7, [esp + _qqHH] /* xmm7 = coul part of fscal */
	addpd  xmm6, xmm4	/* add to local vctot */
	mulpd xmm0, xmm7	/* fsOH2 */
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	movapd xmm1, xmm0
	movapd [esp + _vctot], xmm6
	movapd xmm2, xmm0
	
	movapd xmm3, [esp + _fjxH2]
	movapd xmm4, [esp + _fjyH2]
	movapd xmm5, [esp + _fjzH2]
	mulpd xmm0, [esp + _dxH2H2]
	mulpd xmm1, [esp + _dyH2H2]
	mulpd xmm2, [esp + _dzH2H2]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixH2]
	addpd xmm1, [esp + _fiyH2]
	addpd xmm2, [esp + _fizH2]
	movapd [esp + _fjxH2], xmm3
	movapd [esp + _fjyH2], xmm4
	movapd [esp + _fjzH2], xmm5
	movapd [esp + _fixH2], xmm0
	movapd [esp + _fiyH2], xmm1
	movapd [esp + _fizH2], xmm2

	mov edi, [ebp + _faction]
		
	/* Did all interactions - now update j forces */
	movlpd xmm0, [edi + eax*8]
	movlpd xmm1, [edi + eax*8 + 8]
	movlpd xmm2, [edi + eax*8 + 16]
	movlpd xmm3, [edi + eax*8 + 24]
	movlpd xmm4, [edi + eax*8 + 32]
	movlpd xmm5, [edi + eax*8 + 40]
	movlpd xmm6, [edi + eax*8 + 48]
	movlpd xmm7, [edi + eax*8 + 56]
	movhpd xmm0, [edi + ebx*8]
	movhpd xmm1, [edi + ebx*8 + 8]
	movhpd xmm2, [edi + ebx*8 + 16]
	movhpd xmm3, [edi + ebx*8 + 24]
	movhpd xmm4, [edi + ebx*8 + 32]
	movhpd xmm5, [edi + ebx*8 + 40]
	movhpd xmm6, [edi + ebx*8 + 48]
	movhpd xmm7, [edi + ebx*8 + 56]
	addpd xmm0, [esp + _fjxO]
	addpd xmm1, [esp + _fjyO]
	addpd xmm2, [esp + _fjzO]
	addpd xmm3, [esp + _fjxH1]
	addpd xmm4, [esp + _fjyH1]
	addpd xmm5, [esp + _fjzH1]
	addpd xmm6, [esp + _fjxH2]
	addpd xmm7, [esp + _fjyH2]
	movlpd [edi + eax*8], xmm0
	movlpd [edi + eax*8 + 8], xmm1
	movlpd [edi + eax*8 + 16], xmm2
	movlpd [edi + eax*8 + 24], xmm3
	movlpd [edi + eax*8 + 32], xmm4
	movlpd [edi + eax*8 + 40], xmm5
	movlpd [edi + eax*8 + 48], xmm6
	movlpd [edi + eax*8 + 56], xmm7
	movhpd [edi + ebx*8], xmm0
	movhpd [edi + ebx*8 + 8], xmm1
	movhpd [edi + ebx*8 + 16], xmm2
	movhpd [edi + ebx*8 + 24], xmm3
	movhpd [edi + ebx*8 + 32], xmm4
	movhpd [edi + ebx*8 + 40], xmm5
	movhpd [edi + ebx*8 + 48], xmm6
	movhpd [edi + ebx*8 + 56], xmm7

	movlpd xmm0, [edi + eax*8 + 64]
	movhpd xmm0, [edi + ebx*8 + 64]
	addpd xmm0, [esp + _fjzH2]
	movlpd [edi + eax*8 + 64], xmm0
	movhpd [edi + ebx*8 + 64], xmm0
	
	/* should we do one more iteration? */
	sub   [esp + _innerk],  2
	jl    .i2130_checksingle
	jmp   .i2130_unroll_loop
.i2130_checksingle:
	mov   edx, [esp + _innerk]
	and   edx, 1
	jnz   .i2130_dosingle
	jmp   .i2130_updateouterdata
.i2130_dosingle:
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]
	
	mov esi, [ebp + _pos]
	lea   eax, [eax + eax*2]  

	/* fetch j coordinates */
	movlpd xmm2, [esi + eax*8]
	movlpd xmm3, [esi + eax*8 + 8]
	movlpd xmm4, [esi + eax*8 + 16]
	movlpd xmm5, [esi + eax*8 + 24]
	movlpd xmm6, [esi + eax*8 + 32]
	movlpd xmm7, [esi + eax*8 + 40]
	movapd 	[esp + _jxO], xmm2
	movapd 	[esp + _jyO], xmm3
	movapd 	[esp + _jzO], xmm4
	movapd 	[esp + _jxH1], xmm5
	movapd 	[esp + _jyH1], xmm6
	movapd 	[esp + _jzH1], xmm7
	movlpd xmm2, [esi + eax*8 + 48]
	movlpd xmm3, [esi + eax*8 + 56]
	movlpd xmm4, [esi + eax*8 + 64]
	movapd 	[esp + _jxH2], xmm2
	movapd 	[esp + _jyH2], xmm3
	movapd 	[esp + _jzH2], xmm4
	
	movapd xmm0, [esp + _ixO]
	movapd xmm1, [esp + _iyO]
	movapd xmm2, [esp + _izO]
	movapd xmm3, [esp + _ixO]
	movapd xmm4, [esp + _iyO]
	movapd xmm5, [esp + _izO]
	subsd  xmm0, [esp + _jxO]
	subsd  xmm1, [esp + _jyO]
	subsd  xmm2, [esp + _jzO]
	subsd  xmm3, [esp + _jxH1]
	subsd  xmm4, [esp + _jyH1]
	subsd  xmm5, [esp + _jzH1]
	movapd [esp + _dxOO], xmm0
	movapd [esp + _dyOO], xmm1
	movapd [esp + _dzOO], xmm2
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	movapd [esp + _dxOH1], xmm3
	movapd [esp + _dyOH1], xmm4
	movapd [esp + _dzOH1], xmm5
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + _rsqOO], xmm0
	movapd [esp + _rsqOH1], xmm3

	movapd xmm0, [esp + _ixO]
	movapd xmm1, [esp + _iyO]
	movapd xmm2, [esp + _izO]
	movapd xmm3, [esp + _ixH1]
	movapd xmm4, [esp + _iyH1]
	movapd xmm5, [esp + _izH1]
	subsd  xmm0, [esp + _jxH2]
	subsd  xmm1, [esp + _jyH2]
	subsd  xmm2, [esp + _jzH2]
	subsd  xmm3, [esp + _jxO]
	subsd  xmm4, [esp + _jyO]
	subsd  xmm5, [esp + _jzO]
	movapd [esp + _dxOH2], xmm0
	movapd [esp + _dyOH2], xmm1
	movapd [esp + _dzOH2], xmm2
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	movapd [esp + _dxH1O], xmm3
	movapd [esp + _dyH1O], xmm4
	movapd [esp + _dzH1O], xmm5
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + _rsqOH2], xmm0
	movapd [esp + _rsqH1O], xmm3

	movapd xmm0, [esp + _ixH1]
	movapd xmm1, [esp + _iyH1]
	movapd xmm2, [esp + _izH1]
	movapd xmm3, [esp + _ixH1]
	movapd xmm4, [esp + _iyH1]
	movapd xmm5, [esp + _izH1]
	subsd  xmm0, [esp + _jxH1]
	subsd  xmm1, [esp + _jyH1]
	subsd  xmm2, [esp + _jzH1]
	subsd  xmm3, [esp + _jxH2]
	subsd  xmm4, [esp + _jyH2]
	subsd  xmm5, [esp + _jzH2]
	movapd [esp + _dxH1H1], xmm0
	movapd [esp + _dyH1H1], xmm1
	movapd [esp + _dzH1H1], xmm2
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	movapd [esp + _dxH1H2], xmm3
	movapd [esp + _dyH1H2], xmm4
	movapd [esp + _dzH1H2], xmm5
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + _rsqH1H1], xmm0
	movapd [esp + _rsqH1H2], xmm3

	movapd xmm0, [esp + _ixH2]
	movapd xmm1, [esp + _iyH2]
	movapd xmm2, [esp + _izH2]
	movapd xmm3, [esp + _ixH2]
	movapd xmm4, [esp + _iyH2]
	movapd xmm5, [esp + _izH2]
	subsd  xmm0, [esp + _jxO]
	subsd  xmm1, [esp + _jyO]
	subsd  xmm2, [esp + _jzO]
	subsd  xmm3, [esp + _jxH1]
	subsd  xmm4, [esp + _jyH1]
	subsd  xmm5, [esp + _jzH1]
	movapd [esp + _dxH2O], xmm0
	movapd [esp + _dyH2O], xmm1
	movapd [esp + _dzH2O], xmm2
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	movapd [esp + _dxH2H1], xmm3
	movapd [esp + _dyH2H1], xmm4
	movapd [esp + _dzH2H1], xmm5
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm4, xmm3
	addsd  xmm4, xmm5
	movapd [esp + _rsqH2O], xmm0
	movapd [esp + _rsqH2H1], xmm4

	movapd xmm0, [esp + _ixH2]
	movapd xmm1, [esp + _iyH2]
	movapd xmm2, [esp + _izH2]
	subsd  xmm0, [esp + _jxH2]
	subsd  xmm1, [esp + _jyH2]
	subsd  xmm2, [esp + _jzH2]
	movapd [esp + _dxH2H2], xmm0
	movapd [esp + _dyH2H2], xmm1
	movapd [esp + _dzH2H2], xmm2
	mulsd xmm0, xmm0
	mulsd xmm1, xmm1
	mulsd xmm2, xmm2
	addsd xmm0, xmm1
	addsd xmm0, xmm2
	movapd [esp + _rsqH2H2], xmm0
		
	/* start doing invsqrt use rsq values in xmm0, xmm4 */
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulsd   xmm1, xmm1	/* luA*luA */
	mulsd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	mulsd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subsd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm3, [esp + _half] /* iter1 */
	mulsd   xmm7, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulsd   xmm3, xmm3	/* luA*luA */
	mulsd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	mulsd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subsd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm1, [esp + _half] /* rinv */
	mulsd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvH2H2], xmm1
	movapd [esp + _rinvH2H1], xmm5

	movapd xmm0, [esp + _rsqOO]
	movapd xmm4, [esp + _rsqOH1]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulsd   xmm1, xmm1	/* luA*luA */
	mulsd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	mulsd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subsd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm3, [esp + _half] /* iter1 of  */
	mulsd   xmm7, [esp + _half] /* iter1 of  */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulsd   xmm3, xmm3	/* luA*luA */
	mulsd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	mulsd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subsd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm1, [esp + _half] /* rinv */
	mulsd   xmm5, [esp + _half] /* rinv*/
	movapd [esp + _rinvOO], xmm1
	movapd [esp + _rinvOH1], xmm5

	movapd xmm0, [esp + _rsqOH2]
	movapd xmm4, [esp + _rsqH1O]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulsd   xmm1, xmm1	/* luA*luA */
	mulsd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	mulsd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subsd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm3, [esp + _half] /* iter1 */
	mulsd   xmm7, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulsd   xmm3, xmm3	/* luA*luA */
	mulsd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	mulsd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subsd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm1, [esp + _half] /* rinv */
	mulsd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvOH2], xmm1
	movapd [esp + _rinvH1O], xmm5

	movapd xmm0, [esp + _rsqH1H1]
	movapd xmm4, [esp + _rsqH1H2]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulsd   xmm1, xmm1	/* luA*luA */
	mulsd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	mulsd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subsd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm3, [esp + _half] /* iter1a */
	mulsd   xmm7, [esp + _half] /* iter1b */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulsd   xmm3, xmm3	/* luA*luA */
	mulsd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	mulsd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subsd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm1, [esp + _half] /* rinv */
	mulsd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvH1H1], xmm1
	movapd [esp + _rinvH1H2], xmm5

	movapd xmm0, [esp + _rsqH2O]
	cvtsd2ss xmm1, xmm0	
	rsqrtss xmm1, xmm1
	cvtss2sd xmm1, xmm1
	
	movapd  xmm2, xmm1	/* copy of luA */
	mulsd   xmm1, xmm1	/* luA*luA */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm3, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	mulsd   xmm3, xmm3	/* luA*luA */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm1, [esp + _half] /* rinv */
	movapd [esp + _rinvH2O], xmm1
	
	/* start with OO interaction */
	movapd xmm0, [esp + _rinvOO]
	movapd xmm7, xmm0	/* xmm7=rinv */
	movapd xmm5, [esp + _krf]
	mulsd  xmm0, xmm0
	movapd xmm1, xmm0
	mulsd  xmm1, xmm0
	mulsd  xmm1, xmm0	/* xmm1=rinvsix */
	mulsd  xmm5, [esp + _rsqOO] /* xmm5=krsq */
	movapd xmm6, xmm5
	addsd  xmm6, xmm7	/* xmm6=rinv+ krsq */
	subsd  xmm6, [esp + _crf]
	
	mulsd  xmm6, [esp + _qqOO] /* xmm6=voul=qq*(rinv+ krsq-crf) */
	mulsd  xmm5, [esp + _two]
	subsd  xmm7, xmm5	/* xmm7=rinv-2*krsq */
	mulsd  xmm7, [esp + _qqOO] /* xmm7 = coul part of fscal */
	
	movapd xmm2, xmm1
	mulsd  xmm2, xmm2	/* xmm2=rinvtwelve */
	mulsd  xmm1, [esp + _c6]	
	mulsd  xmm2, [esp + _c12]	
	movapd xmm3, xmm2
	subsd  xmm3, xmm1	/* xmm3=vnb12-vnb6 */
	addsd  xmm3, [esp + _vnbtot]
	mulsd  xmm1, [esp + _six]
	mulsd  xmm2, [esp + _twelve]
	movlpd [esp + _vnbtot], xmm3
	subsd  xmm2, xmm1
	addsd  xmm2, xmm7
	addsd  xmm6, [esp + _vctot] /* local vctot summation variable */
	mulsd  xmm0, xmm2
	
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulsd xmm0, [esp + _dxOO]
	mulsd xmm1, [esp + _dyOO]
	mulsd xmm2, [esp + _dzOO]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixO]
	addsd xmm1, [esp + _fiyO]
	addsd xmm2, [esp + _fizO]
	movlpd [esp + _fjxO], xmm3
	movlpd [esp + _fjyO], xmm4
	movlpd [esp + _fjzO], xmm5
	movlpd [esp + _fixO], xmm0
	movlpd [esp + _fiyO], xmm1
	movlpd [esp + _fizO], xmm2

	/* O-H1 interaction */
	movapd xmm0, [esp + _rinvOH1]
	movapd xmm7, xmm0	/* xmm7=rinv */
	movapd xmm5, [esp + _krf]
	movapd xmm1, xmm0
	mulsd  xmm5, [esp + _rsqOH1] /* xmm5=krsq */
	movapd xmm4, xmm5
	addsd  xmm4, xmm7	/* xmm4=rinv+ krsq */
	mulsd  xmm0, xmm0
	subsd  xmm4, [esp + _crf]
	mulsd  xmm4, [esp + _qqOH] /* xmm4=voul=qq*(rinv+ krsq) */
	mulsd  xmm5, [esp + _two]
	subsd  xmm7, xmm5	/* xmm7=rinv-2*krsq */
	mulsd  xmm7, [esp + _qqOH] /* xmm7 = coul part of fscal */
	addsd  xmm6, xmm4	/* add to local vctot */
	mulsd xmm0, xmm7	/* fsOH1  */
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	
	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulsd xmm0, [esp + _dxOH1]
	mulsd xmm1, [esp + _dyOH1]
	mulsd xmm2, [esp + _dzOH1]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixO]
	addsd xmm1, [esp + _fiyO]
	addsd xmm2, [esp + _fizO]
	movlpd [esp + _fjxH1], xmm3
	movlpd [esp + _fjyH1], xmm4
	movlpd [esp + _fjzH1], xmm5
	movlpd [esp + _fixO], xmm0
	movlpd [esp + _fiyO], xmm1
	movlpd [esp + _fizO], xmm2

	/* O-H2 interaction */ 
	movapd xmm0, [esp + _rinvOH2]
	movapd xmm7, xmm0	/* xmm7=rinv */
	movapd xmm5, [esp + _krf]	
	movapd xmm1, xmm0
	mulsd  xmm5, [esp + _rsqOH2] /* xmm5=krsq */
	movapd xmm4, xmm5
	addsd  xmm4, xmm7	/* xmm4=r inv+ krsq */
	mulsd  xmm0, xmm0
	subsd  xmm4, [esp + _crf]
	mulsd  xmm4, [esp + _qqOH] /* xmm4=voul=qq*(rinv+ krsq) */
	mulsd  xmm5, [esp + _two]
	subsd  xmm7, xmm5	/* xmm7=rinv-2*krsq */
	mulsd  xmm7, [esp + _qqOH] /* xmm7 = coul part of fscal */
	addsd  xmm6, xmm4	/* add to local vctot */
	mulsd xmm0, xmm7	/* fsOH2 */
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulsd xmm0, [esp + _dxOH2]
	mulsd xmm1, [esp + _dyOH2]
	mulsd xmm2, [esp + _dzOH2]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixO]
	addsd xmm1, [esp + _fiyO]
	addsd xmm2, [esp + _fizO]
	movlpd [esp + _fjxH2], xmm3
	movlpd [esp + _fjyH2], xmm4
	movlpd [esp + _fjzH2], xmm5
	movlpd [esp + _fixO], xmm0
	movlpd [esp + _fiyO], xmm1
	movlpd [esp + _fizO], xmm2

	/* H1-O interaction */
	movapd xmm0, [esp + _rinvH1O]
	movapd xmm7, xmm0	/* xmm7=rinv */
	movapd xmm5, [esp + _krf]	
	movapd xmm1, xmm0
	mulsd  xmm5, [esp + _rsqH1O] /* xmm5=krsq */
	movapd xmm4, xmm5
	addsd  xmm4, xmm7	/* xmm4=rinv+ krsq */
	mulsd xmm0, xmm0
	subsd  xmm4, [esp + _crf]
	mulsd  xmm4, [esp + _qqOH] /* xmm4=voul=qq*(rinv+ krsq) */
	mulsd  xmm5, [esp + _two]
	subsd  xmm7, xmm5	/* xmm7=rinv-2*krsq */
	mulsd  xmm7, [esp + _qqOH] /* xmm7 = coul part of fscal */
	addsd  xmm6, xmm4	/* add to local vctot */
	mulsd xmm0, xmm7	/* fsOH2 */
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	movapd xmm3, [esp + _fjxO]
	movapd xmm4, [esp + _fjyO]
	movapd xmm5, [esp + _fjzO]
	mulsd xmm0, [esp + _dxH1O]
	mulsd xmm1, [esp + _dyH1O]
	mulsd xmm2, [esp + _dzH1O]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixH1]
	addsd xmm1, [esp + _fiyH1]
	addsd xmm2, [esp + _fizH1]
	movlpd [esp + _fjxO], xmm3
	movlpd [esp + _fjyO], xmm4
	movlpd [esp + _fjzO], xmm5
	movlpd [esp + _fixH1], xmm0
	movlpd [esp + _fiyH1], xmm1
	movlpd [esp + _fizH1], xmm2

	/* H1-H1 interaction */
	movapd xmm0, [esp + _rinvH1H1]
	movapd xmm7, xmm0	/* xmm7=rinv */
	movapd xmm5, [esp + _krf]	
	movapd xmm1, xmm0
	mulsd  xmm5, [esp + _rsqH1H1] /* xmm5=krsq */
	movapd xmm4, xmm5
	addsd  xmm4, xmm7	/* xmm4=r inv+ krsq */
	subsd  xmm4, [esp + _crf]
	mulsd xmm0, xmm0
	mulsd  xmm4, [esp + _qqHH] /* xmm4=voul=qq*(rinv+ krsq) */
	mulsd  xmm5, [esp + _two]
	subsd  xmm7, xmm5	/* xmm7=rinv-2*krsq */
	mulsd  xmm7, [esp + _qqHH] /* xmm7 = coul part of fscal */
	addsd  xmm6, xmm4	/* add to local vctot */
	mulsd xmm0, xmm7	/* fsOH2 */
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	movapd xmm3, [esp + _fjxH1]
	movapd xmm4, [esp + _fjyH1]
	movapd xmm5, [esp + _fjzH1]
	mulsd xmm0, [esp + _dxH1H1]
	mulsd xmm1, [esp + _dyH1H1]
	mulsd xmm2, [esp + _dzH1H1]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixH1]
	addsd xmm1, [esp + _fiyH1]
	addsd xmm2, [esp + _fizH1]
	movlpd [esp + _fjxH1], xmm3
	movlpd [esp + _fjyH1], xmm4
	movlpd [esp + _fjzH1], xmm5
	movlpd [esp + _fixH1], xmm0
	movlpd [esp + _fiyH1], xmm1
	movlpd [esp + _fizH1], xmm2

	/* H1-H2 interaction */
	movapd xmm0, [esp + _rinvH1H2]
	movapd xmm7, xmm0	/* xmm7=rinv */
	movapd xmm5, [esp + _krf]	
	movapd xmm1, xmm0
	mulsd  xmm5, [esp + _rsqH1H2] /* xmm5=krsq */
	movapd xmm4, xmm5
	addsd  xmm4, xmm7	/* xmm4=r inv+ krsq */
	mulsd xmm0, xmm0
	subsd  xmm4, [esp + _crf]
	mulsd  xmm4, [esp + _qqHH] /* xmm4=voul=qq*(rinv+ krsq) */
	mulsd  xmm5, [esp + _two]
	subsd  xmm7, xmm5	/* xmm7=rinv-2*krsq */
	mulsd  xmm7, [esp + _qqHH] /* xmm7 = coul part of fscal */
	addsd  xmm6, xmm4	/* add to local vctot */
	mulsd xmm0, xmm7	/* fsOH2 */
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	
	movapd xmm3, [esp + _fjxH2]
	movapd xmm4, [esp + _fjyH2]
	movapd xmm5, [esp + _fjzH2]
	mulsd xmm0, [esp + _dxH1H2]
	mulsd xmm1, [esp + _dyH1H2]
	mulsd xmm2, [esp + _dzH1H2]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixH1]
	addsd xmm1, [esp + _fiyH1]
	addsd xmm2, [esp + _fizH1]
	movlpd [esp + _fjxH2], xmm3
	movlpd [esp + _fjyH2], xmm4
	movlpd [esp + _fjzH2], xmm5
	movlpd [esp + _fixH1], xmm0
	movlpd [esp + _fiyH1], xmm1
	movlpd [esp + _fizH1], xmm2

	/* H2-O interaction */
	movapd xmm0, [esp + _rinvH2O]
	movapd xmm7, xmm0	/* xmm7=rinv */
	movapd xmm5, [esp + _krf]	
	movapd xmm1, xmm0
	mulsd  xmm5, [esp + _rsqH2O] /* xmm5=krsq */
	movapd xmm4, xmm5
	addsd  xmm4, xmm7	/* xmm4=r inv+ krsq */
	subsd  xmm4, [esp + _crf]
	mulsd xmm0, xmm0
	mulsd  xmm4, [esp + _qqOH] /* xmm4=voul=qq*(rinv+ krsq) */
	mulsd  xmm5, [esp + _two]
	subsd  xmm7, xmm5	/* xmm7=rinv-2*krsq */
	mulsd  xmm7, [esp + _qqOH] /* xmm7 = coul part of fscal */
	addsd  xmm6, xmm4	/* add to local vctot */
	mulsd xmm0, xmm7	/* fsOH2 */
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	movapd xmm3, [esp + _fjxO]
	movapd xmm4, [esp + _fjyO]
	movapd xmm5, [esp + _fjzO]
	mulsd xmm0, [esp + _dxH2O]
	mulsd xmm1, [esp + _dyH2O]
	mulsd xmm2, [esp + _dzH2O]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixH2]
	addsd xmm1, [esp + _fiyH2]
	addsd xmm2, [esp + _fizH2]
	movlpd [esp + _fjxO], xmm3
	movlpd [esp + _fjyO], xmm4
	movlpd [esp + _fjzO], xmm5
	movlpd [esp + _fixH2], xmm0
	movlpd [esp + _fiyH2], xmm1
	movlpd [esp + _fizH2], xmm2

	/* H2-H1 interaction */
	movapd xmm0, [esp + _rinvH2H1]
	movapd xmm7, xmm0	/* xmm7=rinv */
	movapd xmm5, [esp + _krf]	
	movapd xmm1, xmm0
	mulsd  xmm5, [esp + _rsqH2H1] /* xmm5=krsq */
	movapd xmm4, xmm5
	addsd  xmm4, xmm7	/* xmm4=r inv+ krsq */
	subsd  xmm4, [esp + _crf]
	mulsd xmm0, xmm0
	mulsd  xmm4, [esp + _qqHH] /* xmm4=voul=qq*(rinv+ krsq) */
	mulsd  xmm5, [esp + _two]
	subsd  xmm7, xmm5	/* xmm7=rinv-2*krsq */
	mulsd  xmm7, [esp + _qqHH] /* xmm7 = coul part of fscal */
	addsd  xmm6, xmm4	/* add to local vctot */
	mulsd xmm0, xmm7	/* fsOH2 */
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	movapd xmm3, [esp + _fjxH1]
	movapd xmm4, [esp + _fjyH1]
	movapd xmm5, [esp + _fjzH1]
	mulsd xmm0, [esp + _dxH2H1]
	mulsd xmm1, [esp + _dyH2H1]
	mulsd xmm2, [esp + _dzH2H1]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixH2]
	addsd xmm1, [esp + _fiyH2]
	addsd xmm2, [esp + _fizH2]
	movlpd [esp + _fjxH1], xmm3
	movlpd [esp + _fjyH1], xmm4
	movlpd [esp + _fjzH1], xmm5
	movlpd [esp + _fixH2], xmm0
	movlpd [esp + _fiyH2], xmm1
	movlpd [esp + _fizH2], xmm2

	/* H2-H2 interaction */
	movapd xmm0, [esp + _rinvH2H2]
	movapd xmm7, xmm0	/* xmm7=rinv */
	movapd xmm5, [esp + _krf]	
	movapd xmm1, xmm0
	mulsd  xmm5, [esp + _rsqH2H2] /* xmm5=krsq */
	movapd xmm4, xmm5
	addsd  xmm4, xmm7	/* xmm4=r inv+ krsq */
	subsd  xmm4, [esp + _crf]
	mulsd xmm0, xmm0
	mulsd  xmm4, [esp + _qqHH] /* xmm4=voul=qq*(rinv+ krsq) */
	mulsd  xmm5, [esp + _two]
	subsd  xmm7, xmm5	/* xmm7=rinv-2*krsq */
	mulsd  xmm7, [esp + _qqHH] /* xmm7 = coul part of fscal */
	addsd  xmm6, xmm4	/* add to local vctot */
	mulsd xmm0, xmm7	/* fsOH2 */
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	movapd xmm1, xmm0
	movlpd [esp + _vctot], xmm6
	movapd xmm2, xmm0
	
	movapd xmm3, [esp + _fjxH2]
	movapd xmm4, [esp + _fjyH2]
	movapd xmm5, [esp + _fjzH2]
	mulsd xmm0, [esp + _dxH2H2]
	mulsd xmm1, [esp + _dyH2H2]
	mulsd xmm2, [esp + _dzH2H2]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixH2]
	addsd xmm1, [esp + _fiyH2]
	addsd xmm2, [esp + _fizH2]
	movlpd [esp + _fjxH2], xmm3
	movlpd [esp + _fjyH2], xmm4
	movlpd [esp + _fjzH2], xmm5
	movlpd [esp + _fixH2], xmm0
	movlpd [esp + _fiyH2], xmm1
	movlpd [esp + _fizH2], xmm2

	mov edi, [ebp + _faction]
	/* Did all interactions - now update j forces */
	movlpd xmm0, [edi + eax*8]
	movlpd xmm1, [edi + eax*8 + 8]
	movlpd xmm2, [edi + eax*8 + 16]
	movlpd xmm3, [edi + eax*8 + 24]
	movlpd xmm4, [edi + eax*8 + 32]
	movlpd xmm5, [edi + eax*8 + 40]
	movlpd xmm6, [edi + eax*8 + 48]
	movlpd xmm7, [edi + eax*8 + 56]
	addsd xmm0, [esp + _fjxO]
	addsd xmm1, [esp + _fjyO]
	addsd xmm2, [esp + _fjzO]
	addsd xmm3, [esp + _fjxH1]
	addsd xmm4, [esp + _fjyH1]
	addsd xmm5, [esp + _fjzH1]
	addsd xmm6, [esp + _fjxH2]
	addsd xmm7, [esp + _fjyH2]
	movlpd [edi + eax*8], xmm0
	movlpd [edi + eax*8 + 8], xmm1
	movlpd [edi + eax*8 + 16], xmm2
	movlpd [edi + eax*8 + 24], xmm3
	movlpd [edi + eax*8 + 32], xmm4
	movlpd [edi + eax*8 + 40], xmm5
	movlpd [edi + eax*8 + 48], xmm6
	movlpd [edi + eax*8 + 56], xmm7

	movlpd xmm0, [edi + eax*8 + 64]
	addsd xmm0, [esp + _fjzH2]
	movlpd [edi + eax*8 + 64], xmm0
	
.i2130_updateouterdata:
	mov   ecx, [esp + _ii3]
	mov   edi, [ebp + _faction]
	mov   esi, [ebp + _fshift]
	mov   edx, [esp + _is3]

	/* accumulate  Oi forces in xmm0, xmm1, xmm2 */
	movapd xmm0, [esp + _fixO]
	movapd xmm1, [esp + _fiyO]
	movapd xmm2, [esp + _fizO]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 /* sum is in low xmm0-xmm2 */

	movapd xmm3, xmm0	
	movapd xmm4, xmm1	
	movapd xmm5, xmm2	

	/* increment i force */
	movsd  xmm3, [edi + ecx*8]
	movsd  xmm4, [edi + ecx*8 + 8]
	movsd  xmm5, [edi + ecx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8],     xmm3
	movsd  [edi + ecx*8 + 8], xmm4
	movsd  [edi + ecx*8 + 16], xmm5

	/* accumulate force in xmm6/xmm7 for fshift */
	movapd xmm6, xmm0
	movsd xmm7, xmm2
	unpcklpd xmm6, xmm1

	/* accumulate H1i forces in xmm0, xmm1, xmm2 */
	movapd xmm0, [esp + _fixH1]
	movapd xmm1, [esp + _fiyH1]
	movapd xmm2, [esp + _fizH1]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 /* sum is in low xmm0-xmm2 */

	/* increment i force */
	movsd  xmm3, [edi + ecx*8 + 24]
	movsd  xmm4, [edi + ecx*8 + 32]
	movsd  xmm5, [edi + ecx*8 + 40]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8 + 24], xmm3
	movsd  [edi + ecx*8 + 32], xmm4
	movsd  [edi + ecx*8 + 40], xmm5

	/* accumulate force in xmm6/xmm7 for fshift */
	addsd xmm7, xmm2
	unpcklpd xmm0, xmm1
	addpd xmm6, xmm0

	/* accumulate H2i forces in xmm0, xmm1, xmm2 */
	movapd xmm0, [esp + _fixH2]
	movapd xmm1, [esp + _fiyH2]
	movapd xmm2, [esp + _fizH2]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 /* sum is in low xmm0-xmm2 */

	movapd xmm3, xmm0	
	movapd xmm4, xmm1	
	movapd xmm5, xmm2	

	/* increment i force */
	movsd  xmm3, [edi + ecx*8 + 48]
	movsd  xmm4, [edi + ecx*8 + 56]
	movsd  xmm5, [edi + ecx*8 + 64]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8 + 48], xmm3
	movsd  [edi + ecx*8 + 56], xmm4
	movsd  [edi + ecx*8 + 64], xmm5

	/* accumulate force in xmm6/xmm7 for fshift */
	addsd xmm7, xmm2
	unpcklpd xmm0, xmm1
	addpd xmm6, xmm0

	/* increment fshift force */
	movupd xmm3, [esi + edx*8]
	movsd  xmm4, [esi + edx*8 + 16]
	addpd  xmm3, xmm6
	addsd  xmm4, xmm7
	movupd [esi + edx*8],    xmm3
	movsd  [esi + edx*8 + 16], xmm4

	mov   edx, [ebp + _gid]  
	mov   edx, [edx]
	add   [ebp + _gid],  4	

	/* accumulate total potential energy and update it */
	movapd xmm7, [esp + _vctot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */

	/* add earlier value from mem */
	mov   eax, [ebp + _Vc]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* accumulate total lj energy and update it */
	movapd xmm7, [esp + _vnbtot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */
	
	/* add earlier value from mem */
	mov   eax, [ebp + _Vnb]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* finish if last */
	mov   ecx, [ebp + _nri]
	dec ecx
	jecxz .i2130_end
	/* not last, iterate once more! */ 
	mov [ebp + _nri], ecx
	jmp .i2130_outer
.i2130_end:
	emms
	mov eax, [esp + _salign]
	add esp, eax
	add esp, 1540
	pop edi
	pop esi
        pop edx
        pop ecx
        pop ebx
        pop eax
	leave
	ret


	

.globl inl2020_sse2
	.type inl2020_sse2,@function
inl2020_sse2:	
.equ		_nri,		8
.equ		_iinr,		12
.equ		_jindex,	16
.equ		_jjnr,		20
.equ		_shift,		24
.equ		_shiftvec,	28
.equ		_fshift,	32
.equ		_gid,		36
.equ		_pos,		40		
.equ		_faction,	44
.equ		_charge,	48
.equ		_facel,		52 /* double */ 
.equ		_Vc,		60	
.equ		_argkrf,	64 /* double */ 	
.equ		_argcrf,	72 /* double */ 	
	/* stack offsets for local variables */ 
	/* bottom of stack is cache-aligned for sse2 use */
.equ		_ixO,		0
.equ		_iyO,		16
.equ		_izO,		32
.equ		_ixH1,		48
.equ		_iyH1,		64
.equ		_izH1,		80
.equ		_ixH2,		96
.equ		_iyH2,		112
.equ		_izH2,		128
.equ		_iqO,		144 
.equ		_iqH,		160 
.equ		_dxO,		176
.equ		_dyO,		192
.equ		_dzO,		208	
.equ		_dxH1,		224
.equ		_dyH1,		240
.equ		_dzH1,		256	
.equ		_dxH2,		272
.equ		_dyH2,		288
.equ		_dzH2,		304	
.equ		_qqO,		320
.equ		_qqH,		336
.equ		_vctot,		352
.equ		_fixO,		384
.equ		_fiyO,		400
.equ		_fizO,		416
.equ		_fixH1,		432
.equ		_fiyH1,		448
.equ		_fizH1,		464
.equ		_fixH2,		480
.equ		_fiyH2,		496
.equ		_fizH2,		512
.equ		_fjx,		528
.equ		_fjy,		544
.equ		_fjz,		560
.equ		_half,		576
.equ		_three,		592
.equ		_two,		608
.equ		_krf,		624
.equ		_crf,		640
.equ		_krsqO,		656
.equ		_krsqH1,	672
.equ		_krsqH2,	688	 		
.equ		_is3,		704
.equ		_ii3,		708
.equ		_innerjjnr,	712
.equ		_innerk,	716
.equ		_salign,	720
	push ebp
	mov ebp,esp	
        push eax
        push ebx
        push ecx
        push edx
	push esi
	push edi
	sub esp, 724		/* local stack space */
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + _salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_three]
	movupd xmm4, [sse2_two]
	movsd xmm5, [ebp + _argkrf]
	movsd xmm6, [ebp + _argcrf]

	movapd [esp + _half],  xmm0
	movapd [esp + _three], xmm1
	movapd [esp + _two], xmm4
	shufpd xmm5, xmm5, 0
	shufpd xmm6, xmm6, 0
	movapd [esp + _krf], xmm5
	movapd [esp + _crf], xmm6
	
	/* assume we have at least one i particle - start directly */
	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	mov   ebx, [ecx]	        /* ebx =ii */

	mov   edx, [ebp + _charge]
	movsd xmm3, [edx + ebx*8]	
	movsd xmm4, [edx + ebx*8 + 8]	
	movsd xmm5, [ebp + _facel]
	mulsd  xmm3, xmm5
	mulsd  xmm4, xmm5

	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	movapd [esp + _iqO], xmm3
	movapd [esp + _iqH], xmm4
			
.i2020_outer:
	mov   eax, [ebp + _shift]      /* eax = pointer into shift[] */
	mov   ebx, [eax]		/* ebx=shift[n] */
	add   [ebp + _shift],  4  /* advance pointer one step */
	
	lea   ebx, [ebx + ebx*2]        /* ebx=3*is */
	mov   [esp + _is3],ebx    	/* store is3 */

	mov   eax, [ebp + _shiftvec]   /* eax = base of shiftvec[] */

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	add   [ebp + _iinr],  4   /* advance pointer */
	mov   ebx, [ecx]	        /* ebx =ii */

	movapd xmm3, xmm0
	movapd xmm4, xmm1
	movapd xmm5, xmm2

	lea   ebx, [ebx + ebx*2]	/* ebx = 3*ii=ii3 */
	mov   eax, [ebp + _pos]        /* eax = base of pos[] */ 
	mov   [esp + _ii3], ebx

	addsd xmm3, [eax + ebx*8]
	addsd xmm4, [eax + ebx*8 + 8]
	addsd xmm5, [eax + ebx*8 + 16]		
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _ixO], xmm3
	movapd [esp + _iyO], xmm4
	movapd [esp + _izO], xmm5

	movsd xmm3, xmm0
	movsd xmm4, xmm1
	movsd xmm5, xmm2
	addsd xmm0, [eax + ebx*8 + 24]
	addsd xmm1, [eax + ebx*8 + 32]
	addsd xmm2, [eax + ebx*8 + 40]		
	addsd xmm3, [eax + ebx*8 + 48]
	addsd xmm4, [eax + ebx*8 + 56]
	addsd xmm5, [eax + ebx*8 + 64]		

	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _ixH1], xmm0
	movapd [esp + _iyH1], xmm1
	movapd [esp + _izH1], xmm2
	movapd [esp + _ixH2], xmm3
	movapd [esp + _iyH2], xmm4
	movapd [esp + _izH2], xmm5
	
	/* clear vctot and i forces */
	xorpd xmm4, xmm4
	movapd [esp + _vctot], xmm4
	movapd [esp + _fixO], xmm4
	movapd [esp + _fiyO], xmm4
	movapd [esp + _fizO], xmm4
	movapd [esp + _fixH1], xmm4
	movapd [esp + _fiyH1], xmm4
	movapd [esp + _fizH1], xmm4
	movapd [esp + _fixH2], xmm4
	movapd [esp + _fiyH2], xmm4
	movapd [esp + _fizH2], xmm4
	
	mov   eax, [ebp + _jindex]
	mov   ecx, [eax]	         /* jindex[n] */
	mov   edx, [eax + 4]	         /* jindex[n+1] */
	add   [ebp + _jindex],  4
	sub   edx, ecx                   /* number of innerloop atoms */

	mov   esi, [ebp + _pos]
	mov   edi, [ebp + _faction]	
	mov   eax, [ebp + _jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + _innerjjnr], eax     /* pointer to jjnr[nj0] */
	sub   edx,  2
	mov   [esp + _innerk], edx        /* number of innerloop atoms */
	jge   .i2020_unroll_loop
	jmp   .i2020_checksingle
.i2020_unroll_loop:
	/* twice unrolled innerloop here */
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]	
	mov   ebx, [edx + 4]

	add   [esp + _innerjjnr],  8	/* advance pointer (unrolled 2) */

	mov esi, [ebp + _charge]        /* base of charge[] */
	
	movlpd xmm3, [esi + eax*8]
	movhpd xmm3, [esi + ebx*8]
	movapd xmm4, xmm3
	mulpd  xmm3, [esp + _iqO]
	mulpd  xmm4, [esp + _iqH]
	movapd  [esp + _qqO], xmm3
	movapd  [esp + _qqH], xmm4	

	mov esi, [ebp + _pos]       /* base of pos[] */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */
	lea   ebx, [ebx + ebx*2]	

	/* move two coordinates to xmm0-xmm2 */
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]

	/* move ixO-izO to xmm4-xmm6 */
	movapd xmm4, [esp + _ixO]
	movapd xmm5, [esp + _iyO]
	movapd xmm6, [esp + _izO]

	/* calc dr */
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	/* store dr */
	movapd [esp + _dxO], xmm4
	movapd [esp + _dyO], xmm5
	movapd [esp + _dzO], xmm6

	/* square it */
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6
	movapd xmm7, xmm4
	/* rsqO in xmm7 */

	/* move ixH1-izH1 to xmm4-xmm6 */
	movapd xmm4, [esp + _ixH1]
	movapd xmm5, [esp + _iyH1]
	movapd xmm6, [esp + _izH1]

	/* calc dr */
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	/* store dr */
	movapd [esp + _dxH1], xmm4
	movapd [esp + _dyH1], xmm5
	movapd [esp + _dzH1], xmm6
	/* square it */
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm6, xmm5
	addpd xmm6, xmm4
	/* rsqH1 in xmm6 */

	/* move ixH2-izH2 to xmm3-xmm5 */ 
	movapd xmm3, [esp + _ixH2]
	movapd xmm4, [esp + _iyH2]
	movapd xmm5, [esp + _izH2]

	/* calc dr */
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2

	/* store dr */
	movapd [esp + _dxH2], xmm3
	movapd [esp + _dyH2], xmm4
	movapd [esp + _dzH2], xmm5
	/* square it */
	mulpd xmm3,xmm3
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	addpd xmm5, xmm4
	addpd xmm5, xmm3
	/* rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 */

	movapd xmm0, xmm5
	movapd xmm1, xmm6
	movapd xmm2, xmm7

	mulpd  xmm0, [esp + _krf]	
	mulpd  xmm1, [esp + _krf]	
	mulpd  xmm2, [esp + _krf]	

	movapd [esp + _krsqH2], xmm0
	movapd [esp + _krsqH1], xmm1
	movapd [esp + _krsqO], xmm2
	
	/* start with rsqO - put seed in xmm2 */
	cvtpd2ps xmm2, xmm7	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulpd   xmm2, xmm7	/* rsq*lu*lu */
	subpd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulpd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulpd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm3, xmm4
	mulpd xmm4, xmm4	/* lu*lu */
	mulpd xmm7, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subpd xmm4, xmm7	/* 3-rsq*lu*lu */
	mulpd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulpd xmm4, [esp + _half] /* rinv */
	movapd  xmm7, xmm4	/* rinvO in xmm7 */
	
	/* rsqH1 - seed in xmm2 */
	cvtpd2ps xmm2, xmm6	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulpd   xmm2, xmm6	/* rsq*lu*lu */
	subpd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulpd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulpd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm3, xmm4
	mulpd xmm4, xmm4	/* lu*lu */
	mulpd xmm6, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subpd xmm4, xmm6	/* 3-rsq*lu*lu */
	mulpd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulpd xmm4, [esp + _half] /* rinv */
	movapd  xmm6, xmm4	/* rinvH1 in xmm6 */
	
	/* rsqH2 - seed in xmm2 */
	cvtpd2ps xmm2, xmm5	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulpd   xmm2, xmm5	/* rsq*lu*lu */
	subpd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulpd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulpd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm3, xmm4
	mulpd xmm4, xmm4	/* lu*lu */
	mulpd xmm5, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subpd xmm4, xmm5	/* 3-rsq*lu*lu */
	mulpd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulpd xmm4, [esp + _half] /* rinv */
	movapd  xmm5, xmm4	/* rinvH2 in xmm5 */

	/* do O interactions */
	movapd  xmm4, xmm7	
	mulpd   xmm4, xmm4	/* xmm6=rinv, xmm4=rinvsq */
	movapd  xmm3, xmm7
	movapd  xmm0, [esp + _krsqO]
	addpd   xmm7, xmm0	/* xmm6=rinv+ krsq */
	mulpd   xmm0, [esp + _two]
	subpd   xmm7, [esp + _crf]
	subpd   xmm3, xmm0	/* xmm7=rinv-2*krsq */
	mulpd   xmm7, [esp + _qqO] /* vcoul */
	mulpd   xmm3, [esp + _qqO]
	mulpd  xmm4, xmm3	/* total fsH1 in xmm4 */
	
	addpd  xmm7, [esp + _vctot]

	movapd xmm0, [esp + _dxO]
	movapd xmm1, [esp + _dyO]
	movapd xmm2, [esp + _dzO]
	movapd [esp + _vctot], xmm7
	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4
	
	/* update O forces */
	movapd xmm3, [esp + _fixO]
	movapd xmm4, [esp + _fiyO]
	movapd xmm7, [esp + _fizO]
	addpd  xmm3, xmm0
	addpd  xmm4, xmm1
	addpd  xmm7, xmm2
	movapd [esp + _fixO], xmm3
	movapd [esp + _fiyO], xmm4
	movapd [esp + _fizO], xmm7
	/* update j forces with water O */
	movapd [esp + _fjx], xmm0
	movapd [esp + _fjy], xmm1
	movapd [esp + _fjz], xmm2

	/* H1 interactions */
	movapd  xmm4, xmm6	
	mulpd   xmm4, xmm4	/* xmm6=rinv, xmm4=rinvsq */
	movapd  xmm7, xmm6
	movapd  xmm0, [esp + _krsqH1]
	addpd   xmm6, xmm0	/* xmm6=rinv+ krsq */
	mulpd   xmm0, [esp + _two]
	subpd   xmm6, [esp + _crf]
	subpd   xmm7, xmm0	/* xmm7=rinv-2*krsq */
	mulpd   xmm6, [esp + _qqH] /* vcoul */
	mulpd   xmm7, [esp + _qqH]
	mulpd  xmm4, xmm7		/* total fsH1 in xmm4 */
	
	addpd  xmm6, [esp + _vctot]

	movapd xmm0, [esp + _dxH1]
	movapd xmm1, [esp + _dyH1]
	movapd xmm2, [esp + _dzH1]
	movapd [esp + _vctot], xmm6
	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4

	/* update H1 forces */
	movapd xmm3, [esp + _fixH1]
	movapd xmm4, [esp + _fiyH1]
	movapd xmm7, [esp + _fizH1]
	addpd  xmm3, xmm0
	addpd  xmm4, xmm1
	addpd  xmm7, xmm2
	movapd [esp + _fixH1], xmm3
	movapd [esp + _fiyH1], xmm4
	movapd [esp + _fizH1], xmm7
	/* update j forces with water H1 */
	addpd  xmm0, [esp + _fjx]
	addpd  xmm1, [esp + _fjy]
	addpd  xmm2, [esp + _fjz]
	movapd [esp + _fjx], xmm0
	movapd [esp + _fjy], xmm1
	movapd [esp + _fjz], xmm2

	/* H2 interactions */
	movapd  xmm4, xmm5	
	mulpd   xmm4, xmm4	/* xmm5=rinv, xmm4=rinvsq */
	movapd  xmm7, xmm5
	movapd  xmm0, [esp + _krsqH2]
	addpd   xmm5, xmm0	/* xmm5=rinv+ krsq */
	mulpd   xmm0, [esp + _two]
	subpd   xmm5, [esp + _crf]
	subpd   xmm7, xmm0	/* xmm7=rinv-2*krsq */
	mulpd   xmm5, [esp + _qqH] /* vcoul */
	mulpd   xmm7, [esp + _qqH]
	mulpd  xmm4, xmm7		/* total fsH2 in xmm4 */
	
	addpd  xmm5, [esp + _vctot]

	movapd xmm0, [esp + _dxH2]
	movapd xmm1, [esp + _dyH2]
	movapd xmm2, [esp + _dzH2]
	movapd [esp + _vctot], xmm5
	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4

	/* update H2 forces */
	movapd xmm3, [esp + _fixH2]
	movapd xmm4, [esp + _fiyH2]
	movapd xmm7, [esp + _fizH2]
	addpd  xmm3, xmm0
	addpd  xmm4, xmm1
	addpd  xmm7, xmm2
	movapd [esp + _fixH2], xmm3
	movapd [esp + _fiyH2], xmm4
	movapd [esp + _fizH2], xmm7

	mov edi, [ebp + _faction]
	/* update j forces */
	addpd  xmm0, [esp + _fjx]
	addpd  xmm1, [esp + _fjy]
	addpd  xmm2, [esp + _fjz]
	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	movhpd xmm3, [edi + ebx*8]
	movhpd xmm4, [edi + ebx*8 + 8]
	movhpd xmm5, [edi + ebx*8 + 16]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5
	movhpd [edi + ebx*8], xmm3
	movhpd [edi + ebx*8 + 8], xmm4
	movhpd [edi + ebx*8 + 16], xmm5		
		
	/* should we do one more iteration? */
	sub   [esp + _innerk],  2
	jl    .i2020_checksingle
	jmp   .i2020_unroll_loop
.i2020_checksingle:	
	mov   edx, [esp + _innerk]
	and   edx, 1
	jnz   .i2020_dosingle
	jmp   .i2020_updateouterdata
.i2020_dosingle:
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]	
	add   [esp + _innerjjnr],  4	

	mov esi, [ebp + _charge]        /* base of charge[] */
	xorpd xmm3, xmm3
	movlpd xmm3, [esi + eax*8]
	movapd xmm4, xmm3
	mulpd  xmm3, [esp + _iqO]
	mulpd  xmm4, [esp + _iqH]
	movapd  [esp + _qqO], xmm3
	movapd  [esp + _qqH], xmm4
	
	mov esi, [ebp + _pos]       /* base of pos[] */
	lea   eax, [eax + eax*2]         /* replace jnr with j3 */

	/* move coordinates to xmm0-xmm2 */
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]

	/* move ixO-izO to xmm4-xmm6 */
	movapd xmm4, [esp + _ixO]
	movapd xmm5, [esp + _iyO]
	movapd xmm6, [esp + _izO]

	/* calc dr */
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	/* store dr */
	movapd [esp + _dxO], xmm4
	movapd [esp + _dyO], xmm5
	movapd [esp + _dzO], xmm6
	/* square it */
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6
	movapd xmm7, xmm4
	/* rsqO in xmm7 */

	/* move ixH1-izH1 to xmm4-xmm6 */
	movapd xmm4, [esp + _ixH1]
	movapd xmm5, [esp + _iyH1]
	movapd xmm6, [esp + _izH1]

	/* calc dr */
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	/* store dr */
	movapd [esp + _dxH1], xmm4
	movapd [esp + _dyH1], xmm5
	movapd [esp + _dzH1], xmm6
	/* square it */
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm6, xmm5
	addsd xmm6, xmm4
	/* rsqH1 in xmm6 */

	/* move ixH2-izH2 to xmm3-xmm5 */ 
	movapd xmm3, [esp + _ixH2]
	movapd xmm4, [esp + _iyH2]
	movapd xmm5, [esp + _izH2]

	/* calc dr */
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2

	/* store dr */
	movapd [esp + _dxH2], xmm3
	movapd [esp + _dyH2], xmm4
	movapd [esp + _dzH2], xmm5
	/* square it */
	mulsd xmm3,xmm3
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	addsd xmm5, xmm4
	addsd xmm5, xmm3
	/* rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 */
	
	movapd xmm0, xmm5
	movapd xmm1, xmm6
	movapd xmm2, xmm7

	mulsd  xmm0, [esp + _krf]	
	mulsd  xmm1, [esp + _krf]	
	mulsd  xmm2, [esp + _krf]	

	movapd [esp + _krsqH2], xmm0
	movapd [esp + _krsqH1], xmm1
	movapd [esp + _krsqO], xmm2
	
	/* start with rsqO - put seed in xmm2 */
	cvtsd2ss xmm2, xmm7	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulsd   xmm2, xmm7	/* rsq*lu*lu */
	subsd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulsd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulsd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm3, xmm4
	mulsd xmm4, xmm4	/* lu*lu */
	mulsd xmm7, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subsd xmm4, xmm7	/* 3-rsq*lu*lu */
	mulsd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulsd xmm4, [esp + _half] /* rinv */
	movapd  xmm7, xmm4	/* rinvO in xmm7 */
	
	/* rsqH1 - seed in xmm2 */
	cvtsd2ss xmm2, xmm6	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulsd   xmm2, xmm6	/* rsq*lu*lu */
	subsd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulsd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulsd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm3, xmm4
	mulsd xmm4, xmm4	/* lu*lu */
	mulsd xmm6, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subsd xmm4, xmm6	/* 3-rsq*lu*lu */
	mulsd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulsd xmm4, [esp + _half] /* rinv */
	movapd  xmm6, xmm4	/* rinvH1 in xmm6 */
	
	/* rsqH2 - seed in xmm2 */
	cvtsd2ss xmm2, xmm5	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulsd   xmm2, xmm5	/* rsq*lu*lu */
	subsd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulsd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulsd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm3, xmm4
	mulsd xmm4, xmm4	/* lu*lu */
	mulsd xmm5, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subsd xmm4, xmm5	/* 3-rsq*lu*lu */
	mulsd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulsd xmm4, [esp + _half] /* rinv */
	movapd  xmm5, xmm4	/* rinvH2 in xmm5 */

	/* do O interactions */
	movapd  xmm4, xmm7	
	mulsd   xmm4, xmm4	/* xmm6=rinv, xmm4=rinvsq */
	movapd  xmm3, xmm7
	movapd  xmm0, [esp + _krsqO]
	addsd   xmm7, xmm0	/* xmm6=rinv+ krsq */
	mulsd   xmm0, [esp + _two]
	subsd   xmm7, [esp + _crf]
	subsd   xmm3, xmm0	/* xmm7=rinv-2*krsq */
	mulsd   xmm7, [esp + _qqO] /* vcoul */
	mulsd   xmm3, [esp + _qqO]
	mulsd  xmm4, xmm3	/* total fsH1 in xmm4 */
	
	addsd  xmm7, [esp + _vctot]

	movapd xmm0, [esp + _dxO]
	movapd xmm1, [esp + _dyO]
	movapd xmm2, [esp + _dzO]
	movlpd [esp + _vctot], xmm7
	mulsd  xmm0, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm2, xmm4

	/* update O forces */
	movapd xmm3, [esp + _fixO]
	movapd xmm4, [esp + _fiyO]
	movapd xmm7, [esp + _fizO]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm7, xmm2
	movlpd [esp + _fixO], xmm3
	movlpd [esp + _fiyO], xmm4
	movlpd [esp + _fizO], xmm7
	/* update j forces with water O */
	movlpd [esp + _fjx], xmm0
	movlpd [esp + _fjy], xmm1
	movlpd [esp + _fjz], xmm2

	/* H1 interactions */
	movapd  xmm4, xmm6	
	mulsd   xmm4, xmm4	/* xmm6=rinv, xmm4=rinvsq */
	movapd  xmm7, xmm6
	movapd  xmm0, [esp + _krsqH1]
	addsd   xmm6, xmm0	/* xmm6=rinv+ krsq */
	mulsd   xmm0, [esp + _two]
	subsd   xmm6, [esp + _crf]
	subsd   xmm7, xmm0	/* xmm7=rinv-2*krsq */
	mulsd   xmm6, [esp + _qqH] /* vcoul */
	mulsd   xmm7, [esp + _qqH]
	mulsd  xmm4, xmm7		/* total fsH1 in xmm4 */
	
	addsd  xmm6, [esp + _vctot]

	movapd xmm0, [esp + _dxH1]
	movapd xmm1, [esp + _dyH1]
	movapd xmm2, [esp + _dzH1]
	movlpd [esp + _vctot], xmm6
	mulsd  xmm0, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm2, xmm4

	/* update H1 forces */
	movapd xmm3, [esp + _fixH1]
	movapd xmm4, [esp + _fiyH1]
	movapd xmm7, [esp + _fizH1]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm7, xmm2
	movlpd [esp + _fixH1], xmm3
	movlpd [esp + _fiyH1], xmm4
	movlpd [esp + _fizH1], xmm7
	/* update j forces with water H1 */
	addsd  xmm0, [esp + _fjx]
	addsd  xmm1, [esp + _fjy]
	addsd  xmm2, [esp + _fjz]
	movlpd [esp + _fjx], xmm0
	movlpd [esp + _fjy], xmm1
	movlpd [esp + _fjz], xmm2

	/* H2 interactions */
	movapd  xmm4, xmm5	
	mulsd   xmm4, xmm4	/* xmm5=rinv, xmm4=rinvsq */
	movapd  xmm7, xmm5
	movapd  xmm0, [esp + _krsqH2]
	addsd   xmm5, xmm0	/* xmm5=rinv+ krsq */
	mulsd   xmm0, [esp + _two]
	subsd   xmm5, [esp + _crf]
	subsd   xmm7, xmm0	/* xmm7=rinv-2*krsq */
	mulsd   xmm5, [esp + _qqH] /* vcoul */
	mulsd   xmm7, [esp + _qqH]
	mulsd  xmm4, xmm7		/* total fsH2 in xmm4 */
	
	addsd  xmm5, [esp + _vctot]

	movapd xmm0, [esp + _dxH2]
	movapd xmm1, [esp + _dyH2]
	movapd xmm2, [esp + _dzH2]
	movlpd [esp + _vctot], xmm5
	mulsd  xmm0, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm2, xmm4

	/* update H2 forces */
	movapd xmm3, [esp + _fixH2]
	movapd xmm4, [esp + _fiyH2]
	movapd xmm7, [esp + _fizH2]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm7, xmm2
	movlpd [esp + _fixH2], xmm3
	movlpd [esp + _fiyH2], xmm4
	movlpd [esp + _fizH2], xmm7

	mov edi, [ebp + _faction]
	/* update j forces */
	addsd  xmm0, [esp + _fjx]
	addsd  xmm1, [esp + _fjy]
	addsd  xmm2, [esp + _fjz]
	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5	

.i2020_updateouterdata:
	mov   ecx, [esp + _ii3]
	mov   edi, [ebp + _faction]
	mov   esi, [ebp + _fshift]
	mov   edx, [esp + _is3]

	/* accumulate  Oi forces in xmm0, xmm1, xmm2 */
	movapd xmm0, [esp + _fixO]
	movapd xmm1, [esp + _fiyO]
	movapd xmm2, [esp + _fizO]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 /* sum is in low xmm0-xmm2 */

	movapd xmm3, xmm0	
	movapd xmm4, xmm1	
	movapd xmm5, xmm2	

	/* increment i force */
	movsd  xmm3, [edi + ecx*8]
	movsd  xmm4, [edi + ecx*8 + 8]
	movsd  xmm5, [edi + ecx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8],     xmm3
	movsd  [edi + ecx*8 + 8], xmm4
	movsd  [edi + ecx*8 + 16], xmm5

	/* accumulate force in xmm6/xmm7 for fshift */
	movapd xmm6, xmm0
	movsd xmm7, xmm2
	unpcklpd xmm6, xmm1

	/* accumulate H1i forces in xmm0, xmm1, xmm2 */
	movapd xmm0, [esp + _fixH1]
	movapd xmm1, [esp + _fiyH1]
	movapd xmm2, [esp + _fizH1]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 /* sum is in low xmm0-xmm2 */

	/* increment i force */
	movsd  xmm3, [edi + ecx*8 + 24]
	movsd  xmm4, [edi + ecx*8 + 32]
	movsd  xmm5, [edi + ecx*8 + 40]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8 + 24], xmm3
	movsd  [edi + ecx*8 + 32], xmm4
	movsd  [edi + ecx*8 + 40], xmm5

	/* accumulate force in xmm6/xmm7 for fshift */
	addsd xmm7, xmm2
	unpcklpd xmm0, xmm1
	addpd xmm6, xmm0

	/* accumulate H2i forces in xmm0, xmm1, xmm2 */
	movapd xmm0, [esp + _fixH2]
	movapd xmm1, [esp + _fiyH2]
	movapd xmm2, [esp + _fizH2]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 /* sum is in low xmm0-xmm2 */

	movapd xmm3, xmm0	
	movapd xmm4, xmm1	
	movapd xmm5, xmm2	

	/* increment i force */
	movsd  xmm3, [edi + ecx*8 + 48]
	movsd  xmm4, [edi + ecx*8 + 56]
	movsd  xmm5, [edi + ecx*8 + 64]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8 + 48], xmm3
	movsd  [edi + ecx*8 + 56], xmm4
	movsd  [edi + ecx*8 + 64], xmm5

	/* accumulate force in xmm6/xmm7 for fshift */
	addsd xmm7, xmm2
	unpcklpd xmm0, xmm1
	addpd xmm6, xmm0

	/* increment fshift force */
	movupd xmm3, [esi + edx*8]
	movsd  xmm4, [esi + edx*8 + 16]
	addpd  xmm3, xmm6
	addsd  xmm4, xmm7
	movupd [esi + edx*8],    xmm3
	movsd  [esi + edx*8 + 16], xmm4

	mov   edx, [ebp + _gid]  
	mov   edx, [edx]
	add   [ebp + _gid],  4	

	/* accumulate total potential energy and update it */
	movapd xmm7, [esp + _vctot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */
        
	/* add earlier value from mem */
	mov   eax, [ebp + _Vc]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* finish if last */
	mov   ecx, [ebp + _nri]
	dec ecx
	jecxz .i2020_end
	/* not last, iterate once more! */ 
	mov [ebp + _nri], ecx
	jmp .i2020_outer
.i2020_end:
	emms
	mov eax, [esp + _salign]
	add esp, eax
	add esp, 724
	pop edi
	pop esi
        pop edx
        pop ecx
        pop ebx
        pop eax
	leave
	ret


	
.globl inl2030_sse2
	.type inl2030_sse2,@function
inl2030_sse2:	
.equ		_nri,		8
.equ		_iinr,		12
.equ		_jindex,	16
.equ		_jjnr,		20
.equ		_shift,		24
.equ		_shiftvec,	28
.equ		_fshift,	32
.equ		_gid,		36
.equ		_pos,		40		
.equ		_faction,	44
.equ		_charge,	48
.equ		_facel,		52 /* double */ 
.equ		_Vc,		60	
.equ		_argkrf,	64 /* double */ 
.equ		_argcrf,	72 /* double */ 
	/* stack offsets for local variables */ 
	/* bottom of stack is cache-aligned for sse2 use */
.equ		_ixO,		0
.equ		_iyO,		16
.equ		_izO,		32
.equ		_ixH1,		48
.equ		_iyH1,		64
.equ		_izH1,		80
.equ		_ixH2,		96
.equ		_iyH2,		112
.equ		_izH2,		128
.equ		_jxO,		144
.equ		_jyO,		160
.equ		_jzO,		176
.equ		_jxH1,		192
.equ		_jyH1,		208
.equ		_jzH1,		224
.equ		_jxH2,		240
.equ		_jyH2,		256
.equ		_jzH2,		272
.equ		_dxOO,		288
.equ		_dyOO,		304
.equ		_dzOO,		320	
.equ		_dxOH1,		336
.equ		_dyOH1,		352
.equ		_dzOH1,		368	
.equ		_dxOH2,		384
.equ		_dyOH2,		400
.equ		_dzOH2,		416	
.equ		_dxH1O,		432
.equ		_dyH1O,		448
.equ		_dzH1O,		464	
.equ		_dxH1H1,	480
.equ		_dyH1H1,	496
.equ		_dzH1H1,	512	
.equ		_dxH1H2,	528
.equ		_dyH1H2,	544
.equ		_dzH1H2,	560	
.equ		_dxH2O,		576
.equ		_dyH2O,		592
.equ		_dzH2O,		608	
.equ		_dxH2H1,	624
.equ		_dyH2H1,	640
.equ		_dzH2H1,	656	
.equ		_dxH2H2,	672
.equ		_dyH2H2,	688
.equ		_dzH2H2,	704
.equ		_qqOO,		720
.equ		_qqOH,		736
.equ		_qqHH,		752
.equ		_vctot,		768
.equ		_fixO,		784
.equ		_fiyO,		800
.equ		_fizO,		816
.equ		_fixH1,		832
.equ		_fiyH1,		848
.equ		_fizH1,		864
.equ		_fixH2,		880
.equ		_fiyH2,		896
.equ		_fizH2,		912
.equ		_fjxO,		928
.equ		_fjyO,		944
.equ		_fjzO,		960
.equ		_fjxH1,		976
.equ		_fjyH1,		992
.equ		_fjzH1,		1008
.equ		_fjxH2,		1024
.equ		_fjyH2,		1040
.equ		_fjzH2,		1056
.equ		_half,		1072
.equ		_three,		1088
.equ		_rsqOO,		1104
.equ		_rsqOH1,	1120
.equ		_rsqOH2,	1136
.equ		_rsqH1O,	1152
.equ		_rsqH1H1,	1168
.equ		_rsqH1H2,	1184
.equ		_rsqH2O,	1200
.equ		_rsqH2H1,	1216
.equ		_rsqH2H2,	1232
.equ		_rinvOO,	1248
.equ		_rinvOH1,	1264
.equ		_rinvOH2,	1280
.equ		_rinvH1O,	1296
.equ		_rinvH1H1,	1312
.equ		_rinvH1H2,	1328
.equ		_rinvH2O,	1344
.equ		_rinvH2H1,	1360
.equ		_rinvH2H2,	1376
.equ		_two,		1392
.equ		_krf,		1408	
.equ		_crf,		1424
.equ		_is3,		1440
.equ		_ii3,		1444
.equ		_innerjjnr,	1448
.equ		_innerk,	1452
.equ		_salign,	1456							
	push ebp
	mov ebp,esp	
        push eax
        push ebx
        push ecx
        push edx
	push esi
	push edi
	sub esp, 1460		/* local stack space */
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + _salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_three]
	movupd xmm4, [sse2_two]
	movsd xmm5, [ebp + _argkrf]
	movsd xmm6, [ebp + _argcrf]
	
	movapd [esp + _half],  xmm0
	movapd [esp + _three], xmm1
	movapd [esp + _two], xmm4
	shufpd xmm5, xmm5, 0
	shufpd xmm6, xmm6, 0
	movapd [esp + _krf], xmm5
	movapd [esp + _crf], xmm6
	
	/* assume we have at least one i particle - start directly */
	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	mov   ebx, [ecx]	        /* ebx =ii */

	mov   edx, [ebp + _charge]
	movsd xmm3, [edx + ebx*8]	
	movsd xmm4, xmm3	
	movsd xmm5, [edx + ebx*8 + 8]	
	movsd xmm6, [ebp + _facel]
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm5
	mulsd  xmm5, xmm5
	mulsd  xmm3, xmm6
	mulsd  xmm4, xmm6
	mulsd  xmm5, xmm6
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _qqOO], xmm3
	movapd [esp + _qqOH], xmm4
	movapd [esp + _qqHH], xmm5
	
.i2030_outer:
	mov   eax, [ebp + _shift]      /* eax = pointer into shift[] */
	mov   ebx, [eax]		/* ebx=shift[n] */
	add   [ebp + _shift],  4  /* advance pointer one step */
	
	lea   ebx, [ebx + ebx*2]        /* ebx=3*is */
	mov   [esp + _is3],ebx    	/* store is3 */

	mov   eax, [ebp + _shiftvec]   /* eax = base of shiftvec[] */

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	add   [ebp + _iinr],  4   /* advance pointer */
	mov   ebx, [ecx]	        /* ebx =ii */

	lea   ebx, [ebx + ebx*2]	/* ebx = 3*ii=ii3 */
	mov   eax, [ebp + _pos]        /* eax = base of pos[] */ 
	mov   [esp + _ii3], ebx	
	
	movapd xmm3, xmm0
	movapd xmm4, xmm1
	movapd xmm5, xmm2
	addsd xmm3, [eax + ebx*8]
	addsd xmm4, [eax + ebx*8 + 8]
	addsd xmm5, [eax + ebx*8 + 16]		
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _ixO], xmm3
	movapd [esp + _iyO], xmm4
	movapd [esp + _izO], xmm5

	movsd xmm3, xmm0
	movsd xmm4, xmm1
	movsd xmm5, xmm2
	addsd xmm0, [eax + ebx*8 + 24]
	addsd xmm1, [eax + ebx*8 + 32]
	addsd xmm2, [eax + ebx*8 + 40]		
	addsd xmm3, [eax + ebx*8 + 48]
	addsd xmm4, [eax + ebx*8 + 56]
	addsd xmm5, [eax + ebx*8 + 64]		

	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _ixH1], xmm0
	movapd [esp + _iyH1], xmm1
	movapd [esp + _izH1], xmm2
	movapd [esp + _ixH2], xmm3
	movapd [esp + _iyH2], xmm4
	movapd [esp + _izH2], xmm5

	/* clear vctot and i forces */
	xorpd xmm4, xmm4
	movapd [esp + _vctot], xmm4
	movapd [esp + _fixO], xmm4
	movapd [esp + _fiyO], xmm4
	movapd [esp + _fizO], xmm4
	movapd [esp + _fixH1], xmm4
	movapd [esp + _fiyH1], xmm4
	movapd [esp + _fizH1], xmm4
	movapd [esp + _fixH2], xmm4
	movapd [esp + _fiyH2], xmm4
	movapd [esp + _fizH2], xmm4
	
	mov   eax, [ebp + _jindex]
	mov   ecx, [eax]	         /* jindex[n] */
	mov   edx, [eax + 4]	         /* jindex[n+1] */
	add   [ebp + _jindex],  4
	sub   edx, ecx                   /* number of innerloop atoms */

	mov   esi, [ebp + _pos]
	mov   edi, [ebp + _faction]	
	mov   eax, [ebp + _jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + _innerjjnr], eax     /* pointer to jjnr[nj0] */
	sub   edx,  2
	mov   [esp + _innerk], edx        /* number of innerloop atoms */
	jge   .i2030_unroll_loop
	jmp   .i2030_checksingle
.i2030_unroll_loop:
	/* twice unrolled innerloop here */
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]	
	mov   ebx, [edx + 4] 
	
	add   [esp + _innerjjnr],  8	/* advance pointer (unrolled 2) */

	mov esi, [ebp + _pos]       /* base of pos[] */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */
	lea   ebx, [ebx + ebx*2]	
	
	/* move j coordinates to local temp variables */
	movlpd xmm2, [esi + eax*8]
	movlpd xmm3, [esi + eax*8 + 8]
	movlpd xmm4, [esi + eax*8 + 16]
	movlpd xmm5, [esi + eax*8 + 24]
	movlpd xmm6, [esi + eax*8 + 32]
	movlpd xmm7, [esi + eax*8 + 40]
	movhpd xmm2, [esi + ebx*8]
	movhpd xmm3, [esi + ebx*8 + 8]
	movhpd xmm4, [esi + ebx*8 + 16]
	movhpd xmm5, [esi + ebx*8 + 24]
	movhpd xmm6, [esi + ebx*8 + 32]
	movhpd xmm7, [esi + ebx*8 + 40]
	movapd 	[esp + _jxO], xmm2
	movapd 	[esp + _jyO], xmm3
	movapd 	[esp + _jzO], xmm4
	movapd 	[esp + _jxH1], xmm5
	movapd 	[esp + _jyH1], xmm6
	movapd 	[esp + _jzH1], xmm7
	movlpd xmm2, [esi + eax*8 + 48]
	movlpd xmm3, [esi + eax*8 + 56]
	movlpd xmm4, [esi + eax*8 + 64]
	movhpd xmm2, [esi + ebx*8 + 48]
	movhpd xmm3, [esi + ebx*8 + 56]
	movhpd xmm4, [esi + ebx*8 + 64]
	movapd 	[esp + _jxH2], xmm2
	movapd 	[esp + _jyH2], xmm3
	movapd 	[esp + _jzH2], xmm4
	
	movapd xmm0, [esp + _ixO]
	movapd xmm1, [esp + _iyO]
	movapd xmm2, [esp + _izO]
	movapd xmm3, [esp + _ixO]
	movapd xmm4, [esp + _iyO]
	movapd xmm5, [esp + _izO]
	subpd  xmm0, [esp + _jxO]
	subpd  xmm1, [esp + _jyO]
	subpd  xmm2, [esp + _jzO]
	subpd  xmm3, [esp + _jxH1]
	subpd  xmm4, [esp + _jyH1]
	subpd  xmm5, [esp + _jzH1]
	movapd [esp + _dxOO], xmm0
	movapd [esp + _dyOO], xmm1
	movapd [esp + _dzOO], xmm2
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	movapd [esp + _dxOH1], xmm3
	movapd [esp + _dyOH1], xmm4
	movapd [esp + _dzOH1], xmm5
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + _rsqOO], xmm0
	movapd [esp + _rsqOH1], xmm3

	movapd xmm0, [esp + _ixO]
	movapd xmm1, [esp + _iyO]
	movapd xmm2, [esp + _izO]
	movapd xmm3, [esp + _ixH1]
	movapd xmm4, [esp + _iyH1]
	movapd xmm5, [esp + _izH1]
	subpd  xmm0, [esp + _jxH2]
	subpd  xmm1, [esp + _jyH2]
	subpd  xmm2, [esp + _jzH2]
	subpd  xmm3, [esp + _jxO]
	subpd  xmm4, [esp + _jyO]
	subpd  xmm5, [esp + _jzO]
	movapd [esp + _dxOH2], xmm0
	movapd [esp + _dyOH2], xmm1
	movapd [esp + _dzOH2], xmm2
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	movapd [esp + _dxH1O], xmm3
	movapd [esp + _dyH1O], xmm4
	movapd [esp + _dzH1O], xmm5
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + _rsqOH2], xmm0
	movapd [esp + _rsqH1O], xmm3

	movapd xmm0, [esp + _ixH1]
	movapd xmm1, [esp + _iyH1]
	movapd xmm2, [esp + _izH1]
	movapd xmm3, [esp + _ixH1]
	movapd xmm4, [esp + _iyH1]
	movapd xmm5, [esp + _izH1]
	subpd  xmm0, [esp + _jxH1]
	subpd  xmm1, [esp + _jyH1]
	subpd  xmm2, [esp + _jzH1]
	subpd  xmm3, [esp + _jxH2]
	subpd  xmm4, [esp + _jyH2]
	subpd  xmm5, [esp + _jzH2]
	movapd [esp + _dxH1H1], xmm0
	movapd [esp + _dyH1H1], xmm1
	movapd [esp + _dzH1H1], xmm2
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	movapd [esp + _dxH1H2], xmm3
	movapd [esp + _dyH1H2], xmm4
	movapd [esp + _dzH1H2], xmm5
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + _rsqH1H1], xmm0
	movapd [esp + _rsqH1H2], xmm3

	movapd xmm0, [esp + _ixH2]
	movapd xmm1, [esp + _iyH2]
	movapd xmm2, [esp + _izH2]
	movapd xmm3, [esp + _ixH2]
	movapd xmm4, [esp + _iyH2]
	movapd xmm5, [esp + _izH2]
	subpd  xmm0, [esp + _jxO]
	subpd  xmm1, [esp + _jyO]
	subpd  xmm2, [esp + _jzO]
	subpd  xmm3, [esp + _jxH1]
	subpd  xmm4, [esp + _jyH1]
	subpd  xmm5, [esp + _jzH1]
	movapd [esp + _dxH2O], xmm0
	movapd [esp + _dyH2O], xmm1
	movapd [esp + _dzH2O], xmm2
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	movapd [esp + _dxH2H1], xmm3
	movapd [esp + _dyH2H1], xmm4
	movapd [esp + _dzH2H1], xmm5
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm4, xmm3
	addpd  xmm4, xmm5
	movapd [esp + _rsqH2O], xmm0
	movapd [esp + _rsqH2H1], xmm4

	movapd xmm0, [esp + _ixH2]
	movapd xmm1, [esp + _iyH2]
	movapd xmm2, [esp + _izH2]
	subpd  xmm0, [esp + _jxH2]
	subpd  xmm1, [esp + _jyH2]
	subpd  xmm2, [esp + _jzH2]
	movapd [esp + _dxH2H2], xmm0
	movapd [esp + _dyH2H2], xmm1
	movapd [esp + _dzH2H2], xmm2
	mulpd xmm0, xmm0
	mulpd xmm1, xmm1
	mulpd xmm2, xmm2
	addpd xmm0, xmm1
	addpd xmm0, xmm2
	movapd [esp + _rsqH2H2], xmm0
		
	/* start doing invsqrt use rsq values in xmm0, xmm4 */
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulpd   xmm1, xmm1	/* luA*luA */
	mulpd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	mulpd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subpd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm3, [esp + _half] /* iter1 */
	mulpd   xmm7, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulpd   xmm3, xmm3	/* luA*luA */
	mulpd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	mulpd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subpd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm1, [esp + _half] /* rinv */
	mulpd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvH2H2], xmm1
	movapd [esp + _rinvH2H1], xmm5

	movapd xmm0, [esp + _rsqOO]
	movapd xmm4, [esp + _rsqOH1]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulpd   xmm1, xmm1	/* luA*luA */
	mulpd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	mulpd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subpd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm3, [esp + _half] /* iter1 of  */
	mulpd   xmm7, [esp + _half] /* iter1 of  */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulpd   xmm3, xmm3	/* luA*luA */
	mulpd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	mulpd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subpd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm1, [esp + _half] /* rinv */
	mulpd   xmm5, [esp + _half] /* rinv*/
	movapd [esp + _rinvOO], xmm1
	movapd [esp + _rinvOH1], xmm5

	movapd xmm0, [esp + _rsqOH2]
	movapd xmm4, [esp + _rsqH1O]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulpd   xmm1, xmm1	/* luA*luA */
	mulpd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	mulpd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subpd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm3, [esp + _half] /* iter1 */
	mulpd   xmm7, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulpd   xmm3, xmm3	/* luA*luA */
	mulpd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	mulpd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subpd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm1, [esp + _half] /* rinv */
	mulpd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvOH2], xmm1
	movapd [esp + _rinvH1O], xmm5

	movapd xmm0, [esp + _rsqH1H1]
	movapd xmm4, [esp + _rsqH1H2]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulpd   xmm1, xmm1	/* luA*luA */
	mulpd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	mulpd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subpd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm3, [esp + _half] /* iter1a */
	mulpd   xmm7, [esp + _half] /* iter1b */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulpd   xmm3, xmm3	/* luA*luA */
	mulpd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	mulpd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subpd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm1, [esp + _half] /* rinv */
	mulpd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvH1H1], xmm1
	movapd [esp + _rinvH1H2], xmm5

	movapd xmm0, [esp + _rsqH2O]
	cvtpd2ps xmm1, xmm0	
	rsqrtps xmm1, xmm1
	cvtps2pd xmm1, xmm1
	
	movapd  xmm2, xmm1	/* copy of luA */
	mulpd   xmm1, xmm1	/* luA*luA */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm3, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	mulpd   xmm3, xmm3	/* luA*luA */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm1, [esp + _half] /* rinv */
	movapd [esp + _rinvH2O], xmm1
	
	/* start with OO interaction */
	movapd xmm0, [esp + _rinvOO]
	movapd xmm7, xmm0	/* xmm7=rinv */
	movapd xmm5, [esp + _krf]
	mulpd  xmm0, xmm0	/* rinvsq */
	mulpd  xmm5, [esp + _rsqOO] /* xmm5=krsq */
	movapd xmm6, xmm5
	addpd  xmm6, xmm7	/* xmm6=rinv+ krsq */
	subpd  xmm6, [esp + _crf]
	
	mulpd  xmm6, [esp + _qqOO] /* xmm6=voul=qq*(rinv+ krsq-crf) */
	mulpd  xmm5, [esp + _two]
	subpd  xmm7, xmm5	/* xmm7=rinv-2*krsq */
	mulpd  xmm7, [esp + _qqOO] /* xmm7 = coul part of fscal */
	
	addpd  xmm6, [esp + _vctot] /* local vctot summation variable */
	mulpd  xmm0, xmm7
	
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulpd xmm0, [esp + _dxOO]
	mulpd xmm1, [esp + _dyOO]
	mulpd xmm2, [esp + _dzOO]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixO]
	addpd xmm1, [esp + _fiyO]
	addpd xmm2, [esp + _fizO]
	movapd [esp + _fjxO], xmm3
	movapd [esp + _fjyO], xmm4
	movapd [esp + _fjzO], xmm5
	movapd [esp + _fixO], xmm0
	movapd [esp + _fiyO], xmm1
	movapd [esp + _fizO], xmm2

	/* O-H1 interaction */
	movapd xmm0, [esp + _rinvOH1]
	movapd xmm7, xmm0	/* xmm7=rinv */
	movapd xmm5, [esp + _krf]
	movapd xmm1, xmm0
	mulpd  xmm5, [esp + _rsqOH1] /* xmm5=krsq */
	movapd xmm4, xmm5
	addpd  xmm4, xmm7	/* xmm4=rinv+ krsq */
	mulpd  xmm0, xmm0
	subpd  xmm4, [esp + _crf]
	mulpd  xmm4, [esp + _qqOH] /* xmm4=voul=qq*(rinv+ krsq) */
	mulpd  xmm5, [esp + _two]
	subpd  xmm7, xmm5	/* xmm7=rinv-2*krsq */
	mulpd  xmm7, [esp + _qqOH] /* xmm7 = coul part of fscal */
	addpd  xmm6, xmm4	/* add to local vctot */
	mulpd xmm0, xmm7	/* fsOH1  */
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	
	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulpd xmm0, [esp + _dxOH1]
	mulpd xmm1, [esp + _dyOH1]
	mulpd xmm2, [esp + _dzOH1]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixO]
	addpd xmm1, [esp + _fiyO]
	addpd xmm2, [esp + _fizO]
	movapd [esp + _fjxH1], xmm3
	movapd [esp + _fjyH1], xmm4
	movapd [esp + _fjzH1], xmm5
	movapd [esp + _fixO], xmm0
	movapd [esp + _fiyO], xmm1
	movapd [esp + _fizO], xmm2

	/* O-H2 interaction */ 
	movapd xmm0, [esp + _rinvOH2]
	movapd xmm7, xmm0	/* xmm7=rinv */
	movapd xmm5, [esp + _krf]	
	movapd xmm1, xmm0
	mulpd  xmm5, [esp + _rsqOH2] /* xmm5=krsq */
	movapd xmm4, xmm5
	addpd  xmm4, xmm7	/* xmm4=r inv+ krsq */
	mulpd xmm0, xmm0
	subpd  xmm4, [esp + _crf]
	mulpd  xmm4, [esp + _qqOH] /* xmm4=voul=qq*(rinv+ krsq) */
	mulpd  xmm5, [esp + _two]
	subpd  xmm7, xmm5	/* xmm7=rinv-2*krsq */
	mulpd  xmm7, [esp + _qqOH] /* xmm7 = coul part of fscal */
	addpd  xmm6, xmm4	/* add to local vctot */
	mulpd xmm0, xmm7	/* fsOH2 */
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulpd xmm0, [esp + _dxOH2]
	mulpd xmm1, [esp + _dyOH2]
	mulpd xmm2, [esp + _dzOH2]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixO]
	addpd xmm1, [esp + _fiyO]
	addpd xmm2, [esp + _fizO]
	movapd [esp + _fjxH2], xmm3
	movapd [esp + _fjyH2], xmm4
	movapd [esp + _fjzH2], xmm5
	movapd [esp + _fixO], xmm0
	movapd [esp + _fiyO], xmm1
	movapd [esp + _fizO], xmm2

	/* H1-O interaction */
	movapd xmm0, [esp + _rinvH1O]
	movapd xmm7, xmm0	/* xmm7=rinv */
	movapd xmm5, [esp + _krf]	
	movapd xmm1, xmm0
	mulpd  xmm5, [esp + _rsqH1O] /* xmm5=krsq */
	movapd xmm4, xmm5
	addpd  xmm4, xmm7	/* xmm4=rinv+ krsq */
	mulpd xmm0, xmm0
	subpd  xmm4, [esp + _crf]
	mulpd  xmm4, [esp + _qqOH] /* xmm4=voul=qq*(rinv+ krsq) */
	mulpd  xmm5, [esp + _two]
	subpd  xmm7, xmm5	/* xmm7=rinv-2*krsq */
	mulpd  xmm7, [esp + _qqOH] /* xmm7 = coul part of fscal */
	addpd  xmm6, xmm4	/* add to local vctot */
	mulpd xmm0, xmm7	/* fsOH2 */
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	movapd xmm3, [esp + _fjxO]
	movapd xmm4, [esp + _fjyO]
	movapd xmm5, [esp + _fjzO]
	mulpd xmm0, [esp + _dxH1O]
	mulpd xmm1, [esp + _dyH1O]
	mulpd xmm2, [esp + _dzH1O]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixH1]
	addpd xmm1, [esp + _fiyH1]
	addpd xmm2, [esp + _fizH1]
	movapd [esp + _fjxO], xmm3
	movapd [esp + _fjyO], xmm4
	movapd [esp + _fjzO], xmm5
	movapd [esp + _fixH1], xmm0
	movapd [esp + _fiyH1], xmm1
	movapd [esp + _fizH1], xmm2

	/* H1-H1 interaction */
	movapd xmm0, [esp + _rinvH1H1]
	movapd xmm7, xmm0	/* xmm7=rinv */
	movapd xmm5, [esp + _krf]	
	movapd xmm1, xmm0
	mulpd  xmm5, [esp + _rsqH1H1] /* xmm5=krsq */
	movapd xmm4, xmm5
	addpd  xmm4, xmm7	/* xmm4=r inv+ krsq */
	subpd  xmm4, [esp + _crf]
	mulpd xmm0, xmm0
	mulpd  xmm4, [esp + _qqHH] /* xmm4=voul=qq*(rinv+ krsq) */
	mulpd  xmm5, [esp + _two]
	subpd  xmm7, xmm5	/* xmm7=rinv-2*krsq */
	mulpd  xmm7, [esp + _qqHH] /* xmm7 = coul part of fscal */
	addpd  xmm6, xmm4	/* add to local vctot */
	mulpd xmm0, xmm7	/* fsOH2 */
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	movapd xmm3, [esp + _fjxH1]
	movapd xmm4, [esp + _fjyH1]
	movapd xmm5, [esp + _fjzH1]
	mulpd xmm0, [esp + _dxH1H1]
	mulpd xmm1, [esp + _dyH1H1]
	mulpd xmm2, [esp + _dzH1H1]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixH1]
	addpd xmm1, [esp + _fiyH1]
	addpd xmm2, [esp + _fizH1]
	movapd [esp + _fjxH1], xmm3
	movapd [esp + _fjyH1], xmm4
	movapd [esp + _fjzH1], xmm5
	movapd [esp + _fixH1], xmm0
	movapd [esp + _fiyH1], xmm1
	movapd [esp + _fizH1], xmm2

	/* H1-H2 interaction */
	movapd xmm0, [esp + _rinvH1H2]
	movapd xmm7, xmm0	/* xmm7=rinv */
	movapd xmm5, [esp + _krf]	
	movapd xmm1, xmm0
	mulpd  xmm5, [esp + _rsqH1H2] /* xmm5=krsq */
	movapd xmm4, xmm5
	addpd  xmm4, xmm7	/* xmm4=r inv+ krsq */
	mulpd xmm0, xmm0
	subpd  xmm4, [esp + _crf]
	mulpd  xmm4, [esp + _qqHH] /* xmm4=voul=qq*(rinv+ krsq) */
	mulpd  xmm5, [esp + _two]
	subpd  xmm7, xmm5	/* xmm7=rinv-2*krsq */
	mulpd  xmm7, [esp + _qqHH] /* xmm7 = coul part of fscal */
	addpd  xmm6, xmm4	/* add to local vctot */
	mulpd xmm0, xmm7	/* fsOH2 */
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	
	movapd xmm3, [esp + _fjxH2]
	movapd xmm4, [esp + _fjyH2]
	movapd xmm5, [esp + _fjzH2]
	mulpd xmm0, [esp + _dxH1H2]
	mulpd xmm1, [esp + _dyH1H2]
	mulpd xmm2, [esp + _dzH1H2]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixH1]
	addpd xmm1, [esp + _fiyH1]
	addpd xmm2, [esp + _fizH1]
	movapd [esp + _fjxH2], xmm3
	movapd [esp + _fjyH2], xmm4
	movapd [esp + _fjzH2], xmm5
	movapd [esp + _fixH1], xmm0
	movapd [esp + _fiyH1], xmm1
	movapd [esp + _fizH1], xmm2

	/* H2-O interaction */
	movapd xmm0, [esp + _rinvH2O]
	movapd xmm7, xmm0	/* xmm7=rinv */
	movapd xmm5, [esp + _krf]	
	movapd xmm1, xmm0
	mulpd  xmm5, [esp + _rsqH2O] /* xmm5=krsq */
	movapd xmm4, xmm5
	addpd  xmm4, xmm7	/* xmm4=r inv+ krsq */
	subpd  xmm4, [esp + _crf]
	mulpd xmm0, xmm0
	mulpd  xmm4, [esp + _qqOH] /* xmm4=voul=qq*(rinv+ krsq) */
	mulpd  xmm5, [esp + _two]
	subpd  xmm7, xmm5	/* xmm7=rinv-2*krsq */
	mulpd  xmm7, [esp + _qqOH] /* xmm7 = coul part of fscal */
	addpd  xmm6, xmm4	/* add to local vctot */
	mulpd xmm0, xmm7	/* fsOH2 */
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	movapd xmm3, [esp + _fjxO]
	movapd xmm4, [esp + _fjyO]
	movapd xmm5, [esp + _fjzO]
	mulpd xmm0, [esp + _dxH2O]
	mulpd xmm1, [esp + _dyH2O]
	mulpd xmm2, [esp + _dzH2O]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixH2]
	addpd xmm1, [esp + _fiyH2]
	addpd xmm2, [esp + _fizH2]
	movapd [esp + _fjxO], xmm3
	movapd [esp + _fjyO], xmm4
	movapd [esp + _fjzO], xmm5
	movapd [esp + _fixH2], xmm0
	movapd [esp + _fiyH2], xmm1
	movapd [esp + _fizH2], xmm2

	/* H2-H1 interaction */
	movapd xmm0, [esp + _rinvH2H1]
	movapd xmm7, xmm0	/* xmm7=rinv */
	movapd xmm5, [esp + _krf]	
	movapd xmm1, xmm0
	mulpd  xmm5, [esp + _rsqH2H1] /* xmm5=krsq */
	movapd xmm4, xmm5
	addpd  xmm4, xmm7	/* xmm4=r inv+ krsq */
	subpd  xmm4, [esp + _crf]
	mulpd xmm0, xmm0
	mulpd  xmm4, [esp + _qqHH] /* xmm4=voul=qq*(rinv+ krsq) */
	mulpd  xmm5, [esp + _two]
	subpd  xmm7, xmm5	/* xmm7=rinv-2*krsq */
	mulpd  xmm7, [esp + _qqHH] /* xmm7 = coul part of fscal */
	addpd  xmm6, xmm4	/* add to local vctot */
	mulpd xmm0, xmm7	/* fsOH2 */
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	movapd xmm3, [esp + _fjxH1]
	movapd xmm4, [esp + _fjyH1]
	movapd xmm5, [esp + _fjzH1]
	mulpd xmm0, [esp + _dxH2H1]
	mulpd xmm1, [esp + _dyH2H1]
	mulpd xmm2, [esp + _dzH2H1]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixH2]
	addpd xmm1, [esp + _fiyH2]
	addpd xmm2, [esp + _fizH2]
	movapd [esp + _fjxH1], xmm3
	movapd [esp + _fjyH1], xmm4
	movapd [esp + _fjzH1], xmm5
	movapd [esp + _fixH2], xmm0
	movapd [esp + _fiyH2], xmm1
	movapd [esp + _fizH2], xmm2

	/* H2-H2 interaction */
	movapd xmm0, [esp + _rinvH2H2]
	movapd xmm7, xmm0	/* xmm7=rinv */
	movapd xmm5, [esp + _krf]	
	movapd xmm1, xmm0
	mulpd  xmm5, [esp + _rsqH2H2] /* xmm5=krsq */
	movapd xmm4, xmm5
	addpd  xmm4, xmm7	/* xmm4=r inv+ krsq */
	subpd  xmm4, [esp + _crf]
	mulpd xmm0, xmm0
	mulpd  xmm4, [esp + _qqHH] /* xmm4=voul=qq*(rinv+ krsq) */
	mulpd  xmm5, [esp + _two]
	subpd  xmm7, xmm5	/* xmm7=rinv-2*krsq */
	mulpd  xmm7, [esp + _qqHH] /* xmm7 = coul part of fscal */
	addpd  xmm6, xmm4	/* add to local vctot */
	mulpd xmm0, xmm7	/* fsOH2 */
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	movapd xmm1, xmm0
	movapd [esp + _vctot], xmm6
	movapd xmm2, xmm0
	
	movapd xmm3, [esp + _fjxH2]
	movapd xmm4, [esp + _fjyH2]
	movapd xmm5, [esp + _fjzH2]
	mulpd xmm0, [esp + _dxH2H2]
	mulpd xmm1, [esp + _dyH2H2]
	mulpd xmm2, [esp + _dzH2H2]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixH2]
	addpd xmm1, [esp + _fiyH2]
	addpd xmm2, [esp + _fizH2]
	movapd [esp + _fjxH2], xmm3
	movapd [esp + _fjyH2], xmm4
	movapd [esp + _fjzH2], xmm5
	movapd [esp + _fixH2], xmm0
	movapd [esp + _fiyH2], xmm1
	movapd [esp + _fizH2], xmm2

	mov edi, [ebp + _faction]
		
	/* Did all interactions - now update j forces */
	movlpd xmm0, [edi + eax*8]
	movlpd xmm1, [edi + eax*8 + 8]
	movlpd xmm2, [edi + eax*8 + 16]
	movlpd xmm3, [edi + eax*8 + 24]
	movlpd xmm4, [edi + eax*8 + 32]
	movlpd xmm5, [edi + eax*8 + 40]
	movlpd xmm6, [edi + eax*8 + 48]
	movlpd xmm7, [edi + eax*8 + 56]
	movhpd xmm0, [edi + ebx*8]
	movhpd xmm1, [edi + ebx*8 + 8]
	movhpd xmm2, [edi + ebx*8 + 16]
	movhpd xmm3, [edi + ebx*8 + 24]
	movhpd xmm4, [edi + ebx*8 + 32]
	movhpd xmm5, [edi + ebx*8 + 40]
	movhpd xmm6, [edi + ebx*8 + 48]
	movhpd xmm7, [edi + ebx*8 + 56]
	addpd xmm0, [esp + _fjxO]
	addpd xmm1, [esp + _fjyO]
	addpd xmm2, [esp + _fjzO]
	addpd xmm3, [esp + _fjxH1]
	addpd xmm4, [esp + _fjyH1]
	addpd xmm5, [esp + _fjzH1]
	addpd xmm6, [esp + _fjxH2]
	addpd xmm7, [esp + _fjyH2]
	movlpd [edi + eax*8], xmm0
	movlpd [edi + eax*8 + 8], xmm1
	movlpd [edi + eax*8 + 16], xmm2
	movlpd [edi + eax*8 + 24], xmm3
	movlpd [edi + eax*8 + 32], xmm4
	movlpd [edi + eax*8 + 40], xmm5
	movlpd [edi + eax*8 + 48], xmm6
	movlpd [edi + eax*8 + 56], xmm7
	movhpd [edi + ebx*8], xmm0
	movhpd [edi + ebx*8 + 8], xmm1
	movhpd [edi + ebx*8 + 16], xmm2
	movhpd [edi + ebx*8 + 24], xmm3
	movhpd [edi + ebx*8 + 32], xmm4
	movhpd [edi + ebx*8 + 40], xmm5
	movhpd [edi + ebx*8 + 48], xmm6
	movhpd [edi + ebx*8 + 56], xmm7

	movlpd xmm0, [edi + eax*8 + 64]
	movhpd xmm0, [edi + ebx*8 + 64]
	addpd xmm0, [esp + _fjzH2]
	movlpd [edi + eax*8 + 64], xmm0
	movhpd [edi + ebx*8 + 64], xmm0
	
	/* should we do one more iteration? */
	sub   [esp + _innerk],  2
	jl    .i2030_checksingle
	jmp   .i2030_unroll_loop
.i2030_checksingle:
	mov   edx, [esp + _innerk]
	and   edx, 1
	jnz   .i2030_dosingle
	jmp   .i2030_updateouterdata
.i2030_dosingle:
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]
	
	mov esi, [ebp + _pos]
	lea   eax, [eax + eax*2]  

	/* fetch j coordinates */
	movlpd xmm2, [esi + eax*8]
	movlpd xmm3, [esi + eax*8 + 8]
	movlpd xmm4, [esi + eax*8 + 16]
	movlpd xmm5, [esi + eax*8 + 24]
	movlpd xmm6, [esi + eax*8 + 32]
	movlpd xmm7, [esi + eax*8 + 40]
	movapd 	[esp + _jxO], xmm2
	movapd 	[esp + _jyO], xmm3
	movapd 	[esp + _jzO], xmm4
	movapd 	[esp + _jxH1], xmm5
	movapd 	[esp + _jyH1], xmm6
	movapd 	[esp + _jzH1], xmm7
	movlpd xmm2, [esi + eax*8 + 48]
	movlpd xmm3, [esi + eax*8 + 56]
	movlpd xmm4, [esi + eax*8 + 64]
	movapd 	[esp + _jxH2], xmm2
	movapd 	[esp + _jyH2], xmm3
	movapd 	[esp + _jzH2], xmm4
	
	movapd xmm0, [esp + _ixO]
	movapd xmm1, [esp + _iyO]
	movapd xmm2, [esp + _izO]
	movapd xmm3, [esp + _ixO]
	movapd xmm4, [esp + _iyO]
	movapd xmm5, [esp + _izO]
	subsd  xmm0, [esp + _jxO]
	subsd  xmm1, [esp + _jyO]
	subsd  xmm2, [esp + _jzO]
	subsd  xmm3, [esp + _jxH1]
	subsd  xmm4, [esp + _jyH1]
	subsd  xmm5, [esp + _jzH1]
	movapd [esp + _dxOO], xmm0
	movapd [esp + _dyOO], xmm1
	movapd [esp + _dzOO], xmm2
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	movapd [esp + _dxOH1], xmm3
	movapd [esp + _dyOH1], xmm4
	movapd [esp + _dzOH1], xmm5
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + _rsqOO], xmm0
	movapd [esp + _rsqOH1], xmm3

	movapd xmm0, [esp + _ixO]
	movapd xmm1, [esp + _iyO]
	movapd xmm2, [esp + _izO]
	movapd xmm3, [esp + _ixH1]
	movapd xmm4, [esp + _iyH1]
	movapd xmm5, [esp + _izH1]
	subsd  xmm0, [esp + _jxH2]
	subsd  xmm1, [esp + _jyH2]
	subsd  xmm2, [esp + _jzH2]
	subsd  xmm3, [esp + _jxO]
	subsd  xmm4, [esp + _jyO]
	subsd  xmm5, [esp + _jzO]
	movapd [esp + _dxOH2], xmm0
	movapd [esp + _dyOH2], xmm1
	movapd [esp + _dzOH2], xmm2
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	movapd [esp + _dxH1O], xmm3
	movapd [esp + _dyH1O], xmm4
	movapd [esp + _dzH1O], xmm5
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + _rsqOH2], xmm0
	movapd [esp + _rsqH1O], xmm3

	movapd xmm0, [esp + _ixH1]
	movapd xmm1, [esp + _iyH1]
	movapd xmm2, [esp + _izH1]
	movapd xmm3, [esp + _ixH1]
	movapd xmm4, [esp + _iyH1]
	movapd xmm5, [esp + _izH1]
	subsd  xmm0, [esp + _jxH1]
	subsd  xmm1, [esp + _jyH1]
	subsd  xmm2, [esp + _jzH1]
	subsd  xmm3, [esp + _jxH2]
	subsd  xmm4, [esp + _jyH2]
	subsd  xmm5, [esp + _jzH2]
	movapd [esp + _dxH1H1], xmm0
	movapd [esp + _dyH1H1], xmm1
	movapd [esp + _dzH1H1], xmm2
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	movapd [esp + _dxH1H2], xmm3
	movapd [esp + _dyH1H2], xmm4
	movapd [esp + _dzH1H2], xmm5
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + _rsqH1H1], xmm0
	movapd [esp + _rsqH1H2], xmm3

	movapd xmm0, [esp + _ixH2]
	movapd xmm1, [esp + _iyH2]
	movapd xmm2, [esp + _izH2]
	movapd xmm3, [esp + _ixH2]
	movapd xmm4, [esp + _iyH2]
	movapd xmm5, [esp + _izH2]
	subsd  xmm0, [esp + _jxO]
	subsd  xmm1, [esp + _jyO]
	subsd  xmm2, [esp + _jzO]
	subsd  xmm3, [esp + _jxH1]
	subsd  xmm4, [esp + _jyH1]
	subsd  xmm5, [esp + _jzH1]
	movapd [esp + _dxH2O], xmm0
	movapd [esp + _dyH2O], xmm1
	movapd [esp + _dzH2O], xmm2
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	movapd [esp + _dxH2H1], xmm3
	movapd [esp + _dyH2H1], xmm4
	movapd [esp + _dzH2H1], xmm5
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm4, xmm3
	addsd  xmm4, xmm5
	movapd [esp + _rsqH2O], xmm0
	movapd [esp + _rsqH2H1], xmm4

	movapd xmm0, [esp + _ixH2]
	movapd xmm1, [esp + _iyH2]
	movapd xmm2, [esp + _izH2]
	subsd  xmm0, [esp + _jxH2]
	subsd  xmm1, [esp + _jyH2]
	subsd  xmm2, [esp + _jzH2]
	movapd [esp + _dxH2H2], xmm0
	movapd [esp + _dyH2H2], xmm1
	movapd [esp + _dzH2H2], xmm2
	mulsd xmm0, xmm0
	mulsd xmm1, xmm1
	mulsd xmm2, xmm2
	addsd xmm0, xmm1
	addsd xmm0, xmm2
	movapd [esp + _rsqH2H2], xmm0
		
	/* start doing invsqrt use rsq values in xmm0, xmm4 */
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulsd   xmm1, xmm1	/* luA*luA */
	mulsd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	mulsd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subsd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm3, [esp + _half] /* iter1 */
	mulsd   xmm7, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulsd   xmm3, xmm3	/* luA*luA */
	mulsd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	mulsd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subsd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm1, [esp + _half] /* rinv */
	mulsd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvH2H2], xmm1
	movapd [esp + _rinvH2H1], xmm5

	movapd xmm0, [esp + _rsqOO]
	movapd xmm4, [esp + _rsqOH1]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulsd   xmm1, xmm1	/* luA*luA */
	mulsd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	mulsd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subsd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm3, [esp + _half] /* iter1 of  */
	mulsd   xmm7, [esp + _half] /* iter1 of  */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulsd   xmm3, xmm3	/* luA*luA */
	mulsd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	mulsd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subsd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm1, [esp + _half] /* rinv */
	mulsd   xmm5, [esp + _half] /* rinv*/
	movapd [esp + _rinvOO], xmm1
	movapd [esp + _rinvOH1], xmm5

	movapd xmm0, [esp + _rsqOH2]
	movapd xmm4, [esp + _rsqH1O]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulsd   xmm1, xmm1	/* luA*luA */
	mulsd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	mulsd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subsd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm3, [esp + _half] /* iter1 */
	mulsd   xmm7, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulsd   xmm3, xmm3	/* luA*luA */
	mulsd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	mulsd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subsd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm1, [esp + _half] /* rinv */
	mulsd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvOH2], xmm1
	movapd [esp + _rinvH1O], xmm5

	movapd xmm0, [esp + _rsqH1H1]
	movapd xmm4, [esp + _rsqH1H2]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulsd   xmm1, xmm1	/* luA*luA */
	mulsd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	mulsd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subsd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm3, [esp + _half] /* iter1a */
	mulsd   xmm7, [esp + _half] /* iter1b */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulsd   xmm3, xmm3	/* luA*luA */
	mulsd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	mulsd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subsd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm1, [esp + _half] /* rinv */
	mulsd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvH1H1], xmm1
	movapd [esp + _rinvH1H2], xmm5

	movapd xmm0, [esp + _rsqH2O]
	cvtsd2ss xmm1, xmm0	
	rsqrtss xmm1, xmm1
	cvtss2sd xmm1, xmm1
	
	movapd  xmm2, xmm1	/* copy of luA */
	mulsd   xmm1, xmm1	/* luA*luA */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm3, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	mulsd   xmm3, xmm3	/* luA*luA */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm1, [esp + _half] /* rinv */
	movapd [esp + _rinvH2O], xmm1
	
	/* start with OO interaction */
	movapd xmm0, [esp + _rinvOO]
	movapd xmm7, xmm0	/* xmm7=rinv */
	movapd xmm5, [esp + _krf]
	mulsd  xmm0, xmm0
	movapd xmm1, xmm0
	mulsd  xmm1, xmm0
	mulsd  xmm1, xmm0	/* xmm1=rinvsix */
	mulsd  xmm5, [esp + _rsqOO] /* xmm5=krsq */
	movapd xmm6, xmm5
	addsd  xmm6, xmm7	/* xmm6=rinv+ krsq */
	subsd  xmm6, [esp + _crf]
	
	mulsd  xmm6, [esp + _qqOO] /* xmm6=voul=qq*(rinv+ krsq-crf) */
	mulsd  xmm5, [esp + _two]
	subsd  xmm7, xmm5	/* xmm7=rinv-2*krsq */
	mulsd  xmm7, [esp + _qqOO] /* xmm7 = coul part of fscal */
	
	addsd  xmm6, [esp + _vctot] /* local vctot summation variable */
	mulsd  xmm0, xmm7
	
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulsd xmm0, [esp + _dxOO]
	mulsd xmm1, [esp + _dyOO]
	mulsd xmm2, [esp + _dzOO]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixO]
	addsd xmm1, [esp + _fiyO]
	addsd xmm2, [esp + _fizO]
	movlpd [esp + _fjxO], xmm3
	movlpd [esp + _fjyO], xmm4
	movlpd [esp + _fjzO], xmm5
	movlpd [esp + _fixO], xmm0
	movlpd [esp + _fiyO], xmm1
	movlpd [esp + _fizO], xmm2

	/* O-H1 interaction */
	movapd xmm0, [esp + _rinvOH1]
	movapd xmm7, xmm0	/* xmm7=rinv */
	movapd xmm5, [esp + _krf]
	movapd xmm1, xmm0
	mulsd  xmm5, [esp + _rsqOH1] /* xmm5=krsq */
	movapd xmm4, xmm5
	addsd  xmm4, xmm7	/* xmm4=rinv+ krsq */
	mulsd  xmm0, xmm0
	subsd  xmm4, [esp + _crf]
	mulsd  xmm4, [esp + _qqOH] /* xmm4=voul=qq*(rinv+ krsq) */
	mulsd  xmm5, [esp + _two]
	subsd  xmm7, xmm5	/* xmm7=rinv-2*krsq */
	mulsd  xmm7, [esp + _qqOH] /* xmm7 = coul part of fscal */
	addsd  xmm6, xmm4	/* add to local vctot */
	mulsd xmm0, xmm7	/* fsOH1  */
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	
	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulsd xmm0, [esp + _dxOH1]
	mulsd xmm1, [esp + _dyOH1]
	mulsd xmm2, [esp + _dzOH1]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixO]
	addsd xmm1, [esp + _fiyO]
	addsd xmm2, [esp + _fizO]
	movlpd [esp + _fjxH1], xmm3
	movlpd [esp + _fjyH1], xmm4
	movlpd [esp + _fjzH1], xmm5
	movlpd [esp + _fixO], xmm0
	movlpd [esp + _fiyO], xmm1
	movlpd [esp + _fizO], xmm2

	/* O-H2 interaction */ 
	movapd xmm0, [esp + _rinvOH2]
	movapd xmm7, xmm0	/* xmm7=rinv */
	movapd xmm5, [esp + _krf]	
	movapd xmm1, xmm0
	mulsd  xmm5, [esp + _rsqOH2] /* xmm5=krsq */
	movapd xmm4, xmm5
	addsd  xmm4, xmm7	/* xmm4=r inv+ krsq */
	mulsd  xmm0, xmm0
	subsd  xmm4, [esp + _crf]
	mulsd  xmm4, [esp + _qqOH] /* xmm4=voul=qq*(rinv+ krsq) */
	mulsd  xmm5, [esp + _two]
	subsd  xmm7, xmm5	/* xmm7=rinv-2*krsq */
	mulsd  xmm7, [esp + _qqOH] /* xmm7 = coul part of fscal */
	addsd  xmm6, xmm4	/* add to local vctot */
	mulsd xmm0, xmm7	/* fsOH2 */
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulsd xmm0, [esp + _dxOH2]
	mulsd xmm1, [esp + _dyOH2]
	mulsd xmm2, [esp + _dzOH2]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixO]
	addsd xmm1, [esp + _fiyO]
	addsd xmm2, [esp + _fizO]
	movlpd [esp + _fjxH2], xmm3
	movlpd [esp + _fjyH2], xmm4
	movlpd [esp + _fjzH2], xmm5
	movlpd [esp + _fixO], xmm0
	movlpd [esp + _fiyO], xmm1
	movlpd [esp + _fizO], xmm2

	/* H1-O interaction */
	movapd xmm0, [esp + _rinvH1O]
	movapd xmm7, xmm0	/* xmm7=rinv */
	movapd xmm5, [esp + _krf]	
	movapd xmm1, xmm0
	mulsd  xmm5, [esp + _rsqH1O] /* xmm5=krsq */
	movapd xmm4, xmm5
	addsd  xmm4, xmm7	/* xmm4=rinv+ krsq */
	mulsd xmm0, xmm0
	subsd  xmm4, [esp + _crf]
	mulsd  xmm4, [esp + _qqOH] /* xmm4=voul=qq*(rinv+ krsq) */
	mulsd  xmm5, [esp + _two]
	subsd  xmm7, xmm5	/* xmm7=rinv-2*krsq */
	mulsd  xmm7, [esp + _qqOH] /* xmm7 = coul part of fscal */
	addsd  xmm6, xmm4	/* add to local vctot */
	mulsd xmm0, xmm7	/* fsOH2 */
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	movapd xmm3, [esp + _fjxO]
	movapd xmm4, [esp + _fjyO]
	movapd xmm5, [esp + _fjzO]
	mulsd xmm0, [esp + _dxH1O]
	mulsd xmm1, [esp + _dyH1O]
	mulsd xmm2, [esp + _dzH1O]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixH1]
	addsd xmm1, [esp + _fiyH1]
	addsd xmm2, [esp + _fizH1]
	movlpd [esp + _fjxO], xmm3
	movlpd [esp + _fjyO], xmm4
	movlpd [esp + _fjzO], xmm5
	movlpd [esp + _fixH1], xmm0
	movlpd [esp + _fiyH1], xmm1
	movlpd [esp + _fizH1], xmm2

	/* H1-H1 interaction */
	movapd xmm0, [esp + _rinvH1H1]
	movapd xmm7, xmm0	/* xmm7=rinv */
	movapd xmm5, [esp + _krf]	
	movapd xmm1, xmm0
	mulsd  xmm5, [esp + _rsqH1H1] /* xmm5=krsq */
	movapd xmm4, xmm5
	addsd  xmm4, xmm7	/* xmm4=r inv+ krsq */
	subsd  xmm4, [esp + _crf]
	mulsd xmm0, xmm0
	mulsd  xmm4, [esp + _qqHH] /* xmm4=voul=qq*(rinv+ krsq) */
	mulsd  xmm5, [esp + _two]
	subsd  xmm7, xmm5	/* xmm7=rinv-2*krsq */
	mulsd  xmm7, [esp + _qqHH] /* xmm7 = coul part of fscal */
	addsd  xmm6, xmm4	/* add to local vctot */
	mulsd xmm0, xmm7	/* fsOH2 */
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	movapd xmm3, [esp + _fjxH1]
	movapd xmm4, [esp + _fjyH1]
	movapd xmm5, [esp + _fjzH1]
	mulsd xmm0, [esp + _dxH1H1]
	mulsd xmm1, [esp + _dyH1H1]
	mulsd xmm2, [esp + _dzH1H1]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixH1]
	addsd xmm1, [esp + _fiyH1]
	addsd xmm2, [esp + _fizH1]
	movlpd [esp + _fjxH1], xmm3
	movlpd [esp + _fjyH1], xmm4
	movlpd [esp + _fjzH1], xmm5
	movlpd [esp + _fixH1], xmm0
	movlpd [esp + _fiyH1], xmm1
	movlpd [esp + _fizH1], xmm2

	/* H1-H2 interaction */
	movapd xmm0, [esp + _rinvH1H2]
	movapd xmm7, xmm0	/* xmm7=rinv */
	movapd xmm5, [esp + _krf]	
	movapd xmm1, xmm0
	mulsd  xmm5, [esp + _rsqH1H2] /* xmm5=krsq */
	movapd xmm4, xmm5
	addsd  xmm4, xmm7	/* xmm4=r inv+ krsq */
	mulsd xmm0, xmm0
	subsd  xmm4, [esp + _crf]
	mulsd  xmm4, [esp + _qqHH] /* xmm4=voul=qq*(rinv+ krsq) */
	mulsd  xmm5, [esp + _two]
	subsd  xmm7, xmm5	/* xmm7=rinv-2*krsq */
	mulsd  xmm7, [esp + _qqHH] /* xmm7 = coul part of fscal */
	addsd  xmm6, xmm4	/* add to local vctot */
	mulsd xmm0, xmm7	/* fsOH2 */
	movapd xmm1, xmm0
	movapd xmm2, xmm0
	
	movapd xmm3, [esp + _fjxH2]
	movapd xmm4, [esp + _fjyH2]
	movapd xmm5, [esp + _fjzH2]
	mulsd xmm0, [esp + _dxH1H2]
	mulsd xmm1, [esp + _dyH1H2]
	mulsd xmm2, [esp + _dzH1H2]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixH1]
	addsd xmm1, [esp + _fiyH1]
	addsd xmm2, [esp + _fizH1]
	movlpd [esp + _fjxH2], xmm3
	movlpd [esp + _fjyH2], xmm4
	movlpd [esp + _fjzH2], xmm5
	movlpd [esp + _fixH1], xmm0
	movlpd [esp + _fiyH1], xmm1
	movlpd [esp + _fizH1], xmm2

	/* H2-O interaction */
	movapd xmm0, [esp + _rinvH2O]
	movapd xmm7, xmm0	/* xmm7=rinv */
	movapd xmm5, [esp + _krf]	
	movapd xmm1, xmm0
	mulsd  xmm5, [esp + _rsqH2O] /* xmm5=krsq */
	movapd xmm4, xmm5
	addsd  xmm4, xmm7	/* xmm4=r inv+ krsq */
	subsd  xmm4, [esp + _crf]
	mulsd xmm0, xmm0
	mulsd  xmm4, [esp + _qqOH] /* xmm4=voul=qq*(rinv+ krsq) */
	mulsd  xmm5, [esp + _two]
	subsd  xmm7, xmm5	/* xmm7=rinv-2*krsq */
	mulsd  xmm7, [esp + _qqOH] /* xmm7 = coul part of fscal */
	addsd  xmm6, xmm4	/* add to local vctot */
	mulsd xmm0, xmm7	/* fsOH2 */
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	movapd xmm3, [esp + _fjxO]
	movapd xmm4, [esp + _fjyO]
	movapd xmm5, [esp + _fjzO]
	mulsd xmm0, [esp + _dxH2O]
	mulsd xmm1, [esp + _dyH2O]
	mulsd xmm2, [esp + _dzH2O]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixH2]
	addsd xmm1, [esp + _fiyH2]
	addsd xmm2, [esp + _fizH2]
	movlpd [esp + _fjxO], xmm3
	movlpd [esp + _fjyO], xmm4
	movlpd [esp + _fjzO], xmm5
	movlpd [esp + _fixH2], xmm0
	movlpd [esp + _fiyH2], xmm1
	movlpd [esp + _fizH2], xmm2

	/* H2-H1 interaction */
	movapd xmm0, [esp + _rinvH2H1]
	movapd xmm7, xmm0	/* xmm7=rinv */
	movapd xmm5, [esp + _krf]	
	movapd xmm1, xmm0
	mulsd  xmm5, [esp + _rsqH2H1] /* xmm5=krsq */
	movapd xmm4, xmm5
	addsd  xmm4, xmm7	/* xmm4=r inv+ krsq */
	subsd  xmm4, [esp + _crf]
	mulsd xmm0, xmm0
	mulsd  xmm4, [esp + _qqHH] /* xmm4=voul=qq*(rinv+ krsq) */
	mulsd  xmm5, [esp + _two]
	subsd  xmm7, xmm5	/* xmm7=rinv-2*krsq */
	mulsd  xmm7, [esp + _qqHH] /* xmm7 = coul part of fscal */
	addsd  xmm6, xmm4	/* add to local vctot */
	mulsd xmm0, xmm7	/* fsOH2 */
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	movapd xmm3, [esp + _fjxH1]
	movapd xmm4, [esp + _fjyH1]
	movapd xmm5, [esp + _fjzH1]
	mulsd xmm0, [esp + _dxH2H1]
	mulsd xmm1, [esp + _dyH2H1]
	mulsd xmm2, [esp + _dzH2H1]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixH2]
	addsd xmm1, [esp + _fiyH2]
	addsd xmm2, [esp + _fizH2]
	movlpd [esp + _fjxH1], xmm3
	movlpd [esp + _fjyH1], xmm4
	movlpd [esp + _fjzH1], xmm5
	movlpd [esp + _fixH2], xmm0
	movlpd [esp + _fiyH2], xmm1
	movlpd [esp + _fizH2], xmm2

	/* H2-H2 interaction */
	movapd xmm0, [esp + _rinvH2H2]
	movapd xmm7, xmm0	/* xmm7=rinv */
	movapd xmm5, [esp + _krf]	
	movapd xmm1, xmm0
	mulsd  xmm5, [esp + _rsqH2H2] /* xmm5=krsq */
	movapd xmm4, xmm5
	addsd  xmm4, xmm7	/* xmm4=r inv+ krsq */
	subsd  xmm4, [esp + _crf]
	mulsd xmm0, xmm0
	mulsd  xmm4, [esp + _qqHH] /* xmm4=voul=qq*(rinv+ krsq) */
	mulsd  xmm5, [esp + _two]
	subsd  xmm7, xmm5	/* xmm7=rinv-2*krsq */
	mulsd  xmm7, [esp + _qqHH] /* xmm7 = coul part of fscal */
	addsd  xmm6, xmm4	/* add to local vctot */
	mulsd xmm0, xmm7	/* fsOH2 */
	movapd xmm1, xmm0
	movapd xmm2, xmm0

	movapd xmm1, xmm0
	movlpd [esp + _vctot], xmm6
	movapd xmm2, xmm0
	
	movapd xmm3, [esp + _fjxH2]
	movapd xmm4, [esp + _fjyH2]
	movapd xmm5, [esp + _fjzH2]
	mulsd xmm0, [esp + _dxH2H2]
	mulsd xmm1, [esp + _dyH2H2]
	mulsd xmm2, [esp + _dzH2H2]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixH2]
	addsd xmm1, [esp + _fiyH2]
	addsd xmm2, [esp + _fizH2]
	movlpd [esp + _fjxH2], xmm3
	movlpd [esp + _fjyH2], xmm4
	movlpd [esp + _fjzH2], xmm5
	movlpd [esp + _fixH2], xmm0
	movlpd [esp + _fiyH2], xmm1
	movlpd [esp + _fizH2], xmm2

	mov edi, [ebp + _faction]
	/* Did all interactions - now update j forces */
	movlpd xmm0, [edi + eax*8]
	movlpd xmm1, [edi + eax*8 + 8]
	movlpd xmm2, [edi + eax*8 + 16]
	movlpd xmm3, [edi + eax*8 + 24]
	movlpd xmm4, [edi + eax*8 + 32]
	movlpd xmm5, [edi + eax*8 + 40]
	movlpd xmm6, [edi + eax*8 + 48]
	movlpd xmm7, [edi + eax*8 + 56]
	addsd xmm0, [esp + _fjxO]
	addsd xmm1, [esp + _fjyO]
	addsd xmm2, [esp + _fjzO]
	addsd xmm3, [esp + _fjxH1]
	addsd xmm4, [esp + _fjyH1]
	addsd xmm5, [esp + _fjzH1]
	addsd xmm6, [esp + _fjxH2]
	addsd xmm7, [esp + _fjyH2]
	movlpd [edi + eax*8], xmm0
	movlpd [edi + eax*8 + 8], xmm1
	movlpd [edi + eax*8 + 16], xmm2
	movlpd [edi + eax*8 + 24], xmm3
	movlpd [edi + eax*8 + 32], xmm4
	movlpd [edi + eax*8 + 40], xmm5
	movlpd [edi + eax*8 + 48], xmm6
	movlpd [edi + eax*8 + 56], xmm7

	movlpd xmm0, [edi + eax*8 + 64]
	addsd xmm0, [esp + _fjzH2]
	movlpd [edi + eax*8 + 64], xmm0
	
.i2030_updateouterdata:
	mov   ecx, [esp + _ii3]
	mov   edi, [ebp + _faction]
	mov   esi, [ebp + _fshift]
	mov   edx, [esp + _is3]

	/* accumulate  Oi forces in xmm0, xmm1, xmm2 */
	movapd xmm0, [esp + _fixO]
	movapd xmm1, [esp + _fiyO]
	movapd xmm2, [esp + _fizO]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 /* sum is in low xmm0-xmm2 */

	movapd xmm3, xmm0	
	movapd xmm4, xmm1	
	movapd xmm5, xmm2	

	/* increment i force */
	movsd  xmm3, [edi + ecx*8]
	movsd  xmm4, [edi + ecx*8 + 8]
	movsd  xmm5, [edi + ecx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8],     xmm3
	movsd  [edi + ecx*8 + 8], xmm4
	movsd  [edi + ecx*8 + 16], xmm5

	/* accumulate force in xmm6/xmm7 for fshift */
	movapd xmm6, xmm0
	movsd xmm7, xmm2
	unpcklpd xmm6, xmm1

	/* accumulate H1i forces in xmm0, xmm1, xmm2 */
	movapd xmm0, [esp + _fixH1]
	movapd xmm1, [esp + _fiyH1]
	movapd xmm2, [esp + _fizH1]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 /* sum is in low xmm0-xmm2 */

	/* increment i force */
	movsd  xmm3, [edi + ecx*8 + 24]
	movsd  xmm4, [edi + ecx*8 + 32]
	movsd  xmm5, [edi + ecx*8 + 40]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8 + 24], xmm3
	movsd  [edi + ecx*8 + 32], xmm4
	movsd  [edi + ecx*8 + 40], xmm5

	/* accumulate force in xmm6/xmm7 for fshift */
	addsd xmm7, xmm2
	unpcklpd xmm0, xmm1
	addpd xmm6, xmm0

	/* accumulate H2i forces in xmm0, xmm1, xmm2 */
	movapd xmm0, [esp + _fixH2]
	movapd xmm1, [esp + _fiyH2]
	movapd xmm2, [esp + _fizH2]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 /* sum is in low xmm0-xmm2 */

	movapd xmm3, xmm0	
	movapd xmm4, xmm1	
	movapd xmm5, xmm2	

	/* increment i force */
	movsd  xmm3, [edi + ecx*8 + 48]
	movsd  xmm4, [edi + ecx*8 + 56]
	movsd  xmm5, [edi + ecx*8 + 64]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8 + 48], xmm3
	movsd  [edi + ecx*8 + 56], xmm4
	movsd  [edi + ecx*8 + 64], xmm5

	/* accumulate force in xmm6/xmm7 for fshift */
	addsd xmm7, xmm2
	unpcklpd xmm0, xmm1
	addpd xmm6, xmm0

	/* increment fshift force */
	movupd xmm3, [esi + edx*8]
	movsd  xmm4, [esi + edx*8 + 16]
	addpd  xmm3, xmm6
	addsd  xmm4, xmm7
	movupd [esi + edx*8],    xmm3
	movsd  [esi + edx*8 + 16], xmm4

	mov   edx, [ebp + _gid]  
	mov   edx, [edx]
	add   [ebp + _gid],  4	

	/* accumulate total potential energy and update it */
	movapd xmm7, [esp + _vctot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */
        
	/* add earlier value from mem */
	mov   eax, [ebp + _Vc]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* finish if last */
	mov   ecx, [ebp + _nri]
	dec ecx
	jecxz .i2030_end
	/* not last, iterate once more! */ 
	mov [ebp + _nri], ecx
	jmp .i2030_outer
.i2030_end:
	emms
	mov eax, [esp + _salign]
	add esp, eax
	add esp, 1460
	pop edi
	pop esi
        pop edx
        pop ecx
        pop ebx
        pop eax
	leave
	ret

	
	

.globl inl3000_sse2
	.type inl3000_sse2,@function
inl3000_sse2:	
.equ		_nri,		8
.equ		_iinr,		12
.equ		_jindex,	16
.equ		_jjnr,		20
.equ		_shift,		24
.equ		_shiftvec,	28
.equ		_fshift,	32
.equ		_gid,		36
.equ		_pos,		40		
.equ		_faction,	44
.equ		_charge,	48
.equ		_facel,		52 /* double */ 
.equ		_Vc,		60	
.equ		_tabscale,	64 /* double */ 
.equ		_VFtab,		72
	/* stack offsets for local variables */ 
	/* bottom of stack is cache-aligned for sse2 use */
.equ		_ix,		0
.equ		_iy,		16
.equ		_iz,		32
.equ		_iq,		48
.equ		_dx,		64
.equ		_dy,		80
.equ		_dz,		96
.equ		_two,		112
.equ		_tsc,		128
.equ		_qq,		144	
.equ		_fs,		160
.equ		_vctot,		176
.equ		_fix,		192
.equ		_fiy,		208
.equ		_fiz,		224
.equ		_half,		240
.equ		_three,		256
.equ		_is3,		272
.equ		_ii3,		276
.equ		_innerjjnr,	280
.equ		_innerk,	284
.equ		_salign,	288
	push ebp
	mov ebp,esp	
        push eax
        push ebx
        push ecx
        push edx
	push esi
	push edi
	sub esp, 292		/* local stack space */
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + _salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_two]
	movupd xmm2, [sse2_three]
	movsd xmm3, [ebp + _tabscale]
	movapd [esp + _half],  xmm0
	movapd [esp + _two], xmm1
	movapd [esp + _three],  xmm2
	shufpd xmm3, xmm3, 0
	movapd [esp + _tsc], xmm3

	/* assume we have at least one i particle - start directly */	
.i3000_outer:
	mov   eax, [ebp + _shift]      /* eax = pointer into shift[] */
	mov   ebx, [eax]		/* ebx=shift[n] */
	add   [ebp + _shift],  4  /* advance pointer one step */
	
	lea   ebx, [ebx + ebx*2]        /* ebx=3*is */
	mov   [esp + _is3],ebx    	/* store is3 */

	mov   eax, [ebp + _shiftvec]   /* eax = base of shiftvec[] */

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	add   [ebp + _iinr],  4   /* advance pointer */
	mov   ebx, [ecx]	        /* ebx =ii */

	mov   edx, [ebp + _charge]
	movsd xmm3, [edx + ebx*8]	
	mulsd xmm3, [ebp + _facel]
	shufpd xmm3, xmm3, 0

	lea   ebx, [ebx + ebx*2]	/* ebx = 3*ii=ii3 */
	mov   eax, [ebp + _pos]        /* eax = base of pos[] */ 

	addsd xmm0, [eax + ebx*8]
	addsd xmm1, [eax + ebx*8 + 8]
	addsd xmm2, [eax + ebx*8 + 16]

	movapd [esp + _iq], xmm3
	
	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0

	movapd [esp + _ix], xmm0
	movapd [esp + _iy], xmm1
	movapd [esp + _iz], xmm2

	mov   [esp + _ii3], ebx
	
	/* clear vctot and i forces */
	xorpd xmm4, xmm4
	movapd [esp + _vctot], xmm4
	movapd [esp + _fix], xmm4
	movapd [esp + _fiy], xmm4
	movapd [esp + _fiz], xmm4
	
	mov   eax, [ebp + _jindex]
	mov   ecx, [eax]	         /* jindex[n] */
	mov   edx, [eax + 4]	         /* jindex[n+1] */
	add   [ebp + _jindex],  4
	sub   edx, ecx                   /* number of innerloop atoms */

	mov   esi, [ebp + _pos]
	mov   edi, [ebp + _faction]	
	mov   eax, [ebp + _jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + _innerjjnr], eax     /* pointer to jjnr[nj0] */
	sub   edx,  2
	mov   [esp + _innerk], edx        /* number of innerloop atoms */
	jge   .i3000_unroll_loop
	jmp   .i3000_checksingle
.i3000_unroll_loop:
	/* twice unrolled innerloop here */
	mov   edx, [esp + _innerjjnr]   /* pointer to jjnr[k] */
	mov   eax, [edx]
	mov   ebx, [edx + 4]
	add   [esp + _innerjjnr], 8	/* advance pointer (unrolled 2) */

	mov esi, [ebp + _charge]        /* base of charge[] */

	movlpd xmm3, [esi + eax*8]
	movhpd xmm3, [esi + ebx*8]

	movapd xmm2, [esp + _iq]
	mulpd  xmm3, xmm2
	movapd [esp + _qq], xmm3	
	
	mov esi, [ebp + _pos]		/* base of pos[] */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */
	lea   ebx, [ebx + ebx*2]	

	/* move two coordinates to xmm0-xmm2 */
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]		

	mov    edi, [ebp + _faction]
	
	/* move _ix-iz to xmm4-xmm6 */
	movapd xmm4, [esp + _ix]
	movapd xmm5, [esp + _iy]
	movapd xmm6, [esp + _iz]

	/* calc dr */
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	/* store dr */
	movapd [esp + _dx], xmm4
	movapd [esp + _dy], xmm5
	movapd [esp + _dz], xmm6
	/* square it */
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6
	/* rsq in xmm4 */

	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm5, xmm5
	cvtps2pd xmm2, xmm5	/* lu in low xmm2 */

	/* lookup seed in xmm2 */
	movapd xmm5, xmm2	/* copy of lu */
	mulpd xmm2, xmm2	/* lu*lu */
	movapd xmm1, [esp + _three]
	mulpd xmm2, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subpd xmm1, xmm2	/* 30-rsq*lu*lu */
	mulpd xmm1, xmm5	
	mulpd xmm1, xmm0	/* xmm0=iter1 of rinv (new lu) */

	movapd xmm5, xmm1	/* copy of lu */
	mulpd xmm1, xmm1	/* lu*lu */
	movapd xmm2, [esp + _three]
	mulpd xmm1, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subpd xmm2, xmm1	/* 30-rsq*lu*lu */
	mulpd xmm2, xmm5	
	mulpd xmm0, xmm2	/* xmm0=iter2 of rinv (new lu) */
	mulpd xmm4, xmm0	/* xmm4=r */
	mulpd xmm4, [esp + _tsc]

	cvttpd2pi mm6, xmm4	/* mm6 = lu idx */
	cvtpi2pd xmm5, mm6
	subpd xmm4, xmm5
	movapd xmm1, xmm4	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	
	movd mm0, eax	
	movd mm1, ebx

	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	mulpd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qq]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 /* xmm7=FF */
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulpd  xmm3, xmm7 /* fijC=FF*qq */
	/* at this point mm5 contains vcoul and mm3 fijC */
	/* increment vcoul - then we can get rid of mm5 */
	/* update vctot */
	addpd  xmm5, [esp + _vctot]
	movapd [esp + _vctot], xmm5 

	xorpd  xmm4, xmm4

	mulpd xmm3, [esp + _tsc]
	mulpd xmm3, xmm0
	subpd  xmm4, xmm3

	movapd xmm0, [esp + _dx]
	movapd xmm1, [esp + _dy]
	movapd xmm2, [esp + _dz]

	movd eax, mm0	
	movd ebx, mm1

	mov    edi, [ebp + _faction]
	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4
	/* xmm0-xmm2 contains tx-tz (partial force) */
	/* now update f_i */
	movapd xmm3, [esp + _fix]
	movapd xmm4, [esp + _fiy]
	movapd xmm5, [esp + _fiz]
	addpd  xmm3, xmm0
	addpd  xmm4, xmm1
	addpd  xmm5, xmm2
	movapd [esp + _fix], xmm3
	movapd [esp + _fiy], xmm4
	movapd [esp + _fiz], xmm5
	/* the fj's - start by accumulating forces from memory */
	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	movhpd xmm3, [edi + ebx*8]
	movhpd xmm4, [edi + ebx*8 + 8]
	movhpd xmm5, [edi + ebx*8 + 16]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5
	movhpd [edi + ebx*8], xmm3
	movhpd [edi + ebx*8 + 8], xmm4
	movhpd [edi + ebx*8 + 16], xmm5
		
	/* should we do one more iteration? */
	sub   [esp + _innerk],  2
	jl    .i3000_checksingle
	jmp   .i3000_unroll_loop
.i3000_checksingle:
	mov   edx, [esp + _innerk]
	and   edx, 1
	jnz    .i3000_dosingle
	jmp    .i3000_updateouterdata
.i3000_dosingle:
	mov esi, [ebp + _charge]
	mov edi, [ebp + _pos]
	mov   ecx, [esp + _innerjjnr]
	mov   eax, [ecx]	
	xorpd  xmm6, xmm6
	movlpd xmm6, [esi + eax*8]	/* xmm6(0) has the charge */	
	mulsd  xmm6, [esp + _iq]
	movapd [esp + _qq], xmm6
		
	lea   eax, [eax + eax*2]
	
	/* move coordinates to xmm0-xmm2 */
	movlpd xmm0, [edi + eax*8]
	movlpd xmm1, [edi + eax*8 + 8]
	movlpd xmm2, [edi + eax*8 + 16]

	/* move _ix-iz to xmm4-xmm6 */
	movapd xmm4, [esp + _ix]
	movapd xmm5, [esp + _iy]
	movapd xmm6, [esp + _iz]

	/* calc dr */
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	/* store dr */
	movapd [esp + _dx], xmm4
	movapd [esp + _dy], xmm5
	movapd [esp + _dz], xmm6
	/* square it */
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6
	/* rsq in xmm4 */

	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm5, xmm5
	cvtss2sd xmm2, xmm5	/* lu in low xmm2 */

	/* lookup seed in xmm2 */
	movapd xmm5, xmm2	/* copy of lu */
	mulsd xmm2, xmm2	/* lu*lu */
	movapd xmm1, [esp + _three]
	mulsd xmm2, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subsd xmm1, xmm2	/* 30-rsq*lu*lu */
	mulsd xmm1, xmm5	
	mulsd xmm1, xmm0	/* xmm0=iter1 of rinv (new lu) */

	movapd xmm5, xmm1	/* copy of lu */
	mulsd xmm1, xmm1	/* lu*lu */
	movapd xmm2, [esp + _three]
	mulsd xmm1, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subsd xmm2, xmm1	/* 30-rsq*lu*lu */
	mulsd xmm2, xmm5	
	mulsd xmm0, xmm2	/* xmm0=iter2 of rinv (new lu) */
	
	mulsd xmm4, xmm0	/* xmm4=r */
	mulsd xmm4, [esp + _tsc]
	
	movd mm0, eax	

	cvttsd2si eax, xmm4	/* mm6 = lu idx */
	cvtsi2sd xmm5, eax
	subsd xmm4, xmm5
	movapd xmm1, xmm4	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	
	mov  esi, [ebp + _VFtab]

	/* Coulomb */
	movupd xmm4, [esi + eax*8]	/* Y1 F1 */
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1  */
	unpckhpd xmm5, xmm3	/* F1  */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1  */
	unpckhpd xmm7, xmm3	/* H1  */	
	/* table ready in xmm4-xmm7 */

	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	mulsd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qq]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 /* xmm7=FF */
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulsd  xmm3, xmm7 /* fijC=FF*qq */
	/* at this point mm5 contains vcoul and mm3 fijC */
	/* increment vcoul - then we can get rid of mm5 */
	/* update vctot */
	addsd  xmm5, [esp + _vctot]
	movsd [esp + _vctot], xmm5 

	xorpd xmm4, xmm4
	movd eax, mm0

	mulpd xmm3, [esp + _tsc]
	mulpd xmm3, xmm0
	subpd  xmm4, xmm3
	mov    edi, [ebp + _faction]

	movapd xmm0, [esp + _dx]
	movapd xmm1, [esp + _dy]
	movapd xmm2, [esp + _dz]

	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4
	/* xmm0-xmm2 contains tx-tz (partial force) */
	/* now update f_i */
	movapd xmm3, [esp + _fix]
	movapd xmm4, [esp + _fiy]
	movapd xmm5, [esp + _fiz]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movlpd [esp + _fix], xmm3
	movlpd [esp + _fiy], xmm4
	movlpd [esp + _fiz], xmm5
	/* update fj */
	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5

.i3000_updateouterdata:
	mov   ecx, [esp + _ii3]
	mov   edi, [ebp + _faction]
	mov   esi, [ebp + _fshift]
	mov   edx, [esp + _is3]

	/* accumulate i forces in xmm0, xmm1, xmm2 */
	movapd xmm0, [esp + _fix]
	movapd xmm1, [esp + _fiy]
	movapd xmm2, [esp + _fiz]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 /* sum is in low xmm0-xmm2 */

	/* increment i force */
	movsd  xmm3, [edi + ecx*8]
	movsd  xmm4, [edi + ecx*8 + 8]
	movsd  xmm5, [edi + ecx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8],     xmm3
	movsd  [edi + ecx*8 + 8], xmm4
	movsd  [edi + ecx*8 + 16], xmm5

	/* increment fshift force */ 
	movsd  xmm3, [esi + edx*8]
	movsd  xmm4, [esi + edx*8 + 8]
	movsd  xmm5, [esi + edx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [esi + edx*8],     xmm3
	movsd  [esi + edx*8 + 8], xmm4
	movsd  [esi + edx*8 + 16], xmm5

	/* get group index for i particle */
	mov   edx, [ebp + _gid]      /* get group index for this i particle */
	mov   edx, [edx]
	add   [ebp + _gid],  4  /* advance pointer */

	/* accumulate total potential energy and update it */
	movapd xmm7, [esp + _vctot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */

	/* add earlier value from mem */
	mov   eax, [ebp + _Vc]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* finish if last */
	mov   ecx, [ebp + _nri]
	dec ecx
	jecxz .i3000_end
	/* not last, iterate once more! */ 
	mov [ebp + _nri], ecx
	jmp .i3000_outer
.i3000_end:
	emms
	mov eax, [esp + _salign]
	add esp, eax
	add esp, 292
	pop edi
	pop esi
        pop edx
        pop ecx
        pop ebx
        pop eax
	leave
	ret




.globl inl3020_sse2
	.type inl3020_sse2,@function
inl3020_sse2:	
.equ		_nri,		8
.equ		_iinr,		12
.equ		_jindex,	16
.equ		_jjnr,		20
.equ		_shift,		24
.equ		_shiftvec,	28
.equ		_fshift,	32
.equ		_gid,		36
.equ		_pos,		40		
.equ		_faction,	44
.equ		_charge,	48
.equ		_facel,		52 /* double */ 
.equ		_Vc,		60	
.equ		_tabscale,	64 /* double */ 	
.equ		_VFtab,		72
	/* stack offsets for local variables */ 
	/* bottom of stack is cache-aligned for sse2 use */
.equ		_ixO,		0
.equ		_iyO,		16
.equ		_izO,		32
.equ		_ixH1,		48
.equ		_iyH1,		64
.equ		_izH1,		80
.equ		_ixH2,		96
.equ		_iyH2,		112
.equ		_izH2,		128
.equ		_iqO,		144 
.equ		_iqH,		160 
.equ		_dxO,		176
.equ		_dyO,		192
.equ		_dzO,		208	
.equ		_dxH1,		224
.equ		_dyH1,		240
.equ		_dzH1,		256	
.equ		_dxH2,		272
.equ		_dyH2,		288
.equ		_dzH2,		304	
.equ		_qqO,		320
.equ		_qqH,		336
.equ		_rinvO,		352
.equ		_rinvH1,	368
.equ		_rinvH2,	384		
.equ		_rO,		400
.equ		_rH1,		416
.equ		_rH2,		432
.equ		_tsc,		448	
.equ		_two,		464
.equ		_vctot,		480
.equ		_fixO,		496
.equ		_fiyO,		512
.equ		_fizO,		528
.equ		_fixH1,		544
.equ		_fiyH1,		560
.equ		_fizH1,		576
.equ		_fixH2,		592
.equ		_fiyH2,		608
.equ		_fizH2,		624
.equ		_fjx,		640
.equ		_fjy,		656
.equ		_fjz,		672
.equ		_half,		688
.equ		_three,		704
.equ		_is3,		720
.equ		_ii3,		724
.equ		_innerjjnr,	728
.equ		_innerk,	732
.equ		_salign,	736
	push ebp
	mov ebp,esp	
        push eax
        push ebx
        push ecx
        push edx
	push esi
	push edi
	sub esp, 740		/* local stack space */
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + _salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_two]
	movupd xmm2, [sse2_three]
	movsd xmm3, [ebp + _tabscale]
	
	movapd [esp + _half],  xmm0
	movapd [esp + _two],  xmm1
	movapd [esp + _three],  xmm2
	shufpd xmm3, xmm3, 0 
	movapd [esp + _tsc], xmm3
	
	/* assume we have at least one i particle - start directly */
	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	mov   ebx, [ecx]	        /* ebx =ii */

	mov   edx, [ebp + _charge]
	movsd xmm3, [edx + ebx*8]	
	movsd xmm4, [edx + ebx*8 + 8]	
	movsd xmm5, [ebp + _facel]
	mulsd  xmm3, xmm5
	mulsd  xmm4, xmm5

	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	movapd [esp + _iqO], xmm3
	movapd [esp + _iqH], xmm4
	
.i3020_outer:
	mov   eax, [ebp + _shift]      /* eax = pointer into shift[] */
	mov   ebx, [eax]		/* ebx=shift[n] */
	add   [ebp + _shift],  4  /* advance pointer one step */
	
	lea   ebx, [ebx + ebx*2]        /* ebx=3*is */
	mov   [esp + _is3],ebx    	/* store is3 */

	mov   eax, [ebp + _shiftvec]   /* eax = base of shiftvec[] */

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	add   [ebp + _iinr],  4   /* advance pointer */
	mov   ebx, [ecx]	        /* ebx =ii */

	movapd xmm3, xmm0
	movapd xmm4, xmm1
	movapd xmm5, xmm2

	lea   ebx, [ebx + ebx*2]	/* ebx = 3*ii=ii3 */
	mov   eax, [ebp + _pos]        /* eax = base of pos[] */ 
	mov   [esp + _ii3], ebx

	addsd xmm3, [eax + ebx*8]
	addsd xmm4, [eax + ebx*8 + 8]
	addsd xmm5, [eax + ebx*8 + 16]		
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _ixO], xmm3
	movapd [esp + _iyO], xmm4
	movapd [esp + _izO], xmm5

	movsd xmm3, xmm0
	movsd xmm4, xmm1
	movsd xmm5, xmm2
	addsd xmm0, [eax + ebx*8 + 24]
	addsd xmm1, [eax + ebx*8 + 32]
	addsd xmm2, [eax + ebx*8 + 40]		
	addsd xmm3, [eax + ebx*8 + 48]
	addsd xmm4, [eax + ebx*8 + 56]
	addsd xmm5, [eax + ebx*8 + 64]		

	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _ixH1], xmm0
	movapd [esp + _iyH1], xmm1
	movapd [esp + _izH1], xmm2
	movapd [esp + _ixH2], xmm3
	movapd [esp + _iyH2], xmm4
	movapd [esp + _izH2], xmm5
	
	/* clear vctot and i forces */
	xorpd xmm4, xmm4
	movapd [esp + _vctot], xmm4
	movapd [esp + _fixO], xmm4
	movapd [esp + _fiyO], xmm4
	movapd [esp + _fizO], xmm4
	movapd [esp + _fixH1], xmm4
	movapd [esp + _fiyH1], xmm4
	movapd [esp + _fizH1], xmm4
	movapd [esp + _fixH2], xmm4
	movapd [esp + _fiyH2], xmm4
	movapd [esp + _fizH2], xmm4
	
	mov   eax, [ebp + _jindex]
	mov   ecx, [eax]	         /* jindex[n] */
	mov   edx, [eax + 4]	         /* jindex[n+1] */
	add   [ebp + _jindex],  4
	sub   edx, ecx                   /* number of innerloop atoms */

	mov   esi, [ebp + _pos]
	mov   edi, [ebp + _faction]	
	mov   eax, [ebp + _jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + _innerjjnr], eax     /* pointer to jjnr[nj0] */
	sub   edx,  2
	mov   [esp + _innerk], edx        /* number of innerloop atoms */
	jge   .i3020_unroll_loop
	jmp   .i3020_checksingle
.i3020_unroll_loop:
	/* twice unrolled innerloop here */
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]	
	mov   ebx, [edx + 4]

	add   [esp + _innerjjnr],  8	/* advance pointer (unrolled 2) */
	mov esi, [ebp + _charge]        /* base of charge[] */
	
	movlpd xmm3, [esi + eax*8]
	movhpd xmm3, [esi + ebx*8]
	movapd xmm4, xmm3	     
	mulpd  xmm3, [esp + _iqO]
	mulpd  xmm4, [esp + _iqH]

	movapd  [esp + _qqO], xmm3
	movapd  [esp + _qqH], xmm4	

	mov esi, [ebp + _pos]       /* base of pos[] */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */
	lea   ebx, [ebx + ebx*2]	

	/* move two coordinates to xmm0-xmm2 */	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]		

	/* move ixO-izO to xmm4-xmm6 */
	movapd xmm4, [esp + _ixO]
	movapd xmm5, [esp + _iyO]
	movapd xmm6, [esp + _izO]

	/* calc dr */
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	/* store dr */
	movapd [esp + _dxO], xmm4
	movapd [esp + _dyO], xmm5
	movapd [esp + _dzO], xmm6
	/* square it */
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6
	movapd xmm7, xmm4
	/* rsqO in xmm7 */

	/* move ixH1-izH1 to xmm4-xmm6 */
	movapd xmm4, [esp + _ixH1]
	movapd xmm5, [esp + _iyH1]
	movapd xmm6, [esp + _izH1]

	/* calc dr */
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	/* store dr */
	movapd [esp + _dxH1], xmm4
	movapd [esp + _dyH1], xmm5
	movapd [esp + _dzH1], xmm6
	/* square it */
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm6, xmm5
	addpd xmm6, xmm4
	/* rsqH1 in xmm6 */

	/* move ixH2-izH2 to xmm3-xmm5 */ 
	movapd xmm3, [esp + _ixH2]
	movapd xmm4, [esp + _iyH2]
	movapd xmm5, [esp + _izH2]

	/* calc dr */
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2

	/* store dr */
	movapd [esp + _dxH2], xmm3
	movapd [esp + _dyH2], xmm4
	movapd [esp + _dzH2], xmm5
	/* square it */
	mulpd xmm3,xmm3
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	addpd xmm5, xmm4
	addpd xmm5, xmm3
	/* rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 */

	/* start with rsqO - put seed in xmm2 */
	cvtpd2ps xmm2, xmm7	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulpd   xmm2, xmm7	/* rsq*lu*lu */
	subpd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulpd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulpd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm2, xmm7
	movapd xmm3, xmm4
	mulpd xmm4, xmm4	/* lu*lu */
	mulpd xmm2, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subpd xmm4, xmm2	/* 3-rsq*lu*lu */
	mulpd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulpd xmm4, [esp + _half] /* rinv */
	movapd  [esp + _rinvO], xmm4	/* rinvO in xmm4 */
	mulpd   xmm7, xmm4
	movapd  [esp + _rO], xmm7	/* r in xmm7 */
	
	/* rsqH1 - seed in xmm2 */
	cvtpd2ps xmm2, xmm6	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulpd   xmm2, xmm6	/* rsq*lu*lu */
	subpd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulpd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulpd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm2, xmm6
	movapd xmm3, xmm4
	mulpd xmm4, xmm4	/* lu*lu */
	mulpd xmm2, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subpd xmm4, xmm2	/* 3-rsq*lu*lu */
	mulpd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulpd xmm4, [esp + _half] /* rinv */
	movapd [esp + _rinvH1], xmm4	/* rinvH1 */
	mulpd  xmm6, xmm4
	movapd [esp + _rH1], xmm6	/* rH1 */
	
	/* rsqH2 - seed in xmm2 */
	cvtpd2ps xmm2, xmm5	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulpd   xmm2, xmm5	/* rsq*lu*lu */
	subpd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulpd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulpd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm2, xmm5
	movapd xmm3, xmm4
	mulpd xmm4, xmm4	/* lu*lu */
	mulpd xmm2, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subpd xmm4, xmm2	/* 3-rsq*lu*lu */
	mulpd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulpd xmm4, [esp + _half] /* rinv */
	movapd [esp + _rinvH2], xmm4 /* rinv */
	mulpd xmm5, xmm4
	movapd [esp + _rH2], xmm5 /* r */

	/* do O interactions */
	/* rO is still in xmm7 */
	mulpd xmm7, [esp + _tsc]
	cvttpd2pi mm6, xmm7	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm7, xmm6
	movapd xmm1, xmm7	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	movd mm0, eax	
	movd mm1, ebx
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	mulpd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqO]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 /* xmm7=FF */
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulpd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */
        /* increment vcoul - then we can get rid of mm5 */
        addpd  xmm5, [esp + _vctot]
        movapd [esp + _vctot], xmm5 
	xorpd  xmm4, xmm4

	mulpd  xmm3, [esp + _tsc]
	mulpd  xmm3, [esp + _rinvO]	
	subpd  xmm4, xmm3

	movapd xmm0, [esp + _dxO]
	movapd xmm1, [esp + _dyO]
	movapd xmm2, [esp + _dzO]
	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4	/* tx in xmm0-xmm2 */

	/* update O forces */
	movapd xmm3, [esp + _fixO]
	movapd xmm4, [esp + _fiyO]
	movapd xmm7, [esp + _fizO]
	addpd  xmm3, xmm0
	addpd  xmm4, xmm1
	addpd  xmm7, xmm2
	movapd [esp + _fixO], xmm3
	movapd [esp + _fiyO], xmm4
	movapd [esp + _fizO], xmm7
	/* update j forces with water O */
	movapd [esp + _fjx], xmm0
	movapd [esp + _fjy], xmm1
	movapd [esp + _fjz], xmm2

	/* Done with O interactions - now H1! */
	movapd xmm7, [esp + _rH1]
	mulpd xmm7, [esp + _tsc]
	cvttpd2pi mm6, xmm7	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm7, xmm6
	movapd xmm1, xmm7	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	mulpd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqH]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 /* xmm7=FF */
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulpd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */
        /* increment vcoul */
	xorpd  xmm4, xmm4
        addpd  xmm5, [esp + _vctot]
	mulpd  xmm3, [esp + _rinvH1]
        movapd [esp + _vctot], xmm5 
	mulpd  xmm3, [esp + _tsc]
	subpd xmm4, xmm3

	movapd xmm0, [esp + _dxH1]
	movapd xmm1, [esp + _dyH1]
	movapd xmm2, [esp + _dzH1]
	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4

	/* update H1 forces */
	movapd xmm3, [esp + _fixH1]
	movapd xmm4, [esp + _fiyH1]
	movapd xmm7, [esp + _fizH1]
	addpd  xmm3, xmm0
	addpd  xmm4, xmm1
	addpd  xmm7, xmm2
	movapd [esp + _fixH1], xmm3
	movapd [esp + _fiyH1], xmm4
	movapd [esp + _fizH1], xmm7
	/* update j forces with water H1 */
	addpd  xmm0, [esp + _fjx]
	addpd  xmm1, [esp + _fjy]
	addpd  xmm2, [esp + _fjz]
	movapd [esp + _fjx], xmm0
	movapd [esp + _fjy], xmm1
	movapd [esp + _fjz], xmm2

	/* Done with H1, finally we do H2 interactions */
	movapd xmm7, [esp + _rH2]
	mulpd   xmm7, [esp + _tsc]
	cvttpd2pi mm6, xmm7	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm7, xmm6
	movapd xmm1, xmm7	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	mulpd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqH]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 /* xmm7=FF */
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulpd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */
        /* increment vcoul */
	xorpd  xmm4, xmm4
        addpd  xmm5, [esp + _vctot]
	mulpd  xmm3, [esp + _rinvH2]
        movapd [esp + _vctot], xmm5 
	mulpd  xmm3, [esp + _tsc]
	subpd  xmm4, xmm3

	movapd xmm0, [esp + _dxH2]
	movapd xmm1, [esp + _dyH2]
	movapd xmm2, [esp + _dzH2]
	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4

        movd eax, mm0   
        movd ebx, mm1
	
	/* update H2 forces */
	movapd xmm3, [esp + _fixH2]
	movapd xmm4, [esp + _fiyH2]
	movapd xmm7, [esp + _fizH2]
	addpd  xmm3, xmm0
	addpd  xmm4, xmm1
	addpd  xmm7, xmm2
	movapd [esp + _fixH2], xmm3
	movapd [esp + _fiyH2], xmm4
	movapd [esp + _fizH2], xmm7

	mov edi, [ebp + _faction]
	/* update j forces */
	/* update j forces with water H1 */
	addpd  xmm0, [esp + _fjx]
	addpd  xmm1, [esp + _fjy]
	addpd  xmm2, [esp + _fjz]

	/* the fj's - start by accumulating forces from memory */
	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	movhpd xmm3, [edi + ebx*8]
	movhpd xmm4, [edi + ebx*8 + 8]
	movhpd xmm5, [edi + ebx*8 + 16]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5
	movhpd [edi + ebx*8], xmm3
	movhpd [edi + ebx*8 + 8], xmm4
	movhpd [edi + ebx*8 + 16], xmm5
		
	/* should we do one more iteration? */
	sub   [esp + _innerk],  2
	jl    .i3020_checksingle
	jmp   .i3020_unroll_loop
.i3020_checksingle:	
	mov   edx, [esp + _innerk]
	and   edx, 1
	jnz   .i3020_dosingle
	jmp   .i3020_updateouterdata
.i3020_dosingle:
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]	

	mov esi, [ebp + _charge]        /* base of charge[] */
	xorpd xmm3, xmm3
	movlpd xmm3, [esi + eax*8]
	movapd xmm4, xmm3	     
	mulpd  xmm3, [esp + _iqO]
	mulpd  xmm4, [esp + _iqH]

	movapd  [esp + _qqO], xmm3
	movapd  [esp + _qqH], xmm4	

	mov esi, [ebp + _pos]       /* base of pos[] */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */
	/* move coordinates to xmm0-xmm2 */	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]

	/* move ixO-izO to xmm4-xmm6 */
	movapd xmm4, [esp + _ixO]
	movapd xmm5, [esp + _iyO]
	movapd xmm6, [esp + _izO]

	/* calc dr */
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	/* store dr */
	movapd [esp + _dxO], xmm4
	movapd [esp + _dyO], xmm5
	movapd [esp + _dzO], xmm6
	/* square it */
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6
	movapd xmm7, xmm4
	/* rsqO in xmm7 */

	/* move ixH1-izH1 to xmm4-xmm6 */
	movapd xmm4, [esp + _ixH1]
	movapd xmm5, [esp + _iyH1]
	movapd xmm6, [esp + _izH1]

	/* calc dr */
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	/* store dr */
	movapd [esp + _dxH1], xmm4
	movapd [esp + _dyH1], xmm5
	movapd [esp + _dzH1], xmm6
	/* square it */
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm6, xmm5
	addsd xmm6, xmm4
	/* rsqH1 in xmm6 */

	/* move ixH2-izH2 to xmm3-xmm5 */ 
	movapd xmm3, [esp + _ixH2]
	movapd xmm4, [esp + _iyH2]
	movapd xmm5, [esp + _izH2]

	/* calc dr */
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2

	/* store dr */
	movapd [esp + _dxH2], xmm3
	movapd [esp + _dyH2], xmm4
	movapd [esp + _dzH2], xmm5
	/* square it */
	mulsd xmm3,xmm3
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	addsd xmm5, xmm4
	addsd xmm5, xmm3
	/* rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 */

	/* start with rsqO - put seed in xmm2 */
	cvtsd2ss xmm2, xmm7	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulsd   xmm2, xmm7	/* rsq*lu*lu */
	subsd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulsd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulsd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm2, xmm7
	movapd xmm3, xmm4
	mulsd xmm4, xmm4	/* lu*lu */
	mulsd xmm2, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subsd xmm4, xmm2	/* 3-rsq*lu*lu */
	mulsd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulsd xmm4, [esp + _half] /* rinv */
	movapd  [esp + _rinvO], xmm4	/* rinvO in xmm4 */
	mulsd   xmm7, xmm4
	movapd  [esp + _rO], xmm7	/* r in xmm7 */
	
	/* rsqH1 - seed in xmm2 */
	cvtsd2ss xmm2, xmm6	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulsd   xmm2, xmm6	/* rsq*lu*lu */
	subsd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulsd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulsd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm2, xmm6
	movapd xmm3, xmm4
	mulsd xmm4, xmm4	/* lu*lu */
	mulsd xmm2, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subsd xmm4, xmm2	/* 3-rsq*lu*lu */
	mulsd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulsd xmm4, [esp + _half] /* rinv */
	movapd [esp + _rinvH1], xmm4	/* rinvH1 */
	mulsd  xmm6, xmm4
	movapd [esp + _rH1], xmm6	/* rH1 */
	
	/* rsqH2 - seed in xmm2 */
	cvtsd2ss xmm2, xmm5	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulsd   xmm2, xmm5	/* rsq*lu*lu */
	subsd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulsd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulsd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm2, xmm5
	movapd xmm3, xmm4
	mulsd xmm4, xmm4	/* lu*lu */
	mulsd xmm2, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subsd xmm4, xmm2	/* 3-rsq*lu*lu */
	mulsd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulsd xmm4, [esp + _half] /* rinv */
	movapd [esp + _rinvH2], xmm4 /* rinv */
	mulsd xmm5, xmm4
	movapd [esp + _rH2], xmm5 /* r */

	/* do O interactions */
	movd mm0, eax	
	/* rO is still in xmm7 */
	mulsd   xmm7, [esp + _tsc]
	cvttsd2si eax, xmm7	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm7, xmm6
	movapd xmm1, xmm7	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */
	xorpd xmm3, xmm3	
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1  */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	mulsd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqO]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 /* xmm7=FF */
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulsd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */
        /* increment vcoul - then we can get rid of mm5 */
        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5 
	xorpd  xmm4, xmm4

	mulsd  xmm3, [esp + _tsc]
	mulsd  xmm3, [esp + _rinvO]	
	subsd  xmm4, xmm3

	movapd xmm0, [esp + _dxO]
	movapd xmm1, [esp + _dyO]
	movapd xmm2, [esp + _dzO]
	mulsd  xmm0, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm2, xmm4	/* tx in xmm0-xmm2 */

	/* update O forces */
	movapd xmm3, [esp + _fixO]
	movapd xmm4, [esp + _fiyO]
	movapd xmm7, [esp + _fizO]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm7, xmm2
	movlpd [esp + _fixO], xmm3
	movlpd [esp + _fiyO], xmm4
	movlpd [esp + _fizO], xmm7
	/* update j forces with water O */
	movlpd [esp + _fjx], xmm0
	movlpd [esp + _fjy], xmm1
	movlpd [esp + _fjz], xmm2

	/* Done with O interactions - now H1! */
	movapd xmm7, [esp + _rH1]
	mulsd xmm7, [esp + _tsc]
	cvttsd2si eax, xmm7	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm7, xmm6
	movapd xmm1, xmm7	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	
	movupd xmm4, [esi + eax*8]	/* Y1 F1 */
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1  */
	unpckhpd xmm5, xmm3	/* F1  */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	mulsd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqH]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 /* xmm7=FF */
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulsd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */
        /* increment vcoul */
	xorpd  xmm4, xmm4
        addsd  xmm5, [esp + _vctot]
	mulsd  xmm3, [esp + _rinvH1]
        movlpd [esp + _vctot], xmm5 
	mulsd  xmm3, [esp + _tsc]
	subsd xmm4, xmm3

	movapd xmm0, [esp + _dxH1]
	movapd xmm1, [esp + _dyH1]
	movapd xmm2, [esp + _dzH1]
	mulsd  xmm0, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm2, xmm4

	/* update H1 forces */
	movapd xmm3, [esp + _fixH1]
	movapd xmm4, [esp + _fiyH1]
	movapd xmm7, [esp + _fizH1]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm7, xmm2
	movlpd [esp + _fixH1], xmm3
	movlpd [esp + _fiyH1], xmm4
	movlpd [esp + _fizH1], xmm7
	/* update j forces with water H1 */
	addsd  xmm0, [esp + _fjx]
	addsd  xmm1, [esp + _fjy]
	addsd  xmm2, [esp + _fjz]
	movlpd [esp + _fjx], xmm0
	movlpd [esp + _fjy], xmm1
	movlpd [esp + _fjz], xmm2

	/* Done with H1, finally we do H2 interactions */
	movapd xmm7, [esp + _rH2]
	mulsd   xmm7, [esp + _tsc]
	cvttsd2si eax, xmm7	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm7, xmm6
	movapd xmm1, xmm7	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	mulsd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqH]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 /* xmm7=FF */
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulsd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */
        /* increment vcoul */
	xorpd  xmm4, xmm4
        addsd  xmm5, [esp + _vctot]
	mulsd  xmm3, [esp + _rinvH2]
        movlpd [esp + _vctot], xmm5 
	mulsd  xmm3, [esp + _tsc]
	subsd  xmm4, xmm3

	movapd xmm0, [esp + _dxH2]
	movapd xmm1, [esp + _dyH2]
	movapd xmm2, [esp + _dzH2]
	mulsd  xmm0, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm2, xmm4

        movd eax, mm0   
	
	/* update H2 forces */
	movapd xmm3, [esp + _fixH2]
	movapd xmm4, [esp + _fiyH2]
	movapd xmm7, [esp + _fizH2]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm7, xmm2
	movlpd [esp + _fixH2], xmm3
	movlpd [esp + _fiyH2], xmm4
	movlpd [esp + _fizH2], xmm7

	mov edi, [ebp + _faction]
	/* update j forces */
	/* update j forces with water H1 */
	addsd  xmm0, [esp + _fjx]
	addsd  xmm1, [esp + _fjy]
	addsd  xmm2, [esp + _fjz]

	/* the fj's - start by accumulating forces from memory */
	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5

.i3020_updateouterdata:
	mov   ecx, [esp + _ii3]
	mov   edi, [ebp + _faction]
	mov   esi, [ebp + _fshift]
	mov   edx, [esp + _is3]

	/* accumulate  Oi forces in xmm0, xmm1, xmm2 */
	movapd xmm0, [esp + _fixO]
	movapd xmm1, [esp + _fiyO]
	movapd xmm2, [esp + _fizO]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 /* sum is in low xmm0-xmm2 */

	movapd xmm3, xmm0	
	movapd xmm4, xmm1	
	movapd xmm5, xmm2	

	/* increment i force */
	movsd  xmm3, [edi + ecx*8]
	movsd  xmm4, [edi + ecx*8 + 8]
	movsd  xmm5, [edi + ecx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8],     xmm3
	movsd  [edi + ecx*8 + 8], xmm4
	movsd  [edi + ecx*8 + 16], xmm5

	/* accumulate force in xmm6/xmm7 for fshift */
	movapd xmm6, xmm0
	movsd xmm7, xmm2
	unpcklpd xmm6, xmm1

	/* accumulate H1i forces in xmm0, xmm1, xmm2 */
	movapd xmm0, [esp + _fixH1]
	movapd xmm1, [esp + _fiyH1]
	movapd xmm2, [esp + _fizH1]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 /* sum is in low xmm0-xmm2 */

	/* increment i force */
	movsd  xmm3, [edi + ecx*8 + 24]
	movsd  xmm4, [edi + ecx*8 + 32]
	movsd  xmm5, [edi + ecx*8 + 40]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8 + 24], xmm3
	movsd  [edi + ecx*8 + 32], xmm4
	movsd  [edi + ecx*8 + 40], xmm5

	/* accumulate force in xmm6/xmm7 for fshift */
	addsd xmm7, xmm2
	unpcklpd xmm0, xmm1
	addpd xmm6, xmm0

	/* accumulate H2i forces in xmm0, xmm1, xmm2 */
	movapd xmm0, [esp + _fixH2]
	movapd xmm1, [esp + _fiyH2]
	movapd xmm2, [esp + _fizH2]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 /* sum is in low xmm0-xmm2 */

	movapd xmm3, xmm0	
	movapd xmm4, xmm1	
	movapd xmm5, xmm2	

	/* increment i force */
	movsd  xmm3, [edi + ecx*8 + 48]
	movsd  xmm4, [edi + ecx*8 + 56]
	movsd  xmm5, [edi + ecx*8 + 64]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8 + 48], xmm3
	movsd  [edi + ecx*8 + 56], xmm4
	movsd  [edi + ecx*8 + 64], xmm5

	/* accumulate force in xmm6/xmm7 for fshift */
	addsd xmm7, xmm2
	unpcklpd xmm0, xmm1
	addpd xmm6, xmm0

	/* increment fshift force */
	movupd xmm3, [esi + edx*8]
	movsd  xmm4, [esi + edx*8 + 16]
	addpd  xmm3, xmm6
	addsd  xmm4, xmm7
	movupd [esi + edx*8],    xmm3
	movsd  [esi + edx*8 + 16], xmm4

	mov   edx, [ebp + _gid]  
	mov   edx, [edx]
	add   [ebp + _gid],  4	

	/* accumulate total potential energy and update it */
	movapd xmm7, [esp + _vctot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */
        
	/* add earlier value from mem */
	mov   eax, [ebp + _Vc]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* finish if last */
	mov   ecx, [ebp + _nri]
	dec ecx
	jecxz .i3020_end
	/* not last, iterate once more! */ 
	mov [ebp + _nri], ecx
	jmp .i3020_outer
.i3020_end:
	emms
	mov eax, [esp + _salign]
	add esp, eax
	add esp, 740
	pop edi
	pop esi
        pop edx
        pop ecx
        pop ebx
        pop eax
	leave
	ret
	

		
.globl inl3030_sse2
	.type inl3030_sse2,@function
inl3030_sse2:	
.equ		_nri,		8
.equ		_iinr,		12
.equ		_jindex,	16
.equ		_jjnr,		20
.equ		_shift,		24
.equ		_shiftvec,	28
.equ		_fshift,	32
.equ		_gid,		36
.equ		_pos,		40		
.equ		_faction,	44
.equ		_charge,	48
.equ		_facel,		52 /* double */ 
.equ		_Vc,		60	
.equ		_tabscale,	64 /* double */ 	
.equ		_VFtab,		72
	/* stack offsets for local variables */ 
	/* bottom of stack is cache-aligned for sse2 use */
.equ		_ixO,		0
.equ		_iyO,		16
.equ		_izO,		32
.equ		_ixH1,		48
.equ		_iyH1,		64
.equ		_izH1,		80
.equ		_ixH2,		96
.equ		_iyH2,		112
.equ		_izH2,		128
.equ		_jxO,		144
.equ		_jyO,		160
.equ		_jzO,		176
.equ		_jxH1,		192
.equ		_jyH1,		208
.equ		_jzH1,		224
.equ		_jxH2,		240
.equ		_jyH2,		256
.equ		_jzH2,		272
.equ		_dxOO,		288
.equ		_dyOO,		304
.equ		_dzOO,		320	
.equ		_dxOH1,		336
.equ		_dyOH1,		352
.equ		_dzOH1,		368	
.equ		_dxOH2,		384
.equ		_dyOH2,		400
.equ		_dzOH2,		416	
.equ		_dxH1O,		432
.equ		_dyH1O,		448
.equ		_dzH1O,		464	
.equ		_dxH1H1,	480
.equ		_dyH1H1,	496
.equ		_dzH1H1,	512	
.equ		_dxH1H2,	528
.equ		_dyH1H2,	544
.equ		_dzH1H2,	560	
.equ		_dxH2O,		576
.equ		_dyH2O,		592
.equ		_dzH2O,		608	
.equ		_dxH2H1,	624
.equ		_dyH2H1,	640
.equ		_dzH2H1,	656	
.equ		_dxH2H2,	672
.equ		_dyH2H2,	688
.equ		_dzH2H2,	704
.equ		_qqOO,		720
.equ		_qqOH,		736
.equ		_qqHH,		752
.equ		_two,		768
.equ		_tsc,		784
.equ		_vctot,		800
.equ		_fixO,		816
.equ		_fiyO,		832
.equ		_fizO,		848
.equ		_fixH1,		864
.equ		_fiyH1,		880
.equ		_fizH1,		896
.equ		_fixH2,		912
.equ		_fiyH2,		928
.equ		_fizH2,		944
.equ		_fjxO,		960
.equ		_fjyO,		976
.equ		_fjzO,		992
.equ		_fjxH1,		1008
.equ		_fjyH1,		1024
.equ		_fjzH1,		1040
.equ		_fjxH2,		1056
.equ		_fjyH2,		1072
.equ		_fjzH2,		1088
.equ		_half,		1104
.equ		_three,		1120
.equ		_rsqOO,		1136
.equ		_rsqOH1,	1152
.equ		_rsqOH2,	1168
.equ		_rsqH1O,	1184
.equ		_rsqH1H1,	1200
.equ		_rsqH1H2,	1216
.equ		_rsqH2O,	1232
.equ		_rsqH2H1,	1248
.equ		_rsqH2H2,	1264
.equ		_rinvOO,	1280
.equ		_rinvOH1,	1296
.equ		_rinvOH2,	1312
.equ		_rinvH1O,	1328
.equ		_rinvH1H1,	1344
.equ		_rinvH1H2,	1360
.equ		_rinvH2O,	1376
.equ		_rinvH2H1,	1392
.equ		_rinvH2H2,	1408	
.equ		_is3,		1424
.equ		_ii3,		1428
.equ		_innerjjnr,	1432
.equ		_innerk,	1436
.equ		_salign,	1440							
	push ebp
	mov ebp,esp	
        push eax
        push ebx
        push ecx
        push edx
	push esi
	push edi
	sub esp, 1444		/* local stack space */
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + _salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_two]
	movupd xmm2, [sse2_three]
	movsd xmm3, [ebp + _tabscale]
	movapd [esp + _half],  xmm0
	movapd [esp + _two],  xmm1
	movapd [esp + _three], xmm2
	shufpd xmm3, xmm3, 0
	movapd [esp + _tsc],  xmm3

	/* assume we have at least one i particle - start directly */
	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	mov   ebx, [ecx]	        /* ebx =ii */

	mov   edx, [ebp + _charge]
	movsd xmm3, [edx + ebx*8]	
	movsd xmm4, xmm3
	movsd xmm5, [edx + ebx*8 + 8]	
	movsd xmm6, [ebp + _facel]
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm5
	mulsd  xmm5, xmm5
	mulsd  xmm3, xmm6
	mulsd  xmm4, xmm6
	mulsd  xmm5, xmm6
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _qqOO], xmm3
	movapd [esp + _qqOH], xmm4
	movapd [esp + _qqHH], xmm5		

.i3030_outer:
	mov   eax, [ebp + _shift]      /* eax = pointer into shift[] */
	mov   ebx, [eax]		/* ebx=shift[n] */
	add   [ebp + _shift],  4  /* advance pointer one step */
	
	lea   ebx, [ebx + ebx*2]        /* ebx=3*is */
	mov   [esp + _is3],ebx    	/* store is3 */

	mov   eax, [ebp + _shiftvec]   /* eax = base of shiftvec[] */

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	add   [ebp + _iinr],  4   /* advance pointer */
	mov   ebx, [ecx]	        /* ebx =ii */

	lea   ebx, [ebx + ebx*2]	/* ebx = 3*ii=ii3 */
	mov   eax, [ebp + _pos]        /* eax = base of pos[] */ 
	mov   [esp + _ii3], ebx	
	
	movapd xmm3, xmm0
	movapd xmm4, xmm1
	movapd xmm5, xmm2
	addsd xmm3, [eax + ebx*8]
	addsd xmm4, [eax + ebx*8 + 8]
	addsd xmm5, [eax + ebx*8 + 16]		
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _ixO], xmm3
	movapd [esp + _iyO], xmm4
	movapd [esp + _izO], xmm5

	movsd xmm3, xmm0
	movsd xmm4, xmm1
	movsd xmm5, xmm2
	addsd xmm0, [eax + ebx*8 + 24]
	addsd xmm1, [eax + ebx*8 + 32]
	addsd xmm2, [eax + ebx*8 + 40]		
	addsd xmm3, [eax + ebx*8 + 48]
	addsd xmm4, [eax + ebx*8 + 56]
	addsd xmm5, [eax + ebx*8 + 64]		

	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _ixH1], xmm0
	movapd [esp + _iyH1], xmm1
	movapd [esp + _izH1], xmm2
	movapd [esp + _ixH2], xmm3
	movapd [esp + _iyH2], xmm4
	movapd [esp + _izH2], xmm5

	/* clear vctot and i forces */
	xorpd xmm4, xmm4
	movapd [esp + _vctot], xmm4
	movapd [esp + _fixO], xmm4
	movapd [esp + _fiyO], xmm4
	movapd [esp + _fizO], xmm4
	movapd [esp + _fixH1], xmm4
	movapd [esp + _fiyH1], xmm4
	movapd [esp + _fizH1], xmm4
	movapd [esp + _fixH2], xmm4
	movapd [esp + _fiyH2], xmm4
	movapd [esp + _fizH2], xmm4
	
	mov   eax, [ebp + _jindex]
	mov   ecx, [eax]	         /* jindex[n] */
	mov   edx, [eax + 4]	         /* jindex[n+1] */
	add   [ebp + _jindex],  4
	sub   edx, ecx                   /* number of innerloop atoms */

	mov   esi, [ebp + _pos]
	mov   edi, [ebp + _faction]	
	mov   eax, [ebp + _jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + _innerjjnr], eax     /* pointer to jjnr[nj0] */
	sub   edx,  2
	mov   [esp + _innerk], edx        /* number of innerloop atoms */
	jge   .i3030_unroll_loop
	jmp   .i3030_checksingle
.i3030_unroll_loop:	
	/* twice unrolled innerloop here */
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]	
	mov   ebx, [edx + 4] 
	
	add   [esp + _innerjjnr], 8 /* advance pointer (unrolled 2) */

	mov esi, [ebp + _pos]       /* base of pos[] */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */
	lea   ebx, [ebx + ebx*2]	
	
	/* move j coordinates to local temp variables */
	movlpd xmm2, [esi + eax*8]
	movlpd xmm3, [esi + eax*8 + 8]
	movlpd xmm4, [esi + eax*8 + 16]
	movlpd xmm5, [esi + eax*8 + 24]
	movlpd xmm6, [esi + eax*8 + 32]
	movlpd xmm7, [esi + eax*8 + 40]
	movhpd xmm2, [esi + ebx*8]
	movhpd xmm3, [esi + ebx*8 + 8]
	movhpd xmm4, [esi + ebx*8 + 16]
	movhpd xmm5, [esi + ebx*8 + 24]
	movhpd xmm6, [esi + ebx*8 + 32]
	movhpd xmm7, [esi + ebx*8 + 40]
	movapd 	[esp + _jxO], xmm2
	movapd 	[esp + _jyO], xmm3
	movapd 	[esp + _jzO], xmm4
	movapd 	[esp + _jxH1], xmm5
	movapd 	[esp + _jyH1], xmm6
	movapd 	[esp + _jzH1], xmm7
	movlpd xmm2, [esi + eax*8 + 48]
	movlpd xmm3, [esi + eax*8 + 56]
	movlpd xmm4, [esi + eax*8 + 64]
	movhpd xmm2, [esi + ebx*8 + 48]
	movhpd xmm3, [esi + ebx*8 + 56]
	movhpd xmm4, [esi + ebx*8 + 64]
	movapd 	[esp + _jxH2], xmm2
	movapd 	[esp + _jyH2], xmm3
	movapd 	[esp + _jzH2], xmm4
	
	movapd xmm0, [esp + _ixO]
	movapd xmm1, [esp + _iyO]
	movapd xmm2, [esp + _izO]
	movapd xmm3, [esp + _ixO]
	movapd xmm4, [esp + _iyO]
	movapd xmm5, [esp + _izO]
	subpd  xmm0, [esp + _jxO]
	subpd  xmm1, [esp + _jyO]
	subpd  xmm2, [esp + _jzO]
	subpd  xmm3, [esp + _jxH1]
	subpd  xmm4, [esp + _jyH1]
	subpd  xmm5, [esp + _jzH1]
	movapd [esp + _dxOO], xmm0
	movapd [esp + _dyOO], xmm1
	movapd [esp + _dzOO], xmm2
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	movapd [esp + _dxOH1], xmm3
	movapd [esp + _dyOH1], xmm4
	movapd [esp + _dzOH1], xmm5
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + _rsqOO], xmm0
	movapd [esp + _rsqOH1], xmm3

	movapd xmm0, [esp + _ixO]
	movapd xmm1, [esp + _iyO]
	movapd xmm2, [esp + _izO]
	movapd xmm3, [esp + _ixH1]
	movapd xmm4, [esp + _iyH1]
	movapd xmm5, [esp + _izH1]
	subpd  xmm0, [esp + _jxH2]
	subpd  xmm1, [esp + _jyH2]
	subpd  xmm2, [esp + _jzH2]
	subpd  xmm3, [esp + _jxO]
	subpd  xmm4, [esp + _jyO]
	subpd  xmm5, [esp + _jzO]
	movapd [esp + _dxOH2], xmm0
	movapd [esp + _dyOH2], xmm1
	movapd [esp + _dzOH2], xmm2
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	movapd [esp + _dxH1O], xmm3
	movapd [esp + _dyH1O], xmm4
	movapd [esp + _dzH1O], xmm5
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + _rsqOH2], xmm0
	movapd [esp + _rsqH1O], xmm3

	movapd xmm0, [esp + _ixH1]
	movapd xmm1, [esp + _iyH1]
	movapd xmm2, [esp + _izH1]
	movapd xmm3, [esp + _ixH1]
	movapd xmm4, [esp + _iyH1]
	movapd xmm5, [esp + _izH1]
	subpd  xmm0, [esp + _jxH1]
	subpd  xmm1, [esp + _jyH1]
	subpd  xmm2, [esp + _jzH1]
	subpd  xmm3, [esp + _jxH2]
	subpd  xmm4, [esp + _jyH2]
	subpd  xmm5, [esp + _jzH2]
	movapd [esp + _dxH1H1], xmm0
	movapd [esp + _dyH1H1], xmm1
	movapd [esp + _dzH1H1], xmm2
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	movapd [esp + _dxH1H2], xmm3
	movapd [esp + _dyH1H2], xmm4
	movapd [esp + _dzH1H2], xmm5
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + _rsqH1H1], xmm0
	movapd [esp + _rsqH1H2], xmm3

	movapd xmm0, [esp + _ixH2]
	movapd xmm1, [esp + _iyH2]
	movapd xmm2, [esp + _izH2]
	movapd xmm3, [esp + _ixH2]
	movapd xmm4, [esp + _iyH2]
	movapd xmm5, [esp + _izH2]
	subpd  xmm0, [esp + _jxO]
	subpd  xmm1, [esp + _jyO]
	subpd  xmm2, [esp + _jzO]
	subpd  xmm3, [esp + _jxH1]
	subpd  xmm4, [esp + _jyH1]
	subpd  xmm5, [esp + _jzH1]
	movapd [esp + _dxH2O], xmm0
	movapd [esp + _dyH2O], xmm1
	movapd [esp + _dzH2O], xmm2
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	movapd [esp + _dxH2H1], xmm3
	movapd [esp + _dyH2H1], xmm4
	movapd [esp + _dzH2H1], xmm5
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm4, xmm3
	addpd  xmm4, xmm5
	movapd [esp + _rsqH2O], xmm0
	movapd [esp + _rsqH2H1], xmm4

	movapd xmm0, [esp + _ixH2]
	movapd xmm1, [esp + _iyH2]
	movapd xmm2, [esp + _izH2]
	subpd  xmm0, [esp + _jxH2]
	subpd  xmm1, [esp + _jyH2]
	subpd  xmm2, [esp + _jzH2]
	movapd [esp + _dxH2H2], xmm0
	movapd [esp + _dyH2H2], xmm1
	movapd [esp + _dzH2H2], xmm2
	mulpd xmm0, xmm0
	mulpd xmm1, xmm1
	mulpd xmm2, xmm2
	addpd xmm0, xmm1
	addpd xmm0, xmm2
	movapd [esp + _rsqH2H2], xmm0
		
	/* start doing invsqrt use rsq values in xmm0, xmm4 */
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulpd   xmm1, xmm1	/* luA*luA */
	mulpd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	mulpd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subpd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm3, [esp + _half] /* iter1 */
	mulpd   xmm7, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulpd   xmm3, xmm3	/* luA*luA */
	mulpd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	mulpd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subpd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm1, [esp + _half] /* rinv */
	mulpd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvH2H2], xmm1
	movapd [esp + _rinvH2H1], xmm5

	movapd xmm0, [esp + _rsqOO]
	movapd xmm4, [esp + _rsqOH1]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulpd   xmm1, xmm1	/* luA*luA */
	mulpd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	mulpd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subpd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm3, [esp + _half] /* iter1 of  */
	mulpd   xmm7, [esp + _half] /* iter1 of  */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulpd   xmm3, xmm3	/* luA*luA */
	mulpd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	mulpd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subpd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm1, [esp + _half] /* rinv */
	mulpd   xmm5, [esp + _half] /* rinv*/
	movapd [esp + _rinvOO], xmm1
	movapd [esp + _rinvOH1], xmm5

	movapd xmm0, [esp + _rsqOH2]
	movapd xmm4, [esp + _rsqH1O]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulpd   xmm1, xmm1	/* luA*luA */
	mulpd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	mulpd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subpd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm3, [esp + _half] /* iter1 */
	mulpd   xmm7, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulpd   xmm3, xmm3	/* luA*luA */
	mulpd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	mulpd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subpd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm1, [esp + _half] /* rinv */
	mulpd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvOH2], xmm1
	movapd [esp + _rinvH1O], xmm5

	movapd xmm0, [esp + _rsqH1H1]
	movapd xmm4, [esp + _rsqH1H2]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulpd   xmm1, xmm1	/* luA*luA */
	mulpd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	mulpd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subpd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm3, [esp + _half] /* iter1a */
	mulpd   xmm7, [esp + _half] /* iter1b */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulpd   xmm3, xmm3	/* luA*luA */
	mulpd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	mulpd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subpd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm1, [esp + _half] /* rinv */
	mulpd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvH1H1], xmm1
	movapd [esp + _rinvH1H2], xmm5

	movapd xmm0, [esp + _rsqH2O]
	cvtpd2ps xmm1, xmm0	
	rsqrtps xmm1, xmm1
	cvtps2pd xmm1, xmm1
	
	movapd  xmm2, xmm1	/* copy of luA */
	mulpd   xmm1, xmm1	/* luA*luA */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm3, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	mulpd   xmm3, xmm3	/* luA*luA */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm1, [esp + _half] /* rinv */
	movapd [esp + _rinvH2O], xmm1
	
	/* start with OO interaction */
	movapd xmm0, [esp + _rinvOO]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + _rsqOO] /* xmm1=r */
	mulpd  xmm1, [esp + _tsc]

	cvttpd2pi mm6, xmm1	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	movd mm0, eax	
	movd mm1, ebx
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	mulpd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqOO]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 /* xmm7=FF */
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulpd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */
        /* increment vcoul - then we can get rid of mm5 */
        /* update vctot */
        addpd  xmm5, [esp + _vctot]
	xorpd  xmm2, xmm2
        movapd [esp + _vctot], xmm5
	mulpd  xmm3, [esp + _tsc]
	
	subpd  xmm2, xmm3
	mulpd  xmm0, xmm2	/* mult by rinv */
	
	movapd xmm1, xmm0
	movapd xmm2, xmm0		

	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulpd xmm0, [esp + _dxOO]
	mulpd xmm1, [esp + _dyOO]
	mulpd xmm2, [esp + _dzOO]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixO]
	addpd xmm1, [esp + _fiyO]
	addpd xmm2, [esp + _fizO]
	movapd [esp + _fjxO], xmm3
	movapd [esp + _fjyO], xmm4
	movapd [esp + _fjzO], xmm5
	movapd [esp + _fixO], xmm0
	movapd [esp + _fiyO], xmm1
	movapd [esp + _fizO], xmm2

	/* O-H1 interaction */
	movapd xmm0, [esp + _rinvOH1]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + _rsqOH1] /* xmm1=r */
	mulpd  xmm1, [esp + _tsc]

	cvttpd2pi mm6, xmm1	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	mulpd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqOH]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 /* xmm7=FF */
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulpd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */

        addpd  xmm5, [esp + _vctot]
        movapd [esp + _vctot], xmm5
	xorpd  xmm1, xmm1
	mulpd  xmm3,  [esp + _tsc]
	mulpd  xmm3, xmm0
	subpd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulpd xmm0, [esp + _dxOH1]
	mulpd xmm1, [esp + _dyOH1]
	mulpd xmm2, [esp + _dzOH1]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixO]
	addpd xmm1, [esp + _fiyO]
	addpd xmm2, [esp + _fizO]
	movapd [esp + _fjxH1], xmm3
	movapd [esp + _fjyH1], xmm4
	movapd [esp + _fjzH1], xmm5
	movapd [esp + _fixO], xmm0
	movapd [esp + _fiyO], xmm1
	movapd [esp + _fizO], xmm2

	/* O-H2 interaction */ 
	movapd xmm0, [esp + _rinvOH2]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + _rsqOH2] /* xmm1=r */
	mulpd  xmm1, [esp + _tsc]
	
	cvttpd2pi mm6, xmm1	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	mulpd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqOH]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 /* xmm7=FF */
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulpd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */

        addpd  xmm5, [esp + _vctot]
        movapd [esp + _vctot], xmm5
	xorpd  xmm1, xmm1
	mulpd  xmm3,  [esp + _tsc]
	mulpd  xmm3, xmm0
	subpd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulpd xmm0, [esp + _dxOH2]
	mulpd xmm1, [esp + _dyOH2]
	mulpd xmm2, [esp + _dzOH2]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixO]
	addpd xmm1, [esp + _fiyO]
	addpd xmm2, [esp + _fizO]
	movapd [esp + _fjxH2], xmm3
	movapd [esp + _fjyH2], xmm4
	movapd [esp + _fjzH2], xmm5
	movapd [esp + _fixO], xmm0
	movapd [esp + _fiyO], xmm1
	movapd [esp + _fizO], xmm2

	/* H1-O interaction */
	movapd xmm0, [esp + _rinvH1O]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + _rsqH1O] /* xmm1=r */
	mulpd  xmm1, [esp + _tsc]
	
	cvttpd2pi mm6, xmm1	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	mulpd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqOH]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 /* xmm7=FF */
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulpd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */

        addpd  xmm5, [esp + _vctot]
        movapd [esp + _vctot], xmm5
	xorpd  xmm1, xmm1
	mulpd  xmm3,  [esp + _tsc]
	mulpd  xmm3, xmm0
	subpd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	movapd xmm3, [esp + _fjxO]
	movapd xmm4, [esp + _fjyO]
	movapd xmm5, [esp + _fjzO]
	mulpd xmm0, [esp + _dxH1O]
	mulpd xmm1, [esp + _dyH1O]
	mulpd xmm2, [esp + _dzH1O]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixH1]
	addpd xmm1, [esp + _fiyH1]
	addpd xmm2, [esp + _fizH1]
	movapd [esp + _fjxO], xmm3
	movapd [esp + _fjyO], xmm4
	movapd [esp + _fjzO], xmm5
	movapd [esp + _fixH1], xmm0
	movapd [esp + _fiyH1], xmm1
	movapd [esp + _fizH1], xmm2

	/* H1-H1 interaction */
	movapd xmm0, [esp + _rinvH1H1]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + _rsqH1H1] /* xmm1=r */
	mulpd  xmm1, [esp + _tsc]	
	cvttpd2pi mm6, xmm1	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	mulpd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqHH]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 /* xmm7=FF */
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulpd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */

        addpd  xmm5, [esp + _vctot]
        movapd [esp + _vctot], xmm5
	xorpd  xmm1, xmm1
	mulpd  xmm3,  [esp + _tsc]
	mulpd  xmm3, xmm0
	subpd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	movapd xmm3, [esp + _fjxH1]
	movapd xmm4, [esp + _fjyH1]
	movapd xmm5, [esp + _fjzH1]
	mulpd xmm0, [esp + _dxH1H1]
	mulpd xmm1, [esp + _dyH1H1]
	mulpd xmm2, [esp + _dzH1H1]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixH1]
	addpd xmm1, [esp + _fiyH1]
	addpd xmm2, [esp + _fizH1]
	movapd [esp + _fjxH1], xmm3
	movapd [esp + _fjyH1], xmm4
	movapd [esp + _fjzH1], xmm5
	movapd [esp + _fixH1], xmm0
	movapd [esp + _fiyH1], xmm1
	movapd [esp + _fizH1], xmm2

	/* H1-H2 interaction */
	movapd xmm0, [esp + _rinvH1H2]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + _rsqH1H2] /* xmm1=r */
	mulpd  xmm1, [esp + _tsc]
	cvttpd2pi mm6, xmm1	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	mulpd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqHH]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 /* xmm7=FF */
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulpd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */

        addpd  xmm5, [esp + _vctot]
        movapd [esp + _vctot], xmm5
	xorpd  xmm1, xmm1
	mulpd  xmm3,  [esp + _tsc]
	mulpd  xmm3, xmm0
	subpd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	movapd xmm3, [esp + _fjxH2]
	movapd xmm4, [esp + _fjyH2]
	movapd xmm5, [esp + _fjzH2]
	mulpd xmm0, [esp + _dxH1H2]
	mulpd xmm1, [esp + _dyH1H2]
	mulpd xmm2, [esp + _dzH1H2]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixH1]
	addpd xmm1, [esp + _fiyH1]
	addpd xmm2, [esp + _fizH1]
	movapd [esp + _fjxH2], xmm3
	movapd [esp + _fjyH2], xmm4
	movapd [esp + _fjzH2], xmm5
	movapd [esp + _fixH1], xmm0
	movapd [esp + _fiyH1], xmm1
	movapd [esp + _fizH1], xmm2

	/* H2-O interaction */
	movapd xmm0, [esp + _rinvH2O]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + _rsqH2O] /* xmm1=r */
	mulpd  xmm1, [esp + _tsc]	
	cvttpd2pi mm6, xmm1	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	mulpd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqOH]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 /* xmm7=FF */
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulpd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */

        addpd  xmm5, [esp + _vctot]
        movapd [esp + _vctot], xmm5
	xorpd  xmm1, xmm1
	mulpd  xmm3,  [esp + _tsc]
	mulpd  xmm3, xmm0
	subpd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1

	movapd xmm3, [esp + _fjxO]
	movapd xmm4, [esp + _fjyO]
	movapd xmm5, [esp + _fjzO]
	mulpd xmm0, [esp + _dxH2O]
	mulpd xmm1, [esp + _dyH2O]
	mulpd xmm2, [esp + _dzH2O]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixH2]
	addpd xmm1, [esp + _fiyH2]
	addpd xmm2, [esp + _fizH2]
	movapd [esp + _fjxO], xmm3
	movapd [esp + _fjyO], xmm4
	movapd [esp + _fjzO], xmm5
	movapd [esp + _fixH2], xmm0
	movapd [esp + _fiyH2], xmm1
	movapd [esp + _fizH2], xmm2

	/* H2-H1 interaction */
	movapd xmm0, [esp + _rinvH2H1]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + _rsqH2H1] /* xmm1=r */
	mulpd  xmm1, [esp + _tsc]
	cvttpd2pi mm6, xmm1	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	mulpd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqHH]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 /* xmm7=FF */
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulpd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */

        addpd  xmm5, [esp + _vctot]
        movapd [esp + _vctot], xmm5
	xorpd  xmm1, xmm1
	mulpd  xmm3,  [esp + _tsc]
	mulpd  xmm3, xmm0
	subpd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	movapd xmm3, [esp + _fjxH1]
	movapd xmm4, [esp + _fjyH1]
	movapd xmm5, [esp + _fjzH1]
	mulpd xmm0, [esp + _dxH2H1]
	mulpd xmm1, [esp + _dyH2H1]
	mulpd xmm2, [esp + _dzH2H1]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixH2]
	addpd xmm1, [esp + _fiyH2]
	addpd xmm2, [esp + _fizH2]
	movapd [esp + _fjxH1], xmm3
	movapd [esp + _fjyH1], xmm4
	movapd [esp + _fjzH1], xmm5
	movapd [esp + _fixH2], xmm0
	movapd [esp + _fiyH2], xmm1
	movapd [esp + _fizH2], xmm2

	/* H2-H2 interaction */
	movapd xmm0, [esp + _rinvH2H2]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + _rsqH2H2] /* xmm1=r */
	mulpd  xmm1, [esp + _tsc]	
	cvttpd2pi mm6, xmm1	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	mulpd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqHH]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 /* xmm7=FF */
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulpd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */
	
        addpd  xmm5, [esp + _vctot]
        movapd [esp + _vctot], xmm5
	xorpd  xmm1, xmm1
	mulpd  xmm3,  [esp + _tsc]
	mulpd  xmm3, xmm0
	subpd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	movapd xmm3, [esp + _fjxH2]
	movapd xmm4, [esp + _fjyH2]
	movapd xmm5, [esp + _fjzH2]
	mulpd xmm0, [esp + _dxH2H2]
	mulpd xmm1, [esp + _dyH2H2]
	mulpd xmm2, [esp + _dzH2H2]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixH2]
	addpd xmm1, [esp + _fiyH2]
	addpd xmm2, [esp + _fizH2]
	movapd [esp + _fjxH2], xmm3
	movapd [esp + _fjyH2], xmm4
	movapd [esp + _fjzH2], xmm5
	movapd [esp + _fixH2], xmm0
	movapd [esp + _fiyH2], xmm1
	movapd [esp + _fizH2], xmm2

	mov edi, [ebp + _faction]

	movd eax, mm0
	movd ebx, mm1
	
	/* Did all interactions - now update j forces */
	movlpd xmm0, [edi + eax*8]
	movlpd xmm1, [edi + eax*8 + 8]
	movlpd xmm2, [edi + eax*8 + 16]
	movlpd xmm3, [edi + eax*8 + 24]
	movlpd xmm4, [edi + eax*8 + 32]
	movlpd xmm5, [edi + eax*8 + 40]
	movlpd xmm6, [edi + eax*8 + 48]
	movlpd xmm7, [edi + eax*8 + 56]
	movhpd xmm0, [edi + ebx*8]
	movhpd xmm1, [edi + ebx*8 + 8]
	movhpd xmm2, [edi + ebx*8 + 16]
	movhpd xmm3, [edi + ebx*8 + 24]
	movhpd xmm4, [edi + ebx*8 + 32]
	movhpd xmm5, [edi + ebx*8 + 40]
	movhpd xmm6, [edi + ebx*8 + 48]
	movhpd xmm7, [edi + ebx*8 + 56]
	addpd xmm0, [esp + _fjxO]
	addpd xmm1, [esp + _fjyO]
	addpd xmm2, [esp + _fjzO]
	addpd xmm3, [esp + _fjxH1]
	addpd xmm4, [esp + _fjyH1]
	addpd xmm5, [esp + _fjzH1]
	addpd xmm6, [esp + _fjxH2]
	addpd xmm7, [esp + _fjyH2]
	movlpd [edi + eax*8], xmm0
	movlpd [edi + eax*8 + 8], xmm1
	movlpd [edi + eax*8 + 16], xmm2
	movlpd [edi + eax*8 + 24], xmm3
	movlpd [edi + eax*8 + 32], xmm4
	movlpd [edi + eax*8 + 40], xmm5
	movlpd [edi + eax*8 + 48], xmm6
	movlpd [edi + eax*8 + 56], xmm7
	movhpd [edi + ebx*8], xmm0
	movhpd [edi + ebx*8 + 8], xmm1
	movhpd [edi + ebx*8 + 16], xmm2
	movhpd [edi + ebx*8 + 24], xmm3
	movhpd [edi + ebx*8 + 32], xmm4
	movhpd [edi + ebx*8 + 40], xmm5
	movhpd [edi + ebx*8 + 48], xmm6
	movhpd [edi + ebx*8 + 56], xmm7

	movlpd xmm0, [edi + eax*8 + 64]
	movhpd xmm0, [edi + ebx*8 + 64]
	addpd xmm0, [esp + _fjzH2]
	movlpd [edi + eax*8 + 64], xmm0
	movhpd [edi + ebx*8 + 64], xmm0
	
	/* should we do one more iteration? */
	sub   [esp + _innerk],  2
	jl    .i3030_checksingle
	jmp   .i3030_unroll_loop
.i3030_checksingle:
	mov   edx, [esp + _innerk]
	and   edx, 1
	jnz   .i3030_dosingle
	jmp   .i3030_updateouterdata
.i3030_dosingle:
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]

	mov esi, [ebp + _pos]
	lea   eax, [eax + eax*2]  

	/* fetch j coordinates */
	movlpd xmm2, [esi + eax*8]
	movlpd xmm3, [esi + eax*8 + 8]
	movlpd xmm4, [esi + eax*8 + 16]
	movlpd xmm5, [esi + eax*8 + 24]
	movlpd xmm6, [esi + eax*8 + 32]
	movlpd xmm7, [esi + eax*8 + 40]
	movapd 	[esp + _jxO], xmm2
	movapd 	[esp + _jyO], xmm3
	movapd 	[esp + _jzO], xmm4
	movapd 	[esp + _jxH1], xmm5
	movapd 	[esp + _jyH1], xmm6
	movapd 	[esp + _jzH1], xmm7
	movlpd xmm2, [esi + eax*8 + 48]
	movlpd xmm3, [esi + eax*8 + 56]
	movlpd xmm4, [esi + eax*8 + 64]
	movapd 	[esp + _jxH2], xmm2
	movapd 	[esp + _jyH2], xmm3
	movapd 	[esp + _jzH2], xmm4
	
	movapd xmm0, [esp + _ixO]
	movapd xmm1, [esp + _iyO]
	movapd xmm2, [esp + _izO]
	movapd xmm3, [esp + _ixO]
	movapd xmm4, [esp + _iyO]
	movapd xmm5, [esp + _izO]
	subsd  xmm0, [esp + _jxO]
	subsd  xmm1, [esp + _jyO]
	subsd  xmm2, [esp + _jzO]
	subsd  xmm3, [esp + _jxH1]
	subsd  xmm4, [esp + _jyH1]
	subsd  xmm5, [esp + _jzH1]
	movapd [esp + _dxOO], xmm0
	movapd [esp + _dyOO], xmm1
	movapd [esp + _dzOO], xmm2
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	movapd [esp + _dxOH1], xmm3
	movapd [esp + _dyOH1], xmm4
	movapd [esp + _dzOH1], xmm5
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + _rsqOO], xmm0
	movapd [esp + _rsqOH1], xmm3

	movapd xmm0, [esp + _ixO]
	movapd xmm1, [esp + _iyO]
	movapd xmm2, [esp + _izO]
	movapd xmm3, [esp + _ixH1]
	movapd xmm4, [esp + _iyH1]
	movapd xmm5, [esp + _izH1]
	subsd  xmm0, [esp + _jxH2]
	subsd  xmm1, [esp + _jyH2]
	subsd  xmm2, [esp + _jzH2]
	subsd  xmm3, [esp + _jxO]
	subsd  xmm4, [esp + _jyO]
	subsd  xmm5, [esp + _jzO]
	movapd [esp + _dxOH2], xmm0
	movapd [esp + _dyOH2], xmm1
	movapd [esp + _dzOH2], xmm2
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	movapd [esp + _dxH1O], xmm3
	movapd [esp + _dyH1O], xmm4
	movapd [esp + _dzH1O], xmm5
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + _rsqOH2], xmm0
	movapd [esp + _rsqH1O], xmm3

	movapd xmm0, [esp + _ixH1]
	movapd xmm1, [esp + _iyH1]
	movapd xmm2, [esp + _izH1]
	movapd xmm3, [esp + _ixH1]
	movapd xmm4, [esp + _iyH1]
	movapd xmm5, [esp + _izH1]
	subsd  xmm0, [esp + _jxH1]
	subsd  xmm1, [esp + _jyH1]
	subsd  xmm2, [esp + _jzH1]
	subsd  xmm3, [esp + _jxH2]
	subsd  xmm4, [esp + _jyH2]
	subsd  xmm5, [esp + _jzH2]
	movapd [esp + _dxH1H1], xmm0
	movapd [esp + _dyH1H1], xmm1
	movapd [esp + _dzH1H1], xmm2
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	movapd [esp + _dxH1H2], xmm3
	movapd [esp + _dyH1H2], xmm4
	movapd [esp + _dzH1H2], xmm5
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + _rsqH1H1], xmm0
	movapd [esp + _rsqH1H2], xmm3

	movapd xmm0, [esp + _ixH2]
	movapd xmm1, [esp + _iyH2]
	movapd xmm2, [esp + _izH2]
	movapd xmm3, [esp + _ixH2]
	movapd xmm4, [esp + _iyH2]
	movapd xmm5, [esp + _izH2]
	subsd  xmm0, [esp + _jxO]
	subsd  xmm1, [esp + _jyO]
	subsd  xmm2, [esp + _jzO]
	subsd  xmm3, [esp + _jxH1]
	subsd  xmm4, [esp + _jyH1]
	subsd  xmm5, [esp + _jzH1]
	movapd [esp + _dxH2O], xmm0
	movapd [esp + _dyH2O], xmm1
	movapd [esp + _dzH2O], xmm2
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	movapd [esp + _dxH2H1], xmm3
	movapd [esp + _dyH2H1], xmm4
	movapd [esp + _dzH2H1], xmm5
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm4, xmm3
	addsd  xmm4, xmm5
	movapd [esp + _rsqH2O], xmm0
	movapd [esp + _rsqH2H1], xmm4

	movapd xmm0, [esp + _ixH2]
	movapd xmm1, [esp + _iyH2]
	movapd xmm2, [esp + _izH2]
	subsd  xmm0, [esp + _jxH2]
	subsd  xmm1, [esp + _jyH2]
	subsd  xmm2, [esp + _jzH2]
	movapd [esp + _dxH2H2], xmm0
	movapd [esp + _dyH2H2], xmm1
	movapd [esp + _dzH2H2], xmm2
	mulsd xmm0, xmm0
	mulsd xmm1, xmm1
	mulsd xmm2, xmm2
	addsd xmm0, xmm1
	addsd xmm0, xmm2
	movapd [esp + _rsqH2H2], xmm0
		
	/* start doing invsqrt use rsq values in xmm0, xmm4 */
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulsd   xmm1, xmm1	/* luA*luA */
	mulsd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	mulsd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subsd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm3, [esp + _half] /* iter1 */
	mulsd   xmm7, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulsd   xmm3, xmm3	/* luA*luA */
	mulsd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	mulsd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subsd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm1, [esp + _half] /* rinv */
	mulsd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvH2H2], xmm1
	movapd [esp + _rinvH2H1], xmm5

	movapd xmm0, [esp + _rsqOO]
	movapd xmm4, [esp + _rsqOH1]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulsd   xmm1, xmm1	/* luA*luA */
	mulsd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	mulsd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subsd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm3, [esp + _half] /* iter1 of  */
	mulsd   xmm7, [esp + _half] /* iter1 of  */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulsd   xmm3, xmm3	/* luA*luA */
	mulsd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	mulsd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subsd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm1, [esp + _half] /* rinv */
	mulsd   xmm5, [esp + _half] /* rinv*/
	movapd [esp + _rinvOO], xmm1
	movapd [esp + _rinvOH1], xmm5

	movapd xmm0, [esp + _rsqOH2]
	movapd xmm4, [esp + _rsqH1O]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulsd   xmm1, xmm1	/* luA*luA */
	mulsd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	mulsd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subsd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm3, [esp + _half] /* iter1 */
	mulsd   xmm7, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulsd   xmm3, xmm3	/* luA*luA */
	mulsd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	mulsd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subsd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm1, [esp + _half] /* rinv */
	mulsd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvOH2], xmm1
	movapd [esp + _rinvH1O], xmm5

	movapd xmm0, [esp + _rsqH1H1]
	movapd xmm4, [esp + _rsqH1H2]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulsd   xmm1, xmm1	/* luA*luA */
	mulsd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	mulsd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subsd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm3, [esp + _half] /* iter1a */
	mulsd   xmm7, [esp + _half] /* iter1b */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulsd   xmm3, xmm3	/* luA*luA */
	mulsd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	mulsd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subsd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm1, [esp + _half] /* rinv */
	mulsd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvH1H1], xmm1
	movapd [esp + _rinvH1H2], xmm5

	movapd xmm0, [esp + _rsqH2O]
	cvtsd2ss xmm1, xmm0	
	rsqrtss xmm1, xmm1
	cvtss2sd xmm1, xmm1
	
	movapd  xmm2, xmm1	/* copy of luA */
	mulsd   xmm1, xmm1	/* luA*luA */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm3, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	mulsd   xmm3, xmm3	/* luA*luA */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm1, [esp + _half] /* rinv */
	movapd [esp + _rinvH2O], xmm1
	
	movd mm0, eax	
	/* start with OO interaction */
	movapd xmm0, [esp + _rinvOO]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + _rsqOO] /* xmm1=r */
	mulsd  xmm1, [esp + _tsc]

	cvttsd2si eax, xmm1	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1  */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1  */
	unpckhpd xmm7, xmm3	/* H1  */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	mulsd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqOO]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 /* xmm7=FF */
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulsd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */
        /* increment vcoul - then we can get rid of mm5 */
        /* update vctot */
        addsd  xmm5, [esp + _vctot]
	xorpd  xmm2, xmm2
        movlpd [esp + _vctot], xmm5
	mulsd  xmm3, [esp + _tsc]
	
	subsd  xmm2, xmm3
	mulsd  xmm0, xmm2
	
	movapd xmm1, xmm0
	movapd xmm2, xmm0		

	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulsd xmm0, [esp + _dxOO]
	mulsd xmm1, [esp + _dyOO]
	mulsd xmm2, [esp + _dzOO]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixO]
	addsd xmm1, [esp + _fiyO]
	addsd xmm2, [esp + _fizO]
	movlpd [esp + _fjxO], xmm3
	movlpd [esp + _fjyO], xmm4
	movlpd [esp + _fjzO], xmm5
	movlpd [esp + _fixO], xmm0
	movlpd [esp + _fiyO], xmm1
	movlpd [esp + _fizO], xmm2

	/* O-H1 interaction */
	movapd xmm0, [esp + _rinvOH1]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + _rsqOH1] /* xmm1=r */
	mulsd  xmm1, [esp + _tsc]

	cvttsd2si eax, xmm1	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1  */
	unpckhpd xmm5, xmm3	/* F1  */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	mulsd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqOH]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 /* xmm7=FF */
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulsd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */

        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5
	xorpd  xmm1, xmm1
	mulsd  xmm3,  [esp + _tsc]
	mulsd  xmm3, xmm0
	subsd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulsd xmm0, [esp + _dxOH1]
	mulsd xmm1, [esp + _dyOH1]
	mulsd xmm2, [esp + _dzOH1]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixO]
	addsd xmm1, [esp + _fiyO]
	addsd xmm2, [esp + _fizO]
	movlpd [esp + _fjxH1], xmm3
	movlpd [esp + _fjyH1], xmm4
	movlpd [esp + _fjzH1], xmm5
	movlpd [esp + _fixO], xmm0
	movlpd [esp + _fiyO], xmm1
	movlpd [esp + _fizO], xmm2

	/* O-H2 interaction */ 
	movapd xmm0, [esp + _rinvOH2]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + _rsqOH2] /* xmm1=r */
	mulsd  xmm1, [esp + _tsc]
	
	cvttsd2si eax, xmm1	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	mulsd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqOH]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 /* xmm7=FF */
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulsd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */

        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5
	xorpd  xmm1, xmm1
	mulsd  xmm3,  [esp + _tsc]
	mulsd  xmm3, xmm0
	subsd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulsd xmm0, [esp + _dxOH2]
	mulsd xmm1, [esp + _dyOH2]
	mulsd xmm2, [esp + _dzOH2]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixO]
	addsd xmm1, [esp + _fiyO]
	addsd xmm2, [esp + _fizO]
	movlpd [esp + _fjxH2], xmm3
	movlpd [esp + _fjyH2], xmm4
	movlpd [esp + _fjzH2], xmm5
	movlpd [esp + _fixO], xmm0
	movlpd [esp + _fiyO], xmm1
	movlpd [esp + _fizO], xmm2

	/* H1-O interaction */
	movapd xmm0, [esp + _rinvH1O]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + _rsqH1O] /* xmm1=r */
	mulsd  xmm1, [esp + _tsc]
	
	cvttsd2si eax, xmm1	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	mulsd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqOH]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 /* xmm7=FF */
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulsd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */

        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5
	xorpd  xmm1, xmm1
	mulsd  xmm3,  [esp + _tsc]
	mulsd  xmm3, xmm0
	subsd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	movapd xmm3, [esp + _fjxO]
	movapd xmm4, [esp + _fjyO]
	movapd xmm5, [esp + _fjzO]
	mulsd xmm0, [esp + _dxH1O]
	mulsd xmm1, [esp + _dyH1O]
	mulsd xmm2, [esp + _dzH1O]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixH1]
	addsd xmm1, [esp + _fiyH1]
	addsd xmm2, [esp + _fizH1]
	movlpd [esp + _fjxO], xmm3
	movlpd [esp + _fjyO], xmm4
	movlpd [esp + _fjzO], xmm5
	movlpd [esp + _fixH1], xmm0
	movlpd [esp + _fiyH1], xmm1
	movlpd [esp + _fizH1], xmm2

	/* H1-H1 interaction */
	movapd xmm0, [esp + _rinvH1H1]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + _rsqH1H1] /* xmm1=r */
	mulsd  xmm1, [esp + _tsc]	
	cvttsd2si eax, xmm1	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	mulsd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqHH]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 /* xmm7=FF */
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulsd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */

        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5
	xorpd  xmm1, xmm1
	mulsd  xmm3,  [esp + _tsc]
	mulsd  xmm3, xmm0
	subsd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	movapd xmm3, [esp + _fjxH1]
	movapd xmm4, [esp + _fjyH1]
	movapd xmm5, [esp + _fjzH1]
	mulsd xmm0, [esp + _dxH1H1]
	mulsd xmm1, [esp + _dyH1H1]
	mulsd xmm2, [esp + _dzH1H1]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixH1]
	addsd xmm1, [esp + _fiyH1]
	addsd xmm2, [esp + _fizH1]
	movlpd [esp + _fjxH1], xmm3
	movlpd [esp + _fjyH1], xmm4
	movlpd [esp + _fjzH1], xmm5
	movlpd [esp + _fixH1], xmm0
	movlpd [esp + _fiyH1], xmm1
	movlpd [esp + _fizH1], xmm2

	/* H1-H2 interaction */
	movapd xmm0, [esp + _rinvH1H2]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + _rsqH1H2] /* xmm1=r */
	mulsd  xmm1, [esp + _tsc]
	cvttsd2si eax, xmm1	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	mulsd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqHH]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 /* xmm7=FF */
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulsd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */

        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5
	xorpd  xmm1, xmm1
	mulsd  xmm3,  [esp + _tsc]
	mulsd  xmm3, xmm0
	subsd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	movapd xmm3, [esp + _fjxH2]
	movapd xmm4, [esp + _fjyH2]
	movapd xmm5, [esp + _fjzH2]
	mulsd xmm0, [esp + _dxH1H2]
	mulsd xmm1, [esp + _dyH1H2]
	mulsd xmm2, [esp + _dzH1H2]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixH1]
	addsd xmm1, [esp + _fiyH1]
	addsd xmm2, [esp + _fizH1]
	movlpd [esp + _fjxH2], xmm3
	movlpd [esp + _fjyH2], xmm4
	movlpd [esp + _fjzH2], xmm5
	movlpd [esp + _fixH1], xmm0
	movlpd [esp + _fiyH1], xmm1
	movlpd [esp + _fizH1], xmm2

	/* H2-O interaction */
	movapd xmm0, [esp + _rinvH2O]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + _rsqH2O] /* xmm1=r */
	mulsd  xmm1, [esp + _tsc]	
	cvttsd2si eax, xmm1	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	mulsd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqOH]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 /* xmm7=FF */
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulsd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */

        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5
	xorpd  xmm1, xmm1
	mulsd  xmm3,  [esp + _tsc]
	mulsd  xmm3, xmm0
	subsd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1

	movapd xmm3, [esp + _fjxO]
	movapd xmm4, [esp + _fjyO]
	movapd xmm5, [esp + _fjzO]
	mulsd xmm0, [esp + _dxH2O]
	mulsd xmm1, [esp + _dyH2O]
	mulsd xmm2, [esp + _dzH2O]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixH2]
	addsd xmm1, [esp + _fiyH2]
	addsd xmm2, [esp + _fizH2]
	movlpd [esp + _fjxO], xmm3
	movlpd [esp + _fjyO], xmm4
	movlpd [esp + _fjzO], xmm5
	movlpd [esp + _fixH2], xmm0
	movlpd [esp + _fiyH2], xmm1
	movlpd [esp + _fizH2], xmm2

	/* H2-H1 interaction */
	movapd xmm0, [esp + _rinvH2H1]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + _rsqH2H1] /* xmm1=r */
	mulsd  xmm1, [esp + _tsc]
	cvttsd2si eax, xmm1	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subpd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	mulsd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqHH]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 /* xmm7=FF */
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulsd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */

        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5
	xorpd  xmm1, xmm1
	mulsd  xmm3,  [esp + _tsc]
	mulsd  xmm3, xmm0
	subsd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	movapd xmm3, [esp + _fjxH1]
	movapd xmm4, [esp + _fjyH1]
	movapd xmm5, [esp + _fjzH1]
	mulsd xmm0, [esp + _dxH2H1]
	mulsd xmm1, [esp + _dyH2H1]
	mulsd xmm2, [esp + _dzH2H1]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixH2]
	addsd xmm1, [esp + _fiyH2]
	addsd xmm2, [esp + _fizH2]
	movlpd [esp + _fjxH1], xmm3
	movlpd [esp + _fjyH1], xmm4
	movlpd [esp + _fjzH1], xmm5
	movlpd [esp + _fixH2], xmm0
	movlpd [esp + _fiyH2], xmm1
	movlpd [esp + _fizH2], xmm2

	/* H2-H2 interaction */
	movapd xmm0, [esp + _rinvH2H2]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + _rsqH2H2] /* xmm1=r */
	mulsd  xmm1, [esp + _tsc]	
	cvttsd2si eax, xmm1	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	mulsd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqHH]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 /* xmm7=FF */
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulsd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */

        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5
	xorpd  xmm1, xmm1
	mulsd  xmm3,  [esp + _tsc]
	mulsd  xmm3, xmm0
	subsd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	movapd xmm3, [esp + _fjxH2]
	movapd xmm4, [esp + _fjyH2]
	movapd xmm5, [esp + _fjzH2]
	mulsd xmm0, [esp + _dxH2H2]
	mulsd xmm1, [esp + _dyH2H2]
	mulsd xmm2, [esp + _dzH2H2]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixH2]
	addsd xmm1, [esp + _fiyH2]
	addsd xmm2, [esp + _fizH2]
	movlpd [esp + _fjxH2], xmm3
	movlpd [esp + _fjyH2], xmm4
	movlpd [esp + _fjzH2], xmm5
	movlpd [esp + _fixH2], xmm0
	movlpd [esp + _fiyH2], xmm1
	movlpd [esp + _fizH2], xmm2

	mov edi, [ebp + _faction]

	movd eax, mm0
	
	/* Did all interactions - now update j forces */
	movlpd xmm0, [edi + eax*8]
	movlpd xmm1, [edi + eax*8 + 8]
	movlpd xmm2, [edi + eax*8 + 16]
	movlpd xmm3, [edi + eax*8 + 24]
	movlpd xmm4, [edi + eax*8 + 32]
	movlpd xmm5, [edi + eax*8 + 40]
	movlpd xmm6, [edi + eax*8 + 48]
	movlpd xmm7, [edi + eax*8 + 56]
	addsd xmm0, [esp + _fjxO]
	addsd xmm1, [esp + _fjyO]
	addsd xmm2, [esp + _fjzO]
	addsd xmm3, [esp + _fjxH1]
	addsd xmm4, [esp + _fjyH1]
	addsd xmm5, [esp + _fjzH1]
	addsd xmm6, [esp + _fjxH2]
	addsd xmm7, [esp + _fjyH2]
	movlpd [edi + eax*8], xmm0
	movlpd [edi + eax*8 + 8], xmm1
	movlpd [edi + eax*8 + 16], xmm2
	movlpd [edi + eax*8 + 24], xmm3
	movlpd [edi + eax*8 + 32], xmm4
	movlpd [edi + eax*8 + 40], xmm5
	movlpd [edi + eax*8 + 48], xmm6
	movlpd [edi + eax*8 + 56], xmm7

	movlpd xmm0, [edi + eax*8 + 64]
	addsd xmm0, [esp + _fjzH2]
	movlpd [edi + eax*8 + 64], xmm0
	
.i3030_updateouterdata:
	mov   ecx, [esp + _ii3]
	mov   edi, [ebp + _faction]
	mov   esi, [ebp + _fshift]
	mov   edx, [esp + _is3]

	/* accumulate  Oi forces in xmm0, xmm1, xmm2 */
	movapd xmm0, [esp + _fixO]
	movapd xmm1, [esp + _fiyO]
	movapd xmm2, [esp + _fizO]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 /* sum is in low xmm0-xmm2 */

	movapd xmm3, xmm0	
	movapd xmm4, xmm1	
	movapd xmm5, xmm2	

	/* increment i force */
	movsd  xmm3, [edi + ecx*8]
	movsd  xmm4, [edi + ecx*8 + 8]
	movsd  xmm5, [edi + ecx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8],     xmm3
	movsd  [edi + ecx*8 + 8], xmm4
	movsd  [edi + ecx*8 + 16], xmm5

	/* accumulate force in xmm6/xmm7 for fshift */
	movapd xmm6, xmm0
	movsd xmm7, xmm2
	unpcklpd xmm6, xmm1

	/* accumulate H1i forces in xmm0, xmm1, xmm2 */
	movapd xmm0, [esp + _fixH1]
	movapd xmm1, [esp + _fiyH1]
	movapd xmm2, [esp + _fizH1]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 /* sum is in low xmm0-xmm2 */

	/* increment i force */
	movsd  xmm3, [edi + ecx*8 + 24]
	movsd  xmm4, [edi + ecx*8 + 32]
	movsd  xmm5, [edi + ecx*8 + 40]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8 + 24], xmm3
	movsd  [edi + ecx*8 + 32], xmm4
	movsd  [edi + ecx*8 + 40], xmm5

	/* accumulate force in xmm6/xmm7 for fshift */
	addsd xmm7, xmm2
	unpcklpd xmm0, xmm1
	addpd xmm6, xmm0

	/* accumulate H2i forces in xmm0, xmm1, xmm2 */
	movapd xmm0, [esp + _fixH2]
	movapd xmm1, [esp + _fiyH2]
	movapd xmm2, [esp + _fizH2]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 /* sum is in low xmm0-xmm2 */

	movapd xmm3, xmm0	
	movapd xmm4, xmm1	
	movapd xmm5, xmm2	

	/* increment i force */
	movsd  xmm3, [edi + ecx*8 + 48]
	movsd  xmm4, [edi + ecx*8 + 56]
	movsd  xmm5, [edi + ecx*8 + 64]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8 + 48], xmm3
	movsd  [edi + ecx*8 + 56], xmm4
	movsd  [edi + ecx*8 + 64], xmm5

	/* accumulate force in xmm6/xmm7 for fshift */
	addsd xmm7, xmm2
	unpcklpd xmm0, xmm1
	addpd xmm6, xmm0

	/* increment fshift force */
	movupd xmm3, [esi + edx*8]
	movsd  xmm4, [esi + edx*8 + 16]
	addpd  xmm3, xmm6
	addsd  xmm4, xmm7
	movupd [esi + edx*8],    xmm3
	movsd  [esi + edx*8 + 16], xmm4

	mov   edx, [ebp + _gid]  
	mov   edx, [edx]
	add   [ebp + _gid],  4	

	/* accumulate total potential energy and update it */
	movapd xmm7, [esp + _vctot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */
        
	/* add earlier value from mem */
	mov   eax, [ebp + _Vc]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* finish if last */
	mov   ecx, [ebp + _nri]
	dec ecx
	jecxz .i3030_end
	/* not last, iterate once more! */ 
	mov [ebp + _nri], ecx
	jmp .i3030_outer
.i3030_end:
	emms
	mov eax, [esp + _salign]
	add esp, eax
	add esp, 1444
	pop edi
	pop esi
        pop edx
        pop ecx
        pop ebx
        pop eax
	leave
	ret
	



.globl inl3100_sse2
	.type inl3100_sse2,@function
inl3100_sse2:	
.equ		_nri,		8
.equ		_iinr,		12
.equ		_jindex,	16
.equ		_jjnr,		20
.equ		_shift,		24
.equ		_shiftvec,	28
.equ		_fshift,	32
.equ		_gid,		36
.equ		_pos,		40
.equ		_faction,	44
.equ		_charge,	48
.equ		_facel,		52 /* double */ 
.equ		_Vc,		60	
.equ		_type,		64
.equ		_ntype,		68
.equ		_nbfp,		72	
.equ		_Vnb,		76
.equ		_tabscale,	80 /* double */ 
.equ		_VFtab,		88
	/* stack offsets for local variables */ 
	/* bottom of stack is cache-aligned for sse2 use */
.equ		_ix,		0
.equ		_iy,		16
.equ		_iz,		32
.equ		_iq,		48
.equ		_dx,		64
.equ		_dy,		80
.equ		_dz,		96
.equ		_two,		112
.equ		_six,		128
.equ		_twelve,	144
.equ		_tsc,		160
.equ		_qq,		176	
.equ		_c6,		192
.equ		_c12,		208
.equ		_fscal,		224
.equ		_vctot,		240
.equ		_vnbtot,	256
.equ		_fix,		272
.equ		_fiy,		288
.equ		_fiz,		304
.equ		_half,		320
.equ		_three,		336
.equ		_is3,		352
.equ		_ii3,		356
.equ		_ntia,		360	
.equ		_innerjjnr,	364
.equ		_innerk,	368
.equ		_salign,	372
	push ebp
	mov ebp,esp	
        push eax
        push ebx
        push ecx
        push edx
	push esi
	push edi
	sub esp, 376		/* local stack space */
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + _salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_two]
	movupd xmm2, [sse2_three]
	movupd xmm3, [sse2_six]
	movupd xmm4, [sse2_twelve]
	movsd xmm5, [ebp + _tabscale]
	movapd [esp + _half],  xmm0
	movapd [esp + _two], xmm1
	movapd [esp + _three],  xmm2
	movapd [esp + _six],  xmm3
	movapd [esp + _twelve],  xmm4
	shufpd xmm5, xmm5, 0
	movapd [esp + _tsc], xmm5

	/* assume we have at least one i particle - start directly */	
.i3100_outer:
	mov   eax, [ebp + _shift]      /* eax = pointer into shift[] */
	mov   ebx, [eax]		/* ebx=shift[n] */
	add   [ebp + _shift],  4  /* advance pointer one step */
	
	lea   ebx, [ebx + ebx*2]        /* ebx=3*is */
	mov   [esp + _is3],ebx    	/* store is3 */

	mov   eax, [ebp + _shiftvec]   /* eax = base of shiftvec[] */

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	add   [ebp + _iinr],  4   /* advance pointer */
	mov   ebx, [ecx]	        /* ebx =ii */

	mov   edx, [ebp + _charge]
	movsd xmm3, [edx + ebx*8]	
	mulsd xmm3, [ebp + _facel]
	shufpd xmm3, xmm3, 0

        mov   edx, [ebp + _type] 
        mov   edx, [edx + ebx*4]
        imul  edx, [ebp + _ntype]
        shl   edx, 1
        mov   [esp + _ntia], edx
		
	lea   ebx, [ebx + ebx*2]	/* ebx = 3*ii=ii3 */
	mov   eax, [ebp + _pos]        /* eax = base of pos[] */ 

	addsd xmm0, [eax + ebx*8]
	addsd xmm1, [eax + ebx*8 + 8]
	addsd xmm2, [eax + ebx*8 + 16]

	movapd [esp + _iq], xmm3
	
	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0

	movapd [esp + _ix], xmm0
	movapd [esp + _iy], xmm1
	movapd [esp + _iz], xmm2

	mov   [esp + _ii3], ebx
	
	/* clear vctot and i forces */
	xorpd xmm4, xmm4
	movapd [esp + _vctot], xmm4
	movapd [esp + _vnbtot], xmm4
	movapd [esp + _fix], xmm4
	movapd [esp + _fiy], xmm4
	movapd [esp + _fiz], xmm4
	
	mov   eax, [ebp + _jindex]
	mov   ecx, [eax]	         /* jindex[n] */
	mov   edx, [eax + 4]	         /* jindex[n+1] */
	add   [ebp + _jindex],  4
	sub   edx, ecx                   /* number of innerloop atoms */

	mov   esi, [ebp + _pos]
	mov   edi, [ebp + _faction]	
	mov   eax, [ebp + _jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + _innerjjnr], eax     /* pointer to jjnr[nj0] */
	sub   edx,  2
	mov   [esp + _innerk], edx        /* number of innerloop atoms */
	jge   .i3100_unroll_loop
	jmp   .i3100_checksingle
.i3100_unroll_loop:	
	/* twice unrolled innerloop here */
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	add   [esp + _innerjjnr],  8 /* advance pointer (unrolled 2) */

	mov esi, [ebp + _charge]        /* base of charge[] */
	movlpd xmm3, [esi + eax*8]
	movhpd xmm3, [esi + ebx*8]

	movapd xmm2, [esp + _iq]
	mulpd  xmm3, xmm2
	movapd [esp + _qq], xmm3	
	
	movd  mm0, eax		/* use mmx registers as temp storage */
	movd  mm1, ebx
	
	mov esi, [ebp + _type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov esi, [ebp + _nbfp]
	shl eax, 1
	shl ebx, 1
	mov edi, [esp + _ntia]
	add eax, edi
	add ebx, edi

	movupd xmm6, [esi + eax*8]	/* c6a c12a */
	movupd xmm7, [esi + ebx*8]	/* c6b c12b */
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0
	movd  ebx, mm1
	movapd [esp + _c6], xmm4
	movapd [esp + _c12], xmm6
	
	mov esi, [ebp + _pos]       /* base of pos[] */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */
	lea   ebx, [ebx + ebx*2]	

	/* move two coordinates to xmm0-xmm2 */	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]		
	
	/* move ix-iz to xmm4-xmm6 */
	movapd xmm4, [esp + _ix]
	movapd xmm5, [esp + _iy]
	movapd xmm6, [esp + _iz]

	/* calc dr */
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	/* store dr */
	movapd [esp + _dx], xmm4
	movapd [esp + _dy], xmm5
	movapd [esp + _dz], xmm6
	/* square it */
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6
	/* rsq in xmm4 */

	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm5, xmm5
	cvtps2pd xmm2, xmm5	/* lu in low xmm2 */

	/* lookup seed in xmm2 */
	movapd xmm5, xmm2	/* copy of lu */
	mulpd xmm2, xmm2	/* lu*lu */
	movapd xmm1, [esp + _three]
	mulpd xmm2, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subpd xmm1, xmm2	/* 30-rsq*lu*lu */
	mulpd xmm1, xmm5	
	mulpd xmm1, xmm0	/* xmm0=iter1 of rinv (new lu) */

	movapd xmm5, xmm1	/* copy of lu */
	mulpd xmm1, xmm1	/* lu*lu */
	movapd xmm2, [esp + _three]
	mulpd xmm1, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subpd xmm2, xmm1	/* 30-rsq*lu*lu */
	mulpd xmm2, xmm5	
	mulpd xmm0, xmm2	/* xmm0=rinv */
	
	mulpd xmm4, xmm0	/* xmm4=r */
	mulpd xmm4, [esp + _tsc]

	cvttpd2pi mm6, xmm4	/* mm6 = lu idx */
	cvtpi2pd xmm5, mm6
	subpd xmm4, xmm5
	movapd xmm1, xmm4	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	
	movd mm0, eax	
	movd mm1, ebx

	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	mulpd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qq]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 /* xmm7=FF */
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulpd  xmm3, xmm7 /* fijC=FF*qq */
	/* at this point mm5 contains vcoul and mm3 fijC */
	
	/* L-J */
	movapd xmm4, xmm0
	mulpd  xmm4, xmm0	/* xmm4=rinvsq */

	/* increment vcoul - then we can get rid of mm5 */
	/* update vctot */
	addpd  xmm5, [esp + _vctot]

	movapd xmm6, xmm4
	mulpd  xmm6, xmm4

	movapd [esp + _vctot], xmm5 

	mulpd  xmm6, xmm4	/* xmm6=rinvsix */
	movapd xmm4, xmm6
	mulpd  xmm4, xmm4	/* xmm4=rinvtwelve */
	mulpd  xmm6, [esp + _c6]
	mulpd  xmm4, [esp + _c12]
	movapd xmm7, [esp + _vnbtot]
	addpd  xmm7, xmm4
	mulpd  xmm4, [esp + _twelve]
	subpd  xmm7, xmm6
	mulpd  xmm3, [esp + _tsc]
	mulpd  xmm6, [esp + _six]
	movapd [esp + _vnbtot], xmm7
	subpd  xmm4, xmm6
	mulpd  xmm4, xmm0
	subpd  xmm4, xmm3
	mulpd  xmm4, xmm0

	movapd xmm0, [esp + _dx]
	movapd xmm1, [esp + _dy]
	movapd xmm2, [esp + _dz]

	movd eax, mm0	
	movd ebx, mm1

	mov    edi, [ebp + _faction]
	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4
	/* xmm0-xmm2 contains tx-tz (partial force) */
	/* now update f_i */
	movapd xmm3, [esp + _fix]
	movapd xmm4, [esp + _fiy]
	movapd xmm5, [esp + _fiz]
	addpd  xmm3, xmm0
	addpd  xmm4, xmm1
	addpd  xmm5, xmm2
	movapd [esp + _fix], xmm3
	movapd [esp + _fiy], xmm4
	movapd [esp + _fiz], xmm5
	/* the fj's - start by accumulating forces from memory */
	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	movhpd xmm3, [edi + ebx*8]
	movhpd xmm4, [edi + ebx*8 + 8]
	movhpd xmm5, [edi + ebx*8 + 16]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5
	movhpd [edi + ebx*8], xmm3
	movhpd [edi + ebx*8 + 8], xmm4
	movhpd [edi + ebx*8 + 16], xmm5
		
	/* should we do one more iteration? */
	sub   [esp + _innerk],  2
	jl    .i3100_checksingle
	jmp   .i3100_unroll_loop
.i3100_checksingle:
	mov   edx, [esp + _innerk]
	and   edx, 1
	jnz    .i3100_dosingle
	jmp    .i3100_updateouterdata
.i3100_dosingle:
	mov esi, [ebp + _charge]
	mov edi, [ebp + _pos]
	mov   ecx, [esp + _innerjjnr]
	mov   eax, [ecx]
	
	xorpd  xmm3, xmm3
	movlpd xmm3, [esi + eax*8]
	movapd xmm2, [esp + _iq]
	mulpd  xmm3, xmm2
	movapd [esp + _qq], xmm3	
	
	movd  mm0, eax		/* use mmx registers as temp storage */
	mov esi, [ebp + _type]
	mov eax, [esi + eax*4]
	mov esi, [ebp + _nbfp]
	shl eax, 1
	mov edi, [esp + _ntia]
	add eax, edi

	movupd xmm6, [esi + eax*8]	/* c6a c12a */
	xorpd xmm7, xmm7
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0
	movapd [esp + _c6], xmm4
	movapd [esp + _c12], xmm6
	
	mov esi, [ebp + _pos]       /* base of pos[] */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */

	/* move coordinates to xmm0-xmm2 */	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	
	/* move ix-iz to xmm4-xmm6 */
	movapd xmm4, [esp + _ix]
	movapd xmm5, [esp + _iy]
	movapd xmm6, [esp + _iz]

	/* calc dr */
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	/* store dr */
	movapd [esp + _dx], xmm4
	movapd [esp + _dy], xmm5
	movapd [esp + _dz], xmm6
	/* square it */
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6
	/* rsq in xmm4 */

	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm5, xmm5
	cvtss2sd xmm2, xmm5	/* lu in low xmm2 */

	/* lookup seed in xmm2 */
	movapd xmm5, xmm2	/* copy of lu */
	mulsd xmm2, xmm2	/* lu*lu */
	movapd xmm1, [esp + _three]
	mulsd xmm2, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subsd xmm1, xmm2	/* 30-rsq*lu*lu */
	mulsd xmm1, xmm5	
	mulsd xmm1, xmm0	/* xmm0=iter1 of rinv (new lu) */

	movapd xmm5, xmm1	/* copy of lu */
	mulsd xmm1, xmm1	/* lu*lu */
	movapd xmm2, [esp + _three]
	mulsd xmm1, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subsd xmm2, xmm1	/* 30-rsq*lu*lu */
	mulsd xmm2, xmm5	
	mulsd xmm0, xmm2	/* xmm0=rinv */
	
	mulsd xmm4, xmm0	/* xmm4=r */
	mulsd xmm4, [esp + _tsc]

	movd mm0, eax	
	cvttsd2si eax, xmm4	/* mm6 = lu idx */
	cvtsi2sd xmm5, eax
	subsd xmm4, xmm5
	movapd xmm1, xmm4	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	
	mov  esi, [ebp + _VFtab]

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	mulsd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qq]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 /* xmm7=FF */
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulsd  xmm3, xmm7 /* fijC=FF*qq */
	/* at this point mm5 contains vcoul and mm3 fijC */
	
	/* L-J */
	movapd xmm4, xmm0
	mulsd  xmm4, xmm0	/* xmm4=rinvsq */

	/* increment vcoul - then we can get rid of mm5 */
	/* update vctot */
	addsd  xmm5, [esp + _vctot]

	movapd xmm6, xmm4
	mulsd  xmm6, xmm4

	movlpd [esp + _vctot], xmm5 

	mulsd  xmm6, xmm4	/* xmm6=rinvsix */
	movapd xmm4, xmm6
	mulsd  xmm4, xmm4	/* xmm4=rinvtwelve */
	mulsd  xmm6, [esp + _c6]
	mulsd  xmm4, [esp + _c12]
	movapd xmm7, [esp + _vnbtot]
	addsd  xmm7, xmm4
	mulsd  xmm4, [esp + _twelve]
	subsd  xmm7, xmm6
	mulsd  xmm3, [esp + _tsc]
	mulsd  xmm6, [esp + _six]
	movlpd [esp + _vnbtot], xmm7
	subsd  xmm4, xmm6
	mulsd  xmm4, xmm0
	subsd  xmm4, xmm3
	mulsd  xmm4, xmm0

	movapd xmm0, [esp + _dx]
	movapd xmm1, [esp + _dy]
	movapd xmm2, [esp + _dz]

	movd eax, mm0	

	mov    edi, [ebp + _faction]
	mulsd  xmm0, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm2, xmm4
	/* xmm0-xmm2 contains tx-tz (partial force) */
	/* now update f_i */
	movapd xmm3, [esp + _fix]
	movapd xmm4, [esp + _fiy]
	movapd xmm5, [esp + _fiz]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movlpd [esp + _fix], xmm3
	movlpd [esp + _fiy], xmm4
	movlpd [esp + _fiz], xmm5
	/* the fj's - start by accumulating forces from memory */
	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5
		
.i3100_updateouterdata:
	mov   ecx, [esp + _ii3]
	mov   edi, [ebp + _faction]
	mov   esi, [ebp + _fshift]
	mov   edx, [esp + _is3]

	/* accumulate i forces in xmm0, xmm1, xmm2 */
	movapd xmm0, [esp + _fix]
	movapd xmm1, [esp + _fiy]
	movapd xmm2, [esp + _fiz]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 /* sum is in low xmm0-xmm2 */

	/* increment i force */
	movsd  xmm3, [edi + ecx*8]
	movsd  xmm4, [edi + ecx*8 + 8]
	movsd  xmm5, [edi + ecx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8],     xmm3
	movsd  [edi + ecx*8 + 8], xmm4
	movsd  [edi + ecx*8 + 16], xmm5

	/* increment fshift force */ 
	movsd  xmm3, [esi + edx*8]
	movsd  xmm4, [esi + edx*8 + 8]
	movsd  xmm5, [esi + edx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [esi + edx*8],     xmm3
	movsd  [esi + edx*8 + 8], xmm4
	movsd  [esi + edx*8 + 16], xmm5

	/* get group index for i particle */
	mov   edx, [ebp + _gid]      /* get group index for this i particle */
	mov   edx, [edx]
	add   [ebp + _gid],  4  /* advance pointer */

	/* accumulate total potential energy and update it */
	movapd xmm7, [esp + _vctot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */

	/* add earlier value from mem */
	mov   eax, [ebp + _Vc]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* accumulate total lj energy and update it */
	movapd xmm7, [esp + _vnbtot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */
	
	/* add earlier value from mem */
	mov   eax, [ebp + _Vnb]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* finish if last */
	mov   ecx, [ebp + _nri]
	dec ecx
	jecxz .i3100_end
	/* not last, iterate once more! */ 
	mov [ebp + _nri], ecx
	jmp .i3100_outer
.i3100_end:
	emms
	mov eax, [esp + _salign]
	add esp, eax
	add esp, 376
	pop edi
	pop esi
        pop edx
        pop ecx
        pop ebx
        pop eax
	leave
	ret




.globl inl3120_sse2
	.type inl3120_sse2,@function
inl3120_sse2:
.equ		_nri,		8
.equ		_iinr,		12
.equ		_jindex,	16
.equ		_jjnr,		20
.equ		_shift,		24
.equ		_shiftvec,	28
.equ		_fshift,	32
.equ		_gid,		36
.equ		_pos,		40		
.equ		_faction,	44
.equ		_charge,	48
.equ		_facel,		52 /* double */ 
.equ		_Vc,		60	
.equ		_type,		64
.equ		_ntype,		68
.equ		_nbfp,		72	
.equ		_Vnb,		76	
.equ		_tabscale,	80 /* double */ 	
.equ		_VFtab,		88
	/* stack offsets for local variables */ 
	/* bottom of stack is cache-aligned for sse2 use */
.equ		_ixO,		0
.equ		_iyO,		16
.equ		_izO,		32
.equ		_ixH1,		48
.equ		_iyH1,		64
.equ		_izH1,		80
.equ		_ixH2,		96
.equ		_iyH2,		112
.equ		_izH2,		128
.equ		_iqO,		144 
.equ		_iqH,		160 
.equ		_dxO,		176
.equ		_dyO,		192
.equ		_dzO,		208	
.equ		_dxH1,		224
.equ		_dyH1,		240
.equ		_dzH1,		256	
.equ		_dxH2,		272
.equ		_dyH2,		288
.equ		_dzH2,		304	
.equ		_qqO,		320
.equ		_qqH,		336
.equ		_rinvO,		352
.equ		_rinvH1,	368
.equ		_rinvH2,	384		
.equ		_rO,		400
.equ		_rH1,		416
.equ		_rH2,		432
.equ		_tsc,		448	
.equ		_two,		464
.equ		_c6,		480
.equ		_c12,		496
.equ		_six,		512
.equ		_twelve,	528
.equ		_vctot,		544
.equ		_vnbtot,	560
.equ		_fixO,		576
.equ		_fiyO,		592
.equ		_fizO,		608
.equ		_fixH1,		624
.equ		_fiyH1,		640
.equ		_fizH1,		656
.equ		_fixH2,		672
.equ		_fiyH2,		688
.equ		_fizH2,		704
.equ		_fjx,		720
.equ		_fjy,		736
.equ		_fjz,		752
.equ		_half,		768
.equ		_three,		784
.equ		_is3,		800
.equ		_ii3,		804
.equ		_ntia,		808	
.equ		_innerjjnr,	812
.equ		_innerk,	816
.equ		_salign,	820
	push ebp
	mov ebp,esp	
        push eax
        push ebx
        push ecx
        push edx
	push esi
	push edi
	sub esp, 824		/* local stack space */
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + _salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_two]
	movupd xmm2, [sse2_three]
	movupd xmm3, [sse2_six]
	movupd xmm4, [sse2_twelve]
	movsd xmm5, [ebp + _tabscale]
	
	movapd [esp + _half],  xmm0
	movapd [esp + _two],  xmm1
	movapd [esp + _three],  xmm2
	movapd [esp + _six],  xmm3
	movapd [esp + _twelve],  xmm4
	shufpd xmm5, xmm5, 0
	movapd [esp + _tsc], xmm5
	
	/* assume we have at least one i particle - start directly */
	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	mov   ebx, [ecx]	        /* ebx =ii */

	mov   edx, [ebp + _charge]
	movsd xmm3, [edx + ebx*8]	
	movsd xmm4, [edx + ebx*8 + 8]	
	movsd xmm5, [ebp + _facel]
	mulsd  xmm3, xmm5
	mulsd  xmm4, xmm5

	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	movapd [esp + _iqO], xmm3
	movapd [esp + _iqH], xmm4
	
	mov   edx, [ebp + _type]
	mov   ecx, [edx + ebx*4]
	shl   ecx, 1
	imul  ecx, [ebp + _ntype]      /* ecx = ntia = 2*ntype*type[ii0] */
	mov   [esp + _ntia], ecx		
.i3120_outer:
	mov   eax, [ebp + _shift]      /* eax = pointer into shift[] */
	mov   ebx, [eax]		/* ebx=shift[n] */
	add   [ebp + _shift],  4  /* advance pointer one step */
	
	lea   ebx, [ebx + ebx*2]        /* ebx=3*is */
	mov   [esp + _is3],ebx    	/* store is3 */

	mov   eax, [ebp + _shiftvec]   /* eax = base of shiftvec[] */

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	add   [ebp + _iinr],  4   /* advance pointer */
	mov   ebx, [ecx]	        /* ebx =ii */

	movapd xmm3, xmm0
	movapd xmm4, xmm1
	movapd xmm5, xmm2

	lea   ebx, [ebx + ebx*2]	/* ebx = 3*ii=ii3 */
	mov   eax, [ebp + _pos]        /* eax = base of pos[] */ 
	mov   [esp + _ii3], ebx

	addsd xmm3, [eax + ebx*8]
	addsd xmm4, [eax + ebx*8 + 8]
	addsd xmm5, [eax + ebx*8 + 16]		
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _ixO], xmm3
	movapd [esp + _iyO], xmm4
	movapd [esp + _izO], xmm5

	movsd xmm3, xmm0
	movsd xmm4, xmm1
	movsd xmm5, xmm2
	addsd xmm0, [eax + ebx*8 + 24]
	addsd xmm1, [eax + ebx*8 + 32]
	addsd xmm2, [eax + ebx*8 + 40]		
	addsd xmm3, [eax + ebx*8 + 48]
	addsd xmm4, [eax + ebx*8 + 56]
	addsd xmm5, [eax + ebx*8 + 64]		

	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _ixH1], xmm0
	movapd [esp + _iyH1], xmm1
	movapd [esp + _izH1], xmm2
	movapd [esp + _ixH2], xmm3
	movapd [esp + _iyH2], xmm4
	movapd [esp + _izH2], xmm5
	
	/* clear vctot and i forces */
	xorpd xmm4, xmm4
	movapd [esp + _vctot], xmm4
	movapd [esp + _vnbtot], xmm4
	movapd [esp + _fixO], xmm4
	movapd [esp + _fiyO], xmm4
	movapd [esp + _fizO], xmm4
	movapd [esp + _fixH1], xmm4
	movapd [esp + _fiyH1], xmm4
	movapd [esp + _fizH1], xmm4
	movapd [esp + _fixH2], xmm4
	movapd [esp + _fiyH2], xmm4
	movapd [esp + _fizH2], xmm4
	
	mov   eax, [ebp + _jindex]
	mov   ecx, [eax]	         /* jindex[n] */
	mov   edx, [eax + 4]	         /* jindex[n+1] */
	add   [ebp + _jindex],  4
	sub   edx, ecx                   /* number of innerloop atoms */

	mov   esi, [ebp + _pos]
	mov   edi, [ebp + _faction]	
	mov   eax, [ebp + _jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + _innerjjnr], eax     /* pointer to jjnr[nj0] */
	sub   edx,  2
	mov   [esp + _innerk], edx        /* number of innerloop atoms */
	jge   .i3120_unroll_loop
	jmp   .i3120_checksingle
.i3120_unroll_loop:
	/* twice unrolled innerloop here */
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]	
	mov   ebx, [edx + 4]

	add   [esp + _innerjjnr],  8 /* advance pointer (unrolled 2) */

	mov esi, [ebp + _charge]        /* base of charge[] */
	
	movlpd xmm3, [esi + eax*8]
	movhpd xmm3, [esi + ebx*8]
	movapd xmm4, xmm3	     
	mulpd  xmm3, [esp + _iqO]
	mulpd  xmm4, [esp + _iqH]
	movapd  [esp + _qqO], xmm3
	movapd  [esp + _qqH], xmm4	

	movd  mm0, eax		/* use mmx registers as temp storage */
	movd  mm1, ebx
	mov esi, [ebp + _type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov esi, [ebp + _nbfp]
	shl eax, 1	
	shl ebx, 1	
	mov edi, [esp + _ntia]
	add eax, edi
	add ebx, edi

	movupd xmm6, [esi + eax*8]	/* c6a c12a */
	movupd xmm7, [esi + ebx*8]	/* c6b c12b */
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0
	movd  ebx, mm1
	movapd [esp + _c6], xmm4
	movapd [esp + _c12], xmm6

	mov esi, [ebp + _pos]       /* base of pos[] */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */
	lea   ebx, [ebx + ebx*2]	

	/* move two coordinates to xmm0-xmm2 */	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]		

	/* move ixO-izO to xmm4-xmm6 */
	movapd xmm4, [esp + _ixO]
	movapd xmm5, [esp + _iyO]
	movapd xmm6, [esp + _izO]

	/* calc dr */
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	/* store dr */
	movapd [esp + _dxO], xmm4
	movapd [esp + _dyO], xmm5
	movapd [esp + _dzO], xmm6
	/* square it */
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6
	movapd xmm7, xmm4
	/* rsqO in xmm7 */

	/* move ixH1-izH1 to xmm4-xmm6 */
	movapd xmm4, [esp + _ixH1]
	movapd xmm5, [esp + _iyH1]
	movapd xmm6, [esp + _izH1]

	/* calc dr */
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	/* store dr */
	movapd [esp + _dxH1], xmm4
	movapd [esp + _dyH1], xmm5
	movapd [esp + _dzH1], xmm6
	/* square it */
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm6, xmm5
	addpd xmm6, xmm4
	/* rsqH1 in xmm6 */

	/* move ixH2-izH2 to xmm3-xmm5 */ 
	movapd xmm3, [esp + _ixH2]
	movapd xmm4, [esp + _iyH2]
	movapd xmm5, [esp + _izH2]

	/* calc dr */
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2

	/* store dr */
	movapd [esp + _dxH2], xmm3
	movapd [esp + _dyH2], xmm4
	movapd [esp + _dzH2], xmm5
	/* square it */
	mulpd xmm3,xmm3
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	addpd xmm5, xmm4
	addpd xmm5, xmm3
	/* rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 */

	/* start with rsqO - put seed in xmm2 */
	cvtpd2ps xmm2, xmm7	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulpd   xmm2, xmm7	/* rsq*lu*lu */
	subpd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulpd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulpd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm2, xmm7
	movapd xmm3, xmm4
	mulpd xmm4, xmm4	/* lu*lu */
	mulpd xmm2, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subpd xmm4, xmm2	/* 3-rsq*lu*lu */
	mulpd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulpd xmm4, [esp + _half] /* rinv */
	movapd  [esp + _rinvO], xmm4	/* rinvO in xmm4 */
	mulpd   xmm7, xmm4
	movapd  [esp + _rO], xmm7	/* r in xmm7 */
	
	/* rsqH1 - seed in xmm2 */
	cvtpd2ps xmm2, xmm6	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulpd   xmm2, xmm6	/* rsq*lu*lu */
	subpd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulpd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulpd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm2, xmm6
	movapd xmm3, xmm4
	mulpd xmm4, xmm4	/* lu*lu */
	mulpd xmm2, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subpd xmm4, xmm2	/* 3-rsq*lu*lu */
	mulpd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulpd xmm4, [esp + _half] /* rinv */
	movapd [esp + _rinvH1], xmm4	/* rinvH1 */
	mulpd  xmm6, xmm4
	movapd [esp + _rH1], xmm6	/* rH1 */
	
	/* rsqH2 - seed in xmm2 */
	cvtpd2ps xmm2, xmm5	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulpd   xmm2, xmm5	/* rsq*lu*lu */
	subpd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulpd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulpd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm2, xmm5
	movapd xmm3, xmm4
	mulpd xmm4, xmm4	/* lu*lu */
	mulpd xmm2, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subpd xmm4, xmm2	/* 3-rsq*lu*lu */
	mulpd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulpd xmm4, [esp + _half] /* rinv */
	movapd [esp + _rinvH2], xmm4 /* rinv */
	mulpd xmm5, xmm4
	movapd [esp + _rH2], xmm5 /* r */

	/* do O interactions */
	/* rO is still in xmm7 */
	movapd xmm0, [esp + _rinvO]
	mulpd   xmm7, [esp + _tsc]
	cvttpd2pi mm6, xmm7	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm7, xmm6
	movapd xmm1, xmm7	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	movd mm0, eax	
	movd mm1, ebx
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 
        mulpd  xmm6, xmm1       /* xmm6=Geps */
        mulpd  xmm7, xmm2       /* xmm7=Heps2 */
        addpd  xmm5, xmm6
        addpd  xmm5, xmm7       /* xmm5=Fp */       
        mulpd  xmm7, [esp + _two]       /* two*Heps2 */
        movapd xmm0, [esp + _qqO]
        addpd  xmm7, xmm6
        addpd  xmm7, xmm5 /* xmm7=FF */
        mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
        addpd  xmm5, xmm4 /* xmm5=VV */
        mulpd  xmm5, xmm0 /* vcoul=qq*VV */ 
        mulpd  xmm0, xmm7 /* fijC=FF*qq */

	/* do nontable L-J */
	movapd xmm2, [esp + _rinvO]
	mulpd  xmm2, xmm2

        /* at this point mm5 contains vcoul and xmm0 fijC */
        /* increment vcoul - then we can get rid of mm5 */
        addpd  xmm5, [esp + _vctot]
        movapd [esp + _vctot], xmm5 

	movapd xmm1, xmm2
	mulpd  xmm1, xmm1
	mulpd  xmm1, xmm2	/* xmm1=rinvsix */
	movapd xmm4, xmm1
	mulpd  xmm4, xmm4	/* xmm4=rinvtwelve */
	mulpd  xmm1, [esp + _c6]
	mulpd  xmm4, [esp + _c12]
	movapd xmm3, xmm4
	subpd  xmm3, xmm1	/* xmm3=vnb12-vnb6 */
	mulpd  xmm1, [esp + _six]
	mulpd  xmm4, [esp + _twelve]
	subpd  xmm4, xmm1
	addpd  xmm3, [esp + _vnbtot]
	mulpd  xmm4, [esp + _rinvO]
	mulpd  xmm0, [esp + _tsc]
	subpd  xmm4, xmm0
	movapd [esp + _vnbtot], xmm3
	mulpd  xmm4, [esp + _rinvO]	

	movapd xmm0, [esp + _dxO]
	movapd xmm1, [esp + _dyO]
	movapd xmm2, [esp + _dzO]
	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4	/* tx in xmm0-xmm2 */

	/* update O forces */
	movapd xmm3, [esp + _fixO]
	movapd xmm4, [esp + _fiyO]
	movapd xmm7, [esp + _fizO]
	addpd  xmm3, xmm0
	addpd  xmm4, xmm1
	addpd  xmm7, xmm2
	movapd [esp + _fixO], xmm3
	movapd [esp + _fiyO], xmm4
	movapd [esp + _fizO], xmm7
	/* update j forces with water O */
	movapd [esp + _fjx], xmm0
	movapd [esp + _fjy], xmm1
	movapd [esp + _fjz], xmm2

	/* Done with O interactions - now H1! */
	movapd xmm7, [esp + _rH1]
	mulpd xmm7, [esp + _tsc]
	cvttpd2pi mm6, xmm7	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm7, xmm6
	movapd xmm1, xmm7	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	mulpd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqH]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 /* xmm7=FF */
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulpd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */
        /* increment vcoul */
	xorpd  xmm4, xmm4
        addpd  xmm5, [esp + _vctot]
	mulpd  xmm3, [esp + _rinvH1]
        movapd [esp + _vctot], xmm5 
	mulpd  xmm3, [esp + _tsc]
	subpd xmm4, xmm3

	movapd xmm0, [esp + _dxH1]
	movapd xmm1, [esp + _dyH1]
	movapd xmm2, [esp + _dzH1]
	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4

	/* update H1 forces */
	movapd xmm3, [esp + _fixH1]
	movapd xmm4, [esp + _fiyH1]
	movapd xmm7, [esp + _fizH1]
	addpd  xmm3, xmm0
	addpd  xmm4, xmm1
	addpd  xmm7, xmm2
	movapd [esp + _fixH1], xmm3
	movapd [esp + _fiyH1], xmm4
	movapd [esp + _fizH1], xmm7
	/* update j forces with water H1 */
	addpd  xmm0, [esp + _fjx]
	addpd  xmm1, [esp + _fjy]
	addpd  xmm2, [esp + _fjz]
	movapd [esp + _fjx], xmm0
	movapd [esp + _fjy], xmm1
	movapd [esp + _fjz], xmm2

	/* Done with H1, finally we do H2 interactions */
	movapd xmm7, [esp + _rH2]
	mulpd   xmm7, [esp + _tsc]
	cvttpd2pi mm6, xmm7	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm7, xmm6
	movapd xmm1, xmm7	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	mulpd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqH]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 /* xmm7=FF */
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulpd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */
        /* increment vcoul */
	xorpd  xmm4, xmm4
        addpd  xmm5, [esp + _vctot]
	mulpd  xmm3, [esp + _rinvH2]
        movapd [esp + _vctot], xmm5 
	mulpd  xmm3, [esp + _tsc]
	subpd  xmm4, xmm3

	movapd xmm0, [esp + _dxH2]
	movapd xmm1, [esp + _dyH2]
	movapd xmm2, [esp + _dzH2]
	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4

        movd eax, mm0   
        movd ebx, mm1
	
	/* update H2 forces */
	movapd xmm3, [esp + _fixH2]
	movapd xmm4, [esp + _fiyH2]
	movapd xmm7, [esp + _fizH2]
	addpd  xmm3, xmm0
	addpd  xmm4, xmm1
	addpd  xmm7, xmm2
	movapd [esp + _fixH2], xmm3
	movapd [esp + _fiyH2], xmm4
	movapd [esp + _fizH2], xmm7

	mov edi, [ebp + _faction]
	/* update j forces */
	addpd  xmm0, [esp + _fjx]
	addpd  xmm1, [esp + _fjy]
	addpd  xmm2, [esp + _fjz]

	/* the fj's - start by accumulating forces from memory */
	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	movhpd xmm3, [edi + ebx*8]
	movhpd xmm4, [edi + ebx*8 + 8]
	movhpd xmm5, [edi + ebx*8 + 16]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5
	movhpd [edi + ebx*8], xmm3
	movhpd [edi + ebx*8 + 8], xmm4
	movhpd [edi + ebx*8 + 16], xmm5
			
	/* should we do one more iteration? */
	sub   [esp + _innerk],  2
	jl    .i3120_checksingle
	jmp   .i3120_unroll_loop
.i3120_checksingle:	
	mov   edx, [esp + _innerk]
	and   edx, 1
	jnz   .i3120_dosingle
	jmp   .i3120_updateouterdata
.i3120_dosingle:
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]

	mov esi, [ebp + _charge]        /* base of charge[] */
	xorpd xmm3, xmm3	
	movlpd xmm3, [esi + eax*8]
	movapd xmm4, xmm3	     
	mulpd  xmm3, [esp + _iqO]
	mulpd  xmm4, [esp + _iqH]

	movd  mm0, eax		/* use mmx registers as temp storage */
	movapd  [esp + _qqO], xmm3
	movapd  [esp + _qqH], xmm4	

	mov esi, [ebp + _type]
	mov eax, [esi + eax*4]
	mov esi, [ebp + _nbfp]
	shl eax, 1	
	mov edi, [esp + _ntia]
	add eax, edi

	movupd xmm6, [esi + eax*8]	/* c6a c12a */
	xorpd xmm7, xmm7
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0
	movapd [esp + _c6], xmm4
	movapd [esp + _c12], xmm6
	
	mov esi, [ebp + _pos]       /* base of pos[] */
	lea   eax, [eax + eax*2]         /* replace jnr with j3 */
	
	/* move coords to xmm0-xmm2 */
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]

	/* move ixO-izO to xmm4-xmm6 */
	movapd xmm4, [esp + _ixO]
	movapd xmm5, [esp + _iyO]
	movapd xmm6, [esp + _izO]

	/* calc dr */
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	/* store dr */
	movapd [esp + _dxO], xmm4
	movapd [esp + _dyO], xmm5
	movapd [esp + _dzO], xmm6
	/* square it */
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6
	movapd xmm7, xmm4
	/* rsqO in xmm7 */

	/* move ixH1-izH1 to xmm4-xmm6 */
	movapd xmm4, [esp + _ixH1]
	movapd xmm5, [esp + _iyH1]
	movapd xmm6, [esp + _izH1]

	/* calc dr */
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	/* store dr */
	movapd [esp + _dxH1], xmm4
	movapd [esp + _dyH1], xmm5
	movapd [esp + _dzH1], xmm6
	/* square it */
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm6, xmm5
	addsd xmm6, xmm4
	/* rsqH1 in xmm6 */

	/* move ixH2-izH2 to xmm3-xmm5 */ 
	movapd xmm3, [esp + _ixH2]
	movapd xmm4, [esp + _iyH2]
	movapd xmm5, [esp + _izH2]

	/* calc dr */
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2

	/* store dr */
	movapd [esp + _dxH2], xmm3
	movapd [esp + _dyH2], xmm4
	movapd [esp + _dzH2], xmm5
	/* square it */
	mulsd xmm3,xmm3
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	addsd xmm5, xmm4
	addsd xmm5, xmm3
	/* rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 */

	/* start with rsqO - put seed in xmm2 */
	cvtsd2ss xmm2, xmm7	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulsd   xmm2, xmm7	/* rsq*lu*lu */
	subsd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulsd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulsd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm2, xmm7
	movapd xmm3, xmm4
	mulsd xmm4, xmm4	/* lu*lu */
	mulsd xmm2, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subsd xmm4, xmm2	/* 3-rsq*lu*lu */
	mulsd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulsd xmm4, [esp + _half] /* rinv */
	movapd  [esp + _rinvO], xmm4	/* rinvO in xmm4 */
	mulsd   xmm7, xmm4
	movapd  [esp + _rO], xmm7	/* r in xmm7 */
	
	/* rsqH1 - seed in xmm2 */
	cvtsd2ss xmm2, xmm6	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulsd   xmm2, xmm6	/* rsq*lu*lu */
	subsd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulsd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulsd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm2, xmm6
	movapd xmm3, xmm4
	mulsd xmm4, xmm4	/* lu*lu */
	mulsd xmm2, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subsd xmm4, xmm2	/* 3-rsq*lu*lu */
	mulsd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulsd xmm4, [esp + _half] /* rinv */
	movapd [esp + _rinvH1], xmm4	/* rinvH1 */
	mulsd  xmm6, xmm4
	movapd [esp + _rH1], xmm6	/* rH1 */
	
	/* rsqH2 - seed in xmm2 */
	cvtsd2ss xmm2, xmm5	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulsd   xmm2, xmm5	/* rsq*lu*lu */
	subsd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulsd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulsd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm2, xmm5
	movapd xmm3, xmm4
	mulsd xmm4, xmm4	/* lu*lu */
	mulsd xmm2, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subsd xmm4, xmm2	/* 3-rsq*lu*lu */
	mulsd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulsd xmm4, [esp + _half] /* rinv */
	movapd [esp + _rinvH2], xmm4 /* rinv */
	mulsd xmm5, xmm4
	movapd [esp + _rH2], xmm5 /* r */

	/* do O interactions */
	movd mm0, eax	
	/* rO is still in xmm7 */
	movapd xmm0, [esp + _rinvO]
	mulsd   xmm7, [esp + _tsc]
	cvttsd2si eax, xmm7	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm7, xmm6
	movapd xmm1, xmm7	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 
        mulsd  xmm6, xmm1       /* xmm6=Geps */
        mulsd  xmm7, xmm2       /* xmm7=Heps2 */
        addsd  xmm5, xmm6
        addsd  xmm5, xmm7       /* xmm5=Fp */       
        mulsd  xmm7, [esp + _two]       /* two*Heps2 */
        movapd xmm0, [esp + _qqO]
        addsd  xmm7, xmm6
        addsd  xmm7, xmm5 /* xmm7=FF */
        mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
        addsd  xmm5, xmm4 /* xmm5=VV */
        mulsd  xmm5, xmm0 /* vcoul=qq*VV */ 
        mulsd  xmm0, xmm7 /* fijC=FF*qq */

	/* do nontable L-J */
	movapd xmm2, [esp + _rinvO]
	mulsd  xmm2, xmm2

        /* at this point mm5 contains vcoul and xmm0 fijC */
        /* increment vcoul - then we can get rid of mm5 */
        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5 

	movapd xmm1, xmm2
	mulsd  xmm1, xmm1
	mulsd  xmm1, xmm2	/* xmm1=rinvsix */
	movapd xmm4, xmm1
	mulsd  xmm4, xmm4	/* xmm4=rinvtwelve */
	mulsd  xmm1, [esp + _c6]
	mulsd  xmm4, [esp + _c12]
	movapd xmm3, xmm4
	subsd  xmm3, xmm1	/* xmm3=vnb12-vnb6 */
	mulsd  xmm1, [esp + _six]
	mulsd  xmm4, [esp + _twelve]
	subsd  xmm4, xmm1
	addsd  xmm3, [esp + _vnbtot]
	mulsd  xmm4, [esp + _rinvO]
	mulsd  xmm0, [esp + _tsc]
	subsd  xmm4, xmm0
	movlpd [esp + _vnbtot], xmm3
	mulsd  xmm4, [esp + _rinvO]	

	movapd xmm0, [esp + _dxO]
	movapd xmm1, [esp + _dyO]
	movapd xmm2, [esp + _dzO]
	mulsd  xmm0, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm2, xmm4	/* tx in xmm0-xmm2 */

	/* update O forces */
	movapd xmm3, [esp + _fixO]
	movapd xmm4, [esp + _fiyO]
	movapd xmm7, [esp + _fizO]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm7, xmm2
	movlpd [esp + _fixO], xmm3
	movlpd [esp + _fiyO], xmm4
	movlpd [esp + _fizO], xmm7
	/* update j forces with water O */
	movlpd [esp + _fjx], xmm0
	movlpd [esp + _fjy], xmm1
	movlpd [esp + _fjz], xmm2

	/* Done with O interactions - now H1! */
	movapd xmm7, [esp + _rH1]
	mulpd xmm7, [esp + _tsc]
	cvttsd2si eax, xmm7	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subpd xmm7, xmm6
	movapd xmm1, xmm7	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	mulsd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqH]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 /* xmm7=FF */
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulsd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */
        /* increment vcoul */
	xorpd  xmm4, xmm4
        addsd  xmm5, [esp + _vctot]
	mulsd  xmm3, [esp + _rinvH1]
        movlpd [esp + _vctot], xmm5 
	mulsd  xmm3, [esp + _tsc]
	subsd xmm4, xmm3

	movapd xmm0, [esp + _dxH1]
	movapd xmm1, [esp + _dyH1]
	movapd xmm2, [esp + _dzH1]
	mulsd  xmm0, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm2, xmm4

	/* update H1 forces */
	movapd xmm3, [esp + _fixH1]
	movapd xmm4, [esp + _fiyH1]
	movapd xmm7, [esp + _fizH1]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm7, xmm2
	movlpd [esp + _fixH1], xmm3
	movlpd [esp + _fiyH1], xmm4
	movlpd [esp + _fizH1], xmm7
	/* update j forces with water H1 */
	addsd  xmm0, [esp + _fjx]
	addsd  xmm1, [esp + _fjy]
	addsd  xmm2, [esp + _fjz]
	movlpd [esp + _fjx], xmm0
	movlpd [esp + _fjy], xmm1
	movlpd [esp + _fjz], xmm2

	/* Done with H1, finally we do H2 interactions */
	movapd xmm7, [esp + _rH2]
	mulsd   xmm7, [esp + _tsc]
	cvttsd2si eax, xmm7	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm7, xmm6
	movapd xmm1, xmm7	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	mulsd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqH]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 /* xmm7=FF */
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulsd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */
        /* increment vcoul */
	xorpd  xmm4, xmm4
        addsd  xmm5, [esp + _vctot]
	mulsd  xmm3, [esp + _rinvH2]
        movlpd [esp + _vctot], xmm5 
	mulsd  xmm3, [esp + _tsc]
	subsd  xmm4, xmm3

	movapd xmm0, [esp + _dxH2]
	movapd xmm1, [esp + _dyH2]
	movapd xmm2, [esp + _dzH2]
	mulsd  xmm0, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm2, xmm4

        movd eax, mm0   
	
	/* update H2 forces */
	movapd xmm3, [esp + _fixH2]
	movapd xmm4, [esp + _fiyH2]
	movapd xmm7, [esp + _fizH2]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm7, xmm2
	movlpd [esp + _fixH2], xmm3
	movlpd [esp + _fiyH2], xmm4
	movlpd [esp + _fizH2], xmm7

	mov edi, [ebp + _faction]
	/* update j forces */
	addsd  xmm0, [esp + _fjx]
	addsd  xmm1, [esp + _fjy]
	addsd  xmm2, [esp + _fjz]

	/* the fj's - start by accumulating forces from memory */
	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5

.i3120_updateouterdata:
	mov   ecx, [esp + _ii3]
	mov   edi, [ebp + _faction]
	mov   esi, [ebp + _fshift]
	mov   edx, [esp + _is3]

	/* accumulate  Oi forces in xmm0, xmm1, xmm2 */
	movapd xmm0, [esp + _fixO]
	movapd xmm1, [esp + _fiyO]
	movapd xmm2, [esp + _fizO]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 /* sum is in low xmm0-xmm2 */

	movapd xmm3, xmm0	
	movapd xmm4, xmm1	
	movapd xmm5, xmm2	

	/* increment i force */
	movsd  xmm3, [edi + ecx*8]
	movsd  xmm4, [edi + ecx*8 + 8]
	movsd  xmm5, [edi + ecx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8],     xmm3
	movsd  [edi + ecx*8 + 8], xmm4
	movsd  [edi + ecx*8 + 16], xmm5

	/* accumulate force in xmm6/xmm7 for fshift */
	movapd xmm6, xmm0
	movsd xmm7, xmm2
	unpcklpd xmm6, xmm1

	/* accumulate H1i forces in xmm0, xmm1, xmm2 */
	movapd xmm0, [esp + _fixH1]
	movapd xmm1, [esp + _fiyH1]
	movapd xmm2, [esp + _fizH1]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 /* sum is in low xmm0-xmm2 */

	/* increment i force */
	movsd  xmm3, [edi + ecx*8 + 24]
	movsd  xmm4, [edi + ecx*8 + 32]
	movsd  xmm5, [edi + ecx*8 + 40]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8 + 24], xmm3
	movsd  [edi + ecx*8 + 32], xmm4
	movsd  [edi + ecx*8 + 40], xmm5

	/* accumulate force in xmm6/xmm7 for fshift */
	addsd xmm7, xmm2
	unpcklpd xmm0, xmm1
	addpd xmm6, xmm0

	/* accumulate H2i forces in xmm0, xmm1, xmm2 */
	movapd xmm0, [esp + _fixH2]
	movapd xmm1, [esp + _fiyH2]
	movapd xmm2, [esp + _fizH2]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 /* sum is in low xmm0-xmm2 */

	movapd xmm3, xmm0	
	movapd xmm4, xmm1	
	movapd xmm5, xmm2	

	/* increment i force */
	movsd  xmm3, [edi + ecx*8 + 48]
	movsd  xmm4, [edi + ecx*8 + 56]
	movsd  xmm5, [edi + ecx*8 + 64]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8 + 48], xmm3
	movsd  [edi + ecx*8 + 56], xmm4
	movsd  [edi + ecx*8 + 64], xmm5

	/* accumulate force in xmm6/xmm7 for fshift */
	addsd xmm7, xmm2
	unpcklpd xmm0, xmm1
	addpd xmm6, xmm0

	/* increment fshift force */
	movupd xmm3, [esi + edx*8]
	movsd  xmm4, [esi + edx*8 + 16]
	addpd  xmm3, xmm6
	addsd  xmm4, xmm7
	movupd [esi + edx*8],    xmm3
	movsd  [esi + edx*8 + 16], xmm4

	mov   edx, [ebp + _gid]  
	mov   edx, [edx]
	add   [ebp + _gid],  4	

	/* accumulate total potential energy and update it */
	movapd xmm7, [esp + _vctot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */
        
	/* add earlier value from mem */
	mov   eax, [ebp + _Vc]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* accumulate total lj energy and update it */
	movapd xmm7, [esp + _vnbtot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */

	/* add earlier value from mem */
	mov   eax, [ebp + _Vnb]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* finish if last */
	mov   ecx, [ebp + _nri]
	dec ecx
	jecxz .i3120_end
	/* not last, iterate once more! */ 
	mov [ebp + _nri], ecx
	jmp .i3120_outer
.i3120_end:
	emms
	mov eax, [esp + _salign]
	add esp, eax
	add esp, 824
	pop edi
	pop esi
        pop edx
        pop ecx
        pop ebx
        pop eax
	leave
	ret
	

	
.globl inl3130_sse2
	.type inl3130_sse2,@function
inl3130_sse2:	
.equ		_nri,		8
.equ		_iinr,		12
.equ		_jindex,	16
.equ		_jjnr,		20
.equ		_shift,		24
.equ		_shiftvec,	28
.equ		_fshift,	32
.equ		_gid,		36
.equ		_pos,		40		
.equ		_faction,	44
.equ		_charge,	48
.equ		_facel,		52 /* double */ 
.equ		_Vc,		60	
.equ		_type,		64
.equ		_ntype,		68
.equ		_nbfp,		72	
.equ		_Vnb,		76
.equ		_tabscale,	80 /* double */ 	
.equ		_VFtab,		88
	/* stack offsets for local variables */ 
	/* bottom of stack is cache-aligned for sse2 use */
.equ		_ixO,		0
.equ		_iyO,		16
.equ		_izO,		32
.equ		_ixH1,		48
.equ		_iyH1,		64
.equ		_izH1,		80
.equ		_ixH2,		96
.equ		_iyH2,		112
.equ		_izH2,		128
.equ		_jxO,		144
.equ		_jyO,		160
.equ		_jzO,		176
.equ		_jxH1,		192
.equ		_jyH1,		208
.equ		_jzH1,		224 
.equ		_jxH2,		240
.equ		_jyH2,		256
.equ		_jzH2,		272
.equ		_dxOO,		288
.equ		_dyOO,		304
.equ		_dzOO,		320	
.equ		_dxOH1,		336
.equ		_dyOH1,		352
.equ		_dzOH1,		368	
.equ		_dxOH2,		384
.equ		_dyOH2,		400
.equ		_dzOH2,		416	
.equ		_dxH1O,		432
.equ		_dyH1O,		448
.equ		_dzH1O,		464	
.equ		_dxH1H1,	480
.equ		_dyH1H1,	496
.equ		_dzH1H1,	512	
.equ		_dxH1H2,	528
.equ		_dyH1H2,	544
.equ		_dzH1H2,	560	
.equ		_dxH2O,		576
.equ		_dyH2O,		592
.equ		_dzH2O,		608	
.equ		_dxH2H1,	624
.equ		_dyH2H1,	640
.equ		_dzH2H1,	656	
.equ		_dxH2H2,	672
.equ		_dyH2H2,	688
.equ		_dzH2H2,	704
.equ		_qqOO,		720
.equ		_qqOH,		736
.equ		_qqHH,		752
.equ		_two,		768
.equ		_tsc,		784
.equ		_c6,		800
.equ		_c12,		816		 
.equ		_six,		832
.equ		_twelve,	848		 
.equ		_vctot,		864
.equ		_vnbtot,	880
.equ		_fixO,		896
.equ		_fiyO,		912
.equ		_fizO,		928
.equ		_fixH1,		944
.equ		_fiyH1,		960
.equ		_fizH1,		976
.equ		_fixH2,		992
.equ		_fiyH2,		1008
.equ		_fizH2,		1024
.equ		_fjxO,		1040
.equ		_fjyO,		1056
.equ		_fjzO,		1072
.equ		_fjxH1,		1088
.equ		_fjyH1,		1104
.equ		_fjzH1,		1120
.equ		_fjxH2,		1136
.equ		_fjyH2,		1152
.equ		_fjzH2,		1168
.equ		_half,		1184
.equ		_three,		1200
.equ		_rsqOO,		1216
.equ		_rsqOH1,	1232
.equ		_rsqOH2,	1248
.equ		_rsqH1O,	1264
.equ		_rsqH1H1,	1280
.equ		_rsqH1H2,	1296
.equ		_rsqH2O,	1312
.equ		_rsqH2H1,	1328
.equ		_rsqH2H2,	1344
.equ		_rinvOO,	1360
.equ		_rinvOH1,	1376
.equ		_rinvOH2,	1392
.equ		_rinvH1O,	1408
.equ		_rinvH1H1,	1424
.equ		_rinvH1H2,	1440
.equ		_rinvH2O,	1456
.equ		_rinvH2H1,	1472
.equ		_rinvH2H2,	1488
.equ		_fstmp,		1504	
.equ		_is3,		1520
.equ		_ii3,		1524
.equ		_innerjjnr,	1528
.equ		_innerk,	1532
.equ		_salign,	1536							
	push ebp
	mov ebp,esp	
        push eax
        push ebx
        push ecx
        push edx
	push esi
	push edi
	sub esp, 1540		/* local stack space */
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + _salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_two]
	movupd xmm2, [sse2_three]
	movupd xmm3, [sse2_six]
	movupd xmm4, [sse2_twelve]
	movsd xmm5, [ebp + _tabscale]
	movapd [esp + _half],  xmm0
	movapd [esp + _two],  xmm1
	movapd [esp + _three], xmm2
	movapd [esp + _six], xmm3
	movapd [esp + _twelve], xmm4
	shufpd xmm5, xmm5, 0
	movapd [esp + _tsc],  xmm5

	/* assume we have at least one i particle - start directly */
	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	mov   ebx, [ecx]	        /* ebx =ii */

	mov   edx, [ebp + _charge]
	movsd xmm3, [edx + ebx*8]	
	movsd xmm4, xmm3	
	movsd xmm5, [edx + ebx*8 + 8]	
	movsd xmm6, [ebp + _facel]
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm5
	mulsd  xmm5, xmm5
	mulsd  xmm3, xmm6
	mulsd  xmm4, xmm6
	mulsd  xmm5, xmm6
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _qqOO], xmm3
	movapd [esp + _qqOH], xmm4
	movapd [esp + _qqHH], xmm5
		
	xorpd xmm0, xmm0
	mov   edx, [ebp + _type]
	mov   ecx, [edx + ebx*4]
	shl   ecx, 1
	mov   edx, ecx
	imul  ecx, [ebp + _ntype]      /* ecx = ntia = 2*ntype*type[ii0] */
	add   edx, ecx
	mov   eax, [ebp + _nbfp]
	movupd xmm0, [eax + edx*8] 
	movhlps xmm1, xmm0
	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	movapd [esp + _c6], xmm0
	movapd [esp + _c12], xmm1

.i3130_outer:
	mov   eax, [ebp + _shift]      /* eax = pointer into shift[] */
	mov   ebx, [eax]		/* ebx=shift[n] */
	add   [ebp + _shift],  4  /* advance pointer one step */
	
	lea   ebx, [ebx + ebx*2]        /* ebx=3*is */
	mov   [esp + _is3],ebx    	/* store is3 */

	mov   eax, [ebp + _shiftvec]   /* eax = base of shiftvec[] */

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	add   [ebp + _iinr],  4   /* advance pointer */
	mov   ebx, [ecx]	        /* ebx =ii */

	lea   ebx, [ebx + ebx*2]	/* ebx = 3*ii=ii3 */
	mov   eax, [ebp + _pos]        /* eax = base of pos[] */ 
	mov   [esp + _ii3], ebx	
	
	movapd xmm3, xmm0
	movapd xmm4, xmm1
	movapd xmm5, xmm2
	addsd xmm3, [eax + ebx*8]
	addsd xmm4, [eax + ebx*8 + 8]
	addsd xmm5, [eax + ebx*8 + 16]		
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _ixO], xmm3
	movapd [esp + _iyO], xmm4
	movapd [esp + _izO], xmm5

	movsd xmm3, xmm0
	movsd xmm4, xmm1
	movsd xmm5, xmm2
	addsd xmm0, [eax + ebx*8 + 24]
	addsd xmm1, [eax + ebx*8 + 32]
	addsd xmm2, [eax + ebx*8 + 40]		
	addsd xmm3, [eax + ebx*8 + 48]
	addsd xmm4, [eax + ebx*8 + 56]
	addsd xmm5, [eax + ebx*8 + 64]		

	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _ixH1], xmm0
	movapd [esp + _iyH1], xmm1
	movapd [esp + _izH1], xmm2
	movapd [esp + _ixH2], xmm3
	movapd [esp + _iyH2], xmm4
	movapd [esp + _izH2], xmm5

	/* clear vctot and i forces */
	xorpd xmm4, xmm4
	movapd [esp + _vctot], xmm4
	movapd [esp + _vnbtot], xmm4
	movapd [esp + _fixO], xmm4
	movapd [esp + _fiyO], xmm4
	movapd [esp + _fizO], xmm4
	movapd [esp + _fixH1], xmm4
	movapd [esp + _fiyH1], xmm4
	movapd [esp + _fizH1], xmm4
	movapd [esp + _fixH2], xmm4
	movapd [esp + _fiyH2], xmm4
	movapd [esp + _fizH2], xmm4
	
	mov   eax, [ebp + _jindex]
	mov   ecx, [eax]	         /* jindex[n] */
	mov   edx, [eax + 4]	         /* jindex[n+1] */
	add   [ebp + _jindex],  4
	sub   edx, ecx                   /* number of innerloop atoms */

	mov   esi, [ebp + _pos]
	mov   edi, [ebp + _faction]	
	mov   eax, [ebp + _jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + _innerjjnr], eax     /* pointer to jjnr[nj0] */
	sub   edx,  2
	mov   [esp + _innerk], edx        /* number of innerloop atoms */
	jge   .i3130_unroll_loop
	jmp   .i3130_checksingle
.i3130_unroll_loop:	
	/* twice unrolled innerloop here */
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]	
	mov   ebx, [edx + 4] 
	
	add   [esp + _innerjjnr], 8 /* advance pointer (unrolled 2) */

	mov esi, [ebp + _pos]       /* base of pos[] */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */
	lea   ebx, [ebx + ebx*2]	
	
	/* move j coordinates to local temp variables */
	movlpd xmm2, [esi + eax*8]
	movlpd xmm3, [esi + eax*8 + 8]
	movlpd xmm4, [esi + eax*8 + 16]
	movlpd xmm5, [esi + eax*8 + 24]
	movlpd xmm6, [esi + eax*8 + 32]
	movlpd xmm7, [esi + eax*8 + 40]
	movhpd xmm2, [esi + ebx*8]
	movhpd xmm3, [esi + ebx*8 + 8]
	movhpd xmm4, [esi + ebx*8 + 16]
	movhpd xmm5, [esi + ebx*8 + 24]
	movhpd xmm6, [esi + ebx*8 + 32]
	movhpd xmm7, [esi + ebx*8 + 40]
	movapd 	[esp + _jxO], xmm2
	movapd 	[esp + _jyO], xmm3
	movapd 	[esp + _jzO], xmm4
	movapd 	[esp + _jxH1], xmm5
	movapd 	[esp + _jyH1], xmm6
	movapd 	[esp + _jzH1], xmm7
	movlpd xmm2, [esi + eax*8 + 48]
	movlpd xmm3, [esi + eax*8 + 56]
	movlpd xmm4, [esi + eax*8 + 64]
	movhpd xmm2, [esi + ebx*8 + 48]
	movhpd xmm3, [esi + ebx*8 + 56]
	movhpd xmm4, [esi + ebx*8 + 64]
	movapd 	[esp + _jxH2], xmm2
	movapd 	[esp + _jyH2], xmm3
	movapd 	[esp + _jzH2], xmm4
	
	movapd xmm0, [esp + _ixO]
	movapd xmm1, [esp + _iyO]
	movapd xmm2, [esp + _izO]
	movapd xmm3, [esp + _ixO]
	movapd xmm4, [esp + _iyO]
	movapd xmm5, [esp + _izO]
	subpd  xmm0, [esp + _jxO]
	subpd  xmm1, [esp + _jyO]
	subpd  xmm2, [esp + _jzO]
	subpd  xmm3, [esp + _jxH1]
	subpd  xmm4, [esp + _jyH1]
	subpd  xmm5, [esp + _jzH1]
	movapd [esp + _dxOO], xmm0
	movapd [esp + _dyOO], xmm1
	movapd [esp + _dzOO], xmm2
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	movapd [esp + _dxOH1], xmm3
	movapd [esp + _dyOH1], xmm4
	movapd [esp + _dzOH1], xmm5
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + _rsqOO], xmm0
	movapd [esp + _rsqOH1], xmm3

	movapd xmm0, [esp + _ixO]
	movapd xmm1, [esp + _iyO]
	movapd xmm2, [esp + _izO]
	movapd xmm3, [esp + _ixH1]
	movapd xmm4, [esp + _iyH1]
	movapd xmm5, [esp + _izH1]
	subpd  xmm0, [esp + _jxH2]
	subpd  xmm1, [esp + _jyH2]
	subpd  xmm2, [esp + _jzH2]
	subpd  xmm3, [esp + _jxO]
	subpd  xmm4, [esp + _jyO]
	subpd  xmm5, [esp + _jzO]
	movapd [esp + _dxOH2], xmm0
	movapd [esp + _dyOH2], xmm1
	movapd [esp + _dzOH2], xmm2
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	movapd [esp + _dxH1O], xmm3
	movapd [esp + _dyH1O], xmm4
	movapd [esp + _dzH1O], xmm5
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + _rsqOH2], xmm0
	movapd [esp + _rsqH1O], xmm3

	movapd xmm0, [esp + _ixH1]
	movapd xmm1, [esp + _iyH1]
	movapd xmm2, [esp + _izH1]
	movapd xmm3, [esp + _ixH1]
	movapd xmm4, [esp + _iyH1]
	movapd xmm5, [esp + _izH1]
	subpd  xmm0, [esp + _jxH1]
	subpd  xmm1, [esp + _jyH1]
	subpd  xmm2, [esp + _jzH1]
	subpd  xmm3, [esp + _jxH2]
	subpd  xmm4, [esp + _jyH2]
	subpd  xmm5, [esp + _jzH2]
	movapd [esp + _dxH1H1], xmm0
	movapd [esp + _dyH1H1], xmm1
	movapd [esp + _dzH1H1], xmm2
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	movapd [esp + _dxH1H2], xmm3
	movapd [esp + _dyH1H2], xmm4
	movapd [esp + _dzH1H2], xmm5
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + _rsqH1H1], xmm0
	movapd [esp + _rsqH1H2], xmm3

	movapd xmm0, [esp + _ixH2]
	movapd xmm1, [esp + _iyH2]
	movapd xmm2, [esp + _izH2]
	movapd xmm3, [esp + _ixH2]
	movapd xmm4, [esp + _iyH2]
	movapd xmm5, [esp + _izH2]
	subpd  xmm0, [esp + _jxO]
	subpd  xmm1, [esp + _jyO]
	subpd  xmm2, [esp + _jzO]
	subpd  xmm3, [esp + _jxH1]
	subpd  xmm4, [esp + _jyH1]
	subpd  xmm5, [esp + _jzH1]
	movapd [esp + _dxH2O], xmm0
	movapd [esp + _dyH2O], xmm1
	movapd [esp + _dzH2O], xmm2
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	movapd [esp + _dxH2H1], xmm3
	movapd [esp + _dyH2H1], xmm4
	movapd [esp + _dzH2H1], xmm5
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm4, xmm3
	addpd  xmm4, xmm5
	movapd [esp + _rsqH2O], xmm0
	movapd [esp + _rsqH2H1], xmm4

	movapd xmm0, [esp + _ixH2]
	movapd xmm1, [esp + _iyH2]
	movapd xmm2, [esp + _izH2]
	subpd  xmm0, [esp + _jxH2]
	subpd  xmm1, [esp + _jyH2]
	subpd  xmm2, [esp + _jzH2]
	movapd [esp + _dxH2H2], xmm0
	movapd [esp + _dyH2H2], xmm1
	movapd [esp + _dzH2H2], xmm2
	mulpd xmm0, xmm0
	mulpd xmm1, xmm1
	mulpd xmm2, xmm2
	addpd xmm0, xmm1
	addpd xmm0, xmm2
	movapd [esp + _rsqH2H2], xmm0
		
	/* start doing invsqrt use rsq values in xmm0, xmm4 */
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulpd   xmm1, xmm1	/* luA*luA */
	mulpd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	mulpd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subpd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm3, [esp + _half] /* iter1 */
	mulpd   xmm7, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulpd   xmm3, xmm3	/* luA*luA */
	mulpd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	mulpd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subpd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm1, [esp + _half] /* rinv */
	mulpd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvH2H2], xmm1
	movapd [esp + _rinvH2H1], xmm5

	movapd xmm0, [esp + _rsqOO]
	movapd xmm4, [esp + _rsqOH1]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulpd   xmm1, xmm1	/* luA*luA */
	mulpd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	mulpd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subpd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm3, [esp + _half] /* iter1 of  */
	mulpd   xmm7, [esp + _half] /* iter1 of  */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulpd   xmm3, xmm3	/* luA*luA */
	mulpd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	mulpd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subpd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm1, [esp + _half] /* rinv */
	mulpd   xmm5, [esp + _half] /* rinv*/
	movapd [esp + _rinvOO], xmm1
	movapd [esp + _rinvOH1], xmm5

	movapd xmm0, [esp + _rsqOH2]
	movapd xmm4, [esp + _rsqH1O]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulpd   xmm1, xmm1	/* luA*luA */
	mulpd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	mulpd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subpd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm3, [esp + _half] /* iter1 */
	mulpd   xmm7, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulpd   xmm3, xmm3	/* luA*luA */
	mulpd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	mulpd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subpd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm1, [esp + _half] /* rinv */
	mulpd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvOH2], xmm1
	movapd [esp + _rinvH1O], xmm5

	movapd xmm0, [esp + _rsqH1H1]
	movapd xmm4, [esp + _rsqH1H2]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulpd   xmm1, xmm1	/* luA*luA */
	mulpd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	mulpd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subpd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm3, [esp + _half] /* iter1a */
	mulpd   xmm7, [esp + _half] /* iter1b */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulpd   xmm3, xmm3	/* luA*luA */
	mulpd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	mulpd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subpd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm1, [esp + _half] /* rinv */
	mulpd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvH1H1], xmm1
	movapd [esp + _rinvH1H2], xmm5

	movapd xmm0, [esp + _rsqH2O]
	cvtpd2ps xmm1, xmm0	
	rsqrtps xmm1, xmm1
	cvtps2pd xmm1, xmm1
	
	movapd  xmm2, xmm1	/* copy of luA */
	mulpd   xmm1, xmm1	/* luA*luA */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm3, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	mulpd   xmm3, xmm3	/* luA*luA */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm1, [esp + _half] /* rinv */
	movapd [esp + _rinvH2O], xmm1
	
	/* start with OO interaction */
	movapd xmm0, [esp + _rinvOO]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + _rsqOO] /* xmm1=r */
	mulpd  xmm1, [esp + _tsc]

	cvttpd2pi mm6, xmm1	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	movd mm0, eax	
	movd mm1, ebx
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	mulpd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqOO]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 /* xmm7=FF */
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulpd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */
        /* increment vcoul - then we can get rid of mm5 */
        /* update vctot */
        addpd  xmm5, [esp + _vctot]
	xorpd  xmm2, xmm2
        movapd [esp + _vctot], xmm5
	mulpd  xmm3, [esp + _tsc]

	/* start doing lj */
	movapd xmm2, xmm0
	mulpd  xmm2, xmm2
	movapd xmm1, xmm2
	mulpd  xmm1, xmm2
	mulpd  xmm1, xmm2	/* xmm1=rinvsix */
	movapd xmm2, xmm1
	mulpd  xmm2, xmm2	/* xmm2=rinvtwelve */
	mulpd  xmm1, [esp + _c6]
	mulpd  xmm2, [esp + _c12]
	movapd xmm4, xmm2
	subpd  xmm4, xmm1
	addpd  xmm4, [esp + _vnbtot]
	mulpd  xmm1, [esp + _six]
	mulpd  xmm2, [esp + _twelve]
	movapd [esp + _vnbtot], xmm4
	subpd  xmm2, xmm1
	mulpd  xmm2, xmm0

	subpd  xmm2, xmm3
	mulpd  xmm0, xmm2
	
	movapd xmm1, xmm0
	movapd xmm2, xmm0		

	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulpd xmm0, [esp + _dxOO]
	mulpd xmm1, [esp + _dyOO]
	mulpd xmm2, [esp + _dzOO]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixO]
	addpd xmm1, [esp + _fiyO]
	addpd xmm2, [esp + _fizO]
	movapd [esp + _fjxO], xmm3
	movapd [esp + _fjyO], xmm4
	movapd [esp + _fjzO], xmm5
	movapd [esp + _fixO], xmm0
	movapd [esp + _fiyO], xmm1
	movapd [esp + _fizO], xmm2

	/* O-H1 interaction */
	movapd xmm0, [esp + _rinvOH1]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + _rsqOH1] /* xmm1=r */
	mulpd  xmm1, [esp + _tsc]

	cvttpd2pi mm6, xmm1	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	mulpd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqOH]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 /* xmm7=FF */
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulpd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */

        addpd  xmm5, [esp + _vctot]
        movapd [esp + _vctot], xmm5
	xorpd  xmm1, xmm1
	mulpd  xmm3,  [esp + _tsc]
	mulpd  xmm3, xmm0
	subpd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulpd xmm0, [esp + _dxOH1]
	mulpd xmm1, [esp + _dyOH1]
	mulpd xmm2, [esp + _dzOH1]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixO]
	addpd xmm1, [esp + _fiyO]
	addpd xmm2, [esp + _fizO]
	movapd [esp + _fjxH1], xmm3
	movapd [esp + _fjyH1], xmm4
	movapd [esp + _fjzH1], xmm5
	movapd [esp + _fixO], xmm0
	movapd [esp + _fiyO], xmm1
	movapd [esp + _fizO], xmm2

	/* O-H2 interaction */ 
	movapd xmm0, [esp + _rinvOH2]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + _rsqOH2] /* xmm1=r */
	mulpd  xmm1, [esp + _tsc]
	
	cvttpd2pi mm6, xmm1	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	mulpd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqOH]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 /* xmm7=FF */
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulpd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */

        addpd  xmm5, [esp + _vctot]
        movapd [esp + _vctot], xmm5
	xorpd  xmm1, xmm1
	mulpd  xmm3,  [esp + _tsc]
	mulpd  xmm3, xmm0
	subpd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulpd xmm0, [esp + _dxOH2]
	mulpd xmm1, [esp + _dyOH2]
	mulpd xmm2, [esp + _dzOH2]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixO]
	addpd xmm1, [esp + _fiyO]
	addpd xmm2, [esp + _fizO]
	movapd [esp + _fjxH2], xmm3
	movapd [esp + _fjyH2], xmm4
	movapd [esp + _fjzH2], xmm5
	movapd [esp + _fixO], xmm0
	movapd [esp + _fiyO], xmm1
	movapd [esp + _fizO], xmm2

	/* H1-O interaction */
	movapd xmm0, [esp + _rinvH1O]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + _rsqH1O] /* xmm1=r */
	mulpd  xmm1, [esp + _tsc]
	
	cvttpd2pi mm6, xmm1	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	mulpd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqOH]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 /* xmm7=FF */
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulpd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */

        addpd  xmm5, [esp + _vctot]
        movapd [esp + _vctot], xmm5
	xorpd  xmm1, xmm1
	mulpd  xmm3,  [esp + _tsc]
	mulpd  xmm3, xmm0
	subpd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	movapd xmm3, [esp + _fjxO]
	movapd xmm4, [esp + _fjyO]
	movapd xmm5, [esp + _fjzO]
	mulpd xmm0, [esp + _dxH1O]
	mulpd xmm1, [esp + _dyH1O]
	mulpd xmm2, [esp + _dzH1O]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixH1]
	addpd xmm1, [esp + _fiyH1]
	addpd xmm2, [esp + _fizH1]
	movapd [esp + _fjxO], xmm3
	movapd [esp + _fjyO], xmm4
	movapd [esp + _fjzO], xmm5
	movapd [esp + _fixH1], xmm0
	movapd [esp + _fiyH1], xmm1
	movapd [esp + _fizH1], xmm2

	/* H1-H1 interaction */
	movapd xmm0, [esp + _rinvH1H1]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + _rsqH1H1] /* xmm1=r */
	mulpd  xmm1, [esp + _tsc]	
	cvttpd2pi mm6, xmm1	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	mulpd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqHH]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 /* xmm7=FF */
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulpd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */

        addpd  xmm5, [esp + _vctot]
        movapd [esp + _vctot], xmm5
	xorpd  xmm1, xmm1
	mulpd  xmm3,  [esp + _tsc]
	mulpd  xmm3, xmm0
	subpd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	movapd xmm3, [esp + _fjxH1]
	movapd xmm4, [esp + _fjyH1]
	movapd xmm5, [esp + _fjzH1]
	mulpd xmm0, [esp + _dxH1H1]
	mulpd xmm1, [esp + _dyH1H1]
	mulpd xmm2, [esp + _dzH1H1]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixH1]
	addpd xmm1, [esp + _fiyH1]
	addpd xmm2, [esp + _fizH1]
	movapd [esp + _fjxH1], xmm3
	movapd [esp + _fjyH1], xmm4
	movapd [esp + _fjzH1], xmm5
	movapd [esp + _fixH1], xmm0
	movapd [esp + _fiyH1], xmm1
	movapd [esp + _fizH1], xmm2

	/* H1-H2 interaction */
	movapd xmm0, [esp + _rinvH1H2]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + _rsqH1H2] /* xmm1=r */
	mulpd  xmm1, [esp + _tsc]
	cvttpd2pi mm6, xmm1	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	mulpd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqHH]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 /* xmm7=FF */
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulpd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */

        addpd  xmm5, [esp + _vctot]
        movapd [esp + _vctot], xmm5
	xorpd  xmm1, xmm1
	mulpd  xmm3,  [esp + _tsc]
	mulpd  xmm3, xmm0
	subpd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	movapd xmm3, [esp + _fjxH2]
	movapd xmm4, [esp + _fjyH2]
	movapd xmm5, [esp + _fjzH2]
	mulpd xmm0, [esp + _dxH1H2]
	mulpd xmm1, [esp + _dyH1H2]
	mulpd xmm2, [esp + _dzH1H2]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixH1]
	addpd xmm1, [esp + _fiyH1]
	addpd xmm2, [esp + _fizH1]
	movapd [esp + _fjxH2], xmm3
	movapd [esp + _fjyH2], xmm4
	movapd [esp + _fjzH2], xmm5
	movapd [esp + _fixH1], xmm0
	movapd [esp + _fiyH1], xmm1
	movapd [esp + _fizH1], xmm2

	/* H2-O interaction */
	movapd xmm0, [esp + _rinvH2O]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + _rsqH2O] /* xmm1=r */
	mulpd  xmm1, [esp + _tsc]	
	cvttpd2pi mm6, xmm1	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	mulpd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqOH]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 /* xmm7=FF */
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulpd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */

        addpd  xmm5, [esp + _vctot]
        movapd [esp + _vctot], xmm5
	xorpd  xmm1, xmm1
	mulpd  xmm3,  [esp + _tsc]
	mulpd  xmm3, xmm0
	subpd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1

	movapd xmm3, [esp + _fjxO]
	movapd xmm4, [esp + _fjyO]
	movapd xmm5, [esp + _fjzO]
	mulpd xmm0, [esp + _dxH2O]
	mulpd xmm1, [esp + _dyH2O]
	mulpd xmm2, [esp + _dzH2O]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixH2]
	addpd xmm1, [esp + _fiyH2]
	addpd xmm2, [esp + _fizH2]
	movapd [esp + _fjxO], xmm3
	movapd [esp + _fjyO], xmm4
	movapd [esp + _fjzO], xmm5
	movapd [esp + _fixH2], xmm0
	movapd [esp + _fiyH2], xmm1
	movapd [esp + _fizH2], xmm2

	/* H2-H1 interaction */
	movapd xmm0, [esp + _rinvH2H1]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + _rsqH2H1] /* xmm1=r */
	mulpd  xmm1, [esp + _tsc]
	cvttpd2pi mm6, xmm1	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	mulpd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqHH]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 /* xmm7=FF */
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulpd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */

        addpd  xmm5, [esp + _vctot]
        movapd [esp + _vctot], xmm5
	xorpd  xmm1, xmm1
	mulpd  xmm3,  [esp + _tsc]
	mulpd  xmm3, xmm0
	subpd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	movapd xmm3, [esp + _fjxH1]
	movapd xmm4, [esp + _fjyH1]
	movapd xmm5, [esp + _fjzH1]
	mulpd xmm0, [esp + _dxH2H1]
	mulpd xmm1, [esp + _dyH2H1]
	mulpd xmm2, [esp + _dzH2H1]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixH2]
	addpd xmm1, [esp + _fiyH2]
	addpd xmm2, [esp + _fizH2]
	movapd [esp + _fjxH1], xmm3
	movapd [esp + _fjyH1], xmm4
	movapd [esp + _fjzH1], xmm5
	movapd [esp + _fixH2], xmm0
	movapd [esp + _fiyH2], xmm1
	movapd [esp + _fizH2], xmm2

	/* H2-H2 interaction */
	movapd xmm0, [esp + _rinvH2H2]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + _rsqH2H2] /* xmm1=r */
	mulpd  xmm1, [esp + _tsc]	
	cvttpd2pi mm6, xmm1	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	mulpd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqHH]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 /* xmm7=FF */
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulpd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */
	
        addpd  xmm5, [esp + _vctot]
        movapd [esp + _vctot], xmm5
	xorpd  xmm1, xmm1
	mulpd  xmm3,  [esp + _tsc]
	mulpd  xmm3, xmm0
	subpd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	movapd xmm3, [esp + _fjxH2]
	movapd xmm4, [esp + _fjyH2]
	movapd xmm5, [esp + _fjzH2]
	mulpd xmm0, [esp + _dxH2H2]
	mulpd xmm1, [esp + _dyH2H2]
	mulpd xmm2, [esp + _dzH2H2]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixH2]
	addpd xmm1, [esp + _fiyH2]
	addpd xmm2, [esp + _fizH2]
	movapd [esp + _fjxH2], xmm3
	movapd [esp + _fjyH2], xmm4
	movapd [esp + _fjzH2], xmm5
	movapd [esp + _fixH2], xmm0
	movapd [esp + _fiyH2], xmm1
	movapd [esp + _fizH2], xmm2

	mov edi, [ebp + _faction]

	movd eax, mm0
	movd ebx, mm1
	
	/* Did all interactions - now update j forces */
	movlpd xmm0, [edi + eax*8]
	movlpd xmm1, [edi + eax*8 + 8]
	movlpd xmm2, [edi + eax*8 + 16]
	movlpd xmm3, [edi + eax*8 + 24]
	movlpd xmm4, [edi + eax*8 + 32]
	movlpd xmm5, [edi + eax*8 + 40]
	movlpd xmm6, [edi + eax*8 + 48]
	movlpd xmm7, [edi + eax*8 + 56]
	movhpd xmm0, [edi + ebx*8]
	movhpd xmm1, [edi + ebx*8 + 8]
	movhpd xmm2, [edi + ebx*8 + 16]
	movhpd xmm3, [edi + ebx*8 + 24]
	movhpd xmm4, [edi + ebx*8 + 32]
	movhpd xmm5, [edi + ebx*8 + 40]
	movhpd xmm6, [edi + ebx*8 + 48]
	movhpd xmm7, [edi + ebx*8 + 56]
	addpd xmm0, [esp + _fjxO]
	addpd xmm1, [esp + _fjyO]
	addpd xmm2, [esp + _fjzO]
	addpd xmm3, [esp + _fjxH1]
	addpd xmm4, [esp + _fjyH1]
	addpd xmm5, [esp + _fjzH1]
	addpd xmm6, [esp + _fjxH2]
	addpd xmm7, [esp + _fjyH2]
	movlpd [edi + eax*8], xmm0
	movlpd [edi + eax*8 + 8], xmm1
	movlpd [edi + eax*8 + 16], xmm2
	movlpd [edi + eax*8 + 24], xmm3
	movlpd [edi + eax*8 + 32], xmm4
	movlpd [edi + eax*8 + 40], xmm5
	movlpd [edi + eax*8 + 48], xmm6
	movlpd [edi + eax*8 + 56], xmm7
	movhpd [edi + ebx*8], xmm0
	movhpd [edi + ebx*8 + 8], xmm1
	movhpd [edi + ebx*8 + 16], xmm2
	movhpd [edi + ebx*8 + 24], xmm3
	movhpd [edi + ebx*8 + 32], xmm4
	movhpd [edi + ebx*8 + 40], xmm5
	movhpd [edi + ebx*8 + 48], xmm6
	movhpd [edi + ebx*8 + 56], xmm7
	
	movlpd xmm0, [edi + eax*8 + 64]
	movhpd xmm0, [edi + ebx*8 + 64]
	addpd xmm0, [esp + _fjzH2]
	movlpd [edi + eax*8 + 64], xmm0
	movhpd [edi + ebx*8 + 64], xmm0

	/* should we do one more iteration? */
	sub   [esp + _innerk],  2
	jl    .i3130_checksingle
	jmp   .i3130_unroll_loop
.i3130_checksingle:
	mov   edx, [esp + _innerk]
	and   edx, 1
	jnz   .i3130_dosingle
	jmp   .i3130_updateouterdata
.i3130_dosingle:
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]

	mov esi, [ebp + _pos]
	lea   eax, [eax + eax*2]  

	/* fetch j coordinates */
	movlpd xmm2, [esi + eax*8]
	movlpd xmm3, [esi + eax*8 + 8]
	movlpd xmm4, [esi + eax*8 + 16]
	movlpd xmm5, [esi + eax*8 + 24]
	movlpd xmm6, [esi + eax*8 + 32]
	movlpd xmm7, [esi + eax*8 + 40]
	movapd 	[esp + _jxO], xmm2
	movapd 	[esp + _jyO], xmm3
	movapd 	[esp + _jzO], xmm4
	movapd 	[esp + _jxH1], xmm5
	movapd 	[esp + _jyH1], xmm6
	movapd 	[esp + _jzH1], xmm7
	movlpd xmm2, [esi + eax*8 + 48]
	movlpd xmm3, [esi + eax*8 + 56]
	movlpd xmm4, [esi + eax*8 + 64]
	movapd 	[esp + _jxH2], xmm2
	movapd 	[esp + _jyH2], xmm3
	movapd 	[esp + _jzH2], xmm4
	
	movapd xmm0, [esp + _ixO]
	movapd xmm1, [esp + _iyO]
	movapd xmm2, [esp + _izO]
	movapd xmm3, [esp + _ixO]
	movapd xmm4, [esp + _iyO]
	movapd xmm5, [esp + _izO]
	subsd  xmm0, [esp + _jxO]
	subsd  xmm1, [esp + _jyO]
	subsd  xmm2, [esp + _jzO]
	subsd  xmm3, [esp + _jxH1]
	subsd  xmm4, [esp + _jyH1]
	subsd  xmm5, [esp + _jzH1]
	movapd [esp + _dxOO], xmm0
	movapd [esp + _dyOO], xmm1
	movapd [esp + _dzOO], xmm2
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	movapd [esp + _dxOH1], xmm3
	movapd [esp + _dyOH1], xmm4
	movapd [esp + _dzOH1], xmm5
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + _rsqOO], xmm0
	movapd [esp + _rsqOH1], xmm3

	movapd xmm0, [esp + _ixO]
	movapd xmm1, [esp + _iyO]
	movapd xmm2, [esp + _izO]
	movapd xmm3, [esp + _ixH1]
	movapd xmm4, [esp + _iyH1]
	movapd xmm5, [esp + _izH1]
	subsd  xmm0, [esp + _jxH2]
	subsd  xmm1, [esp + _jyH2]
	subsd  xmm2, [esp + _jzH2]
	subsd  xmm3, [esp + _jxO]
	subsd  xmm4, [esp + _jyO]
	subsd  xmm5, [esp + _jzO]
	movapd [esp + _dxOH2], xmm0
	movapd [esp + _dyOH2], xmm1
	movapd [esp + _dzOH2], xmm2
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	movapd [esp + _dxH1O], xmm3
	movapd [esp + _dyH1O], xmm4
	movapd [esp + _dzH1O], xmm5
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + _rsqOH2], xmm0
	movapd [esp + _rsqH1O], xmm3

	movapd xmm0, [esp + _ixH1]
	movapd xmm1, [esp + _iyH1]
	movapd xmm2, [esp + _izH1]
	movapd xmm3, [esp + _ixH1]
	movapd xmm4, [esp + _iyH1]
	movapd xmm5, [esp + _izH1]
	subsd  xmm0, [esp + _jxH1]
	subsd  xmm1, [esp + _jyH1]
	subsd  xmm2, [esp + _jzH1]
	subsd  xmm3, [esp + _jxH2]
	subsd  xmm4, [esp + _jyH2]
	subsd  xmm5, [esp + _jzH2]
	movapd [esp + _dxH1H1], xmm0
	movapd [esp + _dyH1H1], xmm1
	movapd [esp + _dzH1H1], xmm2
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	movapd [esp + _dxH1H2], xmm3
	movapd [esp + _dyH1H2], xmm4
	movapd [esp + _dzH1H2], xmm5
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + _rsqH1H1], xmm0
	movapd [esp + _rsqH1H2], xmm3

	movapd xmm0, [esp + _ixH2]
	movapd xmm1, [esp + _iyH2]
	movapd xmm2, [esp + _izH2]
	movapd xmm3, [esp + _ixH2]
	movapd xmm4, [esp + _iyH2]
	movapd xmm5, [esp + _izH2]
	subsd  xmm0, [esp + _jxO]
	subsd  xmm1, [esp + _jyO]
	subsd  xmm2, [esp + _jzO]
	subsd  xmm3, [esp + _jxH1]
	subsd  xmm4, [esp + _jyH1]
	subsd  xmm5, [esp + _jzH1]
	movapd [esp + _dxH2O], xmm0
	movapd [esp + _dyH2O], xmm1
	movapd [esp + _dzH2O], xmm2
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	movapd [esp + _dxH2H1], xmm3
	movapd [esp + _dyH2H1], xmm4
	movapd [esp + _dzH2H1], xmm5
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm4, xmm3
	addsd  xmm4, xmm5
	movapd [esp + _rsqH2O], xmm0
	movapd [esp + _rsqH2H1], xmm4

	movapd xmm0, [esp + _ixH2]
	movapd xmm1, [esp + _iyH2]
	movapd xmm2, [esp + _izH2]
	subsd  xmm0, [esp + _jxH2]
	subsd  xmm1, [esp + _jyH2]
	subsd  xmm2, [esp + _jzH2]
	movapd [esp + _dxH2H2], xmm0
	movapd [esp + _dyH2H2], xmm1
	movapd [esp + _dzH2H2], xmm2
	mulsd xmm0, xmm0
	mulsd xmm1, xmm1
	mulsd xmm2, xmm2
	addsd xmm0, xmm1
	addsd xmm0, xmm2
	movapd [esp + _rsqH2H2], xmm0
		
	/* start doing invsqrt use rsq values in xmm0, xmm4 */
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulsd   xmm1, xmm1	/* luA*luA */
	mulsd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	mulsd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subsd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm3, [esp + _half] /* iter1 */
	mulsd   xmm7, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulsd   xmm3, xmm3	/* luA*luA */
	mulsd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	mulsd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subsd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm1, [esp + _half] /* rinv */
	mulsd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvH2H2], xmm1
	movapd [esp + _rinvH2H1], xmm5

	movapd xmm0, [esp + _rsqOO]
	movapd xmm4, [esp + _rsqOH1]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulsd   xmm1, xmm1	/* luA*luA */
	mulsd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	mulsd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subsd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm3, [esp + _half] /* iter1 of  */
	mulsd   xmm7, [esp + _half] /* iter1 of  */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulsd   xmm3, xmm3	/* luA*luA */
	mulsd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	mulsd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subsd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm1, [esp + _half] /* rinv */
	mulsd   xmm5, [esp + _half] /* rinv*/
	movapd [esp + _rinvOO], xmm1
	movapd [esp + _rinvOH1], xmm5

	movapd xmm0, [esp + _rsqOH2]
	movapd xmm4, [esp + _rsqH1O]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulsd   xmm1, xmm1	/* luA*luA */
	mulsd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	mulsd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subsd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm3, [esp + _half] /* iter1 */
	mulsd   xmm7, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulsd   xmm3, xmm3	/* luA*luA */
	mulsd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	mulsd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subsd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm1, [esp + _half] /* rinv */
	mulsd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvOH2], xmm1
	movapd [esp + _rinvH1O], xmm5

	movapd xmm0, [esp + _rsqH1H1]
	movapd xmm4, [esp + _rsqH1H2]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulsd   xmm1, xmm1	/* luA*luA */
	mulsd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	mulsd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subsd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm3, [esp + _half] /* iter1a */
	mulsd   xmm7, [esp + _half] /* iter1b */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulsd   xmm3, xmm3	/* luA*luA */
	mulsd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	mulsd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subsd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm1, [esp + _half] /* rinv */
	mulsd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvH1H1], xmm1
	movapd [esp + _rinvH1H2], xmm5

	movapd xmm0, [esp + _rsqH2O]
	cvtsd2ss xmm1, xmm0	
	rsqrtss xmm1, xmm1
	cvtss2sd xmm1, xmm1
	
	movapd  xmm2, xmm1	/* copy of luA */
	mulsd   xmm1, xmm1	/* luA*luA */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm3, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	mulsd   xmm3, xmm3	/* luA*luA */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm1, [esp + _half] /* rinv */
	movapd [esp + _rinvH2O], xmm1
	
	/* start with OO interaction */
	movapd xmm0, [esp + _rinvOO]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + _rsqOO] /* xmm1=r */
	mulsd  xmm1, [esp + _tsc]

	movd mm0, eax	
	cvttsd2si eax, xmm1	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1  */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1  */
	unpckhpd xmm7, xmm3	/* H1  */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	mulsd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqOO]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 /* xmm7=FF */
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulsd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */
        /* increment vcoul - then we can get rid of mm5 */
        /* update vctot */
        addsd  xmm5, [esp + _vctot]
	xorpd  xmm2, xmm2
        movlpd [esp + _vctot], xmm5
	mulsd  xmm3, [esp + _tsc]

	/* start doing lj */
	movapd xmm2, xmm0
	mulsd  xmm2, xmm2
	movapd xmm1, xmm2
	mulsd  xmm1, xmm2
	mulsd  xmm1, xmm2	/* xmm1=rinvsix */
	movapd xmm2, xmm1
	mulsd  xmm2, xmm2	/* xmm2=rinvtwelve */
	mulsd  xmm1, [esp + _c6]
	mulsd  xmm2, [esp + _c12]
	movapd xmm4, xmm2
	subsd  xmm4, xmm1
	addsd  xmm4, [esp + _vnbtot]
	mulsd  xmm1, [esp + _six]
	mulsd  xmm2, [esp + _twelve]
	movlpd [esp + _vnbtot], xmm4
	subsd  xmm2, xmm1
	mulsd  xmm2, xmm0

	subsd  xmm2, xmm3
	mulsd  xmm0, xmm2
	
	movapd xmm1, xmm0
	movapd xmm2, xmm0		

	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulpd xmm0, [esp + _dxOO]
	mulpd xmm1, [esp + _dyOO]
	mulpd xmm2, [esp + _dzOO]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixO]
	addsd xmm1, [esp + _fiyO]
	addsd xmm2, [esp + _fizO]
	movlpd [esp + _fjxO], xmm3
	movlpd [esp + _fjyO], xmm4
	movlpd [esp + _fjzO], xmm5
	movlpd [esp + _fixO], xmm0
	movlpd [esp + _fiyO], xmm1
	movlpd [esp + _fizO], xmm2

	/* O-H1 interaction */
	movapd xmm0, [esp + _rinvOH1]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + _rsqOH1] /* xmm1=r */
	mulsd  xmm1, [esp + _tsc]

	cvttsd2si eax, xmm1	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1  */
	unpckhpd xmm5, xmm3	/* F1  */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	mulsd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqOH]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 /* xmm7=FF */
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulsd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */

        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5
	xorpd  xmm1, xmm1
	mulsd  xmm3,  [esp + _tsc]
	mulsd  xmm3, xmm0
	subsd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulsd xmm0, [esp + _dxOH1]
	mulsd xmm1, [esp + _dyOH1]
	mulsd xmm2, [esp + _dzOH1]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixO]
	addsd xmm1, [esp + _fiyO]
	addsd xmm2, [esp + _fizO]
	movlpd [esp + _fjxH1], xmm3
	movlpd [esp + _fjyH1], xmm4
	movlpd [esp + _fjzH1], xmm5
	movlpd [esp + _fixO], xmm0
	movlpd [esp + _fiyO], xmm1
	movlpd [esp + _fizO], xmm2

	/* O-H2 interaction */ 
	movapd xmm0, [esp + _rinvOH2]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + _rsqOH2] /* xmm1=r */
	mulsd  xmm1, [esp + _tsc]
	
	cvttsd2si eax, xmm1	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	mulsd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqOH]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 /* xmm7=FF */
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulsd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */

        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5
	xorpd  xmm1, xmm1
	mulsd  xmm3,  [esp + _tsc]
	mulsd  xmm3, xmm0
	subsd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulsd xmm0, [esp + _dxOH2]
	mulsd xmm1, [esp + _dyOH2]
	mulsd xmm2, [esp + _dzOH2]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixO]
	addsd xmm1, [esp + _fiyO]
	addsd xmm2, [esp + _fizO]
	movlpd [esp + _fjxH2], xmm3
	movlpd [esp + _fjyH2], xmm4
	movlpd [esp + _fjzH2], xmm5
	movlpd [esp + _fixO], xmm0
	movlpd [esp + _fiyO], xmm1
	movlpd [esp + _fizO], xmm2

	/* H1-O interaction */
	movapd xmm0, [esp + _rinvH1O]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + _rsqH1O] /* xmm1=r */
	mulsd  xmm1, [esp + _tsc]
	
	cvttsd2si eax, xmm1	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	mulsd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqOH]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 /* xmm7=FF */
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulsd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */

        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5
	xorpd  xmm1, xmm1
	mulsd  xmm3,  [esp + _tsc]
	mulsd  xmm3, xmm0
	subsd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	movapd xmm3, [esp + _fjxO]
	movapd xmm4, [esp + _fjyO]
	movapd xmm5, [esp + _fjzO]
	mulsd xmm0, [esp + _dxH1O]
	mulsd xmm1, [esp + _dyH1O]
	mulsd xmm2, [esp + _dzH1O]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixH1]
	addsd xmm1, [esp + _fiyH1]
	addsd xmm2, [esp + _fizH1]
	movlpd [esp + _fjxO], xmm3
	movlpd [esp + _fjyO], xmm4
	movlpd [esp + _fjzO], xmm5
	movlpd [esp + _fixH1], xmm0
	movlpd [esp + _fiyH1], xmm1
	movlpd [esp + _fizH1], xmm2

	/* H1-H1 interaction */
	movapd xmm0, [esp + _rinvH1H1]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + _rsqH1H1] /* xmm1=r */
	mulsd  xmm1, [esp + _tsc]	
	cvttsd2si eax, xmm1	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	mulsd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqHH]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 /* xmm7=FF */
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulsd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */

        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5
	xorpd  xmm1, xmm1
	mulsd  xmm3,  [esp + _tsc]
	mulsd  xmm3, xmm0
	subsd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	movapd xmm3, [esp + _fjxH1]
	movapd xmm4, [esp + _fjyH1]
	movapd xmm5, [esp + _fjzH1]
	mulsd xmm0, [esp + _dxH1H1]
	mulsd xmm1, [esp + _dyH1H1]
	mulsd xmm2, [esp + _dzH1H1]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixH1]
	addsd xmm1, [esp + _fiyH1]
	addsd xmm2, [esp + _fizH1]
	movlpd [esp + _fjxH1], xmm3
	movlpd [esp + _fjyH1], xmm4
	movlpd [esp + _fjzH1], xmm5
	movlpd [esp + _fixH1], xmm0
	movlpd [esp + _fiyH1], xmm1
	movlpd [esp + _fizH1], xmm2

	/* H1-H2 interaction */
	movapd xmm0, [esp + _rinvH1H2]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + _rsqH1H2] /* xmm1=r */
	mulsd  xmm1, [esp + _tsc]
	cvttsd2si eax, xmm1	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	mulsd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqHH]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 /* xmm7=FF */
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulsd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */

        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5
	xorpd  xmm1, xmm1
	mulsd  xmm3,  [esp + _tsc]
	mulsd  xmm3, xmm0
	subsd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	movapd xmm3, [esp + _fjxH2]
	movapd xmm4, [esp + _fjyH2]
	movapd xmm5, [esp + _fjzH2]
	mulsd xmm0, [esp + _dxH1H2]
	mulsd xmm1, [esp + _dyH1H2]
	mulsd xmm2, [esp + _dzH1H2]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixH1]
	addsd xmm1, [esp + _fiyH1]
	addsd xmm2, [esp + _fizH1]
	movlpd [esp + _fjxH2], xmm3
	movlpd [esp + _fjyH2], xmm4
	movlpd [esp + _fjzH2], xmm5
	movlpd [esp + _fixH1], xmm0
	movlpd [esp + _fiyH1], xmm1
	movlpd [esp + _fizH1], xmm2

	/* H2-O interaction */
	movapd xmm0, [esp + _rinvH2O]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + _rsqH2O] /* xmm1=r */
	mulsd  xmm1, [esp + _tsc]	
	cvttsd2si eax, xmm1	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	mulsd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqOH]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 /* xmm7=FF */
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulsd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */

        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5
	xorpd  xmm1, xmm1
	mulsd  xmm3,  [esp + _tsc]
	mulsd  xmm3, xmm0
	subsd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1

	movapd xmm3, [esp + _fjxO]
	movapd xmm4, [esp + _fjyO]
	movapd xmm5, [esp + _fjzO]
	mulsd xmm0, [esp + _dxH2O]
	mulsd xmm1, [esp + _dyH2O]
	mulsd xmm2, [esp + _dzH2O]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixH2]
	addsd xmm1, [esp + _fiyH2]
	addsd xmm2, [esp + _fizH2]
	movlpd [esp + _fjxO], xmm3
	movlpd [esp + _fjyO], xmm4
	movlpd [esp + _fjzO], xmm5
	movlpd [esp + _fixH2], xmm0
	movlpd [esp + _fiyH2], xmm1
	movlpd [esp + _fizH2], xmm2

	/* H2-H1 interaction */
	movapd xmm0, [esp + _rinvH2H1]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + _rsqH2H1] /* xmm1=r */
	mulsd  xmm1, [esp + _tsc]
	cvttsd2si eax, xmm1	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subpd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	mulsd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqHH]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 /* xmm7=FF */
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulsd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */

        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5
	xorpd  xmm1, xmm1
	mulsd  xmm3,  [esp + _tsc]
	mulsd  xmm3, xmm0
	subsd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	movapd xmm3, [esp + _fjxH1]
	movapd xmm4, [esp + _fjyH1]
	movapd xmm5, [esp + _fjzH1]
	mulsd xmm0, [esp + _dxH2H1]
	mulsd xmm1, [esp + _dyH2H1]
	mulsd xmm2, [esp + _dzH2H1]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixH2]
	addsd xmm1, [esp + _fiyH2]
	addsd xmm2, [esp + _fizH2]
	movlpd [esp + _fjxH1], xmm3
	movlpd [esp + _fjyH1], xmm4
	movlpd [esp + _fjzH1], xmm5
	movlpd [esp + _fixH2], xmm0
	movlpd [esp + _fiyH2], xmm1
	movlpd [esp + _fizH2], xmm2

	/* H2-H2 interaction */
	movapd xmm0, [esp + _rinvH2H2]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + _rsqH2H2] /* xmm1=r */
	mulsd  xmm1, [esp + _tsc]	
	cvttsd2si eax, xmm1	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	mulsd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqHH]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 /* xmm7=FF */
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulsd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */

        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5
	xorpd  xmm1, xmm1
	mulsd  xmm3,  [esp + _tsc]
	mulsd  xmm3, xmm0
	subsd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	movapd xmm3, [esp + _fjxH2]
	movapd xmm4, [esp + _fjyH2]
	movapd xmm5, [esp + _fjzH2]
	mulsd xmm0, [esp + _dxH2H2]
	mulsd xmm1, [esp + _dyH2H2]
	mulsd xmm2, [esp + _dzH2H2]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixH2]
	addsd xmm1, [esp + _fiyH2]
	addsd xmm2, [esp + _fizH2]
	movlpd [esp + _fjxH2], xmm3
	movlpd [esp + _fjyH2], xmm4
	movlpd [esp + _fjzH2], xmm5
	movlpd [esp + _fixH2], xmm0
	movlpd [esp + _fiyH2], xmm1
	movlpd [esp + _fizH2], xmm2

	mov edi, [ebp + _faction]

	movd eax, mm0
	
	/* Did all interactions - now update j forces */
	movlpd xmm0, [edi + eax*8]
	movlpd xmm1, [edi + eax*8 + 8]
	movlpd xmm2, [edi + eax*8 + 16]
	movlpd xmm3, [edi + eax*8 + 24]
	movlpd xmm4, [edi + eax*8 + 32]
	movlpd xmm5, [edi + eax*8 + 40]
	movlpd xmm6, [edi + eax*8 + 48]
	movlpd xmm7, [edi + eax*8 + 56]
	addsd xmm0, [esp + _fjxO]
	addsd xmm1, [esp + _fjyO]
	addsd xmm2, [esp + _fjzO]
	addsd xmm3, [esp + _fjxH1]
	addsd xmm4, [esp + _fjyH1]
	addsd xmm5, [esp + _fjzH1]
	addsd xmm6, [esp + _fjxH2]
	addsd xmm7, [esp + _fjyH2]
	movlpd [edi + eax*8], xmm0
	movlpd [edi + eax*8 + 8], xmm1
	movlpd [edi + eax*8 + 16], xmm2
	movlpd [edi + eax*8 + 24], xmm3
	movlpd [edi + eax*8 + 32], xmm4
	movlpd [edi + eax*8 + 40], xmm5
	movlpd [edi + eax*8 + 48], xmm6
	movlpd [edi + eax*8 + 56], xmm7

	movlpd xmm0, [edi + eax*8 + 64]
	addsd xmm0, [esp + _fjzH2]
	movlpd [edi + eax*8 + 64], xmm0
	
.i3130_updateouterdata:
	mov   ecx, [esp + _ii3]
	mov   edi, [ebp + _faction]
	mov   esi, [ebp + _fshift]
	mov   edx, [esp + _is3]

	/* accumulate  Oi forces in xmm0, xmm1, xmm2 */
	movapd xmm0, [esp + _fixO]
	movapd xmm1, [esp + _fiyO]
	movapd xmm2, [esp + _fizO]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 /* sum is in low xmm0-xmm2 */

	movapd xmm3, xmm0	
	movapd xmm4, xmm1	
	movapd xmm5, xmm2	

	/* increment i force */
	movsd  xmm3, [edi + ecx*8]
	movsd  xmm4, [edi + ecx*8 + 8]
	movsd  xmm5, [edi + ecx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8],     xmm3
	movsd  [edi + ecx*8 + 8], xmm4
	movsd  [edi + ecx*8 + 16], xmm5

	/* accumulate force in xmm6/xmm7 for fshift */
	movapd xmm6, xmm0
	movsd xmm7, xmm2
	unpcklpd xmm6, xmm1

	/* accumulate H1i forces in xmm0, xmm1, xmm2 */
	movapd xmm0, [esp + _fixH1]
	movapd xmm1, [esp + _fiyH1]
	movapd xmm2, [esp + _fizH1]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 /* sum is in low xmm0-xmm2 */

	/* increment i force */
	movsd  xmm3, [edi + ecx*8 + 24]
	movsd  xmm4, [edi + ecx*8 + 32]
	movsd  xmm5, [edi + ecx*8 + 40]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8 + 24], xmm3
	movsd  [edi + ecx*8 + 32], xmm4
	movsd  [edi + ecx*8 + 40], xmm5

	/* accumulate force in xmm6/xmm7 for fshift */
	addsd xmm7, xmm2
	unpcklpd xmm0, xmm1
	addpd xmm6, xmm0

	/* accumulate H2i forces in xmm0, xmm1, xmm2 */
	movapd xmm0, [esp + _fixH2]
	movapd xmm1, [esp + _fiyH2]
	movapd xmm2, [esp + _fizH2]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 /* sum is in low xmm0-xmm2 */

	movapd xmm3, xmm0	
	movapd xmm4, xmm1	
	movapd xmm5, xmm2	

	/* increment i force */
	movsd  xmm3, [edi + ecx*8 + 48]
	movsd  xmm4, [edi + ecx*8 + 56]
	movsd  xmm5, [edi + ecx*8 + 64]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8 + 48], xmm3
	movsd  [edi + ecx*8 + 56], xmm4
	movsd  [edi + ecx*8 + 64], xmm5

	/* accumulate force in xmm6/xmm7 for fshift */
	addsd xmm7, xmm2
	unpcklpd xmm0, xmm1
	addpd xmm6, xmm0

	/* increment fshift force */
	movupd xmm3, [esi + edx*8]
	movsd  xmm4, [esi + edx*8 + 16]
	addpd  xmm3, xmm6
	addsd  xmm4, xmm7
	movupd [esi + edx*8],    xmm3
	movsd  [esi + edx*8 + 16], xmm4

	mov   edx, [ebp + _gid]  
	mov   edx, [edx]
	add   [ebp + _gid],  4	

	/* accumulate total potential energy and update it */
	movapd xmm7, [esp + _vctot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */
        
	/* add earlier value from mem */
	mov   eax, [ebp + _Vc]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* accumulate total lj energy and update it */
	movapd xmm7, [esp + _vnbtot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */

	/* add earlier value from mem */
	mov   eax, [ebp + _Vnb]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* finish if last */
	mov   ecx, [ebp + _nri]
	dec ecx
	jecxz .i3130_end
	/* not last, iterate once more! */ 
	mov [ebp + _nri], ecx
	jmp .i3130_outer
.i3130_end:
	emms
	mov eax, [esp + _salign]
	add esp, eax
	add esp, 1540
	pop edi
	pop esi
        pop edx
        pop ecx
        pop ebx
        pop eax
	leave
	ret

	


.globl inl3300_sse2
	.type inl3300_sse2,@function
inl3300_sse2:	
.equ		_nri,		8
.equ		_iinr,		12
.equ		_jindex,	16
.equ		_jjnr,		20
.equ		_shift,		24
.equ		_shiftvec,	28
.equ		_fshift,	32
.equ		_gid,		36
.equ		_pos,		40		
.equ		_faction,	44
.equ		_charge,	48
.equ		_facel,		52 /* double */ 
.equ		_Vc,		60	
.equ		_type,		64
.equ		_ntype,		68
.equ		_nbfp,		72	
.equ		_Vnb,		76
.equ		_tabscale,	80 /* double */ 
.equ		_VFtab,		88
	/* stack offsets for local variables */ 
	/* bottom of stack is cache-aligned for sse2 use */
.equ		_ix,		0
.equ		_iy,		16
.equ		_iz,		32
.equ		_iq,		48
.equ		_dx,		64
.equ		_dy,		80
.equ		_dz,		96
.equ		_two,		112
.equ		_tsc,		128
.equ		_qq,		144	
.equ		_c6,		160
.equ		_c12,		176
.equ		_fscal,		192
.equ		_vctot,		208
.equ		_vnbtot,	224
.equ		_fix,		240
.equ		_fiy,		256
.equ		_fiz,		272
.equ		_half,		288
.equ		_three,		304
.equ		_is3,		320
.equ		_ii3,		324
.equ		_ntia,		328	
.equ		_innerjjnr,	332
.equ		_innerk,	336
.equ		_salign,	340								
	push ebp
	mov ebp,esp	
        push eax
        push ebx
        push ecx
        push edx
	push esi
	push edi
	sub esp, 344		/* local stack space */
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + _salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_two]
	movupd xmm2, [sse2_three]
	movsd xmm3, [ebp + _tabscale]
	movapd [esp + _half],  xmm0
	movapd [esp + _two], xmm1
	movapd [esp + _three],  xmm2
	shufpd xmm3, xmm3, 0
	movapd [esp + _tsc], xmm3

	/* assume we have at least one i particle - start directly */	
.i3300_outer:
	mov   eax, [ebp + _shift]      /* eax = pointer into shift[] */
	mov   ebx, [eax]		/* ebx=shift[n] */
	add   [ebp + _shift],  4  /* advance pointer one step */
	
	lea   ebx, [ebx + ebx*2]        /* ebx=3*is */
	mov   [esp + _is3],ebx    	/* store is3 */

	mov   eax, [ebp + _shiftvec]   /* eax = base of shiftvec[] */

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	add   [ebp + _iinr],  4   /* advance pointer */
	mov   ebx, [ecx]	        /* ebx =ii */

	mov   edx, [ebp + _charge]
	movsd xmm3, [edx + ebx*8]	
	mulsd xmm3, [ebp + _facel]
	shufpd xmm3, xmm3, 0

        mov   edx, [ebp + _type] 
        mov   edx, [edx + ebx*4]
        imul  edx, [ebp + _ntype]
        shl   edx, 1
        mov   [esp + _ntia], edx
		
	lea   ebx, [ebx + ebx*2]	/* ebx = 3*ii=ii3 */
	mov   eax, [ebp + _pos]        /* eax = base of pos[] */ 

	addsd xmm0, [eax + ebx*8]
	addsd xmm1, [eax + ebx*8 + 8]
	addsd xmm2, [eax + ebx*8 + 16]

	movapd [esp + _iq], xmm3
	
	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0

	movapd [esp + _ix], xmm0
	movapd [esp + _iy], xmm1
	movapd [esp + _iz], xmm2

	mov   [esp + _ii3], ebx
	
	/* clear vctot and i forces */
	xorpd xmm4, xmm4
	movapd [esp + _vctot], xmm4
	movapd [esp + _vnbtot], xmm4
	movapd [esp + _fix], xmm4
	movapd [esp + _fiy], xmm4
	movapd [esp + _fiz], xmm4
	
	mov   eax, [ebp + _jindex]
	mov   ecx, [eax]	         /* jindex[n] */
	mov   edx, [eax + 4]	         /* jindex[n+1] */
	add   [ebp + _jindex],  4
	sub   edx, ecx                   /* number of innerloop atoms */

	mov   esi, [ebp + _pos]
	mov   edi, [ebp + _faction]	
	mov   eax, [ebp + _jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + _innerjjnr], eax     /* pointer to jjnr[nj0] */
	sub   edx,  2
	mov   [esp + _innerk], edx        /* number of innerloop atoms */
	jge   .i3300_unroll_loop
	jmp   .i3300_checksingle
.i3300_unroll_loop:	
	/* twice unrolled innerloop here */
	mov   edx, [esp + _innerjjnr]   /* pointer to jjnr[k] */
	mov   eax, [edx]
	mov   ebx, [edx + 4]
	add   [esp + _innerjjnr], 8	/* advance pointer (unrolled 2) */

	mov esi, [ebp + _charge]        /* base of charge[] */

	movlpd xmm3, [esi + eax*8]
	movhpd xmm3, [esi + ebx*8]

	movapd xmm2, [esp + _iq]
	mulpd  xmm3, xmm2
	movapd [esp + _qq], xmm3	

	movd  mm0, eax		/* use mmx registers as temp storage */
	movd  mm1, ebx
	
	mov esi, [ebp + _type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov esi, [ebp + _nbfp]
	shl eax, 1
	shl ebx, 1
	mov edi, [esp + _ntia]
	add eax, edi
	add ebx, edi

	movupd xmm6, [esi + eax*8]	/* c6a c12a */
	movupd xmm7, [esi + ebx*8]	/* c6b c12b */
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0
	movd  ebx, mm1
	movapd [esp + _c6], xmm4
	movapd [esp + _c12], xmm6
	
	mov esi, [ebp + _pos]		/* base of pos[] */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */
	lea   ebx, [ebx + ebx*2]	

	/* move two coordinates to xmm0-xmm2 */
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]		

	mov    edi, [ebp + _faction]
	
	/* move _ix-iz to xmm4-xmm6 */
	movapd xmm4, [esp + _ix]
	movapd xmm5, [esp + _iy]
	movapd xmm6, [esp + _iz]

	/* calc dr */
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	/* store dr */
	movapd [esp + _dx], xmm4
	movapd [esp + _dy], xmm5
	movapd [esp + _dz], xmm6
	/* square it */
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6
	/* rsq in xmm4 */

	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm5, xmm5
	cvtps2pd xmm2, xmm5	/* lu in low xmm2 */

	/* lookup seed in xmm2 */
	movapd xmm5, xmm2	/* copy of lu */
	mulpd xmm2, xmm2	/* lu*lu */
	movapd xmm1, [esp + _three]
	mulpd xmm2, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subpd xmm1, xmm2	/* 30-rsq*lu*lu */
	mulpd xmm1, xmm5	
	mulpd xmm1, xmm0	/* xmm0=iter1 of rinv (new lu) */

	movapd xmm5, xmm1	/* copy of lu */
	mulpd xmm1, xmm1	/* lu*lu */
	movapd xmm2, [esp + _three]
	mulpd xmm1, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subpd xmm2, xmm1	/* 30-rsq*lu*lu */
	mulpd xmm2, xmm5	
	mulpd xmm0, xmm2	/* xmm0=iter2 of rinv (new lu) */
	mulpd xmm4, xmm0	/* xmm4=r */
	mulpd xmm4, [esp + _tsc]

	cvttpd2pi mm6, xmm4	/* mm6 = lu idx */
	cvtpi2pd xmm5, mm6
	subpd xmm4, xmm5
	movapd xmm1, xmm4	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */

	movd mm0, eax	
	movd mm1, ebx

	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */
	lea   eax, [eax + eax*2]	/* idx*=3 (12 total now) */
	lea   ebx, [ebx + ebx*2]	/* idx*=3 (12 total now) */

	/* Coulomb */
	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	mulpd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qq]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 /* xmm7=FF */
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulpd  xmm3, xmm7 /* fijC=FF*qq */
	/* at this point mm5 contains vcoul and mm3 fijC */
	/* increment vcoul - then we can get rid of mm5 */
	/* update vctot */
	addpd  xmm5, [esp + _vctot]
	movapd [esp + _vctot], xmm5 

	/* put scalar force on stack temporarily */
	movapd [esp + _fscal], xmm3

	/* Dispersion */
	movupd xmm4, [esi + eax*8 + 32]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8 + 32]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 48]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 48]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* Dispersion table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	mulpd  xmm7, [esp + _two]	/* two*Heps2 */
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 /* xmm7=FF */
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */

	movapd xmm4, [esp + _c6]
	mulpd  xmm7, xmm4	 /* fijD */
	mulpd  xmm5, xmm4	 /* vnb6 */
	addpd  xmm7, [esp + _fscal] /* add to fscal */

	/* put scalar force back on stack Update vnbtot directly */
	addpd  xmm5, [esp + _vnbtot]
	movapd [esp + _fscal], xmm7
	movapd [esp + _vnbtot], xmm5

	/* Repulsion */
	movupd xmm4, [esi + eax*8 + 64]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8 + 64]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 80]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 80]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* Dispersion table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	mulpd  xmm7, [esp + _two]	/* two*Heps2 */
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 /* xmm7=FF */
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */

	movapd xmm4, [esp + _c12]
	mulpd  xmm7, xmm4 /* fijR */
	mulpd  xmm5, xmm4 /* vnb12 */
	addpd  xmm7, [esp + _fscal] 
	
	addpd  xmm5, [esp + _vnbtot]
	movapd [esp + _vnbtot], xmm5
	xorpd  xmm4, xmm4

	mulpd xmm7, [esp + _tsc]
	mulpd xmm7, xmm0
	subpd xmm4, xmm7

	movapd xmm0, [esp + _dx]
	movapd xmm1, [esp + _dy]
	movapd xmm2, [esp + _dz]

	movd eax, mm0	
	movd ebx, mm1

	mov    edi, [ebp + _faction]
	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4
	/* xmm0-xmm2 contains tx-tz (partial force) */
	/* now update f_i */
	movapd xmm3, [esp + _fix]
	movapd xmm4, [esp + _fiy]
	movapd xmm5, [esp + _fiz]
	addpd  xmm3, xmm0
	addpd  xmm4, xmm1
	addpd  xmm5, xmm2
	movapd [esp + _fix], xmm3
	movapd [esp + _fiy], xmm4
	movapd [esp + _fiz], xmm5
	/* the fj's - start by accumulating forces from memory */
	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	movhpd xmm3, [edi + ebx*8]
	movhpd xmm4, [edi + ebx*8 + 8]
	movhpd xmm5, [edi + ebx*8 + 16]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5
	movhpd [edi + ebx*8], xmm3
	movhpd [edi + ebx*8 + 8], xmm4
	movhpd [edi + ebx*8 + 16], xmm5
	
	/* should we do one more iteration? */
	sub   [esp + _innerk],  2
	jl    .i3300_checksingle
	jmp   .i3300_unroll_loop
.i3300_checksingle:
	mov   edx, [esp + _innerk]
	and   edx, 1
	jnz    .i3300_dosingle
	jmp    .i3300_updateouterdata
.i3300_dosingle:
	mov esi, [ebp + _charge]
	mov edi, [ebp + _pos]
	mov   ecx, [esp + _innerjjnr]
	mov   eax, [ecx]	
	xorpd  xmm3, xmm3
	movlpd xmm3, [esi + eax*8]	/* xmm6(0) has the charge */	
	mulpd  xmm3, [esp + _iq]
	movapd [esp + _qq], xmm3

	movd  mm0, eax		/* use mmx registers as temp storage */
	
	mov esi, [ebp + _type]
	mov eax, [esi + eax*4]
	mov esi, [ebp + _nbfp]
	shl eax, 1
	mov edi, [esp + _ntia]
	add eax, edi

	movupd xmm6, [esi + eax*8]	/* c6a c12a */
	xorpd xmm7, xmm7
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0
	movd  ebx, mm1
	movapd [esp + _c6], xmm4
	movapd [esp + _c12], xmm6
	
	mov esi, [ebp + _pos]		/* base of pos[] */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */

	/* move two coordinates to xmm0-xmm2 */
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]

	mov    edi, [ebp + _faction]

	/* move _ix-iz to xmm4-xmm6 */
	movapd xmm4, [esp + _ix]
	movapd xmm5, [esp + _iy]
	movapd xmm6, [esp + _iz]

	/* calc dr */
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	/* store dr */
	movapd [esp + _dx], xmm4
	movapd [esp + _dy], xmm5
	movapd [esp + _dz], xmm6
	/* square it */
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6
	/* rsq in xmm4 */

	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm5, xmm5
	cvtss2sd xmm2, xmm5	/* lu in low xmm2 */

	/* lookup seed in xmm2 */
	movapd xmm5, xmm2	/* copy of lu */
	mulsd xmm2, xmm2	/* lu*lu */
	movapd xmm1, [esp + _three]
	mulsd xmm2, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subsd xmm1, xmm2	/* 30-rsq*lu*lu */
	mulsd xmm1, xmm5	
	mulsd xmm1, xmm0	/* xmm0=iter1 of rinv (new lu) */

	movapd xmm5, xmm1	/* copy of lu */
	mulsd xmm1, xmm1	/* lu*lu */
	movapd xmm2, [esp + _three]
	mulsd xmm1, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subsd xmm2, xmm1	/* 30-rsq*lu*lu */
	mulsd xmm2, xmm5	
	mulsd xmm0, xmm2	/* xmm0=iter2 of rinv (new lu) */
	mulsd xmm4, xmm0	/* xmm4=r */
	mulsd xmm4, [esp + _tsc]

	movd mm0, eax	
	cvttsd2si eax, xmm4	/* mm6 = lu idx */
	cvtsi2sd xmm5, eax
	subsd xmm4, xmm5
	movapd xmm1, xmm4	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	lea   eax, [eax + eax*2]	/* idx*=3 (12 total now) */

	/* Coulomb */
	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	mulsd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qq]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 /* xmm7=FF */
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulsd  xmm3, xmm7 /* fijC=FF*qq */
	/* at this point mm5 contains vcoul and mm3 fijC */
	/* increment vcoul - then we can get rid of mm5 */
	/* update vctot */
	addsd  xmm5, [esp + _vctot]
	movlpd [esp + _vctot], xmm5 

	/* put scalar force on stack temporarily */
	movapd [esp + _fscal], xmm3

	/* Dispersion */
	movupd xmm4, [esi + eax*8 + 32]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 48]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* Dispersion table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	mulsd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qq]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 /* xmm7=FF */
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */

	movapd xmm4, [esp + _c6]
	mulsd  xmm7, xmm4	 /* fijD */
	mulsd  xmm5, xmm4	 /* vnb6 */
	addsd  xmm7, [esp + _fscal] /* add to fscal */

	/* put scalar force back on stack Update vnbtot directly */
	addsd  xmm5, [esp + _vnbtot]
	movlpd [esp + _fscal], xmm7
	movlpd [esp + _vnbtot], xmm5

	/* Repulsion */
	movupd xmm4, [esi + eax*8 + 64]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 80]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* Dispersion table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	mulsd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qq]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 /* xmm7=FF */
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */

	movapd xmm4, [esp + _c12]
	mulsd  xmm7, xmm4 /* fijR */
	mulsd  xmm5, xmm4 /* vnb12 */
	addsd  xmm7, [esp + _fscal] 
	
	addsd  xmm5, [esp + _vnbtot]
	movlpd [esp + _vnbtot], xmm5
	xorpd  xmm4, xmm4

	mulsd xmm7, [esp + _tsc]
	mulsd xmm7, xmm0
	subsd xmm4, xmm7

	movapd xmm0, [esp + _dx]
	movapd xmm1, [esp + _dy]
	movapd xmm2, [esp + _dz]

	movd eax, mm0	

	mov    edi, [ebp + _faction]
	mulsd  xmm0, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm2, xmm4
	/* xmm0-xmm2 contains tx-tz (partial force) */
	/* now update f_i */
	movapd xmm3, [esp + _fix]
	movapd xmm4, [esp + _fiy]
	movapd xmm5, [esp + _fiz]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movlpd [esp + _fix], xmm3
	movlpd [esp + _fiy], xmm4
	movlpd [esp + _fiz], xmm5
	/* the fj's - start by accumulating forces from memory */
	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5
.i3300_updateouterdata:
	mov   ecx, [esp + _ii3]
	mov   edi, [ebp + _faction]
	mov   esi, [ebp + _fshift]
	mov   edx, [esp + _is3]

	/* accumulate i forces in xmm0, xmm1, xmm2 */
	movapd xmm0, [esp + _fix]
	movapd xmm1, [esp + _fiy]
	movapd xmm2, [esp + _fiz]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 /* sum is in low xmm0-xmm2 */

	/* increment i force */
	movsd  xmm3, [edi + ecx*8]
	movsd  xmm4, [edi + ecx*8 + 8]
	movsd  xmm5, [edi + ecx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8],     xmm3
	movsd  [edi + ecx*8 + 8], xmm4
	movsd  [edi + ecx*8 + 16], xmm5

	/* increment fshift force */ 
	movsd  xmm3, [esi + edx*8]
	movsd  xmm4, [esi + edx*8 + 8]
	movsd  xmm5, [esi + edx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [esi + edx*8],     xmm3
	movsd  [esi + edx*8 + 8], xmm4
	movsd  [esi + edx*8 + 16], xmm5

	/* get group index for i particle */
	mov   edx, [ebp + _gid]      /* get group index for this i particle */
	mov   edx, [edx]
	add   [ebp + _gid],  4  /* advance pointer */

	/* accumulate total potential energy and update it */
	movapd xmm7, [esp + _vctot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */

	/* add earlier value from mem */
	mov   eax, [ebp + _Vc]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* accumulate total lj energy and update it */
	movapd xmm7, [esp + _vnbtot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */
	
	/* add earlier value from mem */
	mov   eax, [ebp + _Vnb]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* finish if last */
	mov   ecx, [ebp + _nri]
	dec ecx
	jecxz .i3300_end
	/* not last, iterate once more! */ 
	mov [ebp + _nri], ecx
	jmp .i3300_outer
.i3300_end:
	emms
	mov eax, [esp + _salign]
	add esp, eax
	add esp, 344
	pop edi
	pop esi
        pop edx
        pop ecx
        pop ebx
        pop eax
	leave
	ret


.globl inl3320_sse2
	.type inl3320_sse2,@function
inl3320_sse2:	
.equ		_nri,		8
.equ		_iinr,		12
.equ		_jindex,	16
.equ		_jjnr,		20
.equ		_shift,		24
.equ		_shiftvec,	28
.equ		_fshift,	32
.equ		_gid,		36
.equ		_pos,		40		
.equ		_faction,	44
.equ		_charge,	48
.equ		_facel,		52 /* double */ 
.equ		_Vc,		60	
.equ		_type,		64
.equ		_ntype,		68
.equ		_nbfp,		72	
.equ		_Vnb,		76	
.equ		_tabscale,	80 /* double */ 	
.equ		_VFtab,		88
	/* stack offsets for local variables */
	/* bottom of stack is cache-aligned for sse2 use */
.equ		_ixO,		0
.equ		_iyO,		16
.equ		_izO,		32
.equ		_ixH1,		48
.equ		_iyH1,		64
.equ		_izH1,		80
.equ		_ixH2,		96
.equ		_iyH2,		112
.equ		_izH2,		128
.equ		_iqO,		144 
.equ		_iqH,		160 
.equ		_dxO,		176
.equ		_dyO,		192
.equ		_dzO,		208	
.equ		_dxH1,		224
.equ		_dyH1,		240
.equ		_dzH1,		256	
.equ		_dxH2,		272
.equ		_dyH2,		288
.equ		_dzH2,		304	
.equ		_qqO,		320
.equ		_qqH,		336
.equ		_rinvO,		352
.equ		_rinvH1,	368
.equ		_rinvH2,	384		
.equ		_rO,		400
.equ		_rH1,		416
.equ		_rH2,		432
.equ		_tsc,		448	
.equ		_two,		464
.equ		_c6,		480
.equ		_c12,		496
.equ		_vctot,		512
.equ		_vnbtot,	528
.equ		_fixO,		544
.equ		_fiyO,		560
.equ		_fizO,		576
.equ		_fixH1,		592
.equ		_fiyH1,		608
.equ		_fizH1,		624
.equ		_fixH2,		640
.equ		_fiyH2,		656
.equ		_fizH2,		672
.equ		_fjx,		688
.equ		_fjy,		704
.equ		_fjz,		720
.equ		_half,		736
.equ		_three,		752
.equ		_is3,		768
.equ		_ii3,		772
.equ		_ntia,		776	
.equ		_innerjjnr,	780
.equ		_innerk,	784
.equ		_salign,	788
	push ebp
	mov ebp,esp	
        push eax
        push ebx
        push ecx
        push edx
	push esi
	push edi
	sub esp, 792		/* local stack space */
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + _salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_two]
	movupd xmm2, [sse2_three]
	movsd xmm5, [ebp + _tabscale]
	
	movapd [esp + _half],  xmm0
	movapd [esp + _two],  xmm1
	movapd [esp + _three],  xmm2
	shufpd xmm5, xmm5, 0
	movapd [esp + _tsc], xmm5
	
	/* assume we have at least one i particle - start directly */
	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	mov   ebx, [ecx]	        /* ebx =ii */

	mov   edx, [ebp + _charge]
	movsd xmm3, [edx + ebx*8]	
	movsd xmm4, [edx + ebx*8 + 8]	
	movsd xmm5, [ebp + _facel]
	mulsd  xmm3, xmm5
	mulsd  xmm4, xmm5

	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	movapd [esp + _iqO], xmm3
	movapd [esp + _iqH], xmm4
	
	mov   edx, [ebp + _type]
	mov   ecx, [edx + ebx*4]
	shl   ecx, 1
	imul  ecx, [ebp + _ntype]      /* ecx = ntia = 2*ntype*type[ii0] */
	mov   [esp + _ntia], ecx		
.i3320_outer:
	mov   eax, [ebp + _shift]      /* eax = pointer into shift[] */
	mov   ebx, [eax]		/* ebx=shift[n] */
	add   [ebp + _shift],  4  /* advance pointer one step */
	
	lea   ebx, [ebx + ebx*2]        /* ebx=3*is */
	mov   [esp + _is3],ebx    	/* store is3 */

	mov   eax, [ebp + _shiftvec]   /* eax = base of shiftvec[] */

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	add   [ebp + _iinr],  4   /* advance pointer */
	mov   ebx, [ecx]	        /* ebx =ii */

	movapd xmm3, xmm0
	movapd xmm4, xmm1
	movapd xmm5, xmm2

	lea   ebx, [ebx + ebx*2]	/* ebx = 3*ii=ii3 */
	mov   eax, [ebp + _pos]        /* eax = base of pos[] */ 
	mov   [esp + _ii3], ebx

	addsd xmm3, [eax + ebx*8]
	addsd xmm4, [eax + ebx*8 + 8]
	addsd xmm5, [eax + ebx*8 + 16]		
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _ixO], xmm3
	movapd [esp + _iyO], xmm4
	movapd [esp + _izO], xmm5

	movsd xmm3, xmm0
	movsd xmm4, xmm1
	movsd xmm5, xmm2
	addsd xmm0, [eax + ebx*8 + 24]
	addsd xmm1, [eax + ebx*8 + 32]
	addsd xmm2, [eax + ebx*8 + 40]		
	addsd xmm3, [eax + ebx*8 + 48]
	addsd xmm4, [eax + ebx*8 + 56]
	addsd xmm5, [eax + ebx*8 + 64]		

	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _ixH1], xmm0
	movapd [esp + _iyH1], xmm1
	movapd [esp + _izH1], xmm2
	movapd [esp + _ixH2], xmm3
	movapd [esp + _iyH2], xmm4
	movapd [esp + _izH2], xmm5
	
	/* clear vctot and i forces */
	xorpd xmm4, xmm4
	movapd [esp + _vctot], xmm4
	movapd [esp + _vnbtot], xmm4
	movapd [esp + _fixO], xmm4
	movapd [esp + _fiyO], xmm4
	movapd [esp + _fizO], xmm4
	movapd [esp + _fixH1], xmm4
	movapd [esp + _fiyH1], xmm4
	movapd [esp + _fizH1], xmm4
	movapd [esp + _fixH2], xmm4
	movapd [esp + _fiyH2], xmm4
	movapd [esp + _fizH2], xmm4
	
	mov   eax, [ebp + _jindex]
	mov   ecx, [eax]	         /* jindex[n] */
	mov   edx, [eax + 4]	         /* jindex[n+1] */
	add   [ebp + _jindex],  4
	sub   edx, ecx                   /* number of innerloop atoms */

	mov   esi, [ebp + _pos]
	mov   edi, [ebp + _faction]	
	mov   eax, [ebp + _jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + _innerjjnr], eax     /* pointer to jjnr[nj0] */
	sub   edx,  2
	mov   [esp + _innerk], edx        /* number of innerloop atoms */
	jge   .i3320_unroll_loop
	jmp   .i3320_checksingle
.i3320_unroll_loop:
	/* twice unrolled innerloop here */
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]	
	mov   ebx, [edx + 4]
	
	add   [esp + _innerjjnr],  8 /* advance pointer (unrolled 2) */

	mov esi, [ebp + _charge]        /* base of charge[] */
	
	movlpd xmm3, [esi + eax*8]
	movhpd xmm3, [esi + ebx*8]
	movapd xmm4, xmm3	     
	mulpd  xmm3, [esp + _iqO]
	mulpd  xmm4, [esp + _iqH]
	movapd  [esp + _qqO], xmm3
	movapd  [esp + _qqH], xmm4	

	movd  mm0, eax		/* use mmx registers as temp storage */
	movd  mm1, ebx
	mov esi, [ebp + _type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov esi, [ebp + _nbfp]
	shl eax, 1	
	shl ebx, 1	
	mov edi, [esp + _ntia]
	add eax, edi
	add ebx, edi

	movupd xmm6, [esi + eax*8]	/* c6a c12a */
	movupd xmm7, [esi + ebx*8]	/* c6b c12b */
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0
	movd  ebx, mm1
	movapd [esp + _c6], xmm4
	movapd [esp + _c12], xmm6

	mov esi, [ebp + _pos]       /* base of pos[] */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */
	lea   ebx, [ebx + ebx*2]	

	/* move two coordinates to xmm0-xmm2 */	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]		

	/* move ixO-izO to xmm4-xmm6 */
	movapd xmm4, [esp + _ixO]
	movapd xmm5, [esp + _iyO]
	movapd xmm6, [esp + _izO]

	/* calc dr */
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	/* store dr */
	movapd [esp + _dxO], xmm4
	movapd [esp + _dyO], xmm5
	movapd [esp + _dzO], xmm6
	/* square it */
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6
	movapd xmm7, xmm4
	/* rsqO in xmm7 */

	/* move ixH1-izH1 to xmm4-xmm6 */
	movapd xmm4, [esp + _ixH1]
	movapd xmm5, [esp + _iyH1]
	movapd xmm6, [esp + _izH1]

	/* calc dr */
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	/* store dr */
	movapd [esp + _dxH1], xmm4
	movapd [esp + _dyH1], xmm5
	movapd [esp + _dzH1], xmm6
	/* square it */
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm6, xmm5
	addpd xmm6, xmm4
	/* rsqH1 in xmm6 */

	/* move ixH2-izH2 to xmm3-xmm5 */ 
	movapd xmm3, [esp + _ixH2]
	movapd xmm4, [esp + _iyH2]
	movapd xmm5, [esp + _izH2]

	/* calc dr */
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2

	/* store dr */
	movapd [esp + _dxH2], xmm3
	movapd [esp + _dyH2], xmm4
	movapd [esp + _dzH2], xmm5
	/* square it */
	mulpd xmm3,xmm3
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	addpd xmm5, xmm4
	addpd xmm5, xmm3
	/* rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 */

	/* start with rsqO - put seed in xmm2 */
	cvtpd2ps xmm2, xmm7	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulpd   xmm2, xmm7	/* rsq*lu*lu */
	subpd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulpd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulpd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm2, xmm7
	movapd xmm3, xmm4
	mulpd xmm4, xmm4	/* lu*lu */
	mulpd xmm2, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subpd xmm4, xmm2	/* 3-rsq*lu*lu */
	mulpd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulpd xmm4, [esp + _half] /* rinv */
	movapd  [esp + _rinvO], xmm4	/* rinvO in xmm4 */
	mulpd   xmm7, xmm4
	movapd  [esp + _rO], xmm7	/* r in xmm7 */
	
	/* rsqH1 - seed in xmm2 */
	cvtpd2ps xmm2, xmm6	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulpd   xmm2, xmm6	/* rsq*lu*lu */
	subpd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulpd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulpd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm2, xmm6
	movapd xmm3, xmm4
	mulpd xmm4, xmm4	/* lu*lu */
	mulpd xmm2, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subpd xmm4, xmm2	/* 3-rsq*lu*lu */
	mulpd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulpd xmm4, [esp + _half] /* rinv */
	movapd [esp + _rinvH1], xmm4	/* rinvH1 */
	mulpd  xmm6, xmm4
	movapd [esp + _rH1], xmm6	/* rH1 */
	
	/* rsqH2 - seed in xmm2 */
	cvtpd2ps xmm2, xmm5	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulpd   xmm2, xmm5	/* rsq*lu*lu */
	subpd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulpd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulpd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm2, xmm5
	movapd xmm3, xmm4
	mulpd xmm4, xmm4	/* lu*lu */
	mulpd xmm2, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subpd xmm4, xmm2	/* 3-rsq*lu*lu */
	mulpd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulpd xmm4, [esp + _half] /* rinv */
	movapd [esp + _rinvH2], xmm4 /* rinv */
	mulpd xmm5, xmm4
	movapd [esp + _rH2], xmm5 /* r */

	/* do O interactions */
	/* rO is still in xmm7 */
	movapd xmm0, [esp + _rinvO]
	mulpd   xmm7, [esp + _tsc]
	cvttpd2pi mm6, xmm7	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm7, xmm6
	movapd xmm1, xmm7	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	movd mm0, eax	
	movd mm1, ebx
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */
	lea   eax, [eax + eax*2] /* idx *= 3 (total *=12 now) */
	lea   ebx, [ebx + ebx*2]
	
	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 
        mulpd  xmm6, xmm1       /* xmm6=Geps */
        mulpd  xmm7, xmm2       /* xmm7=Heps2 */
        addpd  xmm5, xmm6
        addpd  xmm5, xmm7       /* xmm5=Fp */       
        mulpd  xmm7, [esp + _two]       /* two*Heps2 */
        movapd xmm0, [esp + _qqO]
        addpd  xmm7, xmm6
        addpd  xmm7, xmm5 /* xmm7=FF */
        mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
        addpd  xmm5, xmm4 /* xmm5=VV */
        mulpd  xmm5, xmm0 /* vcoul=qq*VV */ 
        mulpd  xmm0, xmm7 /* fijC=FF*qq */
	/* at this point xmm5 contains vcoul and xmm0 fijC */
	/* increment vcoul - then we can get rid of mm5 */
	/* update vctot */
	addpd  xmm5, [esp + _vctot]
	movapd [esp + _vctot], xmm5 
	
	/* Dispersion */
	movupd xmm4, [esi + eax*8 + 32]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8 + 32]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 48]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 48]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* Dispersion table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	mulpd  xmm7, [esp + _two]	/* two*Heps2 */
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 /* xmm7=FF */
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */

	movapd xmm4, [esp + _c6]
	mulpd  xmm7, xmm4	 /* fijD */
	mulpd  xmm5, xmm4	 /* vnb6 */
	addpd  xmm0, xmm7	/* fscal summation */
		
	addpd  xmm5, [esp + _vnbtot]
	movapd [esp + _vnbtot], xmm5
	
	/* Repulsion */
	movupd xmm4, [esi + eax*8 + 64]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8 + 64]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 80]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 80]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* Dispersion table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	mulpd  xmm7, [esp + _two]	/* two*Heps2 */
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 /* xmm7=FF */
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */

	movapd xmm4, [esp + _c12]
	mulpd  xmm7, xmm4 /* fijR */
	mulpd  xmm5, xmm4 /* vnb12 */
	addpd  xmm7, xmm0	/* fscal summation */
	mulpd xmm7, [esp + _tsc]
	mulpd xmm7, [esp + _rinvO]

	addpd  xmm5, [esp + _vnbtot]
	movapd [esp + _vnbtot], xmm5

	xorpd xmm4, xmm4
	subpd xmm4, xmm7
	movapd xmm0, [esp + _dx]
	movapd xmm1, [esp + _dy]
	movapd xmm2, [esp + _dz]

	movd eax, mm0	
	movd ebx, mm1
	
	movapd xmm0, [esp + _dxO]
	movapd xmm1, [esp + _dyO]
	movapd xmm2, [esp + _dzO]
	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4	/* tx in xmm0-xmm2 */

	/* update O forces */
	movapd xmm3, [esp + _fixO]
	movapd xmm4, [esp + _fiyO]
	movapd xmm7, [esp + _fizO]
	addpd  xmm3, xmm0
	addpd  xmm4, xmm1
	addpd  xmm7, xmm2
	movapd [esp + _fixO], xmm3
	movapd [esp + _fiyO], xmm4
	movapd [esp + _fizO], xmm7
	/* update j forces with water O */
	movapd [esp + _fjx], xmm0
	movapd [esp + _fjy], xmm1
	movapd [esp + _fjz], xmm2

	/* Done with O interactions - now H1! */
	movapd xmm7, [esp + _rH1]
	mulpd xmm7, [esp + _tsc]
	cvttpd2pi mm6, xmm7	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm7, xmm6
	movapd xmm1, xmm7	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */
	lea   eax, [eax + eax*2] /* idx *= 3 (total *=12 now) */	
	lea   ebx, [ebx + ebx*2]
	
	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	mulpd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqH]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 /* xmm7=FF */
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulpd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */
        /* increment vcoul */
	xorpd  xmm4, xmm4
        addpd  xmm5, [esp + _vctot]
	mulpd  xmm3, [esp + _rinvH1]
        movapd [esp + _vctot], xmm5 
	mulpd  xmm3, [esp + _tsc]
	subpd xmm4, xmm3

	movapd xmm0, [esp + _dxH1]
	movapd xmm1, [esp + _dyH1]
	movapd xmm2, [esp + _dzH1]
	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4

	/* update H1 forces */
	movapd xmm3, [esp + _fixH1]
	movapd xmm4, [esp + _fiyH1]
	movapd xmm7, [esp + _fizH1]
	addpd  xmm3, xmm0
	addpd  xmm4, xmm1
	addpd  xmm7, xmm2
	movapd [esp + _fixH1], xmm3
	movapd [esp + _fiyH1], xmm4
	movapd [esp + _fizH1], xmm7
	/* update j forces with water H1 */
	addpd  xmm0, [esp + _fjx]
	addpd  xmm1, [esp + _fjy]
	addpd  xmm2, [esp + _fjz]
	movapd [esp + _fjx], xmm0
	movapd [esp + _fjy], xmm1
	movapd [esp + _fjz], xmm2

	/* Done with H1, finally we do H2 interactions */
	movapd xmm7, [esp + _rH2]
	mulpd   xmm7, [esp + _tsc]
	cvttpd2pi mm6, xmm7	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm7, xmm6
	movapd xmm1, xmm7	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */
	lea   eax, [eax + eax*2] /* idx *= 3 (total *=12 now)*/
	lea   ebx, [ebx + ebx*2]

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	mulpd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqH]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 /* xmm7=FF */
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulpd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */
        /* increment vcoul */
	xorpd  xmm4, xmm4
        addpd  xmm5, [esp + _vctot]
	mulpd  xmm3, [esp + _rinvH2]
        movapd [esp + _vctot], xmm5 
	mulpd  xmm3, [esp + _tsc]
	subpd  xmm4, xmm3

	movapd xmm0, [esp + _dxH2]
	movapd xmm1, [esp + _dyH2]
	movapd xmm2, [esp + _dzH2]
	mulpd  xmm0, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm2, xmm4

        movd eax, mm0   
        movd ebx, mm1
	
	/* update H2 forces */
	movapd xmm3, [esp + _fixH2]
	movapd xmm4, [esp + _fiyH2]
	movapd xmm7, [esp + _fizH2]
	addpd  xmm3, xmm0
	addpd  xmm4, xmm1
	addpd  xmm7, xmm2
	movapd [esp + _fixH2], xmm3
	movapd [esp + _fiyH2], xmm4
	movapd [esp + _fizH2], xmm7

	mov edi, [ebp + _faction]
	/* update j forces */
	addpd  xmm0, [esp + _fjx]
	addpd  xmm1, [esp + _fjy]
	addpd  xmm2, [esp + _fjz]

	/* the fj's - start by accumulating forces from memory */
	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	movhpd xmm3, [edi + ebx*8]
	movhpd xmm4, [edi + ebx*8 + 8]
	movhpd xmm5, [edi + ebx*8 + 16]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5
	movhpd [edi + ebx*8], xmm3
	movhpd [edi + ebx*8 + 8], xmm4
	movhpd [edi + ebx*8 + 16], xmm5
			
	/* should we do one more iteration? */
	sub   [esp + _innerk],  2
	jl    .i3320_checksingle
	jmp   .i3320_unroll_loop
.i3320_checksingle:	
	mov   edx, [esp + _innerk]
	and   edx, 1
	jnz   .i3320_dosingle
	jmp   .i3320_updateouterdata
.i3320_dosingle:
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]

	mov esi, [ebp + _charge]        /* base of charge[] */
	xorpd xmm3, xmm3	
	movlpd xmm3, [esi + eax*8]
	movapd xmm4, xmm3	     
	mulpd  xmm3, [esp + _iqO]
	mulpd  xmm4, [esp + _iqH]

	movd  mm0, eax		/* use mmx registers as temp storage */
	movapd  [esp + _qqO], xmm3
	movapd  [esp + _qqH], xmm4	
	
	mov esi, [ebp + _type]
	mov eax, [esi + eax*4]
	mov esi, [ebp + _nbfp]
	shl eax, 1	
	mov edi, [esp + _ntia]
	add eax, edi

	movupd xmm6, [esi + eax*8]	/* c6a c12a */
	xorpd xmm7, xmm7
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0
	movapd [esp + _c6], xmm4
	movapd [esp + _c12], xmm6
	
	mov esi, [ebp + _pos]       /* base of pos[] */
	lea   eax, [eax + eax*2]         /* replace jnr with j3 */
	
	/* move coords to xmm0-xmm2 */
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]

	/* move ixO-izO to xmm4-xmm6 */
	movapd xmm4, [esp + _ixO]
	movapd xmm5, [esp + _iyO]
	movapd xmm6, [esp + _izO]

	/* calc dr */
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	/* store dr */
	movapd [esp + _dxO], xmm4
	movapd [esp + _dyO], xmm5
	movapd [esp + _dzO], xmm6
	/* square it */
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6
	movapd xmm7, xmm4
	/* rsqO in xmm7 */

	/* move ixH1-izH1 to xmm4-xmm6 */
	movapd xmm4, [esp + _ixH1]
	movapd xmm5, [esp + _iyH1]
	movapd xmm6, [esp + _izH1]

	/* calc dr */
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	/* store dr */
	movapd [esp + _dxH1], xmm4
	movapd [esp + _dyH1], xmm5
	movapd [esp + _dzH1], xmm6
	/* square it */
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm6, xmm5
	addsd xmm6, xmm4
	/* rsqH1 in xmm6 */

	/* move ixH2-izH2 to xmm3-xmm5 */ 
	movapd xmm3, [esp + _ixH2]
	movapd xmm4, [esp + _iyH2]
	movapd xmm5, [esp + _izH2]

	/* calc dr */
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2

	/* store dr */
	movapd [esp + _dxH2], xmm3
	movapd [esp + _dyH2], xmm4
	movapd [esp + _dzH2], xmm5
	/* square it */
	mulsd xmm3,xmm3
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	addsd xmm5, xmm4
	addsd xmm5, xmm3
	/* rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 */

	/* start with rsqO - put seed in xmm2 */
	cvtsd2ss xmm2, xmm7	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulsd   xmm2, xmm7	/* rsq*lu*lu */
	subsd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulsd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulsd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm2, xmm7
	movapd xmm3, xmm4
	mulsd xmm4, xmm4	/* lu*lu */
	mulsd xmm2, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subsd xmm4, xmm2	/* 3-rsq*lu*lu */
	mulsd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulsd xmm4, [esp + _half] /* rinv */
	movapd  [esp + _rinvO], xmm4	/* rinvO in xmm4 */
	mulsd   xmm7, xmm4
	movapd  [esp + _rO], xmm7	/* r in xmm7 */

	/* rsqH1 - seed in xmm2 */
	cvtsd2ss xmm2, xmm6	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulsd   xmm2, xmm6	/* rsq*lu*lu */
	subsd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulsd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulsd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm2, xmm6
	movapd xmm3, xmm4
	mulsd xmm4, xmm4	/* lu*lu */
	mulsd xmm2, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subsd xmm4, xmm2	/* 3-rsq*lu*lu */
	mulsd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulsd xmm4, [esp + _half] /* rinv */
	movapd [esp + _rinvH1], xmm4	/* rinvH1 */
	mulsd  xmm6, xmm4
	movapd [esp + _rH1], xmm6	/* rH1 */
	
	/* rsqH2 - seed in xmm2 */
	cvtsd2ss xmm2, xmm5	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulsd   xmm2, xmm5	/* rsq*lu*lu */
	subsd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulsd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulsd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm2, xmm5
	movapd xmm3, xmm4
	mulsd xmm4, xmm4	/* lu*lu */
	mulsd xmm2, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subsd xmm4, xmm2	/* 3-rsq*lu*lu */
	mulsd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulsd xmm4, [esp + _half] /* rinv */
	movapd [esp + _rinvH2], xmm4 /* rinv */
	mulsd xmm5, xmm4
	movapd [esp + _rH2], xmm5 /* r */

	/* do O interactions */
	movd mm0, eax	
	/* rO is still in xmm7 */
	mulsd   xmm7, [esp + _tsc]
	cvttsd2si eax, xmm7	/* lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm7, xmm6
	movapd xmm1, xmm7	/* xmm1=eps */
	movapd xmm2, xmm7
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	 	
	shl eax, 2		
	mov  esi, [ebp + _VFtab]
	lea   eax, [eax + eax*2] /* idx *= 3 (total *=12 now) */	
	
	movupd xmm4, [esi + eax*8]	/* Y1 F1 */
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 
        mulsd  xmm6, xmm1       /* xmm6=Geps */
        mulsd  xmm7, xmm2       /* xmm7=Heps2 */
        addsd  xmm5, xmm6	/* F+Geps */
        addsd  xmm5, xmm7       /* xmm5=Fp=F+Geps+Heps2 */       
        mulsd  xmm7, [esp + _two]       /* two*Heps2 */
        addsd  xmm7, xmm6	/* Geps + 2*Heps2 */
        addsd  xmm7, xmm5 /* xmm7=FF */
        mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
        addsd  xmm5, xmm4 /* xmm5=VV */
	
        movapd  xmm0, [esp + _qqO]
        mulsd  xmm5, xmm0 /* vcoul=qq*VV */ 
        mulsd  xmm0, xmm7 /* fijC=FF*qq */
	/* at this point xmm5 contains vcoul and xmm0 fijC */
	/* increment vcoul - then we can get rid of mm5 */
	/* update vctot */
	addsd  xmm5, [esp + _vctot]
	movlpd [esp + _vctot], xmm5 
	
	/* Dispersion */
	movupd xmm4, [esi + eax*8 + 32]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 48]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* Dispersion table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	mulsd  xmm7, [esp + _two]	/* two*Heps2 */
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 /* xmm7=FF */
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */

	movapd xmm4, [esp + _c6]
	mulsd  xmm7, xmm4	 /* fijD */
	mulsd  xmm5, xmm4	 /* vnb6 */
	addsd  xmm0, xmm7	/* fscal summation */
		
	addsd  xmm5, [esp + _vnbtot]
	movsd [esp + _vnbtot], xmm5
	
	/* Repulsion */
	movupd xmm4, [esi + eax*8 + 64]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 80]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* Dispersion table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	mulsd  xmm7, [esp + _two]	/* two*Heps2 */
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 /* xmm7=FF */
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */

	movapd xmm4, [esp + _c12]
	mulsd  xmm7, xmm4 /* fijR */
	mulsd  xmm5, xmm4 /* vnb12 */
	addsd  xmm7, xmm0	/* fscal summation */
	mulsd xmm7, [esp + _tsc]
	mulsd xmm7, [esp + _rinvO]

	addsd  xmm5, [esp + _vnbtot]
	movsd [esp + _vnbtot], xmm5

	xorpd xmm4, xmm4
	subsd xmm4, xmm7	
	
	movapd xmm0, [esp + _dxO]
	movapd xmm1, [esp + _dyO]
	movapd xmm2, [esp + _dzO]
	mulsd  xmm0, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm2, xmm4	/* tx in xmm0-xmm2 */

	/* update O forces */
	movapd xmm3, [esp + _fixO]
	movapd xmm4, [esp + _fiyO]
	movapd xmm7, [esp + _fizO]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm7, xmm2
	movlpd [esp + _fixO], xmm3
	movlpd [esp + _fiyO], xmm4
	movlpd [esp + _fizO], xmm7
	/* update j forces with water O */
	movlpd [esp + _fjx], xmm0
	movlpd [esp + _fjy], xmm1
	movlpd [esp + _fjz], xmm2

	/* Done with O interactions - now H1! */
	movapd xmm7, [esp + _rH1]
	mulpd xmm7, [esp + _tsc]
	cvttsd2si eax, xmm7	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subpd xmm7, xmm6
	movapd xmm1, xmm7	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	lea   eax, [eax + eax*2] /* idx *= 3 (total *=12 now)*/	

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	mulsd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqH]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 /* xmm7=FF */
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulsd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */
        /* increment vcoul */
	xorpd  xmm4, xmm4
        addsd  xmm5, [esp + _vctot]
	mulsd  xmm3, [esp + _rinvH1]
        movlpd [esp + _vctot], xmm5 
	mulsd  xmm3, [esp + _tsc]
	subsd xmm4, xmm3

	movapd xmm0, [esp + _dxH1]
	movapd xmm1, [esp + _dyH1]
	movapd xmm2, [esp + _dzH1]
	mulsd  xmm0, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm2, xmm4

	/* update H1 forces */
	movapd xmm3, [esp + _fixH1]
	movapd xmm4, [esp + _fiyH1]
	movapd xmm7, [esp + _fizH1]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm7, xmm2
	movlpd [esp + _fixH1], xmm3
	movlpd [esp + _fiyH1], xmm4
	movlpd [esp + _fizH1], xmm7
	/* update j forces with water H1 */
	addsd  xmm0, [esp + _fjx]
	addsd  xmm1, [esp + _fjy]
	addsd  xmm2, [esp + _fjz]
	movlpd [esp + _fjx], xmm0
	movlpd [esp + _fjy], xmm1
	movlpd [esp + _fjz], xmm2

	/* Done with H1, finally we do H2 interactions */
	movapd xmm7, [esp + _rH2]
	mulsd   xmm7, [esp + _tsc]
	cvttsd2si eax, xmm7	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm7, xmm6
	movapd xmm1, xmm7	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	lea   eax, [eax + eax*2] /* idx *= 3 (total *=12 now)*/	

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	mulsd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqH]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 /* xmm7=FF */
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulsd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */
        /* increment vcoul */
	xorpd  xmm4, xmm4
        addsd  xmm5, [esp + _vctot]
	mulsd  xmm3, [esp + _rinvH2]
        movlpd [esp + _vctot], xmm5 
	mulsd  xmm3, [esp + _tsc]
	subsd  xmm4, xmm3

	movapd xmm0, [esp + _dxH2]
	movapd xmm1, [esp + _dyH2]
	movapd xmm2, [esp + _dzH2]
	mulsd  xmm0, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm2, xmm4

        movd eax, mm0   
	
	/* update H2 forces */
	movapd xmm3, [esp + _fixH2]
	movapd xmm4, [esp + _fiyH2]
	movapd xmm7, [esp + _fizH2]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm7, xmm2
	movlpd [esp + _fixH2], xmm3
	movlpd [esp + _fiyH2], xmm4
	movlpd [esp + _fizH2], xmm7

	mov edi, [ebp + _faction]
	/* update j forces */
	addsd  xmm0, [esp + _fjx]
	addsd  xmm1, [esp + _fjy]
	addsd  xmm2, [esp + _fjz]

	/* the fj's - start by accumulating forces from memory */
	movlpd xmm3, [edi + eax*8]
	movlpd xmm4, [edi + eax*8 + 8]
	movlpd xmm5, [edi + eax*8 + 16]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	movlpd [edi + eax*8], xmm3
	movlpd [edi + eax*8 + 8], xmm4
	movlpd [edi + eax*8 + 16], xmm5

.i3320_updateouterdata:
	mov   ecx, [esp + _ii3]
	mov   edi, [ebp + _faction]
	mov   esi, [ebp + _fshift]
	mov   edx, [esp + _is3]

	/* accumulate  Oi forces in xmm0, xmm1, xmm2 */
	movapd xmm0, [esp + _fixO]
	movapd xmm1, [esp + _fiyO]
	movapd xmm2, [esp + _fizO]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 /* sum is in low xmm0-xmm2 */

	movapd xmm3, xmm0	
	movapd xmm4, xmm1	
	movapd xmm5, xmm2	

	/* increment i force */
	movsd  xmm3, [edi + ecx*8]
	movsd  xmm4, [edi + ecx*8 + 8]
	movsd  xmm5, [edi + ecx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8],     xmm3
	movsd  [edi + ecx*8 + 8], xmm4
	movsd  [edi + ecx*8 + 16], xmm5

	/* accumulate force in xmm6/xmm7 for fshift */
	movapd xmm6, xmm0
	movsd xmm7, xmm2
	unpcklpd xmm6, xmm1

	/* accumulate H1i forces in xmm0, xmm1, xmm2 */
	movapd xmm0, [esp + _fixH1]
	movapd xmm1, [esp + _fiyH1]
	movapd xmm2, [esp + _fizH1]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 /* sum is in low xmm0-xmm2 */

	/* increment i force */
	movsd  xmm3, [edi + ecx*8 + 24]
	movsd  xmm4, [edi + ecx*8 + 32]
	movsd  xmm5, [edi + ecx*8 + 40]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8 + 24], xmm3
	movsd  [edi + ecx*8 + 32], xmm4
	movsd  [edi + ecx*8 + 40], xmm5

	/* accumulate force in xmm6/xmm7 for fshift */
	addsd xmm7, xmm2
	unpcklpd xmm0, xmm1
	addpd xmm6, xmm0

	/* accumulate H2i forces in xmm0, xmm1, xmm2 */
	movapd xmm0, [esp + _fixH2]
	movapd xmm1, [esp + _fiyH2]
	movapd xmm2, [esp + _fizH2]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 /* sum is in low xmm0-xmm2 */

	movapd xmm3, xmm0	
	movapd xmm4, xmm1	
	movapd xmm5, xmm2	

	/* increment i force */
	movsd  xmm3, [edi + ecx*8 + 48]
	movsd  xmm4, [edi + ecx*8 + 56]
	movsd  xmm5, [edi + ecx*8 + 64]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8 + 48], xmm3
	movsd  [edi + ecx*8 + 56], xmm4
	movsd  [edi + ecx*8 + 64], xmm5

	/* accumulate force in xmm6/xmm7 for fshift */
	addsd xmm7, xmm2
	unpcklpd xmm0, xmm1
	addpd xmm6, xmm0

	/* increment fshift force */
	movupd xmm3, [esi + edx*8]
	movsd  xmm4, [esi + edx*8 + 16]
	addpd  xmm3, xmm6
	addsd  xmm4, xmm7
	movupd [esi + edx*8],    xmm3
	movsd  [esi + edx*8 + 16], xmm4

	mov   edx, [ebp + _gid]  
	mov   edx, [edx]
	add   [ebp + _gid],  4	

	/* accumulate total potential energy and update it */
	movapd xmm7, [esp + _vctot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */
        
	/* add earlier value from mem */
	mov   eax, [ebp + _Vc]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* accumulate total lj energy and update it */
	movapd xmm7, [esp + _vnbtot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */

	/* add earlier value from mem */
	mov   eax, [ebp + _Vnb]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* finish if last */
	mov   ecx, [ebp + _nri]
	dec ecx
	jecxz .i3320_end
	/* not last, iterate once more! */ 
	mov [ebp + _nri], ecx
	jmp .i3320_outer
.i3320_end:
	emms
	mov eax, [esp + _salign]
	add esp, eax
	add esp, 792
	pop edi
	pop esi
        pop edx
        pop ecx
        pop ebx
        pop eax
	leave
	ret
	

	
		

	
.globl inl3330_sse2
	.type inl3330_sse2,@function
inl3330_sse2:	
.equ		_nri,		8
.equ		_iinr,		12
.equ		_jindex,	16
.equ		_jjnr,		20
.equ		_shift,		24
.equ		_shiftvec,	28
.equ		_fshift,	32
.equ		_gid,		36
.equ		_pos,		40		
.equ		_faction,	44
.equ		_charge,	48
.equ		_facel,		52 /* double */ 
.equ		_Vc,		60
.equ		_type,		64
.equ		_ntype,		68
.equ		_nbfp,		72	
.equ		_Vnb,		76
.equ		_tabscale,	80 /* double */ 
.equ		_VFtab,		88
	/* stack offsets for local variables */ 
	/* bottom of stack is cache-aligned for sse2 use */
.equ		_ixO,		0
.equ		_iyO,		16
.equ		_izO,		32
.equ		_ixH1,		48
.equ		_iyH1,		64
.equ		_izH1,		80
.equ		_ixH2,		96
.equ		_iyH2,		112
.equ		_izH2,		128
.equ		_jxO,		144
.equ		_jyO,		160
.equ		_jzO,		176
.equ		_jxH1,		192
.equ		_jyH1,		208
.equ		_jzH1,		224
.equ		_jxH2,		240
.equ		_jyH2,		256
.equ		_jzH2,		272
.equ		_dxOO,		288
.equ		_dyOO,		304
.equ		_dzOO,		320	
.equ		_dxOH1,		336
.equ		_dyOH1,		352
.equ		_dzOH1,		368	
.equ		_dxOH2,		384
.equ		_dyOH2,		400
.equ		_dzOH2,		416	
.equ		_dxH1O,		432
.equ		_dyH1O,		448
.equ		_dzH1O,		464	
.equ		_dxH1H1,	480
.equ		_dyH1H1,	496
.equ		_dzH1H1,	512	
.equ		_dxH1H2,	528
.equ		_dyH1H2,	544
.equ		_dzH1H2,	560	
.equ		_dxH2O,		576
.equ		_dyH2O,		592
.equ		_dzH2O,		608	
.equ		_dxH2H1,	624
.equ		_dyH2H1,	640
.equ		_dzH2H1,	656	
.equ		_dxH2H2,	672
.equ		_dyH2H2,	688
.equ		_dzH2H2,	704
.equ		_qqOO,		720
.equ		_qqOH,		736
.equ		_qqHH,		752
.equ		_two,		768
.equ		_tsc,		784
.equ		_c6,		800
.equ		_c12,		816		 
.equ		_vctot,		832
.equ		_vnbtot,	848
.equ		_fixO,		864
.equ		_fiyO,		880
.equ		_fizO,		896
.equ		_fixH1,		912
.equ		_fiyH1,		928
.equ		_fizH1,		944
.equ		_fixH2,		960
.equ		_fiyH2,		976
.equ		_fizH2,		992
.equ		_fjxO,		1008
.equ		_fjyO,		1024
.equ		_fjzO,		1040
.equ		_fjxH1,		1056
.equ		_fjyH1,		1072
.equ		_fjzH1,		1088
.equ		_fjxH2,		1104
.equ		_fjyH2,		1120
.equ		_fjzH2,		1136
.equ		_half,		1152
.equ		_three,		1168
.equ		_rsqOO,		1184
.equ		_rsqOH1,	1200
.equ		_rsqOH2,	1216
.equ		_rsqH1O,	1232
.equ		_rsqH1H1,	1248
.equ		_rsqH1H2,	1264
.equ		_rsqH2O,	1280
.equ		_rsqH2H1,	1296
.equ		_rsqH2H2,	1312
.equ		_rinvOO,	1328
.equ		_rinvOH1,	1344
.equ		_rinvOH2,	1360
.equ		_rinvH1O,	1376
.equ		_rinvH1H1,	1392
.equ		_rinvH1H2,	1408
.equ		_rinvH2O,	1424
.equ		_rinvH2H1,	1440
.equ		_rinvH2H2,	1456
.equ		_fscal,		1472	
.equ		_is3,		1488
.equ		_ii3,		1492
.equ		_innerjjnr,	1496
.equ		_innerk,	1500
.equ		_salign,	1504							
	push ebp
	mov ebp,esp	
        push eax
        push ebx
        push ecx
        push edx
	push esi
	push edi
	sub esp, 1508		/* local stack space */
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + _salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_two]
	movupd xmm2, [sse2_three]
	movsd xmm3, [ebp + _tabscale]
	movapd [esp + _half],  xmm0
	movapd [esp + _two],  xmm1
	movapd [esp + _three], xmm2
	shufpd xmm3, xmm3, 0
	movapd [esp + _tsc],  xmm3

	/* assume we have at least one i particle - start directly */
	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	mov   ebx, [ecx]	        /* ebx =ii */

	mov   edx, [ebp + _charge]
	movsd xmm3, [edx + ebx*8]	
	movsd xmm4, xmm3	
	movsd xmm5, [edx + ebx*8 + 8]	
	movsd xmm6, [ebp + _facel]
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm5
	mulsd  xmm5, xmm5
	mulsd  xmm3, xmm6
	mulsd  xmm4, xmm6
	mulsd  xmm5, xmm6
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _qqOO], xmm3
	movapd [esp + _qqOH], xmm4
	movapd [esp + _qqHH], xmm5
		
	xorpd xmm0, xmm0
	mov   edx, [ebp + _type]
	mov   ecx, [edx + ebx*4]
	shl   ecx, 1
	mov   edx, ecx
	imul  ecx, [ebp + _ntype]      /* ecx = ntia = 2*ntype*type[ii0] */
	add   edx, ecx
	mov   eax, [ebp + _nbfp]
	movupd xmm0, [eax + edx*8]
	movhlps xmm1, xmm0
	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	movapd [esp + _c6], xmm0
	movapd [esp + _c12], xmm1

.i3330_outer:
	mov   eax, [ebp + _shift]      /* eax = pointer into shift[] */
	mov   ebx, [eax]		/* ebx=shift[n] */
	add   [ebp + _shift],  4  /* advance pointer one step */
	
	lea   ebx, [ebx + ebx*2]        /* ebx=3*is */
	mov   [esp + _is3],ebx    	/* store is3 */

	mov   eax, [ebp + _shiftvec]   /* eax = base of shiftvec[] */

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	add   [ebp + _iinr],  4   /* advance pointer */
	mov   ebx, [ecx]	        /* ebx =ii */

	lea   ebx, [ebx + ebx*2]	/* ebx = 3*ii=ii3 */
	mov   eax, [ebp + _pos]        /* eax = base of pos[] */ 
	mov   [esp + _ii3], ebx	
	
	movapd xmm3, xmm0
	movapd xmm4, xmm1
	movapd xmm5, xmm2
	addsd xmm3, [eax + ebx*8]
	addsd xmm4, [eax + ebx*8 + 8]
	addsd xmm5, [eax + ebx*8 + 16]		
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _ixO], xmm3
	movapd [esp + _iyO], xmm4
	movapd [esp + _izO], xmm5

	movsd xmm3, xmm0
	movsd xmm4, xmm1
	movsd xmm5, xmm2
	addsd xmm0, [eax + ebx*8 + 24]
	addsd xmm1, [eax + ebx*8 + 32]
	addsd xmm2, [eax + ebx*8 + 40]		
	addsd xmm3, [eax + ebx*8 + 48]
	addsd xmm4, [eax + ebx*8 + 56]
	addsd xmm5, [eax + ebx*8 + 64]		

	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _ixH1], xmm0
	movapd [esp + _iyH1], xmm1
	movapd [esp + _izH1], xmm2
	movapd [esp + _ixH2], xmm3
	movapd [esp + _iyH2], xmm4
	movapd [esp + _izH2], xmm5

	/* clear vctot and i forces */
	xorpd xmm4, xmm4
	movapd [esp + _vctot], xmm4
	movapd [esp + _vnbtot], xmm4
	movapd [esp + _fixO], xmm4
	movapd [esp + _fiyO], xmm4
	movapd [esp + _fizO], xmm4
	movapd [esp + _fixH1], xmm4
	movapd [esp + _fiyH1], xmm4
	movapd [esp + _fizH1], xmm4
	movapd [esp + _fixH2], xmm4
	movapd [esp + _fiyH2], xmm4
	movapd [esp + _fizH2], xmm4
	
	mov   eax, [ebp + _jindex]
	mov   ecx, [eax]	         /* jindex[n] */
	mov   edx, [eax + 4]	         /* jindex[n+1] */
	add   [ebp + _jindex],  4
	sub   edx, ecx                   /* number of innerloop atoms */

	mov   esi, [ebp + _pos] 
	mov   edi, [ebp + _faction]	
	mov   eax, [ebp + _jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + _innerjjnr], eax     /* pointer to jjnr[nj0] */
	sub   edx,  2
	mov   [esp + _innerk], edx        /* number of innerloop atoms */
	jge   .i3330_unroll_loop
	jmp   .i3330_checksingle
.i3330_unroll_loop:
	/* twice unrolled innerloop here */
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]	
	mov   ebx, [edx + 4] 
	
	add   [esp + _innerjjnr], 8 /* advance pointer (unrolled 2) */

	mov esi, [ebp + _pos]       /* base of pos[] */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */
	lea   ebx, [ebx + ebx*2]	
	
	/* move j coordinates to local temp variables */
	movlpd xmm2, [esi + eax*8]
	movlpd xmm3, [esi + eax*8 + 8]
	movlpd xmm4, [esi + eax*8 + 16]
	movlpd xmm5, [esi + eax*8 + 24]
	movlpd xmm6, [esi + eax*8 + 32]
	movlpd xmm7, [esi + eax*8 + 40]
	movhpd xmm2, [esi + ebx*8]
	movhpd xmm3, [esi + ebx*8 + 8]
	movhpd xmm4, [esi + ebx*8 + 16]
	movhpd xmm5, [esi + ebx*8 + 24]
	movhpd xmm6, [esi + ebx*8 + 32]
	movhpd xmm7, [esi + ebx*8 + 40]
	movapd 	[esp + _jxO], xmm2
	movapd 	[esp + _jyO], xmm3
	movapd 	[esp + _jzO], xmm4
	movapd 	[esp + _jxH1], xmm5
	movapd 	[esp + _jyH1], xmm6
	movapd 	[esp + _jzH1], xmm7
	movlpd xmm2, [esi + eax*8 + 48]
	movlpd xmm3, [esi + eax*8 + 56]
	movlpd xmm4, [esi + eax*8 + 64]
	movhpd xmm2, [esi + ebx*8 + 48]
	movhpd xmm3, [esi + ebx*8 + 56]
	movhpd xmm4, [esi + ebx*8 + 64]
	movapd 	[esp + _jxH2], xmm2
	movapd 	[esp + _jyH2], xmm3
	movapd 	[esp + _jzH2], xmm4
	
	movapd xmm0, [esp + _ixO]
	movapd xmm1, [esp + _iyO]
	movapd xmm2, [esp + _izO]
	movapd xmm3, [esp + _ixO]
	movapd xmm4, [esp + _iyO]
	movapd xmm5, [esp + _izO]
	subpd  xmm0, [esp + _jxO]
	subpd  xmm1, [esp + _jyO]
	subpd  xmm2, [esp + _jzO]
	subpd  xmm3, [esp + _jxH1]
	subpd  xmm4, [esp + _jyH1]
	subpd  xmm5, [esp + _jzH1]
	movapd [esp + _dxOO], xmm0
	movapd [esp + _dyOO], xmm1
	movapd [esp + _dzOO], xmm2
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	movapd [esp + _dxOH1], xmm3
	movapd [esp + _dyOH1], xmm4
	movapd [esp + _dzOH1], xmm5
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + _rsqOO], xmm0
	movapd [esp + _rsqOH1], xmm3

	movapd xmm0, [esp + _ixO]
	movapd xmm1, [esp + _iyO]
	movapd xmm2, [esp + _izO]
	movapd xmm3, [esp + _ixH1]
	movapd xmm4, [esp + _iyH1]
	movapd xmm5, [esp + _izH1]
	subpd  xmm0, [esp + _jxH2]
	subpd  xmm1, [esp + _jyH2]
	subpd  xmm2, [esp + _jzH2]
	subpd  xmm3, [esp + _jxO]
	subpd  xmm4, [esp + _jyO]
	subpd  xmm5, [esp + _jzO]
	movapd [esp + _dxOH2], xmm0
	movapd [esp + _dyOH2], xmm1
	movapd [esp + _dzOH2], xmm2
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	movapd [esp + _dxH1O], xmm3
	movapd [esp + _dyH1O], xmm4
	movapd [esp + _dzH1O], xmm5
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + _rsqOH2], xmm0
	movapd [esp + _rsqH1O], xmm3

	movapd xmm0, [esp + _ixH1]
	movapd xmm1, [esp + _iyH1]
	movapd xmm2, [esp + _izH1]
	movapd xmm3, [esp + _ixH1]
	movapd xmm4, [esp + _iyH1]
	movapd xmm5, [esp + _izH1]
	subpd  xmm0, [esp + _jxH1]
	subpd  xmm1, [esp + _jyH1]
	subpd  xmm2, [esp + _jzH1]
	subpd  xmm3, [esp + _jxH2]
	subpd  xmm4, [esp + _jyH2]
	subpd  xmm5, [esp + _jzH2]
	movapd [esp + _dxH1H1], xmm0
	movapd [esp + _dyH1H1], xmm1
	movapd [esp + _dzH1H1], xmm2
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	movapd [esp + _dxH1H2], xmm3
	movapd [esp + _dyH1H2], xmm4
	movapd [esp + _dzH1H2], xmm5
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + _rsqH1H1], xmm0
	movapd [esp + _rsqH1H2], xmm3

	movapd xmm0, [esp + _ixH2]
	movapd xmm1, [esp + _iyH2]
	movapd xmm2, [esp + _izH2]
	movapd xmm3, [esp + _ixH2]
	movapd xmm4, [esp + _iyH2]
	movapd xmm5, [esp + _izH2]
	subpd  xmm0, [esp + _jxO]
	subpd  xmm1, [esp + _jyO]
	subpd  xmm2, [esp + _jzO]
	subpd  xmm3, [esp + _jxH1]
	subpd  xmm4, [esp + _jyH1]
	subpd  xmm5, [esp + _jzH1]
	movapd [esp + _dxH2O], xmm0
	movapd [esp + _dyH2O], xmm1
	movapd [esp + _dzH2O], xmm2
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	movapd [esp + _dxH2H1], xmm3
	movapd [esp + _dyH2H1], xmm4
	movapd [esp + _dzH2H1], xmm5
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm4, xmm3
	addpd  xmm4, xmm5
	movapd [esp + _rsqH2O], xmm0
	movapd [esp + _rsqH2H1], xmm4

	movapd xmm0, [esp + _ixH2]
	movapd xmm1, [esp + _iyH2]
	movapd xmm2, [esp + _izH2]
	subpd  xmm0, [esp + _jxH2]
	subpd  xmm1, [esp + _jyH2]
	subpd  xmm2, [esp + _jzH2]
	movapd [esp + _dxH2H2], xmm0
	movapd [esp + _dyH2H2], xmm1
	movapd [esp + _dzH2H2], xmm2
	mulpd xmm0, xmm0
	mulpd xmm1, xmm1
	mulpd xmm2, xmm2
	addpd xmm0, xmm1
	addpd xmm0, xmm2
	movapd [esp + _rsqH2H2], xmm0
		
	/* start doing invsqrt use rsq values in xmm0, xmm4 */
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulpd   xmm1, xmm1	/* luA*luA */
	mulpd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	mulpd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subpd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm3, [esp + _half] /* iter1 */
	mulpd   xmm7, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulpd   xmm3, xmm3	/* luA*luA */
	mulpd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	mulpd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subpd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm1, [esp + _half] /* rinv */
	mulpd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvH2H2], xmm1
	movapd [esp + _rinvH2H1], xmm5

	movapd xmm0, [esp + _rsqOO]
	movapd xmm4, [esp + _rsqOH1]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulpd   xmm1, xmm1	/* luA*luA */
	mulpd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	mulpd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subpd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm3, [esp + _half] /* iter1 of  */
	mulpd   xmm7, [esp + _half] /* iter1 of  */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulpd   xmm3, xmm3	/* luA*luA */
	mulpd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	mulpd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subpd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm1, [esp + _half] /* rinv */
	mulpd   xmm5, [esp + _half] /* rinv*/
	movapd [esp + _rinvOO], xmm1
	movapd [esp + _rinvOH1], xmm5

	movapd xmm0, [esp + _rsqOH2]
	movapd xmm4, [esp + _rsqH1O]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulpd   xmm1, xmm1	/* luA*luA */
	mulpd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	mulpd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subpd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm3, [esp + _half] /* iter1 */
	mulpd   xmm7, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulpd   xmm3, xmm3	/* luA*luA */
	mulpd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	mulpd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subpd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm1, [esp + _half] /* rinv */
	mulpd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvOH2], xmm1
	movapd [esp + _rinvH1O], xmm5

	movapd xmm0, [esp + _rsqH1H1]
	movapd xmm4, [esp + _rsqH1H2]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulpd   xmm1, xmm1	/* luA*luA */
	mulpd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	mulpd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subpd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm3, [esp + _half] /* iter1a */
	mulpd   xmm7, [esp + _half] /* iter1b */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulpd   xmm3, xmm3	/* luA*luA */
	mulpd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	mulpd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subpd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm1, [esp + _half] /* rinv */
	mulpd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvH1H1], xmm1
	movapd [esp + _rinvH1H2], xmm5

	movapd xmm0, [esp + _rsqH2O]
	cvtpd2ps xmm1, xmm0	
	rsqrtps xmm1, xmm1
	cvtps2pd xmm1, xmm1
	
	movapd  xmm2, xmm1	/* copy of luA */
	mulpd   xmm1, xmm1	/* luA*luA */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm3, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	mulpd   xmm3, xmm3	/* luA*luA */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm1, [esp + _half] /* rinv */
	movapd [esp + _rinvH2O], xmm1
	
	/* start with OO interaction */
	movapd xmm0, [esp + _rinvOO]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + _rsqOO] /* xmm1=r */
	mulpd  xmm1, [esp + _tsc]

	cvttpd2pi mm6, xmm1	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	movd mm0, eax	
	movd mm1, ebx
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */
	lea   eax, [eax + eax*2]	/* idx*=3 (12 total now) */
	lea   ebx, [ebx + ebx*2]	/* idx*=3 (12 total now) */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	mulpd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqOO]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 /* xmm7=FF */
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulpd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */
        /* increment vcoul - then we can get rid of mm5 */
        /* update vctot */
        addpd  xmm5, [esp + _vctot]
        movapd [esp + _vctot], xmm5

	/* put scalar force on stack temporarily */
	movapd [esp + _fscal], xmm3

	/* Dispersion */
	movupd xmm4, [esi + eax*8 + 32]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8 + 32]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 48]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 48]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* Dispersion table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	mulpd  xmm7, [esp + _two]	/* two*Heps2 */
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 /* xmm7=FF */
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */

	movapd xmm4, [esp + _c6]
	mulpd  xmm7, xmm4	 /* fijD */
	mulpd  xmm5, xmm4	 /* vnb6 */
	addpd  xmm7, [esp + _fscal] /* add to fscal */

	/* put scalar force back on stack Update vnbtot directly */
	addpd  xmm5, [esp + _vnbtot]
	movapd [esp + _fscal], xmm7
	movapd [esp + _vnbtot], xmm5

	/* Repulsion */
	movupd xmm4, [esi + eax*8 + 64]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8 + 64]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 80]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 80]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* Dispersion table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	mulpd  xmm7, [esp + _two]	/* two*Heps2 */
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 /* xmm7=FF */
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */

	movapd xmm4, [esp + _c12]
	mulpd  xmm7, xmm4 /* fijR */
	mulpd  xmm5, xmm4 /* vnb12 */
	addpd  xmm7, [esp + _fscal]

	addpd  xmm5, [esp + _vnbtot]
	movapd [esp + _vnbtot], xmm5
	xorpd  xmm4, xmm4

	mulpd xmm7, [esp + _tsc]
	mulpd xmm7, [esp + _rinvOO]
	subpd xmm4, xmm7

	movapd xmm0, xmm4
	movapd xmm1, xmm4
	movapd xmm2, xmm4

	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulpd xmm0, [esp + _dxOO]
	mulpd xmm1, [esp + _dyOO]
	mulpd xmm2, [esp + _dzOO]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixO]
	addpd xmm1, [esp + _fiyO]
	addpd xmm2, [esp + _fizO]
	movapd [esp + _fjxO], xmm3
	movapd [esp + _fjyO], xmm4
	movapd [esp + _fjzO], xmm5
	movapd [esp + _fixO], xmm0
	movapd [esp + _fiyO], xmm1
	movapd [esp + _fizO], xmm2

	/* O-H1 interaction */
	movapd xmm0, [esp + _rinvOH1]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + _rsqOH1] /* xmm1=r */
	mulpd  xmm1, [esp + _tsc]

	cvttpd2pi mm6, xmm1	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */
	lea   eax, [eax + eax*2]	/* idx*=3 (12 total now) */
	lea   ebx, [ebx + ebx*2]	/* idx*=3 (12 total now) */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	mulpd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqOH]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 /* xmm7=FF */
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulpd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */

        addpd  xmm5, [esp + _vctot]
        movapd [esp + _vctot], xmm5
	xorpd  xmm1, xmm1
	mulpd  xmm3,  [esp + _tsc]
	mulpd  xmm3, xmm0
	subpd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulpd xmm0, [esp + _dxOH1]
	mulpd xmm1, [esp + _dyOH1]
	mulpd xmm2, [esp + _dzOH1]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixO]
	addpd xmm1, [esp + _fiyO]
	addpd xmm2, [esp + _fizO]
	movapd [esp + _fjxH1], xmm3
	movapd [esp + _fjyH1], xmm4
	movapd [esp + _fjzH1], xmm5
	movapd [esp + _fixO], xmm0
	movapd [esp + _fiyO], xmm1
	movapd [esp + _fizO], xmm2

	/* O-H2 interaction */ 
	movapd xmm0, [esp + _rinvOH2]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + _rsqOH2] /* xmm1=r */
	mulpd  xmm1, [esp + _tsc]
	
	cvttpd2pi mm6, xmm1	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */
	lea   eax, [eax + eax*2]	/* idx*=3 (12 total now) */
	lea   ebx, [ebx + ebx*2]	/* idx*=3 (12 total now) */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	mulpd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqOH]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 /* xmm7=FF */
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulpd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */

        addpd  xmm5, [esp + _vctot]
        movapd [esp + _vctot], xmm5
	xorpd  xmm1, xmm1
	mulpd  xmm3,  [esp + _tsc]
	mulpd  xmm3, xmm0
	subpd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulpd xmm0, [esp + _dxOH2]
	mulpd xmm1, [esp + _dyOH2]
	mulpd xmm2, [esp + _dzOH2]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixO]
	addpd xmm1, [esp + _fiyO]
	addpd xmm2, [esp + _fizO]
	movapd [esp + _fjxH2], xmm3
	movapd [esp + _fjyH2], xmm4
	movapd [esp + _fjzH2], xmm5
	movapd [esp + _fixO], xmm0
	movapd [esp + _fiyO], xmm1
	movapd [esp + _fizO], xmm2

	/* H1-O interaction */
	movapd xmm0, [esp + _rinvH1O]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + _rsqH1O] /* xmm1=r */
	mulpd  xmm1, [esp + _tsc]
	
	cvttpd2pi mm6, xmm1	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */
	lea   eax, [eax + eax*2]	/* idx*=3 (12 total now) */
	lea   ebx, [ebx + ebx*2]	/* idx*=3 (12 total now) */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	mulpd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqOH]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 /* xmm7=FF */
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulpd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */

        addpd  xmm5, [esp + _vctot]
        movapd [esp + _vctot], xmm5
	xorpd  xmm1, xmm1
	mulpd  xmm3,  [esp + _tsc]
	mulpd  xmm3, xmm0
	subpd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	movapd xmm3, [esp + _fjxO]
	movapd xmm4, [esp + _fjyO]
	movapd xmm5, [esp + _fjzO]
	mulpd xmm0, [esp + _dxH1O]
	mulpd xmm1, [esp + _dyH1O]
	mulpd xmm2, [esp + _dzH1O]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixH1]
	addpd xmm1, [esp + _fiyH1]
	addpd xmm2, [esp + _fizH1]
	movapd [esp + _fjxO], xmm3
	movapd [esp + _fjyO], xmm4
	movapd [esp + _fjzO], xmm5
	movapd [esp + _fixH1], xmm0
	movapd [esp + _fiyH1], xmm1
	movapd [esp + _fizH1], xmm2

	/* H1-H1 interaction */
	movapd xmm0, [esp + _rinvH1H1]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + _rsqH1H1] /* xmm1=r */
	mulpd  xmm1, [esp + _tsc]	
	cvttpd2pi mm6, xmm1	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */
	lea   eax, [eax + eax*2]	/* idx*=3 (12 total now) */
	lea   ebx, [ebx + ebx*2]	/* idx*=3 (12 total now) */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	mulpd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqHH]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 /* xmm7=FF */
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulpd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */

        addpd  xmm5, [esp + _vctot]
        movapd [esp + _vctot], xmm5
	xorpd  xmm1, xmm1
	mulpd  xmm3,  [esp + _tsc]
	mulpd  xmm3, xmm0
	subpd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	movapd xmm3, [esp + _fjxH1]
	movapd xmm4, [esp + _fjyH1]
	movapd xmm5, [esp + _fjzH1]
	mulpd xmm0, [esp + _dxH1H1]
	mulpd xmm1, [esp + _dyH1H1]
	mulpd xmm2, [esp + _dzH1H1]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixH1]
	addpd xmm1, [esp + _fiyH1]
	addpd xmm2, [esp + _fizH1]
	movapd [esp + _fjxH1], xmm3
	movapd [esp + _fjyH1], xmm4
	movapd [esp + _fjzH1], xmm5
	movapd [esp + _fixH1], xmm0
	movapd [esp + _fiyH1], xmm1
	movapd [esp + _fizH1], xmm2

	/* H1-H2 interaction */
	movapd xmm0, [esp + _rinvH1H2]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + _rsqH1H2] /* xmm1=r */
	mulpd  xmm1, [esp + _tsc]
	cvttpd2pi mm6, xmm1	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */
	lea   eax, [eax + eax*2]	/* idx*=3 (12 total now) */
	lea   ebx, [ebx + ebx*2]	/* idx*=3 (12 total now) */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	mulpd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqHH]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 /* xmm7=FF */
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulpd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */

        addpd  xmm5, [esp + _vctot]
        movapd [esp + _vctot], xmm5
	xorpd  xmm1, xmm1
	mulpd  xmm3,  [esp + _tsc]
	mulpd  xmm3, xmm0
	subpd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	movapd xmm3, [esp + _fjxH2]
	movapd xmm4, [esp + _fjyH2]
	movapd xmm5, [esp + _fjzH2]
	mulpd xmm0, [esp + _dxH1H2]
	mulpd xmm1, [esp + _dyH1H2]
	mulpd xmm2, [esp + _dzH1H2]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixH1]
	addpd xmm1, [esp + _fiyH1]
	addpd xmm2, [esp + _fizH1]
	movapd [esp + _fjxH2], xmm3
	movapd [esp + _fjyH2], xmm4
	movapd [esp + _fjzH2], xmm5
	movapd [esp + _fixH1], xmm0
	movapd [esp + _fiyH1], xmm1
	movapd [esp + _fizH1], xmm2

	/* H2-O interaction */
	movapd xmm0, [esp + _rinvH2O]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + _rsqH2O] /* xmm1=r */
	mulpd  xmm1, [esp + _tsc]	
	cvttpd2pi mm6, xmm1	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */
	lea   eax, [eax + eax*2]	/* idx*=3 (12 total now) */
	lea   ebx, [ebx + ebx*2]	/* idx*=3 (12 total now) */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	mulpd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqOH]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 /* xmm7=FF */
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulpd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */

        addpd  xmm5, [esp + _vctot]
        movapd [esp + _vctot], xmm5
	xorpd  xmm1, xmm1
	mulpd  xmm3,  [esp + _tsc]
	mulpd  xmm3, xmm0
	subpd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1

	movapd xmm3, [esp + _fjxO]
	movapd xmm4, [esp + _fjyO]
	movapd xmm5, [esp + _fjzO]
	mulpd xmm0, [esp + _dxH2O]
	mulpd xmm1, [esp + _dyH2O]
	mulpd xmm2, [esp + _dzH2O]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixH2]
	addpd xmm1, [esp + _fiyH2]
	addpd xmm2, [esp + _fizH2]
	movapd [esp + _fjxO], xmm3
	movapd [esp + _fjyO], xmm4
	movapd [esp + _fjzO], xmm5
	movapd [esp + _fixH2], xmm0
	movapd [esp + _fiyH2], xmm1
	movapd [esp + _fizH2], xmm2

	/* H2-H1 interaction */
	movapd xmm0, [esp + _rinvH2H1]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + _rsqH2H1] /* xmm1=r */
	mulpd  xmm1, [esp + _tsc]
	cvttpd2pi mm6, xmm1	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */
	lea   eax, [eax + eax*2]	/* idx*=3 (12 total now) */
	lea   ebx, [ebx + ebx*2]	/* idx*=3 (12 total now) */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	mulpd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqHH]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 /* xmm7=FF */
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulpd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */

        addpd  xmm5, [esp + _vctot]
        movapd [esp + _vctot], xmm5
	xorpd  xmm1, xmm1
	mulpd  xmm3,  [esp + _tsc]
	mulpd  xmm3, xmm0
	subpd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	movapd xmm3, [esp + _fjxH1]
	movapd xmm4, [esp + _fjyH1]
	movapd xmm5, [esp + _fjzH1]
	mulpd xmm0, [esp + _dxH2H1]
	mulpd xmm1, [esp + _dyH2H1]
	mulpd xmm2, [esp + _dzH2H1]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixH2]
	addpd xmm1, [esp + _fiyH2]
	addpd xmm2, [esp + _fizH2]
	movapd [esp + _fjxH1], xmm3
	movapd [esp + _fjyH1], xmm4
	movapd [esp + _fjzH1], xmm5
	movapd [esp + _fixH2], xmm0
	movapd [esp + _fiyH2], xmm1
	movapd [esp + _fizH2], xmm2

	/* H2-H2 interaction */
	movapd xmm0, [esp + _rinvH2H2]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + _rsqH2H2] /* xmm1=r */
	mulpd  xmm1, [esp + _tsc]	
	cvttpd2pi mm6, xmm1	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */
	lea   eax, [eax + eax*2]	/* idx*=3 (12 total now) */
	lea   ebx, [ebx + ebx*2]	/* idx*=3 (12 total now) */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	mulpd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqHH]
	addpd  xmm7, xmm6
	addpd  xmm7, xmm5 /* xmm7=FF */
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulpd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */
	
        addpd  xmm5, [esp + _vctot]
        movapd [esp + _vctot], xmm5
	xorpd  xmm1, xmm1
	mulpd  xmm3,  [esp + _tsc]
	mulpd  xmm3, xmm0
	subpd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	movapd xmm3, [esp + _fjxH2]
	movapd xmm4, [esp + _fjyH2]
	movapd xmm5, [esp + _fjzH2]
	mulpd xmm0, [esp + _dxH2H2]
	mulpd xmm1, [esp + _dyH2H2]
	mulpd xmm2, [esp + _dzH2H2]
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2
	addpd xmm0, [esp + _fixH2]
	addpd xmm1, [esp + _fiyH2]
	addpd xmm2, [esp + _fizH2]
	movapd [esp + _fjxH2], xmm3
	movapd [esp + _fjyH2], xmm4
	movapd [esp + _fjzH2], xmm5
	movapd [esp + _fixH2], xmm0
	movapd [esp + _fiyH2], xmm1
	movapd [esp + _fizH2], xmm2

	mov edi, [ebp + _faction]

	movd eax, mm0
	movd ebx, mm1
	
	/* Did all interactions - now update j forces */
	movlpd xmm0, [edi + eax*8]
	movlpd xmm1, [edi + eax*8 + 8]
	movlpd xmm2, [edi + eax*8 + 16]
	movlpd xmm3, [edi + eax*8 + 24]
	movlpd xmm4, [edi + eax*8 + 32]
	movlpd xmm5, [edi + eax*8 + 40]
	movlpd xmm6, [edi + eax*8 + 48]
	movlpd xmm7, [edi + eax*8 + 56]
	movhpd xmm0, [edi + ebx*8]
	movhpd xmm1, [edi + ebx*8 + 8]
	movhpd xmm2, [edi + ebx*8 + 16]
	movhpd xmm3, [edi + ebx*8 + 24]
	movhpd xmm4, [edi + ebx*8 + 32]
	movhpd xmm5, [edi + ebx*8 + 40]
	movhpd xmm6, [edi + ebx*8 + 48]
	movhpd xmm7, [edi + ebx*8 + 56]
	addpd xmm0, [esp + _fjxO]
	addpd xmm1, [esp + _fjyO]
	addpd xmm2, [esp + _fjzO]
	addpd xmm3, [esp + _fjxH1]
	addpd xmm4, [esp + _fjyH1]
	addpd xmm5, [esp + _fjzH1]
	addpd xmm6, [esp + _fjxH2]
	addpd xmm7, [esp + _fjyH2]
	movlpd [edi + eax*8], xmm0
	movlpd [edi + eax*8 + 8], xmm1
	movlpd [edi + eax*8 + 16], xmm2
	movlpd [edi + eax*8 + 24], xmm3
	movlpd [edi + eax*8 + 32], xmm4
	movlpd [edi + eax*8 + 40], xmm5
	movlpd [edi + eax*8 + 48], xmm6
	movlpd [edi + eax*8 + 56], xmm7
	movhpd [edi + ebx*8], xmm0
	movhpd [edi + ebx*8 + 8], xmm1
	movhpd [edi + ebx*8 + 16], xmm2
	movhpd [edi + ebx*8 + 24], xmm3
	movhpd [edi + ebx*8 + 32], xmm4
	movhpd [edi + ebx*8 + 40], xmm5
	movhpd [edi + ebx*8 + 48], xmm6
	movhpd [edi + ebx*8 + 56], xmm7
	
	movlpd xmm0, [edi + eax*8 + 64]
	movhpd xmm0, [edi + ebx*8 + 64]
	addpd xmm0, [esp + _fjzH2]
	movlpd [edi + eax*8 + 64], xmm0
	movhpd [edi + ebx*8 + 64], xmm0
	
	/* should we do one more iteration? */
	sub   [esp + _innerk],  2
	jl    .i3330_checksingle
	jmp   .i3330_unroll_loop
.i3330_checksingle:
	mov   edx, [esp + _innerk]
	and   edx, 1
	jnz   .i3330_dosingle
	jmp   .i3330_updateouterdata
.i3330_dosingle:
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]

	mov esi, [ebp + _pos]
	lea   eax, [eax + eax*2]  

	/* fetch j coordinates */
	movlpd xmm2, [esi + eax*8]
	movlpd xmm3, [esi + eax*8 + 8]
	movlpd xmm4, [esi + eax*8 + 16]
	movlpd xmm5, [esi + eax*8 + 24]
	movlpd xmm6, [esi + eax*8 + 32]
	movlpd xmm7, [esi + eax*8 + 40]
	movapd 	[esp + _jxO], xmm2
	movapd 	[esp + _jyO], xmm3
	movapd 	[esp + _jzO], xmm4
	movapd 	[esp + _jxH1], xmm5
	movapd 	[esp + _jyH1], xmm6
	movapd 	[esp + _jzH1], xmm7
	movlpd xmm2, [esi + eax*8 + 48]
	movlpd xmm3, [esi + eax*8 + 56]
	movlpd xmm4, [esi + eax*8 + 64]
	movapd 	[esp + _jxH2], xmm2
	movapd 	[esp + _jyH2], xmm3
	movapd 	[esp + _jzH2], xmm4
	
	movapd xmm0, [esp + _ixO]
	movapd xmm1, [esp + _iyO]
	movapd xmm2, [esp + _izO]
	movapd xmm3, [esp + _ixO]
	movapd xmm4, [esp + _iyO]
	movapd xmm5, [esp + _izO]
	subsd  xmm0, [esp + _jxO]
	subsd  xmm1, [esp + _jyO]
	subsd  xmm2, [esp + _jzO]
	subsd  xmm3, [esp + _jxH1]
	subsd  xmm4, [esp + _jyH1]
	subsd  xmm5, [esp + _jzH1]
	movapd [esp + _dxOO], xmm0
	movapd [esp + _dyOO], xmm1
	movapd [esp + _dzOO], xmm2
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	movapd [esp + _dxOH1], xmm3
	movapd [esp + _dyOH1], xmm4
	movapd [esp + _dzOH1], xmm5
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + _rsqOO], xmm0
	movapd [esp + _rsqOH1], xmm3

	movapd xmm0, [esp + _ixO]
	movapd xmm1, [esp + _iyO]
	movapd xmm2, [esp + _izO]
	movapd xmm3, [esp + _ixH1]
	movapd xmm4, [esp + _iyH1]
	movapd xmm5, [esp + _izH1]
	subsd  xmm0, [esp + _jxH2]
	subsd  xmm1, [esp + _jyH2]
	subsd  xmm2, [esp + _jzH2]
	subsd  xmm3, [esp + _jxO]
	subsd  xmm4, [esp + _jyO]
	subsd  xmm5, [esp + _jzO]
	movapd [esp + _dxOH2], xmm0
	movapd [esp + _dyOH2], xmm1
	movapd [esp + _dzOH2], xmm2
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	movapd [esp + _dxH1O], xmm3
	movapd [esp + _dyH1O], xmm4
	movapd [esp + _dzH1O], xmm5
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + _rsqOH2], xmm0
	movapd [esp + _rsqH1O], xmm3

	movapd xmm0, [esp + _ixH1]
	movapd xmm1, [esp + _iyH1]
	movapd xmm2, [esp + _izH1]
	movapd xmm3, [esp + _ixH1]
	movapd xmm4, [esp + _iyH1]
	movapd xmm5, [esp + _izH1]
	subsd  xmm0, [esp + _jxH1]
	subsd  xmm1, [esp + _jyH1]
	subsd  xmm2, [esp + _jzH1]
	subsd  xmm3, [esp + _jxH2]
	subsd  xmm4, [esp + _jyH2]
	subsd  xmm5, [esp + _jzH2]
	movapd [esp + _dxH1H1], xmm0
	movapd [esp + _dyH1H1], xmm1
	movapd [esp + _dzH1H1], xmm2
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	movapd [esp + _dxH1H2], xmm3
	movapd [esp + _dyH1H2], xmm4
	movapd [esp + _dzH1H2], xmm5
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + _rsqH1H1], xmm0
	movapd [esp + _rsqH1H2], xmm3

	movapd xmm0, [esp + _ixH2]
	movapd xmm1, [esp + _iyH2]
	movapd xmm2, [esp + _izH2]
	movapd xmm3, [esp + _ixH2]
	movapd xmm4, [esp + _iyH2]
	movapd xmm5, [esp + _izH2]
	subsd  xmm0, [esp + _jxO]
	subsd  xmm1, [esp + _jyO]
	subsd  xmm2, [esp + _jzO]
	subsd  xmm3, [esp + _jxH1]
	subsd  xmm4, [esp + _jyH1]
	subsd  xmm5, [esp + _jzH1]
	movapd [esp + _dxH2O], xmm0
	movapd [esp + _dyH2O], xmm1
	movapd [esp + _dzH2O], xmm2
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	movapd [esp + _dxH2H1], xmm3
	movapd [esp + _dyH2H1], xmm4
	movapd [esp + _dzH2H1], xmm5
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm4, xmm3
	addsd  xmm4, xmm5
	movapd [esp + _rsqH2O], xmm0
	movapd [esp + _rsqH2H1], xmm4

	movapd xmm0, [esp + _ixH2]
	movapd xmm1, [esp + _iyH2]
	movapd xmm2, [esp + _izH2]
	subsd  xmm0, [esp + _jxH2]
	subsd  xmm1, [esp + _jyH2]
	subsd  xmm2, [esp + _jzH2]
	movapd [esp + _dxH2H2], xmm0
	movapd [esp + _dyH2H2], xmm1
	movapd [esp + _dzH2H2], xmm2
	mulsd xmm0, xmm0
	mulsd xmm1, xmm1
	mulsd xmm2, xmm2
	addsd xmm0, xmm1
	addsd xmm0, xmm2
	movapd [esp + _rsqH2H2], xmm0
		
	/* start doing invsqrt use rsq values in xmm0, xmm4 */
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulsd   xmm1, xmm1	/* luA*luA */
	mulsd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	mulsd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subsd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm3, [esp + _half] /* iter1 */
	mulsd   xmm7, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulsd   xmm3, xmm3	/* luA*luA */
	mulsd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	mulsd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subsd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm1, [esp + _half] /* rinv */
	mulsd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvH2H2], xmm1
	movapd [esp + _rinvH2H1], xmm5

	movapd xmm0, [esp + _rsqOO]
	movapd xmm4, [esp + _rsqOH1]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulsd   xmm1, xmm1	/* luA*luA */
	mulsd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	mulsd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subsd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm3, [esp + _half] /* iter1 of  */
	mulsd   xmm7, [esp + _half] /* iter1 of  */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulsd   xmm3, xmm3	/* luA*luA */
	mulsd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	mulsd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subsd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm1, [esp + _half] /* rinv */
	mulsd   xmm5, [esp + _half] /* rinv*/
	movapd [esp + _rinvOO], xmm1
	movapd [esp + _rinvOH1], xmm5

	movapd xmm0, [esp + _rsqOH2]
	movapd xmm4, [esp + _rsqH1O]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulsd   xmm1, xmm1	/* luA*luA */
	mulsd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	mulsd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subsd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm3, [esp + _half] /* iter1 */
	mulsd   xmm7, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulsd   xmm3, xmm3	/* luA*luA */
	mulsd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	mulsd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subsd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm1, [esp + _half] /* rinv */
	mulsd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvOH2], xmm1
	movapd [esp + _rinvH1O], xmm5

	movapd xmm0, [esp + _rsqH1H1]
	movapd xmm4, [esp + _rsqH1H2]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulsd   xmm1, xmm1	/* luA*luA */
	mulsd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	mulsd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subsd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm3, [esp + _half] /* iter1a */
	mulsd   xmm7, [esp + _half] /* iter1b */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulsd   xmm3, xmm3	/* luA*luA */
	mulsd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	mulsd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subsd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm1, [esp + _half] /* rinv */
	mulsd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvH1H1], xmm1
	movapd [esp + _rinvH1H2], xmm5

	movapd xmm0, [esp + _rsqH2O]
	cvtsd2ss xmm1, xmm0	
	rsqrtss xmm1, xmm1
	cvtss2sd xmm1, xmm1
	
	movapd  xmm2, xmm1	/* copy of luA */
	mulsd   xmm1, xmm1	/* luA*luA */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm3, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	mulsd   xmm3, xmm3	/* luA*luA */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm1, [esp + _half] /* rinv */
	movapd [esp + _rinvH2O], xmm1
	
	/* start with OO interaction */
	movapd xmm0, [esp + _rinvOO]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + _rsqOO] /* xmm1=r */
	mulsd  xmm1, [esp + _tsc]

	movd mm0, eax	
	cvttsd2si eax, xmm1	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	lea   eax, [eax + eax*2]	/* idx*=3 (12 total now) */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1  */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1  */
	unpckhpd xmm7, xmm3	/* H1  */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	mulsd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqOO]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 /* xmm7=FF */
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulsd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */

        /* increment vcoul - then we can get rid of mm5 */
        /* update vctot */
        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5

	/* put scalar force on stack temporarily */
	movapd [esp + _fscal], xmm3

	/* Dispersion */
	movupd xmm4, [esi + eax*8 + 32]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 48]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* Dispersion table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	mulsd  xmm7, [esp + _two]	/* two*Heps2 */
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 /* xmm7=FF */
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */

	movapd xmm4, [esp + _c6]
	mulsd  xmm7, xmm4	 /* fijD */
	mulsd  xmm5, xmm4	 /* vnb6 */
	addsd  xmm7, [esp + _fscal] /* add to fscal */

	/* put scalar force back on stack Update vnbtot directly */
	addsd  xmm5, [esp + _vnbtot]
	movapd [esp + _fscal], xmm7
	movlpd [esp + _vnbtot], xmm5

	/* Repulsion */
	movupd xmm4, [esi + eax*8 + 64]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 80]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* Repulsion table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	mulsd  xmm7, [esp + _two]	/* two*Heps2 */
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 /* xmm7=FF */
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */

	movapd xmm4, [esp + _c12]
	mulsd  xmm7, xmm4 /* fijR */
	mulsd  xmm5, xmm4 /* vnb12 */
	addsd  xmm7, [esp + _fscal]

	addsd  xmm5, [esp + _vnbtot]
	movlpd [esp + _vnbtot], xmm5
	xorpd  xmm4, xmm4

	mulsd xmm7, [esp + _tsc]
	mulsd xmm7, [esp + _rinvOO]
	subsd xmm4, xmm7

	movapd xmm0, xmm4
	movapd xmm1, xmm4
	movapd xmm2, xmm4

	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulpd xmm0, [esp + _dxOO]
	mulpd xmm1, [esp + _dyOO]
	mulpd xmm2, [esp + _dzOO]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixO]
	addsd xmm1, [esp + _fiyO]
	addsd xmm2, [esp + _fizO]
	movlpd [esp + _fjxO], xmm3
	movlpd [esp + _fjyO], xmm4
	movlpd [esp + _fjzO], xmm5
	movlpd [esp + _fixO], xmm0
	movlpd [esp + _fiyO], xmm1
	movlpd [esp + _fizO], xmm2

	/* O-H1 interaction */
	movapd xmm0, [esp + _rinvOH1]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + _rsqOH1] /* xmm1=r */
	mulsd  xmm1, [esp + _tsc]

	cvttsd2si eax, xmm1	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	lea   eax, [eax + eax*2]	/* idx*=3 (12 total now) */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1  */
	unpckhpd xmm5, xmm3	/* F1  */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	mulsd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqOH]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 /* xmm7=FF */
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulsd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */

        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5
	xorpd  xmm1, xmm1
	mulsd  xmm3,  [esp + _tsc]
	mulsd  xmm3, xmm0
	subsd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulsd xmm0, [esp + _dxOH1]
	mulsd xmm1, [esp + _dyOH1]
	mulsd xmm2, [esp + _dzOH1]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixO]
	addsd xmm1, [esp + _fiyO]
	addsd xmm2, [esp + _fizO]
	movlpd [esp + _fjxH1], xmm3
	movlpd [esp + _fjyH1], xmm4
	movlpd [esp + _fjzH1], xmm5
	movlpd [esp + _fixO], xmm0
	movlpd [esp + _fiyO], xmm1
	movlpd [esp + _fizO], xmm2

	/* O-H2 interaction */ 
	movapd xmm0, [esp + _rinvOH2]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + _rsqOH2] /* xmm1=r */
	mulsd  xmm1, [esp + _tsc]
	
	cvttsd2si eax, xmm1	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	lea   eax, [eax + eax*2]	/* idx*=3 (12 total now) */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	mulsd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqOH]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 /* xmm7=FF */
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulsd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */

        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5
	xorpd  xmm1, xmm1
	mulsd  xmm3,  [esp + _tsc]
	mulsd  xmm3, xmm0
	subsd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	xorpd xmm3, xmm3
	movapd xmm4, xmm3
	movapd xmm5, xmm3
	mulsd xmm0, [esp + _dxOH2]
	mulsd xmm1, [esp + _dyOH2]
	mulsd xmm2, [esp + _dzOH2]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixO]
	addsd xmm1, [esp + _fiyO]
	addsd xmm2, [esp + _fizO]
	movlpd [esp + _fjxH2], xmm3
	movlpd [esp + _fjyH2], xmm4
	movlpd [esp + _fjzH2], xmm5
	movlpd [esp + _fixO], xmm0
	movlpd [esp + _fiyO], xmm1
	movlpd [esp + _fizO], xmm2

	/* H1-O interaction */
	movapd xmm0, [esp + _rinvH1O]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + _rsqH1O] /* xmm1=r */
	mulsd  xmm1, [esp + _tsc]
	
	cvttsd2si eax, xmm1	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	lea   eax, [eax + eax*2]	/* idx*=3 (12 total now) */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	mulsd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqOH]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 /* xmm7=FF */
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulsd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */

        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5
	xorpd  xmm1, xmm1
	mulsd  xmm3,  [esp + _tsc]
	mulsd  xmm3, xmm0
	subsd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	movapd xmm3, [esp + _fjxO]
	movapd xmm4, [esp + _fjyO]
	movapd xmm5, [esp + _fjzO]
	mulsd xmm0, [esp + _dxH1O]
	mulsd xmm1, [esp + _dyH1O]
	mulsd xmm2, [esp + _dzH1O]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixH1]
	addsd xmm1, [esp + _fiyH1]
	addsd xmm2, [esp + _fizH1]
	movlpd [esp + _fjxO], xmm3
	movlpd [esp + _fjyO], xmm4
	movlpd [esp + _fjzO], xmm5
	movlpd [esp + _fixH1], xmm0
	movlpd [esp + _fiyH1], xmm1
	movlpd [esp + _fizH1], xmm2

	/* H1-H1 interaction */
	movapd xmm0, [esp + _rinvH1H1]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + _rsqH1H1] /* xmm1=r */
	mulsd  xmm1, [esp + _tsc]	
	cvttsd2si eax, xmm1	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	lea   eax, [eax + eax*2]	/* idx*=3 (12 total now) */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	mulsd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqHH]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 /* xmm7=FF */
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulsd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */

        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5
	xorpd  xmm1, xmm1
	mulsd  xmm3,  [esp + _tsc]
	mulsd  xmm3, xmm0
	subsd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	movapd xmm3, [esp + _fjxH1]
	movapd xmm4, [esp + _fjyH1]
	movapd xmm5, [esp + _fjzH1]
	mulsd xmm0, [esp + _dxH1H1]
	mulsd xmm1, [esp + _dyH1H1]
	mulsd xmm2, [esp + _dzH1H1]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixH1]
	addsd xmm1, [esp + _fiyH1]
	addsd xmm2, [esp + _fizH1]
	movlpd [esp + _fjxH1], xmm3
	movlpd [esp + _fjyH1], xmm4
	movlpd [esp + _fjzH1], xmm5
	movlpd [esp + _fixH1], xmm0
	movlpd [esp + _fiyH1], xmm1
	movlpd [esp + _fizH1], xmm2

	/* H1-H2 interaction */
	movapd xmm0, [esp + _rinvH1H2]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + _rsqH1H2] /* xmm1=r */
	mulsd  xmm1, [esp + _tsc]
	cvttsd2si eax, xmm1	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	lea   eax, [eax + eax*2]	/* idx*=3 (12 total now) */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	mulsd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqHH]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 /* xmm7=FF */
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulsd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */

        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5
	xorpd  xmm1, xmm1
	mulsd  xmm3,  [esp + _tsc]
	mulsd  xmm3, xmm0
	subsd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	movapd xmm3, [esp + _fjxH2]
	movapd xmm4, [esp + _fjyH2]
	movapd xmm5, [esp + _fjzH2]
	mulsd xmm0, [esp + _dxH1H2]
	mulsd xmm1, [esp + _dyH1H2]
	mulsd xmm2, [esp + _dzH1H2]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixH1]
	addsd xmm1, [esp + _fiyH1]
	addsd xmm2, [esp + _fizH1]
	movlpd [esp + _fjxH2], xmm3
	movlpd [esp + _fjyH2], xmm4
	movlpd [esp + _fjzH2], xmm5
	movlpd [esp + _fixH1], xmm0
	movlpd [esp + _fiyH1], xmm1
	movlpd [esp + _fizH1], xmm2

	/* H2-O interaction */
	movapd xmm0, [esp + _rinvH2O]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + _rsqH2O] /* xmm1=r */
	mulsd  xmm1, [esp + _tsc]	
	cvttsd2si eax, xmm1	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	lea   eax, [eax + eax*2]	/* idx*=3 (12 total now) */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	mulsd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqOH]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 /* xmm7=FF */
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulsd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */

        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5
	xorpd  xmm1, xmm1
	mulsd  xmm3,  [esp + _tsc]
	mulsd  xmm3, xmm0
	subsd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1

	movapd xmm3, [esp + _fjxO]
	movapd xmm4, [esp + _fjyO]
	movapd xmm5, [esp + _fjzO]
	mulsd xmm0, [esp + _dxH2O]
	mulsd xmm1, [esp + _dyH2O]
	mulsd xmm2, [esp + _dzH2O]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixH2]
	addsd xmm1, [esp + _fiyH2]
	addsd xmm2, [esp + _fizH2]
	movlpd [esp + _fjxO], xmm3
	movlpd [esp + _fjyO], xmm4
	movlpd [esp + _fjzO], xmm5
	movlpd [esp + _fixH2], xmm0
	movlpd [esp + _fiyH2], xmm1
	movlpd [esp + _fizH2], xmm2

	/* H2-H1 interaction */
	movapd xmm0, [esp + _rinvH2H1]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + _rsqH2H1] /* xmm1=r */
	mulsd  xmm1, [esp + _tsc]
	cvttsd2si eax, xmm1	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subpd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	lea   eax, [eax + eax*2]	/* idx*=3 (12 total now) */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	mulsd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqHH]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 /* xmm7=FF */
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulsd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */

        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5
	xorpd  xmm1, xmm1
	mulsd  xmm3,  [esp + _tsc]
	mulsd  xmm3, xmm0
	subsd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	movapd xmm3, [esp + _fjxH1]
	movapd xmm4, [esp + _fjyH1]
	movapd xmm5, [esp + _fjzH1]
	mulsd xmm0, [esp + _dxH2H1]
	mulsd xmm1, [esp + _dyH2H1]
	mulsd xmm2, [esp + _dzH2H1]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixH2]
	addsd xmm1, [esp + _fiyH2]
	addsd xmm2, [esp + _fizH2]
	movlpd [esp + _fjxH1], xmm3
	movlpd [esp + _fjyH1], xmm4
	movlpd [esp + _fjzH1], xmm5
	movlpd [esp + _fixH2], xmm0
	movlpd [esp + _fiyH2], xmm1
	movlpd [esp + _fizH2], xmm2

	/* H2-H2 interaction */
	movapd xmm0, [esp + _rinvH2H2]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + _rsqH2H2] /* xmm1=r */
	mulsd  xmm1, [esp + _tsc]	
	cvttsd2si eax, xmm1	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	lea   eax, [eax + eax*2]	/* idx*=3 (12 total now) */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	mulsd  xmm7, [esp + _two]	/* two*Heps2 */
	movapd xmm3, [esp + _qqHH]
	addsd  xmm7, xmm6
	addsd  xmm7, xmm5 /* xmm7=FF */
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
	mulsd  xmm3, xmm7 /* fijC=FF*qq */
        /* at this point mm5 contains vcoul and xmm3 fijC */

        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5
	xorpd  xmm1, xmm1
	mulsd  xmm3,  [esp + _tsc]
	mulsd  xmm3, xmm0
	subsd  xmm1, xmm3

	movapd xmm0, xmm1
	movapd xmm2, xmm1
	
	movapd xmm3, [esp + _fjxH2]
	movapd xmm4, [esp + _fjyH2]
	movapd xmm5, [esp + _fjzH2]
	mulsd xmm0, [esp + _dxH2H2]
	mulsd xmm1, [esp + _dyH2H2]
	mulsd xmm2, [esp + _dzH2H2]
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2
	addsd xmm0, [esp + _fixH2]
	addsd xmm1, [esp + _fiyH2]
	addsd xmm2, [esp + _fizH2]
	movlpd [esp + _fjxH2], xmm3
	movlpd [esp + _fjyH2], xmm4
	movlpd [esp + _fjzH2], xmm5
	movlpd [esp + _fixH2], xmm0
	movlpd [esp + _fiyH2], xmm1
	movlpd [esp + _fizH2], xmm2

	mov edi, [ebp + _faction]

	movd eax, mm0
	
	/* Did all interactions - now update j forces */
	movlpd xmm0, [edi + eax*8]
	movlpd xmm1, [edi + eax*8 + 8]
	movlpd xmm2, [edi + eax*8 + 16]
	movlpd xmm3, [edi + eax*8 + 24]
	movlpd xmm4, [edi + eax*8 + 32]
	movlpd xmm5, [edi + eax*8 + 40]
	movlpd xmm6, [edi + eax*8 + 48]
	movlpd xmm7, [edi + eax*8 + 56]
	addsd xmm0, [esp + _fjxO]
	addsd xmm1, [esp + _fjyO]
	addsd xmm2, [esp + _fjzO]
	addsd xmm3, [esp + _fjxH1]
	addsd xmm4, [esp + _fjyH1]
	addsd xmm5, [esp + _fjzH1]
	addsd xmm6, [esp + _fjxH2]
	addsd xmm7, [esp + _fjyH2]
	movlpd [edi + eax*8], xmm0
	movlpd [edi + eax*8 + 8], xmm1
	movlpd [edi + eax*8 + 16], xmm2
	movlpd [edi + eax*8 + 24], xmm3
	movlpd [edi + eax*8 + 32], xmm4
	movlpd [edi + eax*8 + 40], xmm5
	movlpd [edi + eax*8 + 48], xmm6
	movlpd [edi + eax*8 + 56], xmm7

	movlpd xmm0, [edi + eax*8 + 64]
	addsd xmm0, [esp + _fjzH2]
	movlpd [edi + eax*8 + 64], xmm0
	
.i3330_updateouterdata:
	mov   ecx, [esp + _ii3]
	mov   edi, [ebp + _faction]
	mov   esi, [ebp + _fshift]
	mov   edx, [esp + _is3]

	/* accumulate  Oi forces in xmm0, xmm1, xmm2 */
	movapd xmm0, [esp + _fixO]
	movapd xmm1, [esp + _fiyO]
	movapd xmm2, [esp + _fizO]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 /* sum is in low xmm0-xmm2 */

	movapd xmm3, xmm0	
	movapd xmm4, xmm1	
	movapd xmm5, xmm2	

	/* increment i force */
	movsd  xmm3, [edi + ecx*8]
	movsd  xmm4, [edi + ecx*8 + 8]
	movsd  xmm5, [edi + ecx*8 + 16]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8],     xmm3
	movsd  [edi + ecx*8 + 8], xmm4
	movsd  [edi + ecx*8 + 16], xmm5

	/* accumulate force in xmm6/xmm7 for fshift */
	movapd xmm6, xmm0
	movsd xmm7, xmm2
	unpcklpd xmm6, xmm1

	/* accumulate H1i forces in xmm0, xmm1, xmm2 */
	movapd xmm0, [esp + _fixH1]
	movapd xmm1, [esp + _fiyH1]
	movapd xmm2, [esp + _fizH1]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 /* sum is in low xmm0-xmm2 */

	/* increment i force */
	movsd  xmm3, [edi + ecx*8 + 24]
	movsd  xmm4, [edi + ecx*8 + 32]
	movsd  xmm5, [edi + ecx*8 + 40]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8 + 24], xmm3
	movsd  [edi + ecx*8 + 32], xmm4
	movsd  [edi + ecx*8 + 40], xmm5

	/* accumulate force in xmm6/xmm7 for fshift */
	addsd xmm7, xmm2
	unpcklpd xmm0, xmm1
	addpd xmm6, xmm0

	/* accumulate H2i forces in xmm0, xmm1, xmm2 */
	movapd xmm0, [esp + _fixH2]
	movapd xmm1, [esp + _fiyH2]
	movapd xmm2, [esp + _fizH2]

	movhlps xmm3, xmm0
	movhlps xmm4, xmm1
	movhlps xmm5, xmm2
	addsd  xmm0, xmm3
	addsd  xmm1, xmm4
	addsd  xmm2, xmm5 /* sum is in low xmm0-xmm2 */

	movapd xmm3, xmm0	
	movapd xmm4, xmm1	
	movapd xmm5, xmm2	

	/* increment i force */
	movsd  xmm3, [edi + ecx*8 + 48]
	movsd  xmm4, [edi + ecx*8 + 56]
	movsd  xmm5, [edi + ecx*8 + 64]
	addsd  xmm3, xmm0
	addsd  xmm4, xmm1
	addsd  xmm5, xmm2
	movsd  [edi + ecx*8 + 48], xmm3
	movsd  [edi + ecx*8 + 56], xmm4
	movsd  [edi + ecx*8 + 64], xmm5

	/* accumulate force in xmm6/xmm7 for fshift */
	addsd xmm7, xmm2
	unpcklpd xmm0, xmm1
	addpd xmm6, xmm0

	/* increment fshift force */
	movupd xmm3, [esi + edx*8]
	movsd  xmm4, [esi + edx*8 + 16]
	addpd  xmm3, xmm6
	addsd  xmm4, xmm7
	movupd [esi + edx*8],    xmm3
	movsd  [esi + edx*8 + 16], xmm4

	mov   edx, [ebp + _gid]  
	mov   edx, [edx]
	add   [ebp + _gid],  4	

	/* accumulate total potential energy and update it */
	movapd xmm7, [esp + _vctot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */
        
	/* add earlier value from mem */
	mov   eax, [ebp + _Vc]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* accumulate total lj energy and update it */
	movapd xmm7, [esp + _vnbtot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */

	/* add earlier value from mem */
	mov   eax, [ebp + _Vnb]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* finish if last */
	mov   ecx, [ebp + _nri]
	dec ecx
	jecxz .i3330_end
	/* not last, iterate once more! */ 
	mov [ebp + _nri], ecx
	jmp .i3330_outer
.i3330_end:
	emms
	mov eax, [esp + _salign]
	add esp, eax
	add esp, 1508
	pop edi
	pop esi
        pop edx
        pop ecx
        pop ebx
        pop eax
	leave
	ret




	
.globl mcinl0100_sse2
	.type mcinl0100_sse2,@function
mcinl0100_sse2:	
.equ		_nri,		8
.equ		_iinr,		12
.equ		_jindex,	16
.equ		_jjnr,		20
.equ		_shift,		24
.equ		_shiftvec,	28
.equ		_gid,		32
.equ		_pos,		36		
.equ		_type,		40
.equ		_ntype,		44
.equ		_nbfp,		48	
.equ		_Vnb,		52	
	/* stack offsets for local variables */ 
	/* bottom of stack is cache-aligned for sse use */
.equ		_ix,		0
.equ		_iy,	        16
.equ		_iz,            32
.equ		_two,           48
.equ		_c6,		64
.equ		_c12,		80 
.equ		_vnbtot,	96
.equ		_half,		112
.equ		_three,		128
.equ		_is3,		144
.equ		_ii3,		148
.equ		_ntia,		152	
.equ		_innerjjnr,     156
.equ		_innerk,        160
.equ		_salign,        164							
	push ebp
	mov ebp,esp	
        push eax
        push ebx
        push ecx
        push edx
	push esi
	push edi
	sub esp, 168		/* local stack space */
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + _salign], eax

	emms

	movupd xmm1, [sse2_two]
	movapd [esp + _two], xmm1

	/* assume we have at least one i particle - start directly */	
.imc0100_outer:
	mov   eax, [ebp + _shift]      /* eax = pointer into shift[] */
	mov   ebx, [eax]		/* ebx=shift[n] */
	add   dword ptr [ebp + _shift],  4  /* advance pointer one step */

	lea   ebx, [ebx + ebx*2]        /* ebx=3*is */

	mov   eax, [ebp + _shiftvec]   /* eax = base of shiftvec[] */

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	add   dword ptr [ebp + _iinr],  4   /* advance pointer */
	mov   ebx, [ecx]	        /* ebx =ii */

        mov   edx, [ebp + _type] 
        mov   edx, [edx + ebx*4]
        imul  edx, [ebp + _ntype]
        shl   edx, 1
        mov   [esp + _ntia], edx
		
	lea   ebx, [ebx + ebx*2]	/* ebx = 3*ii=ii3 */
	mov   eax, [ebp + _pos]        /* eax = base of pos[] */ 

	addsd xmm0, [eax + ebx*8]
	addsd xmm1, [eax + ebx*8 + 8]
	addsd xmm2, [eax + ebx*8 + 16]
	
	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0

	movapd [esp + _ix], xmm0
	movapd [esp + _iy], xmm1
	movapd [esp + _iz], xmm2

	mov   [esp + _ii3], ebx
	
	/* clear vnbtot */
	xorpd xmm4, xmm4
	movapd [esp + _vnbtot], xmm4
	
	mov   eax, [ebp + _jindex]
	mov   ecx, [eax]	         /* jindex[n] */
	mov   edx, [eax + 4]	         /* jindex[n+1] */
	add   dword ptr [ebp + _jindex],  4
	sub   edx, ecx                   /* number of innerloop atoms */

	mov   esi, [ebp + _pos]
	mov   eax, [ebp + _jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + _innerjjnr], eax     /* pointer to jjnr[nj0] */
	sub   edx,  2
	mov   [esp + _innerk], edx        /* number of innerloop atoms */
	
	jge   .imc0100_unroll_loop
	jmp   .imc0100_checksingle
.imc0100_unroll_loop:
	/* twice unrolled innerloop here */
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	add   dword ptr [esp + _innerjjnr],  8 /* advance pointer (unrolled 2) */

	movd  mm0, eax		/* use mmx registers as temp storage */
	movd  mm1, ebx
	
	mov esi, [ebp + _type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov esi, [ebp + _nbfp]
	shl eax, 1
	shl ebx, 1
	mov edi, [esp + _ntia]
	add eax, edi
	add ebx, edi

	movupd xmm6, [esi + eax*8]	/* c6a c12a */
	movupd xmm7, [esi + ebx*8]	/* c6b c12b */
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7

	movd  eax, mm0		
	movd  ebx, mm1	
	
	movapd [esp + _c6], xmm4
	movapd [esp + _c12], xmm6

	mov esi, [ebp + _pos]       /* base of pos[] */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */
	lea   ebx, [ebx + ebx*2]	

	/* move two coordinates to xmm0-xmm2 */	

	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]

	/* move ix-iz to xmm4-xmm6 */
	movapd xmm4, [esp + _ix]
	movapd xmm5, [esp + _iy]
	movapd xmm6, [esp + _iz]

	/* calc dr */
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	/* square it */
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6	/* rsq in xmm4 */

	cvtpd2ps xmm6, xmm4	
	rcpps xmm6, xmm6
	cvtps2pd xmm6, xmm6	/* lu in low xmm6 */
	
	/* 1/x lookup seed in xmm6 */
	movapd xmm0, [esp + _two]
	movapd xmm5, xmm4
	mulpd xmm4, xmm6	/* lu*rsq */
	subpd xmm0, xmm4	/* 2-lu*rsq */
	mulpd xmm6, xmm0	/* (new lu) */
	
	movapd xmm0, [esp + _two]
	mulpd xmm5, xmm6	/* lu*rsq */
	subpd xmm0, xmm5	/* 2-lu*rsq */
	mulpd xmm0, xmm6	/* xmm0=rinvsq */

	movapd xmm1, xmm0
	mulpd  xmm1, xmm0
	mulpd  xmm1, xmm0	/* xmm1=rinvsix */
	movapd xmm2, xmm1
	mulpd  xmm2, xmm2	/* xmm2=rinvtwelve */

	mulpd  xmm1, [esp + _c6]
	mulpd  xmm2, [esp + _c12]
	movapd xmm5, xmm2
	subpd  xmm5, xmm1	/* vnb=vnb12-vnb6 */
	addpd  xmm5, [esp + _vnbtot]
	movapd [esp + _vnbtot], xmm5
		
	/* should we do one more iteration? */
	sub   dword ptr [esp + _innerk],  2
	jl    .imc0100_checksingle
	jmp   .imc0100_unroll_loop
.imc0100_checksingle:				
	mov   edx, [esp + _innerk]
	and   edx, 1
	jnz    .imc0100_dosingle
	jmp    .imc0100_updateouterdata
.imc0100_dosingle:
	mov edi, [ebp + _pos]
	mov   ecx, [esp + _innerjjnr]
	mov   eax, [ecx]		

	movd  mm0, eax		/* use mmx registers as temp storage */	
	mov esi, [ebp + _type]
	mov eax, [esi + eax*4]
	mov esi, [ebp + _nbfp]
	shl eax, 1
	mov edi, [esp + _ntia]
	add eax, edi

	movupd xmm6, [esi + eax*8]	/* c6a c12a */
	xorpd xmm7, xmm7
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7

	movd  eax, mm0		
	
	movapd [esp + _c6], xmm4
	movapd [esp + _c12], xmm6
	
	mov esi, [ebp + _pos]       /* base of pos[] */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */

	/* move coordinates to xmm0-xmm2 */	

	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	
	/* move ix-iz to xmm4-xmm6 */
	movapd xmm4, [esp + _ix]
	movapd xmm5, [esp + _iy]
	movapd xmm6, [esp + _iz]

	/* calc dr */
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	/* square it */
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6	/* rsq in xmm4 */

	cvtsd2ss xmm6, xmm4	
	rcpss xmm6, xmm6
	cvtss2sd xmm6, xmm6	/* lu in low xmm6 */
	
	/* 1/x lookup seed in xmm6 */
	movapd xmm0, [esp + _two]
	movapd xmm5, xmm4
	mulsd xmm4, xmm6	/* lu*rsq */
	subsd xmm0, xmm4	/* 2-lu*rsq */
	mulsd xmm6, xmm0	/* (new lu) */
	
	movapd xmm0, [esp + _two]
	mulsd xmm5, xmm6	/* lu*rsq */
	subsd xmm0, xmm5	/* 2-lu*rsq */
	mulsd xmm0, xmm6	/* xmm0=rinvsq */
	movapd xmm4, xmm0
	
	movapd xmm1, xmm0
	mulsd  xmm1, xmm0
	mulsd  xmm1, xmm0	/* xmm1=rinvsix */
	movapd xmm2, xmm1
	mulsd  xmm2, xmm2	/* xmm2=rinvtwelve */

	mulsd  xmm1, [esp + _c6]
	mulsd  xmm2, [esp + _c12]
	movapd xmm5, xmm2
	subsd  xmm5, xmm1	/* vnb=vnb12-vnb6 */
	addsd  xmm5, [esp + _vnbtot]
	movlpd [esp + _vnbtot], xmm5

.imc0100_updateouterdata:
	/* get group index for i particle */
	mov   edx, [ebp + _gid]      /* get group index for this i particle */
	mov   edx, [edx]
	add   dword ptr [ebp + _gid],  4  /* advance pointer */
	
	/* accumulate total lj energy and update it */
	movapd xmm7, [esp + _vnbtot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 have the sum now */

	/* add earlier value from mem */
	mov   eax, [ebp + _Vnb]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 

	/* finish if last */
	mov   ecx, [ebp + _nri]
	dec ecx
	jecxz .imc0100_end

	/* not last, iterate once more! */ 
	mov [ebp + _nri], ecx
	jmp .imc0100_outer
.imc0100_end:
	emms
	mov eax, [esp + _salign]
	add esp, eax
	add esp, 168
	pop edi
	pop esi
        pop edx
        pop ecx
        pop ebx
        pop eax
	leave
	ret



.globl mcinl0300_sse2
	.type mcinl0300_sse2,@function
mcinl0300_sse2:	
.equ		_nri,		8
.equ		_iinr,		12
.equ		_jindex,	16
.equ		_jjnr,		20
.equ		_shift,		24
.equ		_shiftvec,	28
.equ		_gid,		32
.equ		_pos,		36		
.equ		_type,		40
.equ		_ntype,		44
.equ		_nbfp,		48	
.equ		_Vnb,		52
.equ		_tabscale,	56 /* double */
.equ		_VFtab,		64
	/* stack offsets for local variables */ 
	/* bottom of stack is cache-aligned for sse use */
.equ		_ix,	        0
.equ		_iy,		16
.equ		_iz,            32
.equ		_tsc,		48
.equ		_c6,            64
.equ		_c12,           80
.equ		_vnbtot,        96
.equ		_half,          112
.equ		_three,         128
.equ		_is3,           144
.equ		_ii3,           148
.equ		_ntia,	        152	
.equ		_innerjjnr,     156
.equ		_innerk,        160
.equ		_salign,        164	
	push ebp
	mov ebp,esp	
        push eax
        push ebx
        push ecx
        push edx
	push esi
	push edi
	sub esp, 168		/* local stack space */
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + _salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm2, [sse2_three]
	movsd xmm3, [ebp + _tabscale]
	movapd [esp + _half],  xmm0
	movapd [esp + _three],  xmm2
	shufpd xmm3, xmm3, 0
	movapd [esp + _tsc], xmm3

	/* assume we have at least one i particle - start directly */	
.imc0300_outer:
	mov   eax, [ebp + _shift]      /* eax = pointer into shift[] */
	mov   ebx, [eax]		/* ebx=shift[n] */
	add   [ebp + _shift],  4  /* advance pointer one step */
	
	lea   ebx, [ebx + ebx*2]        /* ebx=3*is */

	mov   eax, [ebp + _shiftvec]   /* eax = base of shiftvec[] */

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	add   [ebp + _iinr],  4   /* advance pointer */
	mov   ebx, [ecx]	        /* ebx =ii */

        mov   edx, [ebp + _type] 
        mov   edx, [edx + ebx*4]
        imul  edx, [ebp + _ntype]
        shl   edx, 1
        mov   [esp + _ntia], edx
		
	lea   ebx, [ebx + ebx*2]	/* ebx = 3*ii=ii3 */
	mov   eax, [ebp + _pos]        /* eax = base of pos[] */ 

	addsd xmm0, [eax + ebx*8]
	addsd xmm1, [eax + ebx*8 + 8]
	addsd xmm2, [eax + ebx*8 + 16]
	
	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0

	movapd [esp + _ix], xmm0
	movapd [esp + _iy], xmm1
	movapd [esp + _iz], xmm2

	mov   [esp + _ii3], ebx
	
	/* clear tot potential */
	xorpd xmm4, xmm4
	movapd [esp + _vnbtot], xmm4
	
	mov   eax, [ebp + _jindex]
	mov   ecx, [eax]	         /* jindex[n] */
	mov   edx, [eax + 4]	         /* jindex[n+1] */
	add   [ebp + _jindex],  4
	sub   edx, ecx                   /* number of innerloop atoms */

	mov   esi, [ebp + _pos]
	mov   eax, [ebp + _jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + _innerjjnr], eax     /* pointer to jjnr[nj0] */
	sub   edx,  2
	mov   [esp + _innerk], edx        /* number of innerloop atoms */
	jge   .imc0300_unroll_loop
	jmp   .imc0300_checksingle
.imc0300_unroll_loop:	
	/* twice unrolled innerloop here */
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]	
	mov   ebx, [edx + 4]
	add   [esp + _innerjjnr],  8 /* advance pointer (unrolled 2) */

	movd  mm0, eax		/* use mmx registers as temp storage */
	movd  mm1, ebx
	
	mov esi, [ebp + _type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov esi, [ebp + _nbfp]
	shl eax, 1	
	shl ebx, 1	
	mov edi, [esp + _ntia]
	add eax, edi
	add ebx, edi

	movupd xmm6, [esi + eax*8]	/* c6a c12a */
	movupd xmm7, [esi + ebx*8]	/* c6b c12b */
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0		
	movd  ebx, mm1

	movapd [esp + _c6], xmm4
	movapd [esp + _c12], xmm6
	
	mov esi, [ebp + _pos]		/* base of pos[] */
	lea   eax, [eax + eax*2]	/* replace jnr with j3 */
	lea   ebx, [ebx + ebx*2]	

	/* move two coordinates to xmm0-xmm2 */	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]

	/* move _ix-iz to xmm4-xmm6 */
	movapd xmm4, [esp + _ix]
	movapd xmm5, [esp + _iy]
	movapd xmm6, [esp + _iz]

	/* calc dr */
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	/* square it */
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6
	/* rsq in xmm4 */

	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm5, xmm5
	cvtps2pd xmm2, xmm5	/* lu in low xmm2 */

	/* lookup seed in xmm2 */
	movapd xmm5, xmm2	/* copy of lu */
	mulpd xmm2, xmm2	/* lu*lu */
	movapd xmm1, [esp + _three]
	mulpd xmm2, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subpd xmm1, xmm2	/* 30-rsq*lu*lu */
	mulpd xmm1, xmm5	
	mulpd xmm1, xmm0	/* xmm0=iter1 of rinv (new lu) */

	movapd xmm5, xmm1	/* copy of lu */
	mulpd xmm1, xmm1	/* lu*lu */
	movapd xmm2, [esp + _three]
	mulpd xmm1, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subpd xmm2, xmm1	/* 30-rsq*lu*lu */
	mulpd xmm2, xmm5	
	mulpd xmm0, xmm2	/* xmm0=iter2 of rinv (new lu) */
	
	mulpd xmm4, xmm0	/* xmm4=r */
	mulpd xmm4, [esp + _tsc]
	
	cvttpd2pi mm6, xmm4	/* mm6 = lu idx */
	cvtpi2pd xmm5, mm6
	subpd xmm4, xmm5
	movapd xmm1, xmm4	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */

	pslld mm6, 3		/* idx *= 8 */
	
	movd mm0, eax	
	movd mm1, ebx

	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6

	/* dispersion */
	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* dispersion table ready, in xmm4-xmm7 */	
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */

	mulpd  xmm5, [esp + _c6] /* vnb6 */

	/* Update vnbtot directly */
	addpd  xmm5, [esp + _vnbtot]
	movapd [esp + _vnbtot], xmm5

	/* repulsion */
	movupd xmm4, [esi + eax*8 + 32]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8 + 32]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 48]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 48]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	
	/* table ready, in xmm4-xmm7 */	
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	
	mulpd  xmm5, [esp + _c12]
	
	addpd  xmm5, [esp + _vnbtot]
	movapd [esp + _vnbtot], xmm5

	/* should we do one more iteration? */
	sub   [esp + _innerk],  2
	jl    .imc0300_checksingle
	jmp   .imc0300_unroll_loop

.imc0300_checksingle:				
	mov   edx, [esp + _innerk]
	and   edx, 1
	jnz    .imc0300_dosingle
	jmp    .imc0300_updateouterdata
.imc0300_dosingle:
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]	

	movd  mm0, eax		/* use mmx registers as temp storage */
	
	mov esi, [ebp + _type]
	mov eax, [esi + eax*4]
	mov esi, [ebp + _nbfp]
	shl eax, 1	
	mov edi, [esp + _ntia]
	add eax, edi

	movupd xmm6, [esi + eax*8]	/* c6a c12a */
	xorpd xmm7, xmm7
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0		

	movapd [esp + _c6], xmm4
	movapd [esp + _c12], xmm6
	
	mov esi, [ebp + _pos]		/* base of pos[] */
	lea   eax, [eax + eax*2]	/* replace jnr with j3 */

	/* move coordinates to xmm0-xmm2 */	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]

	/* move _ix-iz to xmm4-xmm6 */
	movapd xmm4, [esp + _ix]
	movapd xmm5, [esp + _iy]
	movapd xmm6, [esp + _iz]

	/* calc dr */
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	/* square it */
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6
	/* rsq in xmm4 */

	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm5, xmm5
	cvtss2sd xmm2, xmm5	/* lu in low xmm2 */

	/* lookup seed in xmm2 */
	movapd xmm5, xmm2	/* copy of lu */
	mulsd xmm2, xmm2	/* lu*lu */
	movapd xmm1, [esp + _three]
	mulsd xmm2, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subsd xmm1, xmm2	/* 30-rsq*lu*lu */
	mulsd xmm1, xmm5	
	mulsd xmm1, xmm0	/* xmm0=iter1 of rinv (new lu) */

	movapd xmm5, xmm1	/* copy of lu */
	mulsd xmm1, xmm1	/* lu*lu */
	movapd xmm2, [esp + _three]
	mulsd xmm1, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subsd xmm2, xmm1	/* 30-rsq*lu*lu */
	mulsd xmm2, xmm5	
	mulsd xmm0, xmm2	/* xmm0=iter2 of rinv (new lu) */
	
	mulsd xmm4, xmm0	/* xmm4=r */
	mulsd xmm4, [esp + _tsc]

	movd mm0, eax
	
	cvttsd2si eax, xmm4	/* mm6 = lu idx */
	cvtsi2sd xmm5, eax
	subsd xmm4, xmm5
	movapd xmm1, xmm4	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	shl eax, 3	

	mov  esi, [ebp + _VFtab]

	/* dispersion */
	movupd xmm4, [esi + eax*8]	/* Y1 F1 */
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1  */
	unpckhpd xmm5, xmm3	/* F1  */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1  */
	unpckhpd xmm7, xmm3	/* H1  */
	/* dispersion table ready, in xmm4-xmm7 */	
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */

	mulsd  xmm5, [esp + _c6]/* vnb6 */

	/* Update vnbtot directly */
	addsd  xmm5, [esp + _vnbtot]
	movlpd [esp + _vnbtot], xmm5

	/* repulsion */
	movupd xmm4, [esi + eax*8 + 32]	/* Y1 F1 */
	xorpd xmm3,xmm3	
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1  */
	unpckhpd xmm5, xmm3	/* F1  */

	movupd xmm6, [esi + eax*8 + 48]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1  */
	unpckhpd xmm7, xmm3	/* H1  */
	
	/* table ready, in xmm4-xmm7 */	
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	
	mulsd  xmm5, [esp + _c12]
	
	addsd  xmm5, [esp + _vnbtot]
	movlpd [esp + _vnbtot], xmm5

.imc0300_updateouterdata:
	/* get group index for i particle */
	mov   edx, [ebp + _gid]      /* get group index for this i particle */
	mov   edx, [edx]
	add   [ebp + _gid],  4  /* advance pointer */

	/* accumulate total lj energy and update it */
	movapd xmm7, [esp + _vnbtot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */
	
	/* add earlier value from mem */
	mov   eax, [ebp + _Vnb]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* finish if last */
	mov   ecx, [ebp + _nri]
	dec ecx
	jecxz .imc0300_end
	/* not last, iterate once more! */ 
	mov [ebp + _nri], ecx
	jmp .imc0300_outer
.imc0300_end:
	emms
	mov eax, [esp + _salign]
	add esp, eax
	add esp, 168
	pop edi
	pop esi
        pop edx
        pop ecx
        pop ebx
        pop eax
	leave
	ret

	


.globl mcinl1000_sse2
	.type mcinl1000_sse2,@function
mcinl1000_sse2:	
.equ		_nri,		8
.equ		_iinr,		12
.equ		_jindex,	16
.equ		_jjnr,		20
.equ		_shift,		24
.equ		_shiftvec,	28
.equ		_gid,		32
.equ		_pos,		36		
.equ		_charge,	40
.equ		_facel,		44 /* double */
.equ		_Vc,		52
	/* stack offsets for local variables */ 
	/* bottom of stack is cache-aligned for sse use */
.equ		_ix,            0
.equ		_iy,	        16
.equ		_iz,            32
.equ		_iq,            48
.equ		_vctot,         64
.equ		_half,          80
.equ		_three,         96
.equ		_is3,           112
.equ		_ii3,           116
.equ		_innerjjnr,     120
.equ		_innerk,        124		
.equ		_salign,        128
	push ebp
	mov ebp,esp	
        push eax
        push ebx
        push ecx
        push edx
	push esi
	push edi
	sub esp, 132		/* local stack space */
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + _salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_three]
	movapd [esp + _half],  xmm0
	movapd [esp + _three], xmm1

	/* assume we have at least one i particle - start directly */	
imc1000_outer:
	mov   eax, [ebp + _shift]      /* eax = pointer into shift[] */
	mov   ebx, [eax]		/* ebx=shift[n] */
	add   [ebp + _shift],  4  /* advance pointer one step */
	
	lea   ebx, [ebx + ebx*2]        /* ebx=3*is */

	mov   eax, [ebp + _shiftvec]   /* eax = base of shiftvec[] */

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	add   [ebp + _iinr],  4   /* advance pointer */
	mov   ebx, [ecx]	        /* ebx =ii */

	mov   edx, [ebp + _charge]
	movsd xmm3, [edx + ebx*8]	
	mulsd xmm3, [ebp + _facel]
	shufpd xmm3, xmm3, 0	
	lea   ebx, [ebx + ebx*2]	/* ebx = 3*ii=ii3 */
	mov   eax, [ebp + _pos]        /* eax = base of pos[] */ 

	addsd xmm0, [eax + ebx*8]
	addsd xmm1, [eax + ebx*8 + 8]
	addsd xmm2, [eax + ebx*8 + 16]

	movapd [esp + _iq], xmm3
	
	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0

	movapd [esp + _ix], xmm0
	movapd [esp + _iy], xmm1
	movapd [esp + _iz], xmm2

	mov   [esp + _ii3], ebx
	
	/* clear vctot */
	xorpd xmm4, xmm4
	movapd [esp + _vctot], xmm4
	
	mov   eax, [ebp + _jindex]
	mov   ecx, [eax]	         /* jindex[n] */
	mov   edx, [eax + 4]	         /* jindex[n+1] */
	add   [ebp + _jindex],  4
	sub   edx, ecx                   /* number of innerloop atoms */

	mov   esi, [ebp + _pos]
	mov   eax, [ebp + _jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + _innerjjnr], eax     /* pointer to jjnr[nj0] */
	sub   edx,  2
	mov   [esp + _innerk], edx        /* number of innerloop atoms */
	jge   imc1000_unroll_loop
	jmp   imc1000_checksingle
imc1000_unroll_loop:	
	/* twice unrolled innerloop here */
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]	
	mov   ebx, [edx + 4]
	add   [esp + _innerjjnr],  8 /* advance pointer (unrolled 2) */

	mov esi, [ebp + _charge]        /* base of charge[] */
	
	movlpd xmm3, [esi + eax*8]	/* jq A */
	movhpd xmm3, [esi + ebx*8]	/* jq B */

	movapd xmm5, [esp + _iq]
	
	mulpd xmm3, xmm5		/* qq */
	
	mov esi, [ebp + _pos]       /* base of pos[] */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */
	lea   ebx, [ebx + ebx*2]	

	/* move two coordinates to xmm0-xmm2 */	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]		

	/* move _ix-iz to xmm4-xmm6 */
	movapd xmm4, [esp + _ix]
	movapd xmm5, [esp + _iy]
	movapd xmm6, [esp + _iz]

	/* calc dr */
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	/* square it */
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6
	/* rsq in xmm4  */

	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm5, xmm5
	cvtps2pd xmm2, xmm5	/* lu in low xmm2 */

	/* lookup seed in xmm2 */
	movapd xmm5, xmm2	/* copy of lu */
	mulpd xmm2, xmm2	/* lu*lu */
	movapd xmm1, [esp + _three]
	mulpd xmm2, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subpd xmm1, xmm2	/* 30-rsq*lu*lu */
	mulpd xmm1, xmm5	
	mulpd xmm1, xmm0	/* xmm0=iter1 of rinv (new lu) */

	movapd xmm5, xmm1	/* copy of lu */
	mulpd xmm1, xmm1	/* lu*lu */
	movapd xmm2, [esp + _three]
	mulpd xmm1, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subpd xmm2, xmm1	/* 30-rsq*lu*lu */
	mulpd xmm2, xmm5	
	mulpd xmm0, xmm2	/* xmm0=iter2 of rinv (new lu) */
	
	movapd xmm5, [esp + _vctot]
	mulpd  xmm3, xmm0	/* xmm3=vcoul */
	addpd  xmm5, xmm3
	movapd [esp + _vctot], xmm5

	/* should we do one more iteration? */
	sub   [esp + _innerk],  2
	jl    imc1000_checksingle
	jmp   imc1000_unroll_loop

imc1000_checksingle:				
	mov   edx, [esp + _innerk]
	and   edx, 1
	jnz    imc1000_dosingle
	jmp    imc1000_updateouterdata
imc1000_dosingle:			
	mov esi, [ebp + _charge]
	mov edi, [ebp + _pos]

	mov edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov eax, [edx]	

	xorpd xmm3, xmm3
	movsd xmm3, [esi + eax*8]	/* jq A */
	movapd xmm5, [esp + _iq]
	unpcklpd xmm3, xmm6
	mulpd xmm3, xmm5		/* qq */
	
	mov esi, [ebp + _pos]       /* base of pos[] */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */

	/* move two coordinates to xmm0-xmm2 */	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]

	/* move _ix-iz to xmm4-xmm6 */
	movapd xmm4, [esp + _ix]
	movapd xmm5, [esp + _iy]
	movapd xmm6, [esp + _iz]

	/* calc dr */
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	/* square it */
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6
	/* rsq in xmm4 */

	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm5, xmm5
	cvtss2sd xmm2, xmm5	/* lu in low xmm2 */

	/* lookup seed in xmm2 */
	movapd xmm5, xmm2	/* copy of lu */
	mulsd xmm2, xmm2	/* lu*lu */
	movapd xmm1, [esp + _three]
	mulsd xmm2, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subsd xmm1, xmm2	/* 30-rsq*lu*lu */
	mulsd xmm1, xmm5	
	mulsd xmm1, xmm0	/* xmm0=iter1 of rinv (new lu) */

	movapd xmm5, xmm1	/* copy of lu */
	mulsd xmm1, xmm1	/* lu*lu */
	movapd xmm2, [esp + _three]
	mulsd xmm1, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subsd xmm2, xmm1	/* 30-rsq*lu*lu */
	mulsd xmm2, xmm5	
	mulsd xmm0, xmm2	/* xmm0=iter2 of rinv (new lu) */

	movlpd xmm5, [esp + _vctot]
	mulsd  xmm3, xmm0	/* xmm3=vcoul */
	addsd  xmm5, xmm3
	movlpd [esp + _vctot], xmm5

imc1000_updateouterdata:
	/* get group index for i particle */
	mov   edx, [ebp + _gid]      /* get group index for this i particle */
	mov   edx, [edx]
	add   [ebp + _gid],  4  /* advance pointer */

	/* accumulate total potential energy and update it */
	movapd xmm7, [esp + _vctot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */

	/* add earlier value from mem */
	mov   eax, [ebp + _Vc]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* finish if last */
	mov   ecx, [ebp + _nri]
	dec  ecx
	jecxz imc1000_end
	/* not last, iterate once more! */ 
	mov [ebp + _nri], ecx
	jmp imc1000_outer
imc1000_end:
	emms
	mov eax, [esp + _salign]
	add esp, eax
	add esp, 132
	pop edi
	pop esi
        pop edx
        pop ecx
        pop ebx
        pop eax
	leave
	ret





.globl mcinl1020_sse2
	.type mcinl1020_sse2,@function
mcinl1020_sse2:	
.equ		_nri,		8
.equ		_iinr,		12
.equ		_jindex,	16
.equ		_jjnr,		20
.equ		_shift,		24
.equ		_shiftvec,	28
.equ		_gid,		32
.equ		_pos,		36		
.equ		_charge,	40
.equ		_facel,		44 /* double */
.equ		_Vc,		52
	/* stack offsets for local variables */ 
	/* bottom of stack is cache-aligned for sse use */
.equ		_ixO,	        0
.equ		_iyO,	        16
.equ		_izO,           32
.equ		_ixH1,	        48
.equ		_iyH1,	        64
.equ		_izH1,          80
.equ		_ixH2,	        96
.equ		_iyH2,	        112
.equ		_izH2,          128
.equ		_iqO,           144 
.equ		_iqH,           160 
.equ		_qqO,           176
.equ		_qqH,           192
.equ		_vctot,         208
.equ		_half,          224
.equ		_three,         240
.equ		_is3,           256
.equ		_ii3,           260
.equ		_innerjjnr,     264
.equ		_innerk,        268
.equ		_salign,        272
	push ebp
	mov ebp,esp	
        push eax
        push ebx
        push ecx
        push edx
	push esi
	push edi
	sub esp, 276		/* local stack space */
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + _salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_three]
	movapd [esp + _half],  xmm0
	movapd [esp + _three], xmm1

	/* assume we have at least one i particle - start directly */
	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	mov   ebx, [ecx]	        /* ebx =ii */

	mov   edx, [ebp + _charge]
	movsd xmm3, [edx + ebx*8]	
	movsd xmm4, [edx + ebx*8 + 8]	
	movsd xmm5, [ebp + _facel]
	mulsd  xmm3, xmm5
	mulsd  xmm4, xmm5

	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	movapd [esp + _iqO], xmm3
	movapd [esp + _iqH], xmm4
	
imc1020_outer:
	mov   eax, [ebp + _shift]      /* eax = pointer into shift[] */
	mov   ebx, [eax]		/* ebx=shift[n] */
	add   [ebp + _shift],  4  /* advance pointer one step */
	
	lea   ebx, [ebx + ebx*2]        /* ebx=3*is */

	mov   eax, [ebp + _shiftvec]   /* eax = base of shiftvec[] */

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	add   [ebp + _iinr],  4   /* advance pointer */
	mov   ebx, [ecx]	        /* ebx =ii */

	movapd xmm3, xmm0
	movapd xmm4, xmm1
	movapd xmm5, xmm2

	lea   ebx, [ebx + ebx*2]	/* ebx = 3*ii=ii3 */
	mov   eax, [ebp + _pos]        /* eax = base of pos[] */ 
	mov   [esp + _ii3], ebx

	addsd xmm3, [eax + ebx*8]
	addsd xmm4, [eax + ebx*8 + 8]
	addsd xmm5, [eax + ebx*8 + 16]		
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _ixO], xmm3
	movapd [esp + _iyO], xmm4
	movapd [esp + _izO], xmm5

	movsd xmm3, xmm0
	movsd xmm4, xmm1
	movsd xmm5, xmm2
	addsd xmm0, [eax + ebx*8 + 24]
	addsd xmm1, [eax + ebx*8 + 32]
	addsd xmm2, [eax + ebx*8 + 40]		
	addsd xmm3, [eax + ebx*8 + 48]
	addsd xmm4, [eax + ebx*8 + 56]
	addsd xmm5, [eax + ebx*8 + 64]		

	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _ixH1], xmm0
	movapd [esp + _iyH1], xmm1
	movapd [esp + _izH1], xmm2
	movapd [esp + _ixH2], xmm3
	movapd [esp + _iyH2], xmm4
	movapd [esp + _izH2], xmm5
	
	/* clear vctot */
	xorpd xmm4, xmm4
	movapd [esp + _vctot], xmm4
	
	mov   eax, [ebp + _jindex]
	mov   ecx, [eax]	         /* jindex[n] */
	mov   edx, [eax + 4]	         /* jindex[n+1] */
	add   [ebp + _jindex],  4
	sub   edx, ecx                   /* number of innerloop atoms */

	mov   esi, [ebp + _pos]
	mov   eax, [ebp + _jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + _innerjjnr], eax     /* pointer to jjnr[nj0] */
	sub   edx,  2
	mov   [esp + _innerk], edx        /* number of innerloop atoms */
	jge   imc1020_unroll_loop
	jmp   imc1020_checksingle
imc1020_unroll_loop:
	/* twice unrolled innerloop here */
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              

	add   [esp + _innerjjnr],  8 /* advance pointer (unrolled 2) */

	mov esi, [ebp + _charge]        /* base of charge[] */
	
	
	movlpd xmm6, [esi + eax*8]	/* jq A */
	movhpd xmm6, [esi + ebx*8]	/* jq B */
	movapd xmm3, [esp + _iqO]
	movapd xmm4, [esp + _iqH]
	mulpd xmm3, xmm6		/* qqO */
	mulpd xmm4, xmm6		/* qqH */
	
	movapd  [esp + _qqO], xmm3
	movapd  [esp + _qqH], xmm4	

	mov esi, [ebp + _pos]       /* base of pos[] */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */
	lea   ebx, [ebx + ebx*2]	

	/* move two coordinates to xmm0-xmm2 */	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]		

	/* move ixO-izO to xmm4-xmm6 */
	movapd xmm4, [esp + _ixO]
	movapd xmm5, [esp + _iyO]
	movapd xmm6, [esp + _izO]

	/* calc dr */
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	/* square it */
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6
	movapd xmm7, xmm4
	/* rsqO in xmm7 */

	/* move ixH1-izH1 to xmm4-xmm6 */
	movapd xmm4, [esp + _ixH1]
	movapd xmm5, [esp + _iyH1]
	movapd xmm6, [esp + _izH1]

	/* calc dr */
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	/* square it */
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm6, xmm5
	addpd xmm6, xmm4
	/* rsqH1 in xmm6 */

	/* move ixH2-izH2 to xmm3-xmm5 */ 
	movapd xmm3, [esp + _ixH2]
	movapd xmm4, [esp + _iyH2]
	movapd xmm5, [esp + _izH2]

	/* calc dr */
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2

	/* square it */
	mulpd xmm3,xmm3
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	addpd xmm5, xmm4
	addpd xmm5, xmm3
	/* rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 */

	/* start with rsqO - put seed in xmm2 */
	cvtpd2ps xmm2, xmm7	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulpd   xmm2, xmm7	/* rsq*lu*lu */
	subpd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulpd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulpd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm3, xmm4
	mulpd xmm4, xmm4	/* lu*lu */
	mulpd xmm7, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subpd xmm4, xmm7	/* 3-rsq*lu*lu */
	mulpd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulpd xmm4, [esp + _half] /* rinv */
	movapd  xmm7, xmm4	/* rinvO in xmm7 */
	
	/* rsqH1 - seed in xmm2 */
	cvtpd2ps xmm2, xmm6	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulpd   xmm2, xmm6	/* rsq*lu*lu */
	subpd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulpd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulpd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm3, xmm4
	mulpd xmm4, xmm4	/* lu*lu */
	mulpd xmm6, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subpd xmm4, xmm6	/* 3-rsq*lu*lu */
	mulpd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulpd xmm4, [esp + _half] /* rinv */
	movapd  xmm6, xmm4	/* rinvH1 in xmm6 */
	
	/* rsqH2 - seed in xmm2 */
	cvtpd2ps xmm2, xmm5	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulpd   xmm2, xmm5	/* rsq*lu*lu */
	subpd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulpd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulpd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm3, xmm4
	mulpd xmm4, xmm4	/* lu*lu */
	mulpd xmm5, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subpd xmm4, xmm5	/* 3-rsq*lu*lu */
	mulpd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulpd xmm4, [esp + _half] /* rinv */
	movapd  xmm5, xmm4	/* rinvH2 in xmm5 */

	/* do O interactions */
	mulpd  xmm7, [esp + _qqO]	/* xmm7=vcoul */
	addpd  xmm7, [esp + _vctot]
	movapd [esp + _vctot], xmm7

	/* H1 interactions */
	mulpd  xmm6, [esp + _qqH]	/* xmm6=vcoul */
	addpd  xmm6, [esp + _vctot]
	movapd [esp + _vctot], xmm6

	/* H2 interactions */
	mulpd  xmm5, [esp + _qqH]	/* xmm5=vcoul */
	addpd  xmm5, [esp + _vctot]
	movapd [esp + _vctot], xmm5

	/* should we do one more iteration? */
	sub   [esp + _innerk],  2
	jl    imc1020_checksingle
	jmp   imc1020_unroll_loop
imc1020_checksingle:				
	mov   edx, [esp + _innerk]
	and   edx, 1
	jnz    imc1020_dosingle
	jmp    imc1020_updateouterdata
imc1020_dosingle:
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]	

	mov esi, [ebp + _charge]        /* base of charge[] */
	xorpd xmm6, xmm6
	movlpd xmm6, [esi + eax*8]	/* jq A */
	
	movapd xmm3, [esp + _iqO]
	movapd xmm4, [esp + _iqH]
	mulsd xmm3, xmm6		/* qqO */
	mulsd xmm4, xmm6		/* qqH */
	
	movapd  [esp + _qqO], xmm3
	movapd  [esp + _qqH], xmm4	

	mov esi, [ebp + _pos]       /* base of pos[] */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */

	/* move coordinates to xmm0-xmm2 */	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]

	/* move ixO-izO to xmm4-xmm6 */
	movapd xmm4, [esp + _ixO]
	movapd xmm5, [esp + _iyO]
	movapd xmm6, [esp + _izO]

	/* calc dr */
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	/* square it */
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6
	movapd xmm7, xmm4
	/* rsqO in xmm7 */

	/* move ixH1-izH1 to xmm4-xmm6 */
	movapd xmm4, [esp + _ixH1]
	movapd xmm5, [esp + _iyH1]
	movapd xmm6, [esp + _izH1]

	/* calc dr */
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	/* square it */
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm6, xmm5
	addsd xmm6, xmm4
	/* rsqH1 in xmm6 */

	/* move ixH2-izH2 to xmm3-xmm5 */ 
	movapd xmm3, [esp + _ixH2]
	movapd xmm4, [esp + _iyH2]
	movapd xmm5, [esp + _izH2]

	/* calc dr */
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2

	/* square it */
	mulsd xmm3,xmm3
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	addsd xmm5, xmm4
	addsd xmm5, xmm3
	/* rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 */

	/* start with rsqO - put seed in xmm2 */
	cvtsd2ss xmm2, xmm7	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulsd   xmm2, xmm7	/* rsq*lu*lu */
	subsd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulsd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulsd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm3, xmm4
	mulsd xmm4, xmm4	/* lu*lu */
	mulsd xmm7, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subsd xmm4, xmm7	/* 3-rsq*lu*lu */
	mulsd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulsd xmm4, [esp + _half] /* rinv */
	movapd  xmm7, xmm4	/* rinvO in xmm7 */
	
	/* rsqH1 - seed in xmm2 */
	cvtsd2ss xmm2, xmm6	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulsd   xmm2, xmm6	/* rsq*lu*lu */
	subsd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulsd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulsd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm3, xmm4
	mulsd xmm4, xmm4	/* lu*lu */
	mulsd xmm6, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subsd xmm4, xmm6	/* 3-rsq*lu*lu */
	mulsd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulsd xmm4, [esp + _half] /* rinv */
	movapd  xmm6, xmm4	/* rinvH1 in xmm6 */
	
	/* rsqH2 - seed in xmm2 */
	cvtsd2ss xmm2, xmm5	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulsd   xmm2, xmm5	/* rsq*lu*lu */
	subsd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulsd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulsd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm3, xmm4
	mulsd xmm4, xmm4	/* lu*lu */
	mulsd xmm5, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subsd xmm4, xmm5	/* 3-rsq*lu*lu */
	mulsd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulsd xmm4, [esp + _half] /* rinv */
	movapd  xmm5, xmm4	/* rinvH2 in xmm5 */

	/* do O interactions */
	mulsd  xmm7, [esp + _qqO]	/* xmm7=vcoul */
	addsd  xmm7, [esp + _vctot]
	movlpd [esp + _vctot], xmm7

	/* H1 interactions */
	mulsd  xmm6, [esp + _qqH]	/* xmm6=vcoul */
	addsd  xmm6, [esp + _vctot]
	movlpd [esp + _vctot], xmm6

	/* H2 interactions */
	mulsd  xmm5, [esp + _qqH]	/* xmm5=vcoul */
	addsd  xmm5, [esp + _vctot]
	movlpd [esp + _vctot], xmm5

imc1020_updateouterdata:
	/* accumulate total potential energy and update it */
	mov   edx, [ebp + _gid]  
	mov   edx, [edx]
	add   [ebp + _gid],  4	

	movapd xmm7, [esp + _vctot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* pos 0-1 in xmm7 have the sum now */
	        
	/* add earlier value from mem */
	mov   eax, [ebp + _Vc]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 	
	
	/* finish if last */
	mov   ecx, [ebp + _nri]
	dec ecx
	jecxz imc1020_end
	/* not last, iterate once more! */ 
	mov [ebp + _nri], ecx
	jmp imc1020_outer
imc1020_end:
	emms
	mov eax, [esp + _salign]
	add esp, eax
	add esp, 276
	pop edi
	pop esi
        pop edx
        pop ecx
        pop ebx
        pop eax
	leave
	ret


	
.globl mcinl1030_sse2
	.type mcinl1030_sse2,@function
mcinl1030_sse2:	
.equ		_nri,		8
.equ		_iinr,		12
.equ		_jindex,	16
.equ		_jjnr,		20
.equ		_shift,		24
.equ		_shiftvec,	28
.equ		_gid,		32
.equ		_pos,		36		
.equ		_charge,	40
.equ		_facel,		44 /* double */
.equ		_Vc,		52 
	/* stack offsets for local variables */ 
	/* bottom of stack is cache-aligned for sse2 use */
.equ		_ixO,	        0
.equ		_iyO,	        16
.equ		_izO,           32
.equ		_ixH1,	        48
.equ		_iyH1,	        64
.equ		_izH1,          80
.equ		_ixH2,	        96
.equ		_iyH2,	        112
.equ		_izH2,          128
.equ		_jxO,	        144
.equ		_jyO,	        160
.equ		_jzO,           176
.equ		_jxH1,	        192
.equ		_jyH1,	        208
.equ		_jzH1,          224
.equ		_jxH2,	        240
.equ		_jyH2,	        256
.equ		_jzH2,          272
.equ		_qqOO,          288
.equ		_qqOH,          304
.equ		_qqHH,          320
.equ		_vctot,         336
.equ		_half,          352
.equ		_three,         368
.equ		_rsqOO,         384
.equ		_rsqOH1,        400
.equ		_rsqOH2,        416
.equ		_rsqH1O,        432
.equ		_rsqH1H1,       448
.equ		_rsqH1H2,       464
.equ		_rsqH2O,        480
.equ		_rsqH2H1,       496
.equ		_rsqH2H2,       512
.equ		_rinvOO,        528
.equ		_rinvOH1,       544
.equ		_rinvOH2,       560
.equ		_rinvH1O,       576
.equ		_rinvH1H1,      592
.equ		_rinvH1H2,      608
.equ		_rinvH2O,       624
.equ		_rinvH2H1,      640
.equ		_rinvH2H2,      656
.equ		_is3,           672
.equ		_ii3,           676
.equ		_innerjjnr,     680
.equ		_innerk,        684
.equ		_salign,        688								
	push ebp
	mov ebp,esp	
        push eax
        push ebx
        push ecx
        push edx
	push esi
	push edi
	sub esp, 692		/* local stack space */
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + _salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_three]
	movapd [esp + _half],  xmm0
	movapd [esp + _three], xmm1
	
	/* assume we have at least one i particle - start directly */
	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	mov   ebx, [ecx]	        /* ebx =ii */

	mov   edx, [ebp + _charge]
	movsd xmm3, [edx + ebx*8]	/* qO */
	movsd xmm4, xmm3		/* qO */
	movsd xmm5, [edx + ebx*8 + 8]	/* qH */
	movsd xmm6, [ebp + _facel]	/* facel */
	mulsd  xmm3, xmm3		/* qO*qO */
	mulsd  xmm4, xmm5		/* qO*qH */
	mulsd  xmm5, xmm5		/* qH*qH */
	mulsd  xmm3, xmm6
	mulsd  xmm4, xmm6
	mulsd  xmm5, xmm6
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _qqOO], xmm3
	movapd [esp + _qqOH], xmm4
	movapd [esp + _qqHH], xmm5

imc1030_outer:
	mov   eax, [ebp + _shift]      /* eax = pointer into shift[] */
	mov   ebx, [eax]		/* ebx=shift[n] */
	add   [ebp + _shift],  4  /* advance pointer one step */
	
	lea   ebx, [ebx + ebx*2]        /* ebx=3*is */

	mov   eax, [ebp + _shiftvec]   /* eax = base of shiftvec[] */

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	add   [ebp + _iinr],  4   /* advance pointer */
	mov   ebx, [ecx]	        /* ebx =ii */

	lea   ebx, [ebx + ebx*2]	/* ebx = 3*ii=ii3 */
	mov   eax, [ebp + _pos]        /* eax = base of pos[] */ 
	mov   [esp + _ii3], ebx	
	
	movapd xmm3, xmm0
	movapd xmm4, xmm1
	movapd xmm5, xmm2
	addsd xmm3, [eax + ebx*8]
	addsd xmm4, [eax + ebx*8 + 8]
	addsd xmm5, [eax + ebx*8 + 16]		
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _ixO], xmm3
	movapd [esp + _iyO], xmm4
	movapd [esp + _izO], xmm5

	movsd xmm3, xmm0
	movsd xmm4, xmm1
	movsd xmm5, xmm2
	addsd xmm0, [eax + ebx*8 + 24]
	addsd xmm1, [eax + ebx*8 + 32]
	addsd xmm2, [eax + ebx*8 + 40]		
	addsd xmm3, [eax + ebx*8 + 48]
	addsd xmm4, [eax + ebx*8 + 56]
	addsd xmm5, [eax + ebx*8 + 64]		

	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _ixH1], xmm0
	movapd [esp + _iyH1], xmm1
	movapd [esp + _izH1], xmm2
	movapd [esp + _ixH2], xmm3
	movapd [esp + _iyH2], xmm4
	movapd [esp + _izH2], xmm5

	/* clear vctot */
	xorpd xmm4, xmm4
	movapd [esp + _vctot], xmm4
	
	mov   eax, [ebp + _jindex]
	mov   ecx, [eax]	         /* jindex[n] */
	mov   edx, [eax + 4]	         /* jindex[n+1] */
	add   [ebp + _jindex],  4
	sub   edx, ecx                   /* number of innerloop atoms */

	mov   esi, [ebp + _pos]
	mov   eax, [ebp + _jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + _innerjjnr], eax     /* pointer to jjnr[nj0] */
	sub   edx,  2
	mov   [esp + _innerk], edx        /* number of innerloop atoms */
	jge   imc1030_unroll_loop
	jmp   imc1030_checksingle
imc1030_unroll_loop:	
	/* twice unrolled innerloop here */
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]	
	mov   ebx, [edx + 4] 
	
	add   [esp + _innerjjnr], 8 /* advance pointer (unrolled 2) */

	mov esi, [ebp + _pos]       /* base of pos[] */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */
	lea   ebx, [ebx + ebx*2]	
	
	/* move j coordinates to local temp variables */
	movlpd xmm2, [esi + eax*8]
	movlpd xmm3, [esi + eax*8 + 8]
	movlpd xmm4, [esi + eax*8 + 16]
	movlpd xmm5, [esi + eax*8 + 24]
	movlpd xmm6, [esi + eax*8 + 32]
	movlpd xmm7, [esi + eax*8 + 40]
	movhpd xmm2, [esi + ebx*8]
	movhpd xmm3, [esi + ebx*8 + 8]
	movhpd xmm4, [esi + ebx*8 + 16]
	movhpd xmm5, [esi + ebx*8 + 24]
	movhpd xmm6, [esi + ebx*8 + 32]
	movhpd xmm7, [esi + ebx*8 + 40]
	movapd 	[esp + _jxO], xmm2
	movapd 	[esp + _jyO], xmm3
	movapd 	[esp + _jzO], xmm4
	movapd 	[esp + _jxH1], xmm5
	movapd 	[esp + _jyH1], xmm6
	movapd 	[esp + _jzH1], xmm7
	movlpd xmm2, [esi + eax*8 + 48]
	movlpd xmm3, [esi + eax*8 + 56]
	movlpd xmm4, [esi + eax*8 + 64]
	movhpd xmm2, [esi + ebx*8 + 48]
	movhpd xmm3, [esi + ebx*8 + 56]
	movhpd xmm4, [esi + ebx*8 + 64]
	movapd 	[esp + _jxH2], xmm2
	movapd 	[esp + _jyH2], xmm3
	movapd 	[esp + _jzH2], xmm4
	
	movapd xmm0, [esp + _ixO]
	movapd xmm1, [esp + _iyO]
	movapd xmm2, [esp + _izO]
	movapd xmm3, [esp + _ixO]
	movapd xmm4, [esp + _iyO]
	movapd xmm5, [esp + _izO]
	subpd  xmm0, [esp + _jxO]
	subpd  xmm1, [esp + _jyO]
	subpd  xmm2, [esp + _jzO]
	subpd  xmm3, [esp + _jxH1]
	subpd  xmm4, [esp + _jyH1]
	subpd  xmm5, [esp + _jzH1]
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + _rsqOO], xmm0
	movapd [esp + _rsqOH1], xmm3

	movapd xmm0, [esp + _ixO]
	movapd xmm1, [esp + _iyO]
	movapd xmm2, [esp + _izO]
	movapd xmm3, [esp + _ixH1]
	movapd xmm4, [esp + _iyH1]
	movapd xmm5, [esp + _izH1]
	subpd  xmm0, [esp + _jxH2]
	subpd  xmm1, [esp + _jyH2]
	subpd  xmm2, [esp + _jzH2]
	subpd  xmm3, [esp + _jxO]
	subpd  xmm4, [esp + _jyO]
	subpd  xmm5, [esp + _jzO]
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + _rsqOH2], xmm0
	movapd [esp + _rsqH1O], xmm3

	movapd xmm0, [esp + _ixH1]
	movapd xmm1, [esp + _iyH1]
	movapd xmm2, [esp + _izH1]
	movapd xmm3, [esp + _ixH1]
	movapd xmm4, [esp + _iyH1]
	movapd xmm5, [esp + _izH1]
	subpd  xmm0, [esp + _jxH1]
	subpd  xmm1, [esp + _jyH1]
	subpd  xmm2, [esp + _jzH1]
	subpd  xmm3, [esp + _jxH2]
	subpd  xmm4, [esp + _jyH2]
	subpd  xmm5, [esp + _jzH2]
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + _rsqH1H1], xmm0
	movapd [esp + _rsqH1H2], xmm3

	movapd xmm0, [esp + _ixH2]
	movapd xmm1, [esp + _iyH2]
	movapd xmm2, [esp + _izH2]
	movapd xmm3, [esp + _ixH2]
	movapd xmm4, [esp + _iyH2]
	movapd xmm5, [esp + _izH2]
	subpd  xmm0, [esp + _jxO]
	subpd  xmm1, [esp + _jyO]
	subpd  xmm2, [esp + _jzO]
	subpd  xmm3, [esp + _jxH1]
	subpd  xmm4, [esp + _jyH1]
	subpd  xmm5, [esp + _jzH1]
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm4, xmm3
	addpd  xmm4, xmm5
	movapd [esp + _rsqH2O], xmm0
	movapd [esp + _rsqH2H1], xmm4

	movapd xmm0, [esp + _ixH2]
	movapd xmm1, [esp + _iyH2]
	movapd xmm2, [esp + _izH2]
	subpd  xmm0, [esp + _jxH2]
	subpd  xmm1, [esp + _jyH2]
	subpd  xmm2, [esp + _jzH2]
	mulpd xmm0, xmm0
	mulpd xmm1, xmm1
	mulpd xmm2, xmm2
	addpd xmm0, xmm1
	addpd xmm0, xmm2
	movapd [esp + _rsqH2H2], xmm0
		
	/* start doing invsqrt use rsq values in xmm0 (h2h2) , xmm4 (h2h1) */
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulpd   xmm1, xmm1	/* luA*luA */
	mulpd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	mulpd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subpd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm3, [esp + _half] /* iter1 */
	mulpd   xmm7, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulpd   xmm3, xmm3	/* luA*luA */
	mulpd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	mulpd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subpd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm1, [esp + _half] /* rinv */
	mulpd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvH2H2], xmm1
	movapd [esp + _rinvH2H1], xmm5

	movapd xmm0, [esp + _rsqOO]
	movapd xmm4, [esp + _rsqOH1]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulpd   xmm1, xmm1	/* luA*luA */
	mulpd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	mulpd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subpd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm3, [esp + _half] /* iter1 of  */
	mulpd   xmm7, [esp + _half] /* iter1 of  */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulpd   xmm3, xmm3	/* luA*luA */
	mulpd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	mulpd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subpd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm1, [esp + _half] /* rinv */
	mulpd   xmm5, [esp + _half] /* rinv*/
	movapd [esp + _rinvOO], xmm1
	movapd [esp + _rinvOH1], xmm5

	movapd xmm0, [esp + _rsqOH2]
	movapd xmm4, [esp + _rsqH1O]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulpd   xmm1, xmm1	/* luA*luA */
	mulpd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	mulpd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subpd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm3, [esp + _half] /* iter1 */
	mulpd   xmm7, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulpd   xmm3, xmm3	/* luA*luA */
	mulpd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	mulpd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subpd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm1, [esp + _half] /* rinv */
	mulpd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvOH2], xmm1
	movapd [esp + _rinvH1O], xmm5

	movapd xmm0, [esp + _rsqH1H1]
	movapd xmm4, [esp + _rsqH1H2]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulpd   xmm1, xmm1	/* luA*luA */
	mulpd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	mulpd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subpd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm3, [esp + _half] /* iter1a */
	mulpd   xmm7, [esp + _half] /* iter1b */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulpd   xmm3, xmm3	/* luA*luA */
	mulpd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	mulpd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subpd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm1, [esp + _half] /* rinv */
	mulpd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvH1H1], xmm1
	movapd [esp + _rinvH1H2], xmm5

	movapd xmm0, [esp + _rsqH2O]
	cvtpd2ps xmm1, xmm0	
	rsqrtps xmm1, xmm1
	cvtps2pd xmm1, xmm1
	
	movapd  xmm2, xmm1	/* copy of luA */
	mulpd   xmm1, xmm1	/* luA*luA */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm3, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	mulpd   xmm3, xmm3	/* luA*luA */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm1, [esp + _half] /* rinv */
	movapd [esp + _rinvH2O], xmm1

	/* start with OO interaction */
	movapd xmm0, [esp + _rinvOO]
	mulpd  xmm0, [esp + _qqOO]	
	addpd  xmm0, [esp + _vctot]
	
	/* other interactions */
	movapd xmm1, [esp + _rinvOH1]
	movapd xmm2, [esp + _rinvH1H1]
	
	addpd xmm1, [esp + _rinvOH2]
	addpd xmm2, [esp + _rinvH1H2]
	
	addpd xmm1, [esp + _rinvH1O]
	addpd xmm2, [esp + _rinvH2H1]

	addpd xmm1, [esp + _rinvH2O]
	addpd xmm2, [esp + _rinvH2H2]

	mulpd xmm1, [esp + _qqOH]
	mulpd xmm2, [esp + _qqHH]
	
	addpd xmm0, xmm1	
	addpd xmm0, xmm2

	movapd [esp + _vctot], xmm0
	
	/* should we do one more iteration? */
	sub   [esp + _innerk],  2
	jl    imc1030_checksingle
	jmp   imc1030_unroll_loop
imc1030_checksingle:
	mov   edx, [esp + _innerk]
	and   edx, 1
	jnz   imc1030_dosingle
	jmp   imc1030_updateouterdata
imc1030_dosingle:
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]	

	mov esi, [ebp + _pos]
	lea   eax, [eax + eax*2]  

	/* move j coordinates to local temp variables */
	movlpd xmm2, [esi + eax*8]
	movlpd xmm3, [esi + eax*8 + 8]
	movlpd xmm4, [esi + eax*8 + 16]
	movlpd xmm5, [esi + eax*8 + 24]
	movlpd xmm6, [esi + eax*8 + 32]
	movlpd xmm7, [esi + eax*8 + 40]
	movapd 	[esp + _jxO], xmm2
	movapd 	[esp + _jyO], xmm3
	movapd 	[esp + _jzO], xmm4
	movapd 	[esp + _jxH1], xmm5
	movapd 	[esp + _jyH1], xmm6
	movapd 	[esp + _jzH1], xmm7
	movlpd xmm2, [esi + eax*8 + 48]
	movlpd xmm3, [esi + eax*8 + 56]
	movlpd xmm4, [esi + eax*8 + 64]
	movapd 	[esp + _jxH2], xmm2
	movapd 	[esp + _jyH2], xmm3
	movapd 	[esp + _jzH2], xmm4
	
	movapd xmm0, [esp + _ixO]
	movapd xmm1, [esp + _iyO]
	movapd xmm2, [esp + _izO]
	movapd xmm3, [esp + _ixO]
	movapd xmm4, [esp + _iyO]
	movapd xmm5, [esp + _izO]
	subsd  xmm0, [esp + _jxO]
	subsd  xmm1, [esp + _jyO]
	subsd  xmm2, [esp + _jzO]
	subsd  xmm3, [esp + _jxH1]
	subsd  xmm4, [esp + _jyH1]
	subsd  xmm5, [esp + _jzH1]
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + _rsqOO], xmm0
	movapd [esp + _rsqOH1], xmm3

	movapd xmm0, [esp + _ixO]
	movapd xmm1, [esp + _iyO]
	movapd xmm2, [esp + _izO]
	movapd xmm3, [esp + _ixH1]
	movapd xmm4, [esp + _iyH1]
	movapd xmm5, [esp + _izH1]
	subsd  xmm0, [esp + _jxH2]
	subsd  xmm1, [esp + _jyH2]
	subsd  xmm2, [esp + _jzH2]
	subsd  xmm3, [esp + _jxO]
	subsd  xmm4, [esp + _jyO]
	subsd  xmm5, [esp + _jzO]
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + _rsqOH2], xmm0
	movapd [esp + _rsqH1O], xmm3

	movapd xmm0, [esp + _ixH1]
	movapd xmm1, [esp + _iyH1]
	movapd xmm2, [esp + _izH1]
	movapd xmm3, [esp + _ixH1]
	movapd xmm4, [esp + _iyH1]
	movapd xmm5, [esp + _izH1]
	subsd  xmm0, [esp + _jxH1]
	subsd  xmm1, [esp + _jyH1]
	subsd  xmm2, [esp + _jzH1]
	subsd  xmm3, [esp + _jxH2]
	subsd  xmm4, [esp + _jyH2]
	subsd  xmm5, [esp + _jzH2]
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + _rsqH1H1], xmm0
	movapd [esp + _rsqH1H2], xmm3

	movapd xmm0, [esp + _ixH2]
	movapd xmm1, [esp + _iyH2]
	movapd xmm2, [esp + _izH2]
	movapd xmm3, [esp + _ixH2]
	movapd xmm4, [esp + _iyH2]
	movapd xmm5, [esp + _izH2]
	subsd  xmm0, [esp + _jxO]
	subsd  xmm1, [esp + _jyO]
	subsd  xmm2, [esp + _jzO]
	subsd  xmm3, [esp + _jxH1]
	subsd  xmm4, [esp + _jyH1]
	subsd  xmm5, [esp + _jzH1]
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm4, xmm3
	addsd  xmm4, xmm5
	movapd [esp + _rsqH2O], xmm0
	movapd [esp + _rsqH2H1], xmm4

	movapd xmm0, [esp + _ixH2]
	movapd xmm1, [esp + _iyH2]
	movapd xmm2, [esp + _izH2]
	subsd  xmm0, [esp + _jxH2]
	subsd  xmm1, [esp + _jyH2]
	subsd  xmm2, [esp + _jzH2]
	mulsd xmm0, xmm0
	mulsd xmm1, xmm1
	mulsd xmm2, xmm2
	addsd xmm0, xmm1
	addsd xmm0, xmm2
	movapd [esp + _rsqH2H2], xmm0
		
	/* start doing invsqrt use rsq values in xmm0, xmm4 */
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulsd   xmm1, xmm1	/* luA*luA */
	mulsd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	mulsd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subsd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm3, [esp + _half] /* iter1 */
	mulsd   xmm7, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulsd   xmm3, xmm3	/* luA*luA */
	mulsd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	mulsd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subsd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm1, [esp + _half] /* rinv */
	mulsd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvH2H2], xmm1
	movapd [esp + _rinvH2H1], xmm5

	movapd xmm0, [esp + _rsqOO]
	movapd xmm4, [esp + _rsqOH1]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulsd   xmm1, xmm1	/* luA*luA */
	mulsd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	mulsd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subsd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm3, [esp + _half] /* iter1 of  */
	mulsd   xmm7, [esp + _half] /* iter1 of  */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulsd   xmm3, xmm3	/* luA*luA */
	mulsd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	mulsd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subsd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm1, [esp + _half] /* rinv */
	mulsd   xmm5, [esp + _half] /* rinv*/
	movapd [esp + _rinvOO], xmm1
	movapd [esp + _rinvOH1], xmm5

	movapd xmm0, [esp + _rsqOH2]
	movapd xmm4, [esp + _rsqH1O]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulsd   xmm1, xmm1	/* luA*luA */
	mulsd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	mulsd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subsd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm3, [esp + _half] /* iter1 */
	mulsd   xmm7, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulsd   xmm3, xmm3	/* luA*luA */
	mulsd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	mulsd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subsd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm1, [esp + _half] /* rinv */
	mulsd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvOH2], xmm1
	movapd [esp + _rinvH1O], xmm5

	movapd xmm0, [esp + _rsqH1H1]
	movapd xmm4, [esp + _rsqH1H2]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulsd   xmm1, xmm1	/* luA*luA */
	mulsd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	mulsd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subsd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm3, [esp + _half] /* iter1a */
	mulsd   xmm7, [esp + _half] /* iter1b */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulsd   xmm3, xmm3	/* luA*luA */
	mulsd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	mulsd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subsd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm1, [esp + _half] /* rinv */
	mulsd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvH1H1], xmm1
	movapd [esp + _rinvH1H2], xmm5

	movapd xmm0, [esp + _rsqH2O]
	cvtsd2ss xmm1, xmm0	
	rsqrtss xmm1, xmm1
	cvtss2sd xmm1, xmm1
	
	movapd  xmm2, xmm1	/* copy of luA */
	mulsd   xmm1, xmm1	/* luA*luA */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm3, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	mulsd   xmm3, xmm3	/* luA*luA */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm1, [esp + _half] /* rinv */
	movapd [esp + _rinvH2O], xmm1

	/* start with OO interaction */
	movapd xmm0, [esp + _rinvOO]
	mulpd  xmm0, [esp + _qqOO]	
	addpd  xmm0, [esp + _vctot]
	
	/* other interactions */
	movapd xmm1, [esp + _rinvOH1]
	movapd xmm2, [esp + _rinvH1H1]
	
	addsd xmm1, [esp + _rinvOH2]
	addsd xmm2, [esp + _rinvH1H2]
	
	addsd xmm1, [esp + _rinvH1O]
	addsd xmm2, [esp + _rinvH2H1]

	addsd xmm1, [esp + _rinvH2O]
	addsd xmm2, [esp + _rinvH2H2]

	mulsd xmm1, [esp + _qqOH]
	mulsd xmm2, [esp + _qqHH]
	
	addsd xmm0, xmm1	
	addsd xmm0, xmm2

	movlpd [esp + _vctot], xmm0
	
imc1030_updateouterdata:
	/* accumulate total potential energy and update it */
	mov   edx, [ebp + _gid]  
	mov   edx, [edx]
	add   [ebp + _gid],  4	

	movapd xmm7, [esp + _vctot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* pos 0-1 in xmm7 have the sum now */
	        
	/* add earlier value from mem */
	mov   eax, [ebp + _Vc]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 	
	
	/* finish if last */
	mov   ecx, [ebp + _nri]
	dec ecx
	jecxz imc1030_end
	/* not last, iterate once more! */ 
	mov [ebp + _nri], ecx
	jmp imc1030_outer
imc1030_end:
	emms
	mov eax, [esp + _salign]
	add esp, eax
	add esp, 692
	pop edi
	pop esi
        pop edx
        pop ecx
        pop ebx
        pop eax
	leave
	ret







.globl mcinl1100_sse2
	.type mcinl1100_sse2,@function
mcinl1100_sse2:	
.equ		_nri,		8
.equ		_iinr,		12
.equ		_jindex,	16
.equ		_jjnr,		20
.equ		_shift,		24
.equ		_shiftvec,	28
.equ		_gid,		32
.equ		_pos,		36		
.equ		_charge,	40
.equ		_facel,		44 /* double */
.equ		_Vc,		52
.equ		_type,		56
.equ		_ntype,		60
.equ		_nbfp,		64	
.equ		_Vnb,		68	
	/* stack offsets for local variables */ 
	/* bottom of stack is cache-aligned for sse2 use */
.equ		_ix,	        0
.equ		_iy,	        16
.equ		_iz,            32
.equ		_iq,            48	
.equ		_c6,            64
.equ		_c12,           80		 
.equ		_vctot,         96
.equ		_vnbtot,        112
.equ		_half,          128
.equ		_three,         144
.equ		_is3,           160
.equ		_ii3,           164
.equ		_ntia,	        168	
.equ		_innerjjnr,     172
.equ		_innerk,        176
.equ		_salign,        180	
	push ebp
	mov ebp,esp	
        push eax
        push ebx
        push ecx
        push edx
	push esi
	push edi
	sub esp,  184		/* local stack space */
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + _salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_three]
	movapd [esp + _half],  xmm0
	movapd [esp + _three], xmm1

	/* assume we have at least one i particle - start directly */	
imc1100_outer:
	mov   eax, [ebp + _shift]      /* eax = pointer into shift[] */
	mov   ebx, [eax]		/* ebx=shift[n] */
	add   [ebp + _shift],  4  /* advance pointer one step */
	
	lea   ebx, [ebx + ebx*2]        /* ebx=3*is */

	mov   eax, [ebp + _shiftvec]   /* eax = base of shiftvec[] */

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	add   [ebp + _iinr],  4   /* advance pointer */
	mov   ebx, [ecx]	        /* ebx =ii */

	mov   edx, [ebp + _charge]
	movsd xmm3, [edx + ebx*8]	
	mulsd xmm3, [ebp + _facel]
	shufpd xmm3, xmm3, 0

        mov   edx, [ebp + _type] 
        mov   edx, [edx + ebx*4]
        imul  edx, [ebp + _ntype]
        shl   edx, 1
        mov   [esp + _ntia], edx
		
	lea   ebx, [ebx + ebx*2]	/* ebx = 3*ii=ii3 */
	mov   eax, [ebp + _pos]        /* eax = base of pos[] */ 

	addsd xmm0, [eax + ebx*8]
	addsd xmm1, [eax + ebx*8 + 8]
	addsd xmm2, [eax + ebx*8 + 16]

	movapd [esp + _iq], xmm3
	
	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0

	movapd [esp + _ix], xmm0
	movapd [esp + _iy], xmm1
	movapd [esp + _iz], xmm2

	mov   [esp + _ii3], ebx
	
	/* clear vctot */
	xorpd xmm4, xmm4
	movapd [esp + _vctot], xmm4
	movapd [esp + _vnbtot], xmm4
	
	mov   eax, [ebp + _jindex]
	mov   ecx, [eax]	         /* jindex[n] */
	mov   edx, [eax + 4]	         /* jindex[n+1] */
	add   [ebp + _jindex],  4
	sub   edx, ecx                   /* number of innerloop atoms */

	mov   esi, [ebp + _pos]
	mov   eax, [ebp + _jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + _innerjjnr], eax     /* pointer to jjnr[nj0] */
	sub   edx,  2
	mov   [esp + _innerk], edx        /* number of innerloop atoms */
	jge   imc1100_unroll_loop
	jmp   imc1100_checksingle
imc1100_unroll_loop:
	/* twice unrolled innerloop here */
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	add   [esp + _innerjjnr],  8	/* advance pointer (unrolled 2) */

	mov esi, [ebp + _charge]        /* base of charge[] */
	
	movlpd xmm3, [esi + eax*8]
	movhpd xmm3, [esi + ebx*8]

	movapd xmm5, [esp + _iq]
	mulpd xmm3, xmm5		/* qq */
	
	movd  mm0, eax		/* use mmx registers as temp storage */
	movd  mm1, ebx
	
	mov esi, [ebp + _type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov esi, [ebp + _nbfp]
	shl eax, 1
	shl ebx, 1
	mov edi, [esp + _ntia]
	add eax, edi
	add ebx, edi

	movupd xmm6, [esi + eax*8]	/* c6a c12a */
	movupd xmm7, [esi + ebx*8]	/* c6b c12b */
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0
	movd  ebx, mm1
	movapd [esp + _c6], xmm4
	movapd [esp + _c12], xmm6
	
	mov esi, [ebp + _pos]       /* base of pos[] */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */
	lea   ebx, [ebx + ebx*2]	

	/* move two coordinates to xmm0-xmm2 */	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]		
	
	/* move ix-iz to xmm4-xmm6 */
	movapd xmm4, [esp + _ix]
	movapd xmm5, [esp + _iy]
	movapd xmm6, [esp + _iz]

	/* calc dr */
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	/* square it */
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6
	/* rsq in xmm4 */

	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm5, xmm5
	cvtps2pd xmm2, xmm5	/* lu in low xmm2 */

	/* lookup seed in xmm2 */
	movapd xmm5, xmm2	/* copy of lu */
	mulpd xmm2, xmm2	/* lu*lu */
	movapd xmm1, [esp + _three]
	mulpd xmm2, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subpd xmm1, xmm2	/* 30-rsq*lu*lu */
	mulpd xmm1, xmm5	
	mulpd xmm1, xmm0	/* xmm0=iter1 of rinv (new lu) */

	movapd xmm5, xmm1	/* copy of lu */
	mulpd xmm1, xmm1	/* lu*lu */
	movapd xmm2, [esp + _three]
	mulpd xmm1, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subpd xmm2, xmm1	/* 30-rsq*lu*lu */
	mulpd xmm2, xmm5	
	mulpd xmm0, xmm2	/* xmm0=rinv */
	
	movapd xmm4, xmm0
	mulpd  xmm4, xmm4	/* xmm4=rinvsq */
	movapd xmm1, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm1, xmm4	/* xmm1=rinvsix */
	movapd xmm2, xmm1
	mulpd  xmm2, xmm2	/* xmm2=rinvtwelve */
	mulpd  xmm3, xmm0	/* xmm3=vcoul */
	mulpd  xmm1, [esp + _c6]
	mulpd  xmm2, [esp + _c12]
	movapd xmm5, xmm2
	subpd  xmm5, xmm1	/* vnb=vnb12-vnb6 */
	addpd  xmm5, [esp + _vnbtot]
	addpd  xmm3, [esp + _vctot]
	movapd [esp + _vctot], xmm3
	movapd [esp + _vnbtot], xmm5
		
	/* should we do one more iteration? */
	sub   [esp + _innerk],  2
	jl    imc1100_checksingle
	jmp   imc1100_unroll_loop	
imc1100_checksingle:
	mov   edx, [esp + _innerk]
	and   edx, 1
	jnz    imc1100_dosingle
	jmp    imc1100_updateouterdata
imc1100_dosingle:
	mov esi, [ebp + _charge]
	mov edi, [ebp + _pos]
	mov ecx, [esp + _innerjjnr]
	mov   eax, [ecx]
	
	xorpd xmm3, xmm3
	movlpd xmm3, [esi + eax*8]

	movapd xmm5, [esp + _iq]
	mulsd xmm3, xmm5		/* qq */
	
	movd  mm0, eax		/* use mmx registers as temp storage */
	
	mov esi, [ebp + _type]
	mov eax, [esi + eax*4]
	mov esi, [ebp + _nbfp]
	shl eax, 1
	mov edi, [esp + _ntia]
	add eax, edi

	movupd xmm6, [esi + eax*8]	/* c6a c12a */
	xorpd xmm7, xmm7
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0
	
	movapd [esp + _c6], xmm4
	movapd [esp + _c12], xmm6
	
	mov esi, [ebp + _pos]       /* base of pos[] */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */

	/* move two coordinates to xmm0-xmm2 */	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	
	/* move ix-iz to xmm4-xmm6 */
	movapd xmm4, [esp + _ix]
	movapd xmm5, [esp + _iy]
	movapd xmm6, [esp + _iz]

	/* calc dr */
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	/* square it */
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6
	/* rsq in xmm4 */

	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm5, xmm5
	cvtss2sd xmm2, xmm5	/* lu in low xmm2 */

	/* lookup seed in xmm2 */
	movapd xmm5, xmm2	/* copy of lu */
	mulsd xmm2, xmm2	/* lu*lu */
	movapd xmm1, [esp + _three]
	mulsd xmm2, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subsd xmm1, xmm2	/* 30-rsq*lu*lu */
	mulsd xmm1, xmm5	
	mulsd xmm1, xmm0	/* xmm0=iter1 of rinv (new lu) */

	movapd xmm5, xmm1	/* copy of lu */
	mulsd xmm1, xmm1	/* lu*lu */
	movapd xmm2, [esp + _three]
	mulsd xmm1, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subsd xmm2, xmm1	/* 30-rsq*lu*lu */
	mulsd xmm2, xmm5	
	mulsd xmm0, xmm2	/* xmm0=rinv */
	
	movapd xmm4, xmm0
	mulsd  xmm4, xmm4	/* xmm4=rinvsq */
	movapd xmm1, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm1, xmm4	/* xmm1=rinvsix */
	movapd xmm2, xmm1
	mulsd  xmm2, xmm2	/* xmm2=rinvtwelve */
	mulsd  xmm3, xmm0	/* xmm3=vcoul */
	mulsd  xmm1, [esp + _c6]
	mulsd  xmm2, [esp + _c12]
	movapd xmm5, xmm2
	subsd  xmm5, xmm1	/* vnb=vnb12-vnb6 */
	addsd  xmm5, [esp + _vnbtot]
	addsd  xmm3, [esp + _vctot]
	movlpd [esp + _vctot], xmm3
	movlpd [esp + _vnbtot], xmm5
	
imc1100_updateouterdata:
	/* get group index for i particle */
	mov   edx, [ebp + _gid]      /* get group index for this i particle */
	mov   edx, [edx]
	add   [ebp + _gid],  4  /* advance pointer */

	/* accumulate total potential energy and update it */
	movapd xmm7, [esp + _vctot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */

	/* add earlier value from mem */
	mov   eax, [ebp + _Vc]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* accumulate total lj energy and update it */
	movapd xmm7, [esp + _vnbtot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */
	
	/* add earlier value from mem */
	mov   eax, [ebp + _Vnb]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* finish if last */
	mov   ecx, [ebp + _nri]
	dec ecx
	jecxz imc1100_end
	/* not last, iterate once more! */ 
	mov [ebp + _nri], ecx
	jmp imc1100_outer
imc1100_end:
	emms
	mov eax, [esp + _salign]
	add esp, eax
	add esp,  184
	pop edi
	pop esi
        pop edx
        pop ecx
        pop ebx
        pop eax
	leave
	ret



.globl mcinl2100_sse2
	.type mcinl2100_sse2,@function
mcinl2100_sse2:	
.equ		_nri,		8
.equ		_iinr,		12
.equ		_jindex,	16
.equ		_jjnr,		20
.equ		_shift,		24
.equ		_shiftvec,	28
.equ		_gid,		32
.equ		_pos,		36		
.equ		_charge,	40
.equ		_facel,		44 /* double */
.equ		_Vc,		52			
.equ		_argkrf,	56 /* double */	
.equ		_argcrf,	64 /* double */	
.equ		_type,		72
.equ		_ntype,		76
.equ		_nbfp,		80	
.equ		_Vnb,		84	
	/* stack offsets for local variables */ 
	/* bottom of stack is cache-aligned for sse use */
.equ		_ix,	        0
.equ		_iy,	        16
.equ		_iz,            32
.equ		_iq,            48	
.equ		_c6,            64
.equ		_c12,           80		 
.equ		_vctot,         96
.equ		_vnbtot,        112
.equ		_half,          128
.equ		_three,         144
.equ		_krf,		160	 
.equ		_crf,		176	 
.equ		_is3,           192
.equ		_ii3,           196
.equ		_ntia,	        200
.equ		_innerjjnr,     204
.equ		_innerk,        208
.equ		_salign,        212
	push ebp
	mov ebp,esp	
        push eax
        push ebx
        push ecx
        push edx
	push esi
	push edi
	sub esp,  216		/* local stack space */
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + _salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_three]
	movsd xmm5, [ebp + _argkrf]
	movsd xmm6, [ebp + _argcrf]
	
	movapd [esp + _half],  xmm0
	movapd [esp + _three], xmm1
	shufpd xmm5, xmm5, 0
	shufpd xmm6, xmm6, 0
	movapd [esp + _krf], xmm5
	movapd [esp + _crf], xmm6

	/* assume we have at least one i particle - start directly */	
.imc2100_outer:
	mov   eax, [ebp + _shift]      /* eax = pointer into shift[] */
	mov   ebx, [eax]		/* ebx=shift[n] */
	add   [ebp + _shift],  4  /* advance pointer one step */
	
	lea   ebx, [ebx + ebx*2]        /* ebx=3*is */

	mov   eax, [ebp + _shiftvec]   /* eax = base of shiftvec[] */

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	add   [ebp + _iinr],  4   /* advance pointer */
	mov   ebx, [ecx]	        /* ebx =ii */

	mov   edx, [ebp + _charge]
	movsd xmm3, [edx + ebx*8]	
	mulsd xmm3, [ebp + _facel]
	shufpd xmm3, xmm3, 0

        mov   edx, [ebp + _type] 
        mov   edx, [edx + ebx*4]
        imul  edx, [ebp + _ntype]
        shl   edx, 1
        mov   [esp + _ntia], edx
		
	lea   ebx, [ebx + ebx*2]	/* ebx = 3*ii=ii3 */
	mov   eax, [ebp + _pos]        /* eax = base of pos[] */ 

	addsd xmm0, [eax + ebx*8]
	addsd xmm1, [eax + ebx*8 + 8]
	addsd xmm2, [eax + ebx*8 + 16]

	movapd [esp + _iq], xmm3
	
	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0

	movapd [esp + _ix], xmm0
	movapd [esp + _iy], xmm1
	movapd [esp + _iz], xmm2

	mov   [esp + _ii3], ebx
	
	/* clear vctot */
	xorpd xmm4, xmm4
	movapd [esp + _vctot], xmm4
	movapd [esp + _vnbtot], xmm4
	
	mov   eax, [ebp + _jindex]
	mov   ecx, [eax]	         /* jindex[n] */
	mov   edx, [eax + 4]	         /* jindex[n+1] */
	add   [ebp + _jindex],  4
	sub   edx, ecx                   /* number of innerloop atoms */

	mov   esi, [ebp + _pos]
	mov   eax, [ebp + _jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + _innerjjnr], eax     /* pointer to jjnr[nj0] */
	sub   edx,  2
	mov   [esp + _innerk], edx        /* number of innerloop atoms */
	jge   .imc2100_unroll_loop
	jmp   .imc2100_checksingle
.imc2100_unroll_loop:	
	/* twice unrolled innerloop here */
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	add   [esp + _innerjjnr],  8	/* advance pointer (unrolled 2) */

	mov esi, [ebp + _charge]        /* base of charge[] */
	
	movlpd xmm3, [esi + eax*8]
	movhpd xmm3, [esi + ebx*8]

	movapd xmm5, [esp + _iq]
	mulpd xmm3, xmm5		/* qq */
	
	movd  mm0, eax		/* use mmx registers as temp storage */
	movd  mm1, ebx
	
	mov esi, [ebp + _type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov esi, [ebp + _nbfp]
	shl eax, 1
	shl ebx, 1
	mov edi, [esp + _ntia]
	add eax, edi
	add ebx, edi

	movupd xmm6, [esi + eax*8]	/* c6a c12a */
	movupd xmm7, [esi + ebx*8]	/* c6b c12b */
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0		
	movd  ebx, mm1
	movapd [esp + _c6], xmm4
	movapd [esp + _c12], xmm6
	
	mov esi, [ebp + _pos]       /* base of pos[] */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */
	lea   ebx, [ebx + ebx*2]	

	/* move two coordinates to xmm0-xmm2 */	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]		
	
	/* move ix-iz to xmm4-xmm6 */
	movapd xmm4, [esp + _ix]
	movapd xmm5, [esp + _iy]
	movapd xmm6, [esp + _iz]

	/* calc dr */
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	/* square it */
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6
	/* rsq in xmm4 */

	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm5, xmm5
	cvtps2pd xmm2, xmm5	/* lu in low xmm2 */

	movapd xmm7, [esp + _krf]	
	/* lookup seed in xmm2 */
	movapd xmm5, xmm2	/* copy of lu */
	mulpd xmm2, xmm2	/* lu*lu */
	movapd xmm1, [esp + _three]
	mulpd xmm7, xmm4	/* krsq */
	mulpd xmm2, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subpd xmm1, xmm2	/* 30-rsq*lu*lu */
	mulpd xmm1, xmm5	
	mulpd xmm1, xmm0	/* xmm0=iter1 of rinv (new lu) */

	movapd xmm5, xmm1	/* copy of lu */
	mulpd xmm1, xmm1	/* lu*lu */
	movapd xmm2, [esp + _three]
	mulpd xmm1, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subpd xmm2, xmm1	/* 30-rsq*lu*lu */
	mulpd xmm2, xmm5	
	mulpd xmm0, xmm2	/* xmm0=rinv */
	movapd xmm4, xmm0
	mulpd  xmm4, xmm4	/* xmm4=rinvsq */
	movapd xmm6, xmm0
	addpd  xmm6, xmm7	/* xmm6=rinv+ krsq */
	movapd xmm1, xmm4
	subpd  xmm6, [esp + _crf]
	mulpd  xmm1, xmm4
	mulpd  xmm1, xmm4	/* xmm1=rinvsix */
	movapd xmm2, xmm1
	mulpd  xmm2, xmm2	/* xmm2=rinvtwelve */
	mulpd  xmm6, xmm3	/* xmm6=vcoul=qq*(rinv+ krsq) */
	mulpd  xmm1, [esp + _c6]
	mulpd  xmm2, [esp + _c12]
	movapd xmm5, xmm2
	subpd  xmm5, xmm1	/* vnb=vnb12-vnb6 */
	addpd  xmm5, [esp + _vnbtot]
	addpd  xmm6, [esp + _vctot]
	movapd [esp + _vctot], xmm6
	movapd [esp + _vnbtot], xmm5
	
	/* should we do one more iteration? */
	sub   [esp + _innerk],  2
	jl    .imc2100_checksingle
	jmp   .imc2100_unroll_loop

.imc2100_checksingle:				
	mov   edx, [esp + _innerk]
	and   edx, 1
	jnz    .imc2100_dosingle
	jmp    .imc2100_updateouterdata
.imc2100_dosingle:			
	mov esi, [ebp + _charge]
	mov edi, [ebp + _pos]
	mov   ecx, [esp + _innerjjnr]
	xorpd xmm3, xmm3
	mov   eax, [ecx]

	movlpd xmm3, [esi + eax*8]
	movapd xmm5, [esp + _iq]
	mulpd xmm3, xmm5		/* qq */
	
	movd  mm0, eax		/* use mmx registers as temp storage */
	mov esi, [ebp + _type]
	mov eax, [esi + eax*4]
	mov esi, [ebp + _nbfp]
	shl eax, 1
	mov edi, [esp + _ntia]
	add eax, edi

	movupd xmm6, [esi + eax*8]	/* c6a c12a */
	xorpd xmm7, xmm7
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0		
	movapd [esp + _c6], xmm4
	movapd [esp + _c12], xmm6
	
	mov esi, [ebp + _pos]       /* base of pos[] */

	lea eax, [eax + eax*2]         /* replace jnr with j3 */

	/* move two coordinates to xmm0-xmm2 */	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	
	/* move ix-iz to xmm4-xmm6 */
	movapd xmm4, [esp + _ix]
	movapd xmm5, [esp + _iy]
	movapd xmm6, [esp + _iz]

	/* calc dr */
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	/* square it */
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6
	/* rsq in xmm4 */

	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm5, xmm5
	cvtss2sd xmm2, xmm5	/* lu in low xmm2 */

	movapd xmm7, [esp + _krf]	
	/* lookup seed in xmm2 */
	movapd xmm5, xmm2	/* copy of lu */
	mulsd xmm2, xmm2	/* lu*lu */
	movapd xmm1, [esp + _three]
	mulsd xmm7, xmm4	/* krsq */
	mulsd xmm2, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subsd xmm1, xmm2	/* 30-rsq*lu*lu */
	mulsd xmm1, xmm5	
	mulsd xmm1, xmm0	/* xmm0=iter1 of rinv (new lu) */

	movapd xmm5, xmm1	/* copy of lu */
	mulsd xmm1, xmm1	/* lu*lu */
	movapd xmm2, [esp + _three]
	mulsd xmm1, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subsd xmm2, xmm1	/* 30-rsq*lu*lu */
	mulsd xmm2, xmm5	
	mulsd xmm0, xmm2	/* xmm0=rinv */
	movapd xmm4, xmm0
	mulsd  xmm4, xmm4	/* xmm4=rinvsq */
	movapd xmm6, xmm0
	addsd  xmm6, xmm7	/* xmm6=rinv+ krsq */
	movapd xmm1, xmm4
	subsd  xmm6, [esp + _crf]
	mulsd  xmm1, xmm4
	mulsd  xmm1, xmm4	/* xmm1=rinvsix */
	movapd xmm2, xmm1
	mulsd  xmm2, xmm2	/* xmm2=rinvtwelve */
	mulsd  xmm6, xmm3	/* xmm6=vcoul=qq*(rinv+ krsq) */
	mulsd  xmm1, [esp + _c6]
	mulsd  xmm2, [esp + _c12]
	movapd xmm5, xmm2
	subsd  xmm5, xmm1	/* vnb=vnb12-vnb6 */
	addsd  xmm5, [esp + _vnbtot]
	addsd  xmm6, [esp + _vctot]
	movlpd [esp + _vctot], xmm6
	movlpd [esp + _vnbtot], xmm5
	
.imc2100_updateouterdata:
	/* get group index for i particle */
	mov   edx, [ebp + _gid]      /* get group index for this i particle */
	mov   edx, [edx]
	add   [ebp + _gid],  4  /* advance pointer */

	/* accumulate total potential energy and update it */
	movapd xmm7, [esp + _vctot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */

	/* add earlier value from mem */
	mov   eax, [ebp + _Vc]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* accumulate total lj energy and update it */
	movapd xmm7, [esp + _vnbtot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */

	/* add earlier value from mem */
	mov   eax, [ebp + _Vnb]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* finish if last */
	mov   ecx, [ebp + _nri]
	dec ecx
	jecxz .imc2100_end
	/* not last, iterate once more! */ 
	mov [ebp + _nri], ecx
	jmp .imc2100_outer
.imc2100_end:
	emms
	mov eax, [esp + _salign]
	add esp, eax
	add esp,  216
	pop edi
	pop esi
        pop edx
        pop ecx
        pop ebx
        pop eax
	leave
	ret



.globl mcinl2000_sse2
	.type mcinl2000_sse2,@function
mcinl2000_sse2:	
.equ		_nri,		8
.equ		_iinr,		12
.equ		_jindex,	16
.equ		_jjnr,		20
.equ		_shift,		24
.equ		_shiftvec,	28
.equ		_gid,		32
.equ		_pos,		36		
.equ		_charge,	40
.equ		_facel,		44 /* double */
.equ		_Vc,		52			
.equ		_argkrf,	56 /* double */	
.equ		_argcrf,	64 /* double */
	/* stack offsets for local variables */ 
	/* bottom of stack is cache-aligned for sse use */
.equ		_ix,	        0
.equ		_iy,	        16
.equ		_iz,            32
.equ		_iq,            48	
.equ		_vctot,         64
.equ		_half,          80
.equ		_three,         96
.equ		_krf,	        112	 
.equ		_crf,	        128	 
.equ		_is3,           144
.equ		_ii3,           148
.equ		_innerjjnr,     152
.equ		_innerk,        156
.equ		_salign,	160	
	push ebp
	mov ebp,esp	
        push eax
        push ebx
        push ecx
        push edx
	push esi
	push edi
	sub esp,  164		/* local stack space */
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + _salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_three]
	movsd xmm5, [ebp + _argkrf]
	movsd xmm6, [ebp + _argcrf]
	
	movapd [esp + _half],  xmm0
	movapd [esp + _three], xmm1
	shufpd xmm5, xmm5, 0
	movapd [esp + _krf], xmm5
	shufpd xmm6, xmm6, 0
	movapd [esp + _crf], xmm6

	/* assume we have at least one i particle - start directly */	
.imc2000_outer:
	mov   eax, [ebp + _shift]      /* eax = pointer into shift[] */
	mov   ebx, [eax]		/* ebx=shift[n] */
	add   [ebp + _shift],  4  /* advance pointer one step */
	
	lea   ebx, [ebx + ebx*2]        /* ebx=3*is */

	mov   eax, [ebp + _shiftvec]   /* eax = base of shiftvec[] */

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	add   [ebp + _iinr],  4   /* advance pointer */
	mov   ebx, [ecx]	        /* ebx =ii */

	mov   edx, [ebp + _charge]
	movsd xmm3, [edx + ebx*8]	
	mulsd xmm3, [ebp + _facel]
	shufpd xmm3, xmm3, 0
		
	lea   ebx, [ebx + ebx*2]	/* ebx = 3*ii=ii3 */
	mov   eax, [ebp + _pos]        /* eax = base of pos[] */ 

	addsd xmm0, [eax + ebx*8]
	addsd xmm1, [eax + ebx*8 + 8]
	addsd xmm2, [eax + ebx*8 + 16]

	movapd [esp + _iq], xmm3
	
	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0

	movapd [esp + _ix], xmm0
	movapd [esp + _iy], xmm1
	movapd [esp + _iz], xmm2

	mov   [esp + _ii3], ebx
	
	/* clear vctot */
	xorpd xmm4, xmm4
	movapd [esp + _vctot], xmm4
	
	mov   eax, [ebp + _jindex]
	mov   ecx, [eax]	         /* jindex[n] */
	mov   edx, [eax + 4]	         /* jindex[n+1] */
	add   [ebp + _jindex],  4
	sub   edx, ecx                   /* number of innerloop atoms */

	mov   esi, [ebp + _pos]
	mov   eax, [ebp + _jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + _innerjjnr], eax     /* pointer to jjnr[nj0] */
	sub   edx,  2
	mov   [esp + _innerk], edx        /* number of innerloop atoms */
	jge   .imc2000_unroll_loop
	jmp   .imc2000_checksingle
.imc2000_unroll_loop:
	/* twice unrolled innerloop here */
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	add   [esp + _innerjjnr],  8	/* advance pointer (unrolled 2) */

	mov esi, [ebp + _charge]        /* base of charge[] */
	
	movlpd xmm3, [esi + eax*8]
	movhpd xmm3, [esi + ebx*8]

	movapd xmm5, [esp + _iq]
	mulpd xmm3, xmm5		/* qq */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */
	lea   ebx, [ebx + ebx*2]	

	mov esi, [ebp + _pos]       /* base of pos[] */

	/* move two coordinates to xmm0-xmm2 */	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]		
	
	/* move ix-iz to xmm4-xmm6 */
	movapd xmm4, [esp + _ix]
	movapd xmm5, [esp + _iy]
	movapd xmm6, [esp + _iz]

	/* calc dr */
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	/* square it */
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6
	/* rsq in xmm4 */

	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm5, xmm5
	cvtps2pd xmm2, xmm5	/* lu in low xmm2 */

	movapd xmm7, [esp + _krf]	
	/* lookup seed in xmm2 */
	movapd xmm5, xmm2	/* copy of lu */
	mulpd xmm2, xmm2	/* lu*lu */
	movapd xmm1, [esp + _three]
	mulpd xmm7, xmm4	/* krsq */
	mulpd xmm2, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subpd xmm1, xmm2	/* 30-rsq*lu*lu */
	mulpd xmm1, xmm5	
	mulpd xmm1, xmm0	/* xmm0=iter1 of rinv (new lu) */

	movapd xmm5, xmm1	/* copy of lu */
	mulpd xmm1, xmm1	/* lu*lu */
	movapd xmm2, [esp + _three]
	mulpd xmm1, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subpd xmm2, xmm1	/* 30-rsq*lu*lu */
	mulpd xmm2, xmm5	
	mulpd xmm0, xmm2	/* xmm0=rinv */
	movapd xmm4, xmm0
	mulpd  xmm4, xmm4	/* xmm4=rinvsq */
	movapd xmm6, xmm0
	addpd  xmm6, xmm7	/* xmm6=rinv+ krsq */
	movapd xmm1, xmm4
	subpd  xmm6, [esp + _crf]
	mulpd  xmm6, xmm3	/* xmm6=vcoul=qq*(rinv+ krsq) */
	addpd  xmm6, [esp + _vctot]
	movapd [esp + _vctot], xmm6

	/* should we do one more iteration? */
	sub   [esp + _innerk],  2
	jl    .imc2000_checksingle
	jmp   .imc2000_unroll_loop

.imc2000_checksingle:				
	mov   edx, [esp + _innerk]
	and   edx, 1
	jnz    .imc2000_dosingle
	jmp    .imc2000_updateouterdata
.imc2000_dosingle:			
	mov esi, [ebp + _charge]
	mov edi, [ebp + _pos]
	mov   ecx, [esp + _innerjjnr]
	
	xorpd xmm3, xmm3
	mov   eax, [ecx]

	movlpd xmm3, [esi + eax*8]
	movapd xmm5, [esp + _iq]
	mulpd xmm3, xmm5		/* qq */
	
	mov esi, [ebp + _pos]       /* base of pos[] */

	lea eax, [eax + eax*2]         /* replace jnr with j3 */

	/* move two coordinates to xmm0-xmm2 */	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	
	/* move ix-iz to xmm4-xmm6 */
	movapd xmm4, [esp + _ix]
	movapd xmm5, [esp + _iy]
	movapd xmm6, [esp + _iz]

	/* calc dr */
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	/* square it */
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6
	/* rsq in xmm4 */

	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm5, xmm5
	cvtss2sd xmm2, xmm5	/* lu in low xmm2 */

	movapd xmm7, [esp + _krf]	
	/* lookup seed in xmm2 */
	movapd xmm5, xmm2	/* copy of lu */
	mulsd xmm2, xmm2	/* lu*lu */
	movapd xmm1, [esp + _three]
	mulsd xmm7, xmm4	/* krsq */
	mulsd xmm2, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subsd xmm1, xmm2	/* 30-rsq*lu*lu */
	mulsd xmm1, xmm5	
	mulsd xmm1, xmm0	/* xmm0=iter1 of rinv (new lu) */

	movapd xmm5, xmm1	/* copy of lu */
	mulsd xmm1, xmm1	/* lu*lu */
	movapd xmm2, [esp + _three]
	mulsd xmm1, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subsd xmm2, xmm1	/* 30-rsq*lu*lu */
	mulsd xmm2, xmm5	
	mulsd xmm0, xmm2	/* xmm0=rinv */
	movapd xmm4, xmm0
	mulsd  xmm4, xmm4	/* xmm4=rinvsq */
	movapd xmm6, xmm0
	addsd  xmm6, xmm7	/* xmm6=rinv+ krsq */
	movapd xmm1, xmm4
	subsd  xmm6, [esp + _crf]
	mulsd  xmm1, xmm4
	mulsd  xmm1, xmm4	/* xmm1=rinvsix */
	movapd xmm2, xmm1
	mulsd  xmm2, xmm2	/* xmm2=rinvtwelve */
	mulsd  xmm6, xmm3	/* xmm6=vcoul=qq*(rinv+ krsq) */
	addsd  xmm6, [esp + _vctot]
	movlpd [esp + _vctot], xmm6

.imc2000_updateouterdata:
	/* get group index for i particle */
	mov   edx, [ebp + _gid]      /* get group index for this i particle */
	mov   edx, [edx]
	add   [ebp + _gid],  4  /* advance pointer */

	/* accumulate total potential energy and update it */
	movapd xmm7, [esp + _vctot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */
	
	/* add earlier value from mem */
	mov   eax, [ebp + _Vc]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* finish if last */
	mov   ecx, [ebp + _nri]
	dec ecx
	jecxz .imc2000_end
	/* not last, iterate once more! */ 
	mov [ebp + _nri], ecx
	jmp .imc2000_outer
.imc2000_end:
	emms
	mov eax, [esp + _salign]
	add esp, eax
	add esp,  164
	pop edi
	pop esi
        pop edx
        pop ecx
        pop ebx
        pop eax
	leave
	ret



.globl mcinl1120_sse2
	.type mcinl1120_sse2,@function
mcinl1120_sse2:	
.equ		_nri,		8
.equ		_iinr,		12
.equ		_jindex,	16
.equ		_jjnr,		20
.equ		_shift,		24
.equ		_shiftvec,	28
.equ		_gid,		32
.equ		_pos,		36		
.equ		_charge,	40
.equ		_facel,		44 /* double */
.equ		_Vc,		52			
.equ		_type,		56
.equ		_ntype,		60
.equ		_nbfp,		64	
.equ		_Vnb,		68	
	/* stack offsets for local variables */ 
	/* bottom of stack is cache-aligned for sse use */
.equ		_ixO,	        0
.equ		_iyO,	        16
.equ		_izO,           32
.equ		_ixH1,	        48
.equ		_iyH1,	        64
.equ		_izH1,          80
.equ		_ixH2,	        96
.equ		_iyH2,	        112
.equ		_izH2,          128
.equ		_iqO,           144 
.equ		_iqH,           160 	
.equ		_qqO,           176
.equ		_qqH,           192
.equ		_c6,            208
.equ		_c12,           224		 
.equ		_vctot,         240
.equ		_vnbtot,        256
.equ		_half,          272
.equ		_three,         288
.equ		_is3,           304
.equ		_ii3,           308
.equ		_ntia,	        312	
.equ		_innerjjnr,     316
.equ		_innerk,        320
.equ		_salign,        324
	push ebp
	mov ebp,esp	
        push eax
        push ebx
        push ecx
        push edx
	push esi
	push edi
	sub esp, 328		/* local stack space */
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + _salign], eax
	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_three]
	movapd [esp + _half],  xmm0
	movapd [esp + _three], xmm1

	/* assume we have at least one i particle - start directly */
	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	mov   ebx, [ecx]	        /* ebx =ii */

	mov   edx, [ebp + _charge]
	movsd xmm3, [edx + ebx*8]	
	movsd xmm4, [edx + ebx*8 + 8]	
	movsd xmm5, [ebp + _facel]
	mulsd  xmm3, xmm5
	mulsd  xmm4, xmm5

	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	movapd [esp + _iqO], xmm3
	movapd [esp + _iqH], xmm4
	
	mov   edx, [ebp + _type]
	mov   ecx, [edx + ebx*4]
	shl   ecx, 1
	imul  ecx, [ebp + _ntype]      /* ecx = ntia = 2*ntype*type[ii0] */
	mov   [esp + _ntia], ecx		
imc1120_outer:
	mov   eax, [ebp + _shift]      /* eax = pointer into shift[] */
	mov   ebx, [eax]		/* ebx=shift[n] */
	add   [ebp + _shift],  4  /* advance pointer one step */
	
	lea   ebx, [ebx + ebx*2]        /* ebx=3*is */

	mov   eax, [ebp + _shiftvec]   /* eax = base of shiftvec[] */

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	add   [ebp + _iinr],  4   /* advance pointer */
	mov   ebx, [ecx]	        /* ebx =ii */

	movapd xmm3, xmm0
	movapd xmm4, xmm1
	movapd xmm5, xmm2

	lea   ebx, [ebx + ebx*2]	/* ebx = 3*ii=ii3 */
	mov   eax, [ebp + _pos]        /* eax = base of pos[] */ 
	mov   [esp + _ii3], ebx

	addsd xmm3, [eax + ebx*8]
	addsd xmm4, [eax + ebx*8 + 8]
	addsd xmm5, [eax + ebx*8 + 16]		
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _ixO], xmm3
	movapd [esp + _iyO], xmm4
	movapd [esp + _izO], xmm5

	movsd xmm3, xmm0
	movsd xmm4, xmm1
	movsd xmm5, xmm2
	addsd xmm0, [eax + ebx*8 + 24]
	addsd xmm1, [eax + ebx*8 + 32]
	addsd xmm2, [eax + ebx*8 + 40]		
	addsd xmm3, [eax + ebx*8 + 48]
	addsd xmm4, [eax + ebx*8 + 56]
	addsd xmm5, [eax + ebx*8 + 64]		

	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _ixH1], xmm0
	movapd [esp + _iyH1], xmm1
	movapd [esp + _izH1], xmm2
	movapd [esp + _ixH2], xmm3
	movapd [esp + _iyH2], xmm4
	movapd [esp + _izH2], xmm5
	
	/* clear vctot */
	xorpd xmm4, xmm4
	movapd [esp + _vctot], xmm4
	movapd [esp + _vnbtot], xmm4
	
	mov   eax, [ebp + _jindex]
	mov   ecx, [eax]	         /* jindex[n] */
	mov   edx, [eax + 4]	         /* jindex[n+1] */
	add   [ebp + _jindex],  4
	sub   edx, ecx                   /* number of innerloop atoms */

	mov   esi, [ebp + _pos]
	mov   eax, [ebp + _jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + _innerjjnr], eax     /* pointer to jjnr[nj0] */
	sub   edx,  2
	mov   [esp + _innerk], edx        /* number of innerloop atoms */
	jge   imc1120_unroll_loop
	jmp   imc1120_checksingle
imc1120_unroll_loop:
	/* twice unrolled innerloop here */
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]	
	mov   ebx, [edx + 4]

	add   [esp + _innerjjnr],  8	/* advance pointer (unrolled 2) */

	mov esi, [ebp + _charge]        /* base of charge[] */
	
	movlpd xmm3, [esi + eax*8]
	movhpd xmm3, [esi + ebx*8]
	movapd xmm4, xmm3
	mulpd  xmm3, [esp + _iqO]
	mulpd  xmm4, [esp + _iqH]

	movd  mm0, eax		/* use mmx registers as temp storage */
	movd  mm1, ebx

	movapd  [esp + _qqO], xmm3
	movapd  [esp + _qqH], xmm4
	
	mov esi, [ebp + _type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov esi, [ebp + _nbfp]
	shl eax, 1	
	shl ebx, 1	
	mov edi, [esp + _ntia]
	add eax, edi
	add ebx, edi

	movupd xmm6, [esi + eax*8]	/* c6a c12a */
	movupd xmm7, [esi + ebx*8]	/* c6b c12b */
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0
	movd  ebx, mm1
	movapd [esp + _c6], xmm4
	movapd [esp + _c12], xmm6
	
	mov esi, [ebp + _pos]       /* base of pos[] */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */
	lea   ebx, [ebx + ebx*2]	

	/* move two coordinates to xmm0-xmm2 */
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]		

	/* move ixO-izO to xmm4-xmm6 */
	movapd xmm4, [esp + _ixO]
	movapd xmm5, [esp + _iyO]
	movapd xmm6, [esp + _izO]

	/* calc dr */
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	/* square it */
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6
	movapd xmm7, xmm4
	/* rsqO in xmm7 */

	/* move ixH1-izH1 to xmm4-xmm6 */
	movapd xmm4, [esp + _ixH1]
	movapd xmm5, [esp + _iyH1]
	movapd xmm6, [esp + _izH1]

	/* calc dr */
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	/* square it */
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm6, xmm5
	addpd xmm6, xmm4
	/* rsqH1 in xmm6 */

	/* move ixH2-izH2 to xmm3-xmm5 */ 
	movapd xmm3, [esp + _ixH2]
	movapd xmm4, [esp + _iyH2]
	movapd xmm5, [esp + _izH2]

	/* calc dr */
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2

	/* square it */
	mulpd xmm3,xmm3
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	addpd xmm5, xmm4
	addpd xmm5, xmm3
	/* rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 */

	/* start with rsqO - put seed in xmm2 */
	cvtpd2ps xmm2, xmm7	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulpd   xmm2, xmm7	/* rsq*lu*lu */
	subpd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulpd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulpd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm3, xmm4
	mulpd xmm4, xmm4	/* lu*lu */
	mulpd xmm7, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subpd xmm4, xmm7	/* 3-rsq*lu*lu */
	mulpd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulpd xmm4, [esp + _half] /* rinv */
	movapd  xmm7, xmm4	/* rinvO in xmm7 */
	
	/* rsqH1 - seed in xmm2 */
	cvtpd2ps xmm2, xmm6	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulpd   xmm2, xmm6	/* rsq*lu*lu */
	subpd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulpd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulpd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm3, xmm4
	mulpd xmm4, xmm4	/* lu*lu */
	mulpd xmm6, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subpd xmm4, xmm6	/* 3-rsq*lu*lu */
	mulpd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulpd xmm4, [esp + _half] /* rinv */
	movapd  xmm6, xmm4	/* rinvH1 in xmm6 */
	
	/* rsqH2 - seed in xmm2 */
	cvtpd2ps xmm2, xmm5	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulpd   xmm2, xmm5	/* rsq*lu*lu */
	subpd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulpd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulpd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm3, xmm4
	mulpd xmm4, xmm4	/* lu*lu */
	mulpd xmm5, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subpd xmm4, xmm5	/* 3-rsq*lu*lu */
	mulpd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulpd xmm4, [esp + _half] /* rinv */
	movapd  xmm5, xmm4	/* rinvH2 in xmm5 */

	/* do O interactions */
	movapd  xmm4, xmm7	
	mulpd   xmm4, xmm4	/* xmm7=rinv, xmm4=rinvsq */
	movapd xmm1, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm1, xmm4	/* xmm1=rinvsix */
	movapd xmm2, xmm1
	mulpd  xmm2, xmm2	/* xmm2=rinvtwelve */
	mulpd  xmm7, [esp + _qqO]	/* xmm7=vcoul */
	
	mulpd  xmm1, [esp + _c6]
	mulpd  xmm2, [esp + _c12]
	movapd xmm3, xmm2
	subpd  xmm3, xmm1	/* vnb=vnb12-vnb6 */		
	addpd  xmm3, [esp + _vnbtot]
	addpd  xmm7, [esp + _vctot]	
	movapd [esp + _vnbtot], xmm3
	movapd [esp + _vctot], xmm7

	/* H1 interactions */
	mulpd  xmm6, [esp + _qqH]	/* xmm6=vcoul */
	addpd  xmm6, [esp + _vctot]
	movapd [esp + _vctot], xmm6

	/* H2 interactions */
	mulpd  xmm5, [esp + _qqH]	/* xmm5=vcoul */
	addpd  xmm5, [esp + _vctot]
	movapd [esp + _vctot], xmm5
	
	/* should we do one more iteration? */
	sub   [esp + _innerk],  2
	jl    imc1120_checksingle
	jmp   imc1120_unroll_loop
imc1120_checksingle:	
	mov   edx, [esp + _innerk]
	and   edx, 1
	jnz   imc1120_dosingle
	jmp   imc1120_updateouterdata
imc1120_dosingle:
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]	
	add   [esp + _innerjjnr],  4	

	mov esi, [ebp + _charge]        /* base of charge[] */

	xorpd xmm3, xmm3
	movlpd xmm3, [esi + eax*8]
	movapd xmm4, xmm3
	mulpd  xmm3, [esp + _iqO]
	mulpd  xmm4, [esp + _iqH]

	movd  mm0, eax		/* use mmx registers as temp storage */

	movapd  [esp + _qqO], xmm3
	movapd  [esp + _qqH], xmm4
	
	mov esi, [ebp + _type]
	mov eax, [esi + eax*4]
	mov esi, [ebp + _nbfp]
	shl eax, 1	
	mov edi, [esp + _ntia]
	add eax, edi

	movupd xmm6, [esi + eax*8]	/* c6a c12a */
	xorpd xmm7, xmm7
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0
	movd  ebx, mm1
	movapd [esp + _c6], xmm4
	movapd [esp + _c12], xmm6
	
	mov esi, [ebp + _pos]       /* base of pos[] */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */

	/* move coordinates to xmm0-xmm2 */
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]

	/* move ixO-izO to xmm4-xmm6 */
	movapd xmm4, [esp + _ixO]
	movapd xmm5, [esp + _iyO]
	movapd xmm6, [esp + _izO]

	/* calc dr */
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	/* square it */
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6
	movapd xmm7, xmm4
	/* rsqO in xmm7 */

	/* move ixH1-izH1 to xmm4-xmm6 */
	movapd xmm4, [esp + _ixH1]
	movapd xmm5, [esp + _iyH1]
	movapd xmm6, [esp + _izH1]

	/* calc dr */
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	/* square it */
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm6, xmm5
	addsd xmm6, xmm4
	/* rsqH1 in xmm6 */

	/* move ixH2-izH2 to xmm3-xmm5 */ 
	movapd xmm3, [esp + _ixH2]
	movapd xmm4, [esp + _iyH2]
	movapd xmm5, [esp + _izH2]

	/* calc dr */
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2

	/* square it */
	mulsd xmm3,xmm3
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	addsd xmm5, xmm4
	addsd xmm5, xmm3
	/* rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 */

	/* start with rsqO - put seed in xmm2 */
	cvtsd2ss xmm2, xmm7	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulsd   xmm2, xmm7	/* rsq*lu*lu */
	subsd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulsd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulsd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm3, xmm4
	mulsd xmm4, xmm4	/* lu*lu */
	mulsd xmm7, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subsd xmm4, xmm7	/* 3-rsq*lu*lu */
	mulsd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulsd xmm4, [esp + _half] /* rinv */
	movapd  xmm7, xmm4	/* rinvO in xmm7 */
	
	/* rsqH1 - seed in xmm2 */
	cvtsd2ss xmm2, xmm6	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulsd   xmm2, xmm6	/* rsq*lu*lu */
	subsd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulsd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulsd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm3, xmm4
	mulsd xmm4, xmm4	/* lu*lu */
	mulsd xmm6, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subsd xmm4, xmm6	/* 3-rsq*lu*lu */
	mulsd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulsd xmm4, [esp + _half] /* rinv */
	movapd  xmm6, xmm4	/* rinvH1 in xmm6 */
	
	/* rsqH2 - seed in xmm2 */
	cvtsd2ss xmm2, xmm5	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulsd   xmm2, xmm5	/* rsq*lu*lu */
	subsd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulsd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulsd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm3, xmm4
	mulsd xmm4, xmm4	/* lu*lu */
	mulsd xmm5, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subsd xmm4, xmm5	/* 3-rsq*lu*lu */
	mulsd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulsd xmm4, [esp + _half] /* rinv */
	movapd  xmm5, xmm4	/* rinvH2 in xmm5 */

	/* do O interactions */
	movapd  xmm4, xmm7	
	mulsd   xmm4, xmm4	/* xmm7=rinv, xmm4=rinvsq */
	movapd xmm1, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm1, xmm4	/* xmm1=rinvsix */
	movapd xmm2, xmm1
	mulsd  xmm2, xmm2	/* xmm2=rinvtwelve */
	mulsd  xmm7, [esp + _qqO]	/* xmm7=vcoul */
	
	mulsd  xmm1, [esp + _c6]
	mulsd  xmm2, [esp + _c12]
	movapd xmm3, xmm2
	subsd  xmm3, xmm1	/* vnb=vnb12-vnb6 */		
	addsd  xmm3, [esp + _vnbtot]
	addsd  xmm7, [esp + _vctot]
	movsd [esp + _vnbtot], xmm3
	movsd [esp + _vctot], xmm7

	/* H1 interactions */
	mulsd  xmm6, [esp + _qqH]	/* xmm6=vcoul */
	addsd  xmm6, [esp + _vctot]
	movsd [esp + _vctot], xmm6

	/* H2 interactions */
	mulsd  xmm5, [esp + _qqH]	/* xmm5=vcoul */
	addsd  xmm5, [esp + _vctot]
	movsd [esp + _vctot], xmm5
	
imc1120_updateouterdata:
	/* get gid */
	mov   edx, [ebp + _gid]  
	mov   edx, [edx]
	add   [ebp + _gid],  4	

	/* accumulate total potential energy and update it */
	movapd xmm7, [esp + _vctot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */
        
	/* add earlier value from mem */
	mov   eax, [ebp + _Vc]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* accumulate total lj energy and update it */
	movapd xmm7, [esp + _vnbtot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */

	/* add earlier value from mem */
	mov   eax, [ebp + _Vnb]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* finish if last */
	mov   ecx, [ebp + _nri]
	dec ecx
	jecxz imc1120_end
	/* not last, iterate once more! */ 
	mov [ebp + _nri], ecx
	jmp imc1120_outer
imc1120_end:
	emms
	mov eax, [esp + _salign]
	add esp, eax
	add esp, 328
	pop edi
	pop esi
        pop edx
        pop ecx
        pop ebx
        pop eax
	leave
	ret


	

	
.globl mcinl1130_sse2
	.type mcinl1130_sse2,@function
mcinl1130_sse2:	
.equ		_nri,		8
.equ		_iinr,		12
.equ		_jindex,	16
.equ		_jjnr,		20
.equ		_shift,		24
.equ		_shiftvec,	28
.equ		_gid,		32
.equ		_pos,		36
.equ		_charge,	40
.equ		_facel,		44 /* double */
.equ		_Vc,		52			
.equ		_type,		56
.equ		_ntype,		60
.equ		_nbfp,		64
.equ		_Vnb,		68
	/* stack offsets for local variables */ 
	/* bottom of stack is cache-aligned for sse use */
.equ		_ixO,		0
.equ		_iyO,		16
.equ		_izO,		32
.equ		_ixH1,		48
.equ		_iyH1,		64
.equ		_izH1,		80
.equ		_ixH2,		96
.equ		_iyH2,		112
.equ		_izH2,		128
.equ		_jxO,		144
.equ		_jyO,		160
.equ		_jzO,		176
.equ		_jxH1,		192
.equ		_jyH1,		208
.equ		_jzH1,		224
.equ		_jxH2,		240
.equ		_jyH2,		256
.equ		_jzH2,		272
.equ		_qqOO,		288
.equ		_qqOH,		304
.equ		_qqHH,		320
.equ		_c6,		336
.equ		_c12,		352		 
.equ		_vctot,		368
.equ		_vnbtot,	384
.equ		_half,		400
.equ		_three,		416
.equ		_rsqOO,		432
.equ		_rsqOH1,	448
.equ		_rsqOH2,	464
.equ		_rsqH1O,	480
.equ		_rsqH1H1,	496
.equ		_rsqH1H2,	512
.equ		_rsqH2O,	528 
.equ		_rsqH2H1,	544
.equ		_rsqH2H2,	560
.equ		_rinvOO,	576
.equ		_rinvOH1,	592
.equ		_rinvOH2,	608
.equ		_rinvH1O,	624
.equ		_rinvH1H1,	640
.equ		_rinvH1H2,	656
.equ		_rinvH2O,	672
.equ		_rinvH2H1,	688
.equ		_rinvH2H2,	704
.equ		_is3,		720
.equ		_ii3,		724
.equ		_innerjjnr,	728
.equ		_innerk,	732
.equ		_salign,	736							
	push ebp
	mov ebp,esp	
        push eax
        push ebx
        push ecx
        push edx
	push esi
	push edi
	sub esp, 740		/* local stack space */
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + _salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_three]
	movapd [esp + _half],  xmm0
	movapd [esp + _three], xmm1

	/* assume we have at least one i particle - start directly */
	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	mov   ebx, [ecx]	        /* ebx =ii */

	mov   edx, [ebp + _charge]
	movsd xmm3, [edx + ebx*8]	
	movsd xmm4, xmm3	
	movsd xmm5, [edx + ebx*8 + 8]	
	movsd xmm6, [ebp + _facel]
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm5
	mulsd  xmm5, xmm5
	mulsd  xmm3, xmm6
	mulsd  xmm4, xmm6
	mulsd  xmm5, xmm6
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _qqOO], xmm3
	movapd [esp + _qqOH], xmm4
	movapd [esp + _qqHH], xmm5
		
	xorpd xmm0, xmm0
	mov   edx, [ebp + _type]
	mov   ecx, [edx + ebx*4]
	shl   ecx, 1
	mov   edx, ecx
	imul  ecx, [ebp + _ntype]      /* ecx = ntia = 2*ntype*type[ii0] */
	add   edx, ecx
	mov   eax, [ebp + _nbfp]
	movupd xmm0, [eax + edx*8]
	movhlps xmm1, xmm0
	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0	
	movapd [esp + _c6], xmm0
	movapd [esp + _c12], xmm1

imc1130_outer:
	mov   eax, [ebp + _shift]      /* eax = pointer into shift[] */
	mov   ebx, [eax]		/* ebx=shift[n] */
	add   [ebp + _shift],  4  /* advance pointer one step */
	
	lea   ebx, [ebx + ebx*2]        /* ebx=3*is */

	mov   eax, [ebp + _shiftvec]   /* eax = base of shiftvec[] */

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	add   [ebp + _iinr],  4   /* advance pointer */
	mov   ebx, [ecx]	        /* ebx =ii */

	lea   ebx, [ebx + ebx*2]	/* ebx = 3*ii=ii3 */
	mov   eax, [ebp + _pos]        /* eax = base of pos[] */ 
	mov   [esp + _ii3], ebx	
	
	movapd xmm3, xmm0
	movapd xmm4, xmm1
	movapd xmm5, xmm2
	addsd xmm3, [eax + ebx*8]
	addsd xmm4, [eax + ebx*8 + 8]
	addsd xmm5, [eax + ebx*8 + 16]		
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _ixO], xmm3
	movapd [esp + _iyO], xmm4
	movapd [esp + _izO], xmm5

	movsd xmm3, xmm0
	movsd xmm4, xmm1
	movsd xmm5, xmm2
	addsd xmm0, [eax + ebx*8 + 24]
	addsd xmm1, [eax + ebx*8 + 32]
	addsd xmm2, [eax + ebx*8 + 40]		
	addsd xmm3, [eax + ebx*8 + 48]
	addsd xmm4, [eax + ebx*8 + 56]
	addsd xmm5, [eax + ebx*8 + 64]		

	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _ixH1], xmm0
	movapd [esp + _iyH1], xmm1
	movapd [esp + _izH1], xmm2
	movapd [esp + _ixH2], xmm3
	movapd [esp + _iyH2], xmm4
	movapd [esp + _izH2], xmm5

	/* clear vctot */
	xorpd xmm4, xmm4
	movapd [esp + _vctot], xmm4
	movapd [esp + _vnbtot], xmm4
	
	mov   eax, [ebp + _jindex]
	mov   ecx, [eax]	         /* jindex[n] */
	mov   edx, [eax + 4]	         /* jindex[n+1] */
	add   [ebp + _jindex],  4
	sub   edx, ecx                   /* number of innerloop atoms */

	mov   esi, [ebp + _pos]
	mov   eax, [ebp + _jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + _innerjjnr], eax     /* pointer to jjnr[nj0] */
	sub   edx,  2
	mov   [esp + _innerk], edx        /* number of innerloop atoms */
	jge   imc1130_unroll_loop
	jmp   imc1130_checksingle
imc1130_unroll_loop:
	/* twice unrolled innerloop here */
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]	
	mov   ebx, [edx + 4] 
	
	add   [esp + _innerjjnr],  8	/* advance pointer (unrolled 2) */

	mov esi, [ebp + _pos]       /* base of pos[] */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */
	lea   ebx, [ebx + ebx*2]	
	
	/* move j coordinates to local temp variables */
	movlpd xmm2, [esi + eax*8]
	movlpd xmm3, [esi + eax*8 + 8]
	movlpd xmm4, [esi + eax*8 + 16]
	movlpd xmm5, [esi + eax*8 + 24]
	movlpd xmm6, [esi + eax*8 + 32]
	movlpd xmm7, [esi + eax*8 + 40]
	movhpd xmm2, [esi + ebx*8]
	movhpd xmm3, [esi + ebx*8 + 8]
	movhpd xmm4, [esi + ebx*8 + 16]
	movhpd xmm5, [esi + ebx*8 + 24]
	movhpd xmm6, [esi + ebx*8 + 32]
	movhpd xmm7, [esi + ebx*8 + 40]
	movapd 	[esp + _jxO], xmm2
	movapd 	[esp + _jyO], xmm3
	movapd 	[esp + _jzO], xmm4
	movapd 	[esp + _jxH1], xmm5
	movapd 	[esp + _jyH1], xmm6
	movapd 	[esp + _jzH1], xmm7
	movlpd xmm2, [esi + eax*8 + 48]
	movlpd xmm3, [esi + eax*8 + 56]
	movlpd xmm4, [esi + eax*8 + 64]
	movhpd xmm2, [esi + ebx*8 + 48]
	movhpd xmm3, [esi + ebx*8 + 56]
	movhpd xmm4, [esi + ebx*8 + 64]
	movapd 	[esp + _jxH2], xmm2
	movapd 	[esp + _jyH2], xmm3
	movapd 	[esp + _jzH2], xmm4
	
	movapd xmm0, [esp + _ixO]
	movapd xmm1, [esp + _iyO]
	movapd xmm2, [esp + _izO]
	movapd xmm3, [esp + _ixO]
	movapd xmm4, [esp + _iyO]
	movapd xmm5, [esp + _izO]
	subpd  xmm0, [esp + _jxO]
	subpd  xmm1, [esp + _jyO]
	subpd  xmm2, [esp + _jzO]
	subpd  xmm3, [esp + _jxH1]
	subpd  xmm4, [esp + _jyH1]
	subpd  xmm5, [esp + _jzH1]
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + _rsqOO], xmm0
	movapd [esp + _rsqOH1], xmm3

	movapd xmm0, [esp + _ixO]
	movapd xmm1, [esp + _iyO]
	movapd xmm2, [esp + _izO]
	movapd xmm3, [esp + _ixH1]
	movapd xmm4, [esp + _iyH1]
	movapd xmm5, [esp + _izH1]
	subpd  xmm0, [esp + _jxH2]
	subpd  xmm1, [esp + _jyH2]
	subpd  xmm2, [esp + _jzH2]
	subpd  xmm3, [esp + _jxO]
	subpd  xmm4, [esp + _jyO]
	subpd  xmm5, [esp + _jzO]
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + _rsqOH2], xmm0
	movapd [esp + _rsqH1O], xmm3

	movapd xmm0, [esp + _ixH1]
	movapd xmm1, [esp + _iyH1]
	movapd xmm2, [esp + _izH1]
	movapd xmm3, [esp + _ixH1]
	movapd xmm4, [esp + _iyH1]
	movapd xmm5, [esp + _izH1]
	subpd  xmm0, [esp + _jxH1]
	subpd  xmm1, [esp + _jyH1]
	subpd  xmm2, [esp + _jzH1]
	subpd  xmm3, [esp + _jxH2]
	subpd  xmm4, [esp + _jyH2]
	subpd  xmm5, [esp + _jzH2]
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + _rsqH1H1], xmm0
	movapd [esp + _rsqH1H2], xmm3

	movapd xmm0, [esp + _ixH2]
	movapd xmm1, [esp + _iyH2]
	movapd xmm2, [esp + _izH2]
	movapd xmm3, [esp + _ixH2]
	movapd xmm4, [esp + _iyH2]
	movapd xmm5, [esp + _izH2]
	subpd  xmm0, [esp + _jxO]
	subpd  xmm1, [esp + _jyO]
	subpd  xmm2, [esp + _jzO]
	subpd  xmm3, [esp + _jxH1]
	subpd  xmm4, [esp + _jyH1]
	subpd  xmm5, [esp + _jzH1]
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm4, xmm3
	addpd  xmm4, xmm5
	movapd [esp + _rsqH2O], xmm0
	movapd [esp + _rsqH2H1], xmm4

	movapd xmm0, [esp + _ixH2]
	movapd xmm1, [esp + _iyH2]
	movapd xmm2, [esp + _izH2]
	subpd  xmm0, [esp + _jxH2]
	subpd  xmm1, [esp + _jyH2]
	subpd  xmm2, [esp + _jzH2]
	mulpd xmm0, xmm0
	mulpd xmm1, xmm1
	mulpd xmm2, xmm2
	addpd xmm0, xmm1
	addpd xmm0, xmm2
	movapd [esp + _rsqH2H2], xmm0
		
	/* start doing invsqrt use rsq values in xmm0, xmm4 */
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulpd   xmm1, xmm1	/* luA*luA */
	mulpd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	mulpd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subpd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm3, [esp + _half] /* iter1 */
	mulpd   xmm7, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulpd   xmm3, xmm3	/* luA*luA */
	mulpd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	mulpd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subpd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm1, [esp + _half] /* rinv */
	mulpd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvH2H2], xmm1
	movapd [esp + _rinvH2H1], xmm5

	movapd xmm0, [esp + _rsqOO]
	movapd xmm4, [esp + _rsqOH1]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulpd   xmm1, xmm1	/* luA*luA */
	mulpd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	mulpd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subpd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm3, [esp + _half] /* iter1 of  */
	mulpd   xmm7, [esp + _half] /* iter1 of  */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulpd   xmm3, xmm3	/* luA*luA */
	mulpd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	mulpd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subpd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm1, [esp + _half] /* rinv */
	mulpd   xmm5, [esp + _half] /* rinv*/
	movapd [esp + _rinvOO], xmm1
	movapd [esp + _rinvOH1], xmm5

	movapd xmm0, [esp + _rsqOH2]
	movapd xmm4, [esp + _rsqH1O]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulpd   xmm1, xmm1	/* luA*luA */
	mulpd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	mulpd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subpd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm3, [esp + _half] /* iter1 */
	mulpd   xmm7, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulpd   xmm3, xmm3	/* luA*luA */
	mulpd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	mulpd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subpd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm1, [esp + _half] /* rinv */
	mulpd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvOH2], xmm1
	movapd [esp + _rinvH1O], xmm5

	movapd xmm0, [esp + _rsqH1H1]
	movapd xmm4, [esp + _rsqH1H2]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulpd   xmm1, xmm1	/* luA*luA */
	mulpd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	mulpd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subpd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm3, [esp + _half] /* iter1a */
	mulpd   xmm7, [esp + _half] /* iter1b */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulpd   xmm3, xmm3	/* luA*luA */
	mulpd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	mulpd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subpd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm1, [esp + _half] /* rinv */
	mulpd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvH1H1], xmm1
	movapd [esp + _rinvH1H2], xmm5

	movapd xmm0, [esp + _rsqH2O]
	cvtpd2ps xmm1, xmm0	
	rsqrtps xmm1, xmm1
	cvtps2pd xmm1, xmm1
	
	movapd  xmm2, xmm1	/* copy of luA */
	mulpd   xmm1, xmm1	/* luA*luA */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm3, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	mulpd   xmm3, xmm3	/* luA*luA */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm1, [esp + _half] /* rinv */
	movapd [esp + _rinvH2O], xmm1

	/* start with OO interaction */
	movapd xmm0, [esp + _rinvOO]
	movapd xmm7, xmm0
	mulpd  xmm0, xmm0
	movapd xmm1, xmm0
	mulpd  xmm1, xmm0
	mulpd  xmm1, xmm0	/* xmm1=rinvsix */
	mulpd  xmm7, [esp + _qqOO]
	movapd xmm2, xmm1
	mulpd  xmm2, xmm2	/* xmm2=rinvtwelve */
	mulpd  xmm1, [esp + _c6]	
	mulpd  xmm2, [esp + _c12]	
	movapd xmm3, xmm2
	subpd  xmm3, xmm1	/* xmm3=vnb12-vnb6 */
	addpd  xmm3, [esp + _vnbtot]
	movapd [esp + _vnbtot], xmm3
	addpd  xmm7, [esp + _vctot]

	/* other interactions */
	movapd xmm1, [esp + _rinvOH1]
	movapd xmm2, [esp + _rinvH1H1]
	
	addpd xmm1, [esp + _rinvOH2]
	addpd xmm2, [esp + _rinvH1H2]
	
	addpd xmm1, [esp + _rinvH1O]
	addpd xmm2, [esp + _rinvH2H1]

	addpd xmm1, [esp + _rinvH2O]
	addpd xmm2, [esp + _rinvH2H2]

	mulpd xmm1, [esp + _qqOH]
	mulpd xmm2, [esp + _qqHH]
	
	addpd xmm7, xmm1	
	addpd xmm7, xmm2

	movapd [esp + _vctot], xmm7
	
	/* should we do one more iteration? */
	sub   [esp + _innerk],  2
	jl    imc1130_checksingle
	jmp   imc1130_unroll_loop
imc1130_checksingle:
	mov   edx, [esp + _innerk]
	and   edx, 1
	jnz   imc1130_dosingle
	jmp   imc1130_updateouterdata
imc1130_dosingle:
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]	
	add   [esp + _innerjjnr],  4	

	mov esi, [ebp + _pos]
	lea   eax, [eax + eax*2]  

	/* fetch j coordinates */
	movlpd xmm2, [esi + eax*8]
	movlpd xmm3, [esi + eax*8 + 8]
	movlpd xmm4, [esi + eax*8 + 16]
	movlpd xmm5, [esi + eax*8 + 24]
	movlpd xmm6, [esi + eax*8 + 32]
	movlpd xmm7, [esi + eax*8 + 40]
	movapd 	[esp + _jxO], xmm2
	movapd 	[esp + _jyO], xmm3
	movapd 	[esp + _jzO], xmm4
	movapd 	[esp + _jxH1], xmm5
	movapd 	[esp + _jyH1], xmm6
	movapd 	[esp + _jzH1], xmm7
	movlpd xmm2, [esi + eax*8 + 48]
	movlpd xmm3, [esi + eax*8 + 56]
	movlpd xmm4, [esi + eax*8 + 64]
	movapd 	[esp + _jxH2], xmm2
	movapd 	[esp + _jyH2], xmm3
	movapd 	[esp + _jzH2], xmm4
	
	movapd xmm0, [esp + _ixO]
	movapd xmm1, [esp + _iyO]
	movapd xmm2, [esp + _izO]
	movapd xmm3, [esp + _ixO]
	movapd xmm4, [esp + _iyO]
	movapd xmm5, [esp + _izO]
	subsd  xmm0, [esp + _jxO]
	subsd  xmm1, [esp + _jyO]
	subsd  xmm2, [esp + _jzO]
	subsd  xmm3, [esp + _jxH1]
	subsd  xmm4, [esp + _jyH1]
	subsd  xmm5, [esp + _jzH1]
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + _rsqOO], xmm0
	movapd [esp + _rsqOH1], xmm3

	movapd xmm0, [esp + _ixO]
	movapd xmm1, [esp + _iyO]
	movapd xmm2, [esp + _izO]
	movapd xmm3, [esp + _ixH1]
	movapd xmm4, [esp + _iyH1]
	movapd xmm5, [esp + _izH1]
	subsd  xmm0, [esp + _jxH2]
	subsd  xmm1, [esp + _jyH2]
	subsd  xmm2, [esp + _jzH2]
	subsd  xmm3, [esp + _jxO]
	subsd  xmm4, [esp + _jyO]
	subsd  xmm5, [esp + _jzO]
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + _rsqOH2], xmm0
	movapd [esp + _rsqH1O], xmm3

	movapd xmm0, [esp + _ixH1]
	movapd xmm1, [esp + _iyH1]
	movapd xmm2, [esp + _izH1]
	movapd xmm3, [esp + _ixH1]
	movapd xmm4, [esp + _iyH1]
	movapd xmm5, [esp + _izH1]
	subsd  xmm0, [esp + _jxH1]
	subsd  xmm1, [esp + _jyH1]
	subsd  xmm2, [esp + _jzH1]
	subsd  xmm3, [esp + _jxH2]
	subsd  xmm4, [esp + _jyH2]
	subsd  xmm5, [esp + _jzH2]
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + _rsqH1H1], xmm0
	movapd [esp + _rsqH1H2], xmm3

	movapd xmm0, [esp + _ixH2]
	movapd xmm1, [esp + _iyH2]
	movapd xmm2, [esp + _izH2]
	movapd xmm3, [esp + _ixH2]
	movapd xmm4, [esp + _iyH2]
	movapd xmm5, [esp + _izH2]
	subsd  xmm0, [esp + _jxO]
	subsd  xmm1, [esp + _jyO]
	subsd  xmm2, [esp + _jzO]
	subsd  xmm3, [esp + _jxH1]
	subsd  xmm4, [esp + _jyH1]
	subsd  xmm5, [esp + _jzH1]
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm4, xmm3
	addsd  xmm4, xmm5
	movapd [esp + _rsqH2O], xmm0
	movapd [esp + _rsqH2H1], xmm4

	movapd xmm0, [esp + _ixH2]
	movapd xmm1, [esp + _iyH2]
	movapd xmm2, [esp + _izH2]
	subsd  xmm0, [esp + _jxH2]
	subsd  xmm1, [esp + _jyH2]
	subsd  xmm2, [esp + _jzH2]
	mulsd xmm0, xmm0
	mulsd xmm1, xmm1
	mulsd xmm2, xmm2
	addsd xmm0, xmm1
	addsd xmm0, xmm2
	movapd [esp + _rsqH2H2], xmm0
		
	/* start doing invsqrt use rsq values in xmm0, xmm4 */
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulsd   xmm1, xmm1	/* luA*luA */
	mulsd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	mulsd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subsd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm3, [esp + _half] /* iter1 */
	mulsd   xmm7, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulsd   xmm3, xmm3	/* luA*luA */
	mulsd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	mulsd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subsd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm1, [esp + _half] /* rinv */
	mulsd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvH2H2], xmm1
	movapd [esp + _rinvH2H1], xmm5

	movapd xmm0, [esp + _rsqOO]
	movapd xmm4, [esp + _rsqOH1]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulsd   xmm1, xmm1	/* luA*luA */
	mulsd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	mulsd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subsd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm3, [esp + _half] /* iter1 of  */
	mulsd   xmm7, [esp + _half] /* iter1 of  */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulsd   xmm3, xmm3	/* luA*luA */
	mulsd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	mulsd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subsd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm1, [esp + _half] /* rinv */
	mulsd   xmm5, [esp + _half] /* rinv*/
	movapd [esp + _rinvOO], xmm1
	movapd [esp + _rinvOH1], xmm5

	movapd xmm0, [esp + _rsqOH2]
	movapd xmm4, [esp + _rsqH1O]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulsd   xmm1, xmm1	/* luA*luA */
	mulsd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	mulsd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subsd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm3, [esp + _half] /* iter1 */
	mulsd   xmm7, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulsd   xmm3, xmm3	/* luA*luA */
	mulsd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	mulsd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subsd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm1, [esp + _half] /* rinv */
	mulsd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvOH2], xmm1
	movapd [esp + _rinvH1O], xmm5

	movapd xmm0, [esp + _rsqH1H1]
	movapd xmm4, [esp + _rsqH1H2]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulsd   xmm1, xmm1	/* luA*luA */
	mulsd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	mulsd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subsd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm3, [esp + _half] /* iter1a */
	mulsd   xmm7, [esp + _half] /* iter1b */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulsd   xmm3, xmm3	/* luA*luA */
	mulsd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	mulsd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subsd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm1, [esp + _half] /* rinv */
	mulsd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvH1H1], xmm1
	movapd [esp + _rinvH1H2], xmm5

	movapd xmm0, [esp + _rsqH2O]
	cvtsd2ss xmm1, xmm0	
	rsqrtss xmm1, xmm1
	cvtss2sd xmm1, xmm1
	
	movapd  xmm2, xmm1	/* copy of luA */
	mulsd   xmm1, xmm1	/* luA*luA */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm3, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	mulsd   xmm3, xmm3	/* luA*luA */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm1, [esp + _half] /* rinv */
	movapd [esp + _rinvH2O], xmm1

	/* start with OO interaction */
	movapd xmm0, [esp + _rinvOO]
	movapd xmm7, xmm0
	mulsd  xmm0, xmm0
	movapd xmm1, xmm0
	mulsd  xmm1, xmm0
	mulsd  xmm1, xmm0	/* xmm1=rinvsix */
	mulsd  xmm7, [esp + _qqOO]
	movapd xmm2, xmm1
	mulsd  xmm2, xmm2	/* xmm2=rinvtwelve */
	mulsd  xmm1, [esp + _c6]	
	mulsd  xmm2, [esp + _c12]	
	movapd xmm3, xmm2
	subsd  xmm3, xmm1	/* xmm3=vnb12-vnb6 */
	addsd  xmm3, [esp + _vnbtot]
	movlpd [esp + _vnbtot], xmm3
	addsd  xmm7, [esp + _vctot]

	/* other interactions */
	movapd xmm1, [esp + _rinvOH1]
	movapd xmm2, [esp + _rinvH1H1]
	
	addsd xmm1, [esp + _rinvOH2]
	addsd xmm2, [esp + _rinvH1H2]
	
	addsd xmm1, [esp + _rinvH1O]
	addsd xmm2, [esp + _rinvH2H1]

	addsd xmm1, [esp + _rinvH2O]
	addsd xmm2, [esp + _rinvH2H2]

	mulsd xmm1, [esp + _qqOH]
	mulsd xmm2, [esp + _qqHH]
	
	addsd xmm7, xmm1	
	addsd xmm7, xmm2

	movlpd [esp + _vctot], xmm7

imc1130_updateouterdata:
	/* get gid */
	mov   edx, [ebp + _gid]  
	mov   edx, [edx]
	add   [ebp + _gid],  4	

	/* accumulate total potential energy and update it */
	movapd xmm7, [esp + _vctot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */

	/* add earlier value from mem */
	mov   eax, [ebp + _Vc]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* accumulate total lj energy and update it */
	movapd xmm7, [esp + _vnbtot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */
	
	/* add earlier value from mem */
	mov   eax, [ebp + _Vnb]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* finish if last */
	mov   ecx, [ebp + _nri]
	dec ecx
	jecxz imc1130_end
	/* not last, iterate once more! */ 
	mov [ebp + _nri], ecx
	jmp imc1130_outer
imc1130_end:
	emms
	mov eax, [esp + _salign]
	add esp, eax
	add esp, 740
	pop edi
	pop esi
        pop edx
        pop ecx
        pop ebx
        pop eax
	leave
	ret



.globl mcinl2120_sse2
	.type mcinl2120_sse2,@function
mcinl2120_sse2:	
.equ		_nri,		8
.equ		_iinr,		12
.equ		_jindex,	16
.equ		_jjnr,		20
.equ		_shift,		24
.equ		_shiftvec,	28
.equ		_gid,		32
.equ		_pos,		36		
.equ		_charge,	40
.equ		_facel,		44 /* double */
.equ		_Vc,		52			
.equ		_argkrf,	56 /* double */	
.equ		_argcrf,	64 /* double */	
.equ		_type,		72
.equ		_ntype,		76
.equ		_nbfp,		80	
.equ		_Vnb,		84	
	/* stack offsets for local variables */ 
	/* bottom of stack is cache-aligned for sse use */
.equ		_ixO,		0
.equ		_iyO,		16
.equ		_izO,		32
.equ		_ixH1,		48
.equ		_iyH1,		64
.equ		_izH1,		80
.equ		_ixH2,		96
.equ		_iyH2,		112
.equ		_izH2,		128
.equ		_iqO,		144 
.equ		_iqH,		160 
.equ		_qqO,		176
.equ		_qqH,		192
.equ		_c6,		208
.equ		_c12,		224		 
.equ		_vctot,		240
.equ		_vnbtot,	256
.equ		_half,		272
.equ		_three,		288
.equ		_krf,		304
.equ		_crf,		320
.equ		_krsqO,		336
.equ		_krsqH1,	352
.equ		_krsqH2,	368	 		
.equ		_is3,		384
.equ		_ii3,		388
.equ		_ntia,		392	
.equ		_innerjjnr,	396
.equ		_innerk,	400
.equ		_salign,	404
	push ebp
	mov ebp,esp	
        push eax
        push ebx
        push ecx
        push edx
	push esi
	push edi
	sub esp, 408		/* local stack space */
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + _salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_three]
	movsd xmm5, [ebp + _argkrf]
	movsd xmm6, [ebp + _argcrf]

	movapd [esp + _half],  xmm0
	movapd [esp + _three], xmm1
	shufpd xmm5, xmm5, 0
	shufpd xmm6, xmm6, 0
	movapd [esp + _krf], xmm5
	movapd [esp + _crf], xmm6
	
	/* assume we have at least one i particle - start directly */
	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	mov   ebx, [ecx]	        /* ebx =ii */

	mov   edx, [ebp + _charge]
	movsd xmm3, [edx + ebx*8]	
	movsd xmm4, [edx + ebx*8 + 8]	
	movsd xmm5, [ebp + _facel]
	mulsd  xmm3, xmm5
	mulsd  xmm4, xmm5

	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	movapd [esp + _iqO], xmm3
	movapd [esp + _iqH], xmm4
	
	mov   edx, [ebp + _type]
	mov   ecx, [edx + ebx*4]
	shl   ecx, 1
	imul  ecx, [ebp + _ntype]      /* ecx = ntia = 2*ntype*type[ii0] */
	mov   [esp + _ntia], ecx		
.imc2120_outer:
	mov   eax, [ebp + _shift]      /* eax = pointer into shift[] */
	mov   ebx, [eax]		/* ebx=shift[n] */
	add   [ebp + _shift],  4  /* advance pointer one step */
	
	lea   ebx, [ebx + ebx*2]        /* ebx=3*is */
	mov   [esp + _is3],ebx    	/* store is3 */

	mov   eax, [ebp + _shiftvec]   /* eax = base of shiftvec[] */

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	add   [ebp + _iinr],  4   /* advance pointer */
	mov   ebx, [ecx]	        /* ebx =ii */

	movapd xmm3, xmm0
	movapd xmm4, xmm1
	movapd xmm5, xmm2

	lea   ebx, [ebx + ebx*2]	/* ebx = 3*ii=ii3 */
	mov   eax, [ebp + _pos]        /* eax = base of pos[] */ 
	mov   [esp + _ii3], ebx

	addsd xmm3, [eax + ebx*8]
	addsd xmm4, [eax + ebx*8 + 8]
	addsd xmm5, [eax + ebx*8 + 16]		
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _ixO], xmm3
	movapd [esp + _iyO], xmm4
	movapd [esp + _izO], xmm5

	movsd xmm3, xmm0
	movsd xmm4, xmm1
	movsd xmm5, xmm2
	addsd xmm0, [eax + ebx*8 + 24]
	addsd xmm1, [eax + ebx*8 + 32]
	addsd xmm2, [eax + ebx*8 + 40]		
	addsd xmm3, [eax + ebx*8 + 48]
	addsd xmm4, [eax + ebx*8 + 56]
	addsd xmm5, [eax + ebx*8 + 64]		

	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _ixH1], xmm0
	movapd [esp + _iyH1], xmm1
	movapd [esp + _izH1], xmm2
	movapd [esp + _ixH2], xmm3
	movapd [esp + _iyH2], xmm4
	movapd [esp + _izH2], xmm5
	
	/* clear vctot */
	xorpd xmm4, xmm4
	movapd [esp + _vctot], xmm4
	movapd [esp + _vnbtot], xmm4
	
	mov   eax, [ebp + _jindex]
	mov   ecx, [eax]	         /* jindex[n] */
	mov   edx, [eax + 4]	         /* jindex[n+1] */
	add   [ebp + _jindex],  4
	sub   edx, ecx                   /* number of innerloop atoms */

	mov   esi, [ebp + _pos]
	mov   eax, [ebp + _jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + _innerjjnr], eax     /* pointer to jjnr[nj0] */
	sub   edx,  2
	mov   [esp + _innerk], edx        /* number of innerloop atoms */
	jge   .imc2120_unroll_loop
	jmp   .imc2120_checksingle
.imc2120_unroll_loop:
	/* twice unrolled innerloop here */
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]	
	mov   ebx, [edx + 4]

	add   [esp + _innerjjnr],  8	/* advance pointer (unrolled 2) */

	mov esi, [ebp + _charge]        /* base of charge[] */
	
	movlpd xmm3, [esi + eax*8]
	movhpd xmm3, [esi + ebx*8]
	movapd xmm4, xmm3
	mulpd  xmm3, [esp + _iqO]
	mulpd  xmm4, [esp + _iqH]

	movd  mm0, eax		/* use mmx registers as temp storage */
	movd  mm1, ebx

	movapd  [esp + _qqO], xmm3
	movapd  [esp + _qqH], xmm4
	
	mov esi, [ebp + _type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov esi, [ebp + _nbfp]
	shl eax, 1	
	shl ebx, 1	
	mov edi, [esp + _ntia]
	add eax, edi
	add ebx, edi

	movupd xmm6, [esi + eax*8]	/* c6a c12a */
	movupd xmm7, [esi + ebx*8]	/* c6b c12b */
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0
	movd  ebx, mm1
	movapd [esp + _c6], xmm4
	movapd [esp + _c12], xmm6
	
	mov esi, [ebp + _pos]       /* base of pos[] */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */
	lea   ebx, [ebx + ebx*2]	

	/* move two coordinates to xmm0-xmm2 */
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]		

	/* move ixO-izO to xmm4-xmm6 */
	movapd xmm4, [esp + _ixO]
	movapd xmm5, [esp + _iyO]
	movapd xmm6, [esp + _izO]

	/* calc dr */
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	/* square it */
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6
	movapd xmm7, xmm4
	/* rsqO in xmm7 */

	/* move ixH1-izH1 to xmm4-xmm6 */
	movapd xmm4, [esp + _ixH1]
	movapd xmm5, [esp + _iyH1]
	movapd xmm6, [esp + _izH1]

	/* calc dr */
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	/* square it */
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm6, xmm5
	addpd xmm6, xmm4
	/* rsqH1 in xmm6 */

	/* move ixH2-izH2 to xmm3-xmm5 */ 
	movapd xmm3, [esp + _ixH2]
	movapd xmm4, [esp + _iyH2]
	movapd xmm5, [esp + _izH2]

	/* calc dr */
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2

	/* square it */
	mulpd xmm3,xmm3
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	addpd xmm5, xmm4
	addpd xmm5, xmm3
	/* rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 */

	movapd xmm0, xmm5
	movapd xmm1, xmm6
	movapd xmm2, xmm7

	mulpd  xmm0, [esp + _krf]	
	mulpd  xmm1, [esp + _krf]	
	mulpd  xmm2, [esp + _krf]	

	movapd [esp + _krsqH2], xmm0
	movapd [esp + _krsqH1], xmm1
	movapd [esp + _krsqO], xmm2
		
	/* start with rsqO - put seed in xmm2 */
	cvtpd2ps xmm2, xmm7	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulpd   xmm2, xmm7	/* rsq*lu*lu */
	subpd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulpd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulpd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm3, xmm4
	mulpd xmm4, xmm4	/* lu*lu */
	mulpd xmm7, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subpd xmm4, xmm7	/* 3-rsq*lu*lu */
	mulpd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulpd xmm4, [esp + _half] /* rinv */
	movapd  xmm7, xmm4	/* rinvO in xmm7 */
	
	/* rsqH1 - seed in xmm2 */
	cvtpd2ps xmm2, xmm6	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulpd   xmm2, xmm6	/* rsq*lu*lu */
	subpd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulpd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulpd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm3, xmm4
	mulpd xmm4, xmm4	/* lu*lu */
	mulpd xmm6, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subpd xmm4, xmm6	/* 3-rsq*lu*lu */
	mulpd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulpd xmm4, [esp + _half] /* rinv */
	movapd  xmm6, xmm4	/* rinvH1 in xmm6 */
	
	/* rsqH2 - seed in xmm2 */
	cvtpd2ps xmm2, xmm5	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulpd   xmm2, xmm5	/* rsq*lu*lu */
	subpd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulpd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulpd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm3, xmm4
	mulpd xmm4, xmm4	/* lu*lu */
	mulpd xmm5, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subpd xmm4, xmm5	/* 3-rsq*lu*lu */
	mulpd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulpd xmm4, [esp + _half] /* rinv */
	movapd  xmm5, xmm4	/* rinvH2 in xmm5 */

	/* do O interactions */
	movapd  xmm4, xmm7	
	mulpd   xmm4, xmm4	/* xmm7=rinv, xmm4=rinvsq */
	movapd xmm1, xmm4
	mulpd  xmm1, xmm4
	mulpd  xmm1, xmm4	/* xmm1=rinvsix */
	movapd xmm2, xmm1
	mulpd  xmm2, xmm2	/* xmm2=rinvtwelve */
	mulpd  xmm1, [esp + _c6]
	mulpd  xmm2, [esp + _c12]
	movapd xmm3, xmm2
	subpd  xmm3, xmm1	/* vnb=vnb12-vnb6 */		
	addpd  xmm3, [esp + _vnbtot]

	movapd xmm0, xmm7
	movapd xmm1, [esp + _krsqO]
	addpd  xmm0, xmm1
	subpd  xmm0, [esp + _crf] /* xmm0=rinv+ krsq-crf */
	mulpd  xmm0, [esp + _qqO]

	addpd  xmm0, [esp + _vctot]
	movapd [esp + _vnbtot], xmm3
	movapd [esp + _vctot], xmm0

	/* H1 interactions */
	movapd  xmm0, [esp + _krsqH1]
	addpd   xmm6, xmm0	/* xmm6=rinv+ krsq */
	subpd   xmm6, [esp + _crf]
	mulpd   xmm6, [esp + _qqH] /* vcoul */	
	addpd  xmm6, [esp + _vctot]
	movapd [esp + _vctot], xmm6

	/* H2 interactions */
	movapd  xmm0, [esp + _krsqH2]
	addpd   xmm5, xmm0	/* xmm5=rinv+ krsq */
	subpd   xmm5, [esp + _crf]
	mulpd   xmm5, [esp + _qqH] /* vcoul */
	addpd  xmm5, [esp + _vctot]
	movapd [esp + _vctot], xmm5
	
	/* should we do one more iteration? */
	sub   [esp + _innerk],  2
	jl    .imc2120_checksingle
	jmp   .imc2120_unroll_loop
.imc2120_checksingle:	
	mov   edx, [esp + _innerk]
	and   edx, 1
	jnz   .imc2120_dosingle
	jmp   .imc2120_updateouterdata
.imc2120_dosingle:
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]	
	add   [esp + _innerjjnr],  4	

	mov esi, [ebp + _charge]        /* base of charge[] */
	xorpd xmm3, xmm3
	movlpd xmm3, [esi + eax*8]
	movapd xmm4, xmm3
	mulpd  xmm3, [esp + _iqO]
	mulpd  xmm4, [esp + _iqH]

	movd  mm0, eax		/* use mmx registers as temp storage */

	movapd  [esp + _qqO], xmm3
	movapd  [esp + _qqH], xmm4
	
	mov esi, [ebp + _type]
	mov eax, [esi + eax*4]
	mov esi, [ebp + _nbfp]
	shl eax, 1	
	mov edi, [esp + _ntia]
	add eax, edi

	movupd xmm6, [esi + eax*8]	/* c6a c12a */
	xorpd xmm7, xmm7
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0
	movapd [esp + _c6], xmm4
	movapd [esp + _c12], xmm6
	
	mov esi, [ebp + _pos]       /* base of pos[] */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */

	/* move coordinates to xmm0-xmm2 */
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]

	/* move ixO-izO to xmm4-xmm6 */
	movapd xmm4, [esp + _ixO]
	movapd xmm5, [esp + _iyO]
	movapd xmm6, [esp + _izO]

	/* calc dr */
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	/* square it */
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6
	movapd xmm7, xmm4
	/* rsqO in xmm7 */

	/* move ixH1-izH1 to xmm4-xmm6 */
	movapd xmm4, [esp + _ixH1]
	movapd xmm5, [esp + _iyH1]
	movapd xmm6, [esp + _izH1]

	/* calc dr */
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	/* square it */
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm6, xmm5
	addsd xmm6, xmm4
	/* rsqH1 in xmm6 */

	/* move ixH2-izH2 to xmm3-xmm5 */ 
	movapd xmm3, [esp + _ixH2]
	movapd xmm4, [esp + _iyH2]
	movapd xmm5, [esp + _izH2]

	/* calc dr */
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2

	/* square it */
	mulsd xmm3,xmm3
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	addsd xmm5, xmm4
	addsd xmm5, xmm3
	/* rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 */

	movapd xmm0, xmm5
	movapd xmm1, xmm6
	movapd xmm2, xmm7

	mulsd  xmm0, [esp + _krf]	
	mulsd  xmm1, [esp + _krf]	
	mulsd  xmm2, [esp + _krf]	

	movapd [esp + _krsqH2], xmm0
	movapd [esp + _krsqH1], xmm1
	movapd [esp + _krsqO], xmm2

	/* start with rsqO - put seed in xmm2 */
	cvtsd2ss xmm2, xmm7	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulsd   xmm2, xmm7	/* rsq*lu*lu */
	subsd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulsd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulsd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm3, xmm4
	mulsd xmm4, xmm4	/* lu*lu */
	mulsd xmm7, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subsd xmm4, xmm7	/* 3-rsq*lu*lu */
	mulsd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulsd xmm4, [esp + _half] /* rinv */
	movapd  xmm7, xmm4	/* rinvO in xmm7 */
	
	/* rsqH1 - seed in xmm2 */
	cvtsd2ss xmm2, xmm6	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulsd   xmm2, xmm6	/* rsq*lu*lu */
	subsd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulsd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulsd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm3, xmm4
	mulsd xmm4, xmm4	/* lu*lu */
	mulsd xmm6, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subsd xmm4, xmm6	/* 3-rsq*lu*lu */
	mulsd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulsd xmm4, [esp + _half] /* rinv */
	movapd  xmm6, xmm4	/* rinvH1 in xmm6 */
	
	/* rsqH2 - seed in xmm2 */
	cvtsd2ss xmm2, xmm5	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulsd   xmm2, xmm5	/* rsq*lu*lu */
	subsd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulsd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulsd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm3, xmm4
	mulsd xmm4, xmm4	/* lu*lu */
	mulsd xmm5, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subsd xmm4, xmm5	/* 3-rsq*lu*lu */
	mulsd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulsd xmm4, [esp + _half] /* rinv */
	movapd  xmm5, xmm4	/* rinvH2 in xmm5 */

	/* do O interactions */
	movapd  xmm4, xmm7	
	mulsd   xmm4, xmm4	/* xmm7=rinv, xmm4=rinvsq */
	movapd xmm1, xmm4
	mulsd  xmm1, xmm4
	mulsd  xmm1, xmm4	/* xmm1=rinvsix */
	movapd xmm2, xmm1
	mulsd  xmm2, xmm2	/* xmm2=rinvtwelve */
	mulsd  xmm1, [esp + _c6]
	mulsd  xmm2, [esp + _c12]
	movapd xmm3, xmm2
	subsd  xmm3, xmm1	/* vnb=vnb12-vnb6 */		
	addsd  xmm3, [esp + _vnbtot]

	movapd xmm0, xmm7
	movapd xmm1, [esp + _krsqO]
	addsd  xmm0, xmm1
	subsd  xmm0, [esp + _crf] /* xmm0=rinv+ krsq-crf */
	mulsd  xmm0, [esp + _qqO]
	addsd  xmm0, [esp + _vctot]
	movlpd [esp + _vnbtot], xmm3
	movlpd [esp + _vctot], xmm0

	/* H1 interactions */
	movapd  xmm0, [esp + _krsqH1]
	addsd   xmm6, xmm0	/* xmm6=rinv+ krsq */
	subsd   xmm6, [esp + _crf]
	mulsd   xmm6, [esp + _qqH] /* vcoul */
	addsd  xmm6, [esp + _vctot]
	movlpd [esp + _vctot], xmm6

	/* H2 interactions */
	movapd  xmm0, [esp + _krsqH2]
	addsd   xmm5, xmm0	/* xmm5=rinv+ krsq */
	subsd   xmm5, [esp + _crf]
	mulsd   xmm5, [esp + _qqH] /* vcoul */
	addsd  xmm5, [esp + _vctot]
	movlpd [esp + _vctot], xmm5

.imc2120_updateouterdata:
	/* get gid */
	mov   edx, [ebp + _gid]  
	mov   edx, [edx]
	add   [ebp + _gid],  4	

	/* accumulate total potential energy and update it */
	movapd xmm7, [esp + _vctot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */

	/* add earlier value from mem */
	mov   eax, [ebp + _Vc]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* accumulate total lj energy and update it */
	movapd xmm7, [esp + _vnbtot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */
	
	/* add earlier value from mem */
	mov   eax, [ebp + _Vnb]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* finish if last */
	mov   ecx, [ebp + _nri]
	dec ecx
	jecxz .imc2120_end
	/* not last, iterate once more! */ 
	mov [ebp + _nri], ecx
	jmp .imc2120_outer
.imc2120_end:
	emms
	mov eax, [esp + _salign]
	add esp, eax
	add esp, 408
	pop edi
	pop esi
        pop edx
        pop ecx
        pop ebx
        pop eax
	leave
	ret



	
.globl mcinl2130_sse2
	.type mcinl2130_sse2,@function
mcinl2130_sse2:	
.equ		_nri,		8
.equ		_iinr,		12
.equ		_jindex,	16
.equ		_jjnr,		20
.equ		_shift,		24
.equ		_shiftvec,	28
.equ		_gid,		32
.equ		_pos,		36		
.equ		_charge,	40
.equ		_facel,		44 /* double */
.equ		_Vc,		52			
.equ		_argkrf,	56 /* double */
.equ		_argcrf,	64 /* double */
.equ		_type,		72
.equ		_ntype,		76
.equ		_nbfp,		80	
.equ		_Vnb,		84
	/* stack offsets for local variables */ 
	/* bottom of stack is cache-aligned for sse use */
.equ		_ixO,		0
.equ		_iyO,		16
.equ		_izO,		32
.equ		_ixH1,		48
.equ		_iyH1,		64
.equ		_izH1,		80
.equ		_ixH2,		96
.equ		_iyH2,		112
.equ		_izH2,		128
.equ		_jxO,		144
.equ		_jyO,		160
.equ		_jzO,		176
.equ		_jxH1,		192
.equ		_jyH1,		208
.equ		_jzH1,		224
.equ		_jxH2,		240
.equ		_jyH2,		256
.equ		_jzH2,		272
.equ		_qqOO,		288
.equ		_qqOH,		304
.equ		_qqHH,		320
.equ		_c6,		336
.equ		_c12,		352		 
.equ		_vctot,		368
.equ		_vnbtot,	384
.equ		_half,		400
.equ		_three,		416
.equ		_rsqOO,		432
.equ		_rsqOH1,	448
.equ		_rsqOH2,	464
.equ		_rsqH1O,	480
.equ		_rsqH1H1,	496
.equ		_rsqH1H2,	512
.equ		_rsqH2O,	528
.equ		_rsqH2H1,	544
.equ		_rsqH2H2,	560
.equ		_rinvOO,	576
.equ		_rinvOH1,	592
.equ		_rinvOH2,	608
.equ		_rinvH1O,	624
.equ		_rinvH1H1,	640
.equ		_rinvH1H2,	656
.equ		_rinvH2O,	672
.equ		_rinvH2H1,	688
.equ		_rinvH2H2,	704
.equ		_krf,		720	
.equ		_crf,		736
.equ		_is3,		752
.equ		_ii3,		756
.equ		_innerjjnr,	760
.equ		_innerk,	764
.equ		_salign,	768
	push ebp
	mov ebp,esp	
        push eax
        push ebx
        push ecx
        push edx
	push esi
	push edi
	sub esp, 772		/* local stack space */
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + _salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_three]
	movsd xmm5, [ebp + _argkrf]
	movsd xmm6, [ebp + _argcrf]
	
	movapd [esp + _half],  xmm0
	movapd [esp + _three], xmm1
	shufpd xmm5, xmm5, 0
	shufpd xmm6, xmm6, 0
	movapd [esp + _krf], xmm5
	movapd [esp + _crf], xmm6
	
	/* assume we have at least one i particle - start directly */
	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	mov   ebx, [ecx]	        /* ebx =ii */

	mov   edx, [ebp + _charge]
	movsd xmm3, [edx + ebx*8]	
	movsd xmm4, xmm3	
	movsd xmm5, [edx + ebx*8 + 8]	
	movsd xmm6, [ebp + _facel]
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm5
	mulsd  xmm5, xmm5
	mulsd  xmm3, xmm6
	mulsd  xmm4, xmm6
	mulsd  xmm5, xmm6
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _qqOO], xmm3
	movapd [esp + _qqOH], xmm4
	movapd [esp + _qqHH], xmm5
		
	xorpd xmm0, xmm0
	mov   edx, [ebp + _type]
	mov   ecx, [edx + ebx*4]
	shl   ecx, 1
	mov   edx, ecx
	imul  ecx, [ebp + _ntype]      /* ecx = ntia = 2*ntype*type[ii0] */
	add   edx, ecx
	mov   eax, [ebp + _nbfp]
	movupd xmm0, [eax + edx*8] 
	movhlps xmm1, xmm0
	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	movapd [esp + _c6], xmm0
	movapd [esp + _c12], xmm1

.imc2130_outer:
	mov   eax, [ebp + _shift]      /* eax = pointer into shift[] */
	mov   ebx, [eax]		/* ebx=shift[n] */
	add   [ebp + _shift],  4  /* advance pointer one step */
	
	lea   ebx, [ebx + ebx*2]        /* ebx=3*is */

	mov   eax, [ebp + _shiftvec]   /* eax = base of shiftvec[] */

	movlpd xmm0, [eax + ebx*8]
	movlpd xmm1, [eax + ebx*8 + 8]
	movlpd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	add   [ebp + _iinr],  4   /* advance pointer */
	mov   ebx, [ecx]	        /* ebx =ii */

	lea   ebx, [ebx + ebx*2]	/* ebx = 3*ii=ii3 */
	mov   eax, [ebp + _pos]        /* eax = base of pos[] */ 
	mov   [esp + _ii3], ebx	
	
	movapd xmm3, xmm0
	movapd xmm4, xmm1
	movapd xmm5, xmm2
	addsd xmm3, [eax + ebx*8]
	addsd xmm4, [eax + ebx*8 + 8]
	addsd xmm5, [eax + ebx*8 + 16]		
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _ixO], xmm3
	movapd [esp + _iyO], xmm4
	movapd [esp + _izO], xmm5

	movsd xmm3, xmm0
	movsd xmm4, xmm1
	movsd xmm5, xmm2
	addsd xmm0, [eax + ebx*8 + 24]
	addsd xmm1, [eax + ebx*8 + 32]
	addsd xmm2, [eax + ebx*8 + 40]		
	addsd xmm3, [eax + ebx*8 + 48]
	addsd xmm4, [eax + ebx*8 + 56]
	addsd xmm5, [eax + ebx*8 + 64]		

	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _ixH1], xmm0
	movapd [esp + _iyH1], xmm1
	movapd [esp + _izH1], xmm2
	movapd [esp + _ixH2], xmm3
	movapd [esp + _iyH2], xmm4
	movapd [esp + _izH2], xmm5

	/* clear vctot & vnbtot */
	xorpd xmm4, xmm4
	movapd [esp + _vctot], xmm4
	movapd [esp + _vnbtot], xmm4
	
	mov   eax, [ebp + _jindex]
	mov   ecx, [eax]	         /* jindex[n] */
	mov   edx, [eax + 4]	         /* jindex[n+1] */
	add   [ebp + _jindex],  4
	sub   edx, ecx                   /* number of innerloop atoms */

	mov   esi, [ebp + _pos]
	mov   eax, [ebp + _jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + _innerjjnr], eax     /* pointer to jjnr[nj0] */
	sub   edx,  2
	mov   [esp + _innerk], edx        /* number of innerloop atoms */
	jge   .imc2130_unroll_loop
	jmp   .imc2130_checksingle
.imc2130_unroll_loop:
	/* twice unrolled innerloop here */
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]	
	mov   ebx, [edx + 4] 
	
	add   [esp + _innerjjnr],  8	/* advance pointer (unrolled 2) */

	mov esi, [ebp + _pos]       /* base of pos[] */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */
	lea   ebx, [ebx + ebx*2]	
	
	/* move j coordinates to local temp variables */
	movlpd xmm2, [esi + eax*8]
	movlpd xmm3, [esi + eax*8 + 8]
	movlpd xmm4, [esi + eax*8 + 16]
	movlpd xmm5, [esi + eax*8 + 24]
	movlpd xmm6, [esi + eax*8 + 32]
	movlpd xmm7, [esi + eax*8 + 40]
	movhpd xmm2, [esi + ebx*8]
	movhpd xmm3, [esi + ebx*8 + 8]
	movhpd xmm4, [esi + ebx*8 + 16]
	movhpd xmm5, [esi + ebx*8 + 24]
	movhpd xmm6, [esi + ebx*8 + 32]
	movhpd xmm7, [esi + ebx*8 + 40]
	movapd 	[esp + _jxO], xmm2
	movapd 	[esp + _jyO], xmm3
	movapd 	[esp + _jzO], xmm4
	movapd 	[esp + _jxH1], xmm5
	movapd 	[esp + _jyH1], xmm6
	movapd 	[esp + _jzH1], xmm7
	movlpd xmm2, [esi + eax*8 + 48]
	movlpd xmm3, [esi + eax*8 + 56]
	movlpd xmm4, [esi + eax*8 + 64]
	movhpd xmm2, [esi + ebx*8 + 48]
	movhpd xmm3, [esi + ebx*8 + 56]
	movhpd xmm4, [esi + ebx*8 + 64]
	movapd 	[esp + _jxH2], xmm2
	movapd 	[esp + _jyH2], xmm3
	movapd 	[esp + _jzH2], xmm4
	
	movapd xmm0, [esp + _ixO]
	movapd xmm1, [esp + _iyO]
	movapd xmm2, [esp + _izO]
	movapd xmm3, [esp + _ixO]
	movapd xmm4, [esp + _iyO]
	movapd xmm5, [esp + _izO]
	subpd  xmm0, [esp + _jxO]
	subpd  xmm1, [esp + _jyO]
	subpd  xmm2, [esp + _jzO]
	subpd  xmm3, [esp + _jxH1]
	subpd  xmm4, [esp + _jyH1]
	subpd  xmm5, [esp + _jzH1]
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + _rsqOO], xmm0
	movapd [esp + _rsqOH1], xmm3

	movapd xmm0, [esp + _ixO]
	movapd xmm1, [esp + _iyO]
	movapd xmm2, [esp + _izO]
	movapd xmm3, [esp + _ixH1]
	movapd xmm4, [esp + _iyH1]
	movapd xmm5, [esp + _izH1]
	subpd  xmm0, [esp + _jxH2]
	subpd  xmm1, [esp + _jyH2]
	subpd  xmm2, [esp + _jzH2]
	subpd  xmm3, [esp + _jxO]
	subpd  xmm4, [esp + _jyO]
	subpd  xmm5, [esp + _jzO]
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + _rsqOH2], xmm0
	movapd [esp + _rsqH1O], xmm3

	movapd xmm0, [esp + _ixH1]
	movapd xmm1, [esp + _iyH1]
	movapd xmm2, [esp + _izH1]
	movapd xmm3, [esp + _ixH1]
	movapd xmm4, [esp + _iyH1]
	movapd xmm5, [esp + _izH1]
	subpd  xmm0, [esp + _jxH1]
	subpd  xmm1, [esp + _jyH1]
	subpd  xmm2, [esp + _jzH1]
	subpd  xmm3, [esp + _jxH2]
	subpd  xmm4, [esp + _jyH2]
	subpd  xmm5, [esp + _jzH2]
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + _rsqH1H1], xmm0
	movapd [esp + _rsqH1H2], xmm3

	movapd xmm0, [esp + _ixH2]
	movapd xmm1, [esp + _iyH2]
	movapd xmm2, [esp + _izH2]
	movapd xmm3, [esp + _ixH2]
	movapd xmm4, [esp + _iyH2]
	movapd xmm5, [esp + _izH2]
	subpd  xmm0, [esp + _jxO]
	subpd  xmm1, [esp + _jyO]
	subpd  xmm2, [esp + _jzO]
	subpd  xmm3, [esp + _jxH1]
	subpd  xmm4, [esp + _jyH1]
	subpd  xmm5, [esp + _jzH1]
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm4, xmm3
	addpd  xmm4, xmm5
	movapd [esp + _rsqH2O], xmm0
	movapd [esp + _rsqH2H1], xmm4

	movapd xmm0, [esp + _ixH2]
	movapd xmm1, [esp + _iyH2]
	movapd xmm2, [esp + _izH2]
	subpd  xmm0, [esp + _jxH2]
	subpd  xmm1, [esp + _jyH2]
	subpd  xmm2, [esp + _jzH2]
	mulpd xmm0, xmm0
	mulpd xmm1, xmm1
	mulpd xmm2, xmm2
	addpd xmm0, xmm1
	addpd xmm0, xmm2
	movapd [esp + _rsqH2H2], xmm0
		
	/* start doing invsqrt use rsq values in xmm0, xmm4 */
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulpd   xmm1, xmm1	/* luA*luA */
	mulpd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	mulpd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subpd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm3, [esp + _half] /* iter1 */
	mulpd   xmm7, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulpd   xmm3, xmm3	/* luA*luA */
	mulpd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	mulpd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subpd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm1, [esp + _half] /* rinv */
	mulpd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvH2H2], xmm1
	movapd [esp + _rinvH2H1], xmm5

	movapd xmm0, [esp + _rsqOO]
	movapd xmm4, [esp + _rsqOH1]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulpd   xmm1, xmm1	/* luA*luA */
	mulpd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	mulpd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subpd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm3, [esp + _half] /* iter1 of  */
	mulpd   xmm7, [esp + _half] /* iter1 of  */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulpd   xmm3, xmm3	/* luA*luA */
	mulpd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	mulpd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subpd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm1, [esp + _half] /* rinv */
	mulpd   xmm5, [esp + _half] /* rinv*/
	movapd [esp + _rinvOO], xmm1
	movapd [esp + _rinvOH1], xmm5

	movapd xmm0, [esp + _rsqOH2]
	movapd xmm4, [esp + _rsqH1O]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulpd   xmm1, xmm1	/* luA*luA */
	mulpd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	mulpd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subpd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm3, [esp + _half] /* iter1 */
	mulpd   xmm7, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulpd   xmm3, xmm3	/* luA*luA */
	mulpd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	mulpd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subpd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm1, [esp + _half] /* rinv */
	mulpd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvOH2], xmm1
	movapd [esp + _rinvH1O], xmm5

	movapd xmm0, [esp + _rsqH1H1]
	movapd xmm4, [esp + _rsqH1H2]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulpd   xmm1, xmm1	/* luA*luA */
	mulpd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	mulpd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subpd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm3, [esp + _half] /* iter1a */
	mulpd   xmm7, [esp + _half] /* iter1b */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulpd   xmm3, xmm3	/* luA*luA */
	mulpd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	mulpd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subpd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm1, [esp + _half] /* rinv */
	mulpd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvH1H1], xmm1
	movapd [esp + _rinvH1H2], xmm5

	movapd xmm0, [esp + _rsqH2O]
	cvtpd2ps xmm1, xmm0	
	rsqrtps xmm1, xmm1
	cvtps2pd xmm1, xmm1
	
	movapd  xmm2, xmm1	/* copy of luA */
	mulpd   xmm1, xmm1	/* luA*luA */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm3, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	mulpd   xmm3, xmm3	/* luA*luA */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm1, [esp + _half] /* rinv */
	movapd [esp + _rinvH2O], xmm1
	
	/* start with OO interaction */
	movapd xmm0, [esp + _rinvOO]
	movapd xmm7, xmm0		/* xmm7=rinv */
	movapd xmm5, [esp + _krf]
	mulpd  xmm0, xmm0		/* xmm0=rinvsq */
	movapd xmm1, xmm0
	mulpd  xmm1, xmm0		/* rinvsq*rinvsq */
	mulpd  xmm1, xmm0		/* xmm1=rinvsix */
	mulpd  xmm5, [esp + _rsqOO]	/* xmm5=krsq */
	movapd xmm6, xmm5		/* krsq */
	addpd  xmm6, xmm7		/* xmm6=rinv+ krsq */
	subpd  xmm6, [esp + _crf]	/* rinv+krsq-crf */
	
	mulpd  xmm6, [esp + _qqOO]	/* xmm6=voul=qq*(rinv+ krsq-crf) */
	
	movapd xmm2, xmm1		/* rinv6 */
	mulpd  xmm2, xmm2		/* xmm2=rinvtwelve */
	mulpd  xmm1, [esp + _c6]	/* c6*rinv6 */
	mulpd  xmm2, [esp + _c12]	/* c12*rinv12 */
	movapd xmm3, xmm2		/* c12*rinv12 */
	subpd  xmm3, xmm1		/* vnb12-vnb6 */
	addpd  xmm3, [esp + _vnbtot]
	movapd [esp + _vnbtot], xmm3	
	addpd  xmm6, [esp + _vctot] /* local vctot summation variable */

	/* O-H1 interaction */
	movapd xmm0, [esp + _rinvOH1]
	movapd xmm7, xmm0	/* xmm7=rinv */
	movapd xmm5, [esp + _krf]
	movapd xmm1, xmm0
	mulpd  xmm5, [esp + _rsqOH1] /* xmm5=krsq */
	movapd xmm4, xmm5
	addpd  xmm4, xmm7	/* xmm4=rinv+ krsq */
	mulpd  xmm0, xmm0
	subpd  xmm4, [esp + _crf]
	mulpd  xmm4, [esp + _qqOH] /* xmm4=voul=qq*(rinv+ krsq) */
	addpd  xmm6, xmm4	/* add to local vctot */

	/* O-H2 interaction */ 
	movapd xmm0, [esp + _rinvOH2]
	movapd xmm7, xmm0	/* xmm7=rinv */
	movapd xmm5, [esp + _krf]	
	movapd xmm1, xmm0
	mulpd  xmm5, [esp + _rsqOH2] /* xmm5=krsq */
	movapd xmm4, xmm5
	addpd  xmm4, xmm7	/* xmm4=r inv+ krsq */
	mulpd xmm0, xmm0
	subpd  xmm4, [esp + _crf]
	mulpd  xmm4, [esp + _qqOH] /* xmm4=voul=qq*(rinv+ krsq) */
	addpd  xmm6, xmm4	/* add to local vctot */

	/* H1-O interaction */
	movapd xmm0, [esp + _rinvH1O]
	movapd xmm7, xmm0	/* xmm7=rinv */
	movapd xmm5, [esp + _krf]	
	movapd xmm1, xmm0
	mulpd  xmm5, [esp + _rsqH1O] /* xmm5=krsq */
	movapd xmm4, xmm5
	addpd  xmm4, xmm7	/* xmm4=rinv+ krsq */
	mulpd xmm0, xmm0
	subpd  xmm4, [esp + _crf]
	mulpd  xmm4, [esp + _qqOH] /* xmm4=voul=qq*(rinv+ krsq) */
	addpd  xmm6, xmm4	/* add to local vctot */

	/* H1-H1 interaction */
	movapd xmm0, [esp + _rinvH1H1]
	movapd xmm7, xmm0	/* xmm7=rinv */
	movapd xmm5, [esp + _krf]	
	movapd xmm1, xmm0
	mulpd  xmm5, [esp + _rsqH1H1] /* xmm5=krsq */
	movapd xmm4, xmm5
	addpd  xmm4, xmm7	/* xmm4=r inv+ krsq */
	subpd  xmm4, [esp + _crf]
	mulpd xmm0, xmm0
	mulpd  xmm4, [esp + _qqHH] /* xmm4=voul=qq*(rinv+ krsq) */
	addpd  xmm6, xmm4	/* add to local vctot */

	/* H1-H2 interaction */
	movapd xmm0, [esp + _rinvH1H2]
	movapd xmm7, xmm0	/* xmm7=rinv */
	movapd xmm5, [esp + _krf]	
	movapd xmm1, xmm0
	mulpd  xmm5, [esp + _rsqH1H2] /* xmm5=krsq */
	movapd xmm4, xmm5
	addpd  xmm4, xmm7	/* xmm4=r inv+ krsq */
	mulpd xmm0, xmm0
	subpd  xmm4, [esp + _crf]
	mulpd  xmm4, [esp + _qqHH] /* xmm4=voul=qq*(rinv+ krsq) */
	addpd  xmm6, xmm4	/* add to local vctot */

	/* H2-O interaction */
	movapd xmm0, [esp + _rinvH2O]
	movapd xmm7, xmm0	/* xmm7=rinv */
	movapd xmm5, [esp + _krf]	
	movapd xmm1, xmm0
	mulpd  xmm5, [esp + _rsqH2O] /* xmm5=krsq */
	movapd xmm4, xmm5
	addpd  xmm4, xmm7	/* xmm4=r inv+ krsq */
	subpd  xmm4, [esp + _crf]
	mulpd xmm0, xmm0
	mulpd  xmm4, [esp + _qqOH] /* xmm4=voul=qq*(rinv+ krsq) */
	addpd  xmm6, xmm4	/* add to local vctot */

	/* H2-H1 interaction */
	movapd xmm0, [esp + _rinvH2H1]
	movapd xmm7, xmm0	/* xmm7=rinv */
	movapd xmm5, [esp + _krf]	
	movapd xmm1, xmm0
	mulpd  xmm5, [esp + _rsqH2H1] /* xmm5=krsq */
	movapd xmm4, xmm5
	addpd  xmm4, xmm7	/* xmm4=r inv+ krsq */
	subpd  xmm4, [esp + _crf]
	mulpd xmm0, xmm0
	mulpd  xmm4, [esp + _qqHH] /* xmm4=voul=qq*(rinv+ krsq) */
	addpd  xmm6, xmm4	/* add to local vctot */

	/* H2-H2 interaction */
	movapd xmm0, [esp + _rinvH2H2]
	movapd xmm7, xmm0	/* xmm7=rinv */
	movapd xmm5, [esp + _krf]	
	movapd xmm1, xmm0
	mulpd  xmm5, [esp + _rsqH2H2] /* xmm5=krsq */
	movapd xmm4, xmm5
	addpd  xmm4, xmm7	/* xmm4=r inv+ krsq */
	subpd  xmm4, [esp + _crf]
	mulpd xmm0, xmm0
	mulpd  xmm4, [esp + _qqHH] /* xmm4=voul=qq*(rinv+ krsq) */
	addpd  xmm6, xmm4	/* add to local vctot */
	movapd [esp + _vctot], xmm6
	
	/* should we do one more iteration? */
	sub   [esp + _innerk],  2
	jl    .imc2130_checksingle
	jmp   .imc2130_unroll_loop
.imc2130_checksingle:
	mov   edx, [esp + _innerk]
	and   edx, 1
	jnz   .imc2130_dosingle
	jmp   .imc2130_updateouterdata
.imc2130_dosingle:
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]
	
	mov esi, [ebp + _pos]
	lea   eax, [eax + eax*2]  

	/* fetch j coordinates */
	movlpd xmm2, [esi + eax*8]
	movlpd xmm3, [esi + eax*8 + 8]
	movlpd xmm4, [esi + eax*8 + 16]
	movlpd xmm5, [esi + eax*8 + 24]
	movlpd xmm6, [esi + eax*8 + 32]
	movlpd xmm7, [esi + eax*8 + 40]
	movapd 	[esp + _jxO], xmm2
	movapd 	[esp + _jyO], xmm3
	movapd 	[esp + _jzO], xmm4
	movapd 	[esp + _jxH1], xmm5
	movapd 	[esp + _jyH1], xmm6
	movapd 	[esp + _jzH1], xmm7
	movlpd xmm2, [esi + eax*8 + 48]
	movlpd xmm3, [esi + eax*8 + 56]
	movlpd xmm4, [esi + eax*8 + 64]
	movapd 	[esp + _jxH2], xmm2
	movapd 	[esp + _jyH2], xmm3
	movapd 	[esp + _jzH2], xmm4
	
	movapd xmm0, [esp + _ixO]
	movapd xmm1, [esp + _iyO]
	movapd xmm2, [esp + _izO]
	movapd xmm3, [esp + _ixO]
	movapd xmm4, [esp + _iyO]
	movapd xmm5, [esp + _izO]
	subsd  xmm0, [esp + _jxO]
	subsd  xmm1, [esp + _jyO]
	subsd  xmm2, [esp + _jzO]
	subsd  xmm3, [esp + _jxH1]
	subsd  xmm4, [esp + _jyH1]
	subsd  xmm5, [esp + _jzH1]
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + _rsqOO], xmm0
	movapd [esp + _rsqOH1], xmm3

	movapd xmm0, [esp + _ixO]
	movapd xmm1, [esp + _iyO]
	movapd xmm2, [esp + _izO]
	movapd xmm3, [esp + _ixH1]
	movapd xmm4, [esp + _iyH1]
	movapd xmm5, [esp + _izH1]
	subsd  xmm0, [esp + _jxH2]
	subsd  xmm1, [esp + _jyH2]
	subsd  xmm2, [esp + _jzH2]
	subsd  xmm3, [esp + _jxO]
	subsd  xmm4, [esp + _jyO]
	subsd  xmm5, [esp + _jzO]
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + _rsqOH2], xmm0
	movapd [esp + _rsqH1O], xmm3

	movapd xmm0, [esp + _ixH1]
	movapd xmm1, [esp + _iyH1]
	movapd xmm2, [esp + _izH1]
	movapd xmm3, [esp + _ixH1]
	movapd xmm4, [esp + _iyH1]
	movapd xmm5, [esp + _izH1]
	subsd  xmm0, [esp + _jxH1]
	subsd  xmm1, [esp + _jyH1]
	subsd  xmm2, [esp + _jzH1]
	subsd  xmm3, [esp + _jxH2]
	subsd  xmm4, [esp + _jyH2]
	subsd  xmm5, [esp + _jzH2]
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + _rsqH1H1], xmm0
	movapd [esp + _rsqH1H2], xmm3

	movapd xmm0, [esp + _ixH2]
	movapd xmm1, [esp + _iyH2]
	movapd xmm2, [esp + _izH2]
	movapd xmm3, [esp + _ixH2]
	movapd xmm4, [esp + _iyH2]
	movapd xmm5, [esp + _izH2]
	subsd  xmm0, [esp + _jxO]
	subsd  xmm1, [esp + _jyO]
	subsd  xmm2, [esp + _jzO]
	subsd  xmm3, [esp + _jxH1]
	subsd  xmm4, [esp + _jyH1]
	subsd  xmm5, [esp + _jzH1]
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm4, xmm3
	addsd  xmm4, xmm5
	movapd [esp + _rsqH2O], xmm0
	movapd [esp + _rsqH2H1], xmm4

	movapd xmm0, [esp + _ixH2]
	movapd xmm1, [esp + _iyH2]
	movapd xmm2, [esp + _izH2]
	subsd  xmm0, [esp + _jxH2]
	subsd  xmm1, [esp + _jyH2]
	subsd  xmm2, [esp + _jzH2]
	mulsd xmm0, xmm0
	mulsd xmm1, xmm1
	mulsd xmm2, xmm2
	addsd xmm0, xmm1
	addsd xmm0, xmm2
	movapd [esp + _rsqH2H2], xmm0
		
	/* start doing invsqrt use rsq values in xmm0, xmm4 */
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulsd   xmm1, xmm1	/* luA*luA */
	mulsd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	mulsd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subsd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm3, [esp + _half] /* iter1 */
	mulsd   xmm7, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulsd   xmm3, xmm3	/* luA*luA */
	mulsd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	mulsd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subsd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm1, [esp + _half] /* rinv */
	mulsd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvH2H2], xmm1
	movapd [esp + _rinvH2H1], xmm5

	movapd xmm0, [esp + _rsqOO]
	movapd xmm4, [esp + _rsqOH1]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulsd   xmm1, xmm1	/* luA*luA */
	mulsd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	mulsd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subsd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm3, [esp + _half] /* iter1 of  */
	mulsd   xmm7, [esp + _half] /* iter1 of  */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulsd   xmm3, xmm3	/* luA*luA */
	mulsd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	mulsd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subsd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm1, [esp + _half] /* rinv */
	mulsd   xmm5, [esp + _half] /* rinv*/
	movapd [esp + _rinvOO], xmm1
	movapd [esp + _rinvOH1], xmm5

	movapd xmm0, [esp + _rsqOH2]
	movapd xmm4, [esp + _rsqH1O]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulsd   xmm1, xmm1	/* luA*luA */
	mulsd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	mulsd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subsd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm3, [esp + _half] /* iter1 */
	mulsd   xmm7, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulsd   xmm3, xmm3	/* luA*luA */
	mulsd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	mulsd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subsd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm1, [esp + _half] /* rinv */
	mulsd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvOH2], xmm1
	movapd [esp + _rinvH1O], xmm5

	movapd xmm0, [esp + _rsqH1H1]
	movapd xmm4, [esp + _rsqH1H2]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulsd   xmm1, xmm1	/* luA*luA */
	mulsd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	mulsd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subsd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm3, [esp + _half] /* iter1a */
	mulsd   xmm7, [esp + _half] /* iter1b */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulsd   xmm3, xmm3	/* luA*luA */
	mulsd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	mulsd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subsd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm1, [esp + _half] /* rinv */
	mulsd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvH1H1], xmm1
	movapd [esp + _rinvH1H2], xmm5

	movapd xmm0, [esp + _rsqH2O]
	cvtsd2ss xmm1, xmm0	
	rsqrtss xmm1, xmm1
	cvtss2sd xmm1, xmm1
	
	movapd  xmm2, xmm1	/* copy of luA */
	mulsd   xmm1, xmm1	/* luA*luA */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm3, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	mulsd   xmm3, xmm3	/* luA*luA */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm1, [esp + _half] /* rinv */
	movapd [esp + _rinvH2O], xmm1
	
	/* start with OO interaction */
	movapd xmm0, [esp + _rinvOO]
	movapd xmm7, xmm0	/* xmm7=rinv */
	movapd xmm5, [esp + _krf]
	mulsd  xmm0, xmm0
	movapd xmm1, xmm0
	mulsd  xmm1, xmm0
	mulsd  xmm1, xmm0	/* xmm1=rinvsix */
	mulsd  xmm5, [esp + _rsqOO] /* xmm5=krsq */
	movapd xmm6, xmm5
	addsd  xmm6, xmm7	/* xmm6=rinv+ krsq */
	subsd  xmm6, [esp + _crf]
	
	mulsd  xmm6, [esp + _qqOO] /* xmm6=voul=qq*(rinv+ krsq-crf) */
	
	movapd xmm2, xmm1
	mulsd  xmm2, xmm2	/* xmm2=rinvtwelve */
	mulsd  xmm1, [esp + _c6]	
	mulsd  xmm2, [esp + _c12]	
	movapd xmm3, xmm2
	subsd  xmm3, xmm1	/* xmm3=vnb12-vnb6 */
	addsd  xmm3, [esp + _vnbtot]
	movlpd [esp + _vnbtot], xmm3
	addsd  xmm6, [esp + _vctot] /* local vctot summation variable */

	/* O-H1 interaction */
	movapd xmm0, [esp + _rinvOH1]
	movapd xmm7, xmm0	/* xmm7=rinv */
	movapd xmm5, [esp + _krf]
	movapd xmm1, xmm0
	mulsd  xmm5, [esp + _rsqOH1] /* xmm5=krsq */
	movapd xmm4, xmm5
	addsd  xmm4, xmm7	/* xmm4=rinv+ krsq */
	mulsd  xmm0, xmm0
	subsd  xmm4, [esp + _crf]
	mulsd  xmm4, [esp + _qqOH] /* xmm4=voul=qq*(rinv+ krsq) */
	addsd  xmm6, xmm4	/* add to local vctot */

	/* O-H2 interaction */ 
	movapd xmm0, [esp + _rinvOH2]
	movapd xmm7, xmm0	/* xmm7=rinv */
	movapd xmm5, [esp + _krf]	
	movapd xmm1, xmm0
	mulsd  xmm5, [esp + _rsqOH2] /* xmm5=krsq */
	movapd xmm4, xmm5
	addsd  xmm4, xmm7	/* xmm4=r inv+ krsq */
	mulsd  xmm0, xmm0
	subsd  xmm4, [esp + _crf]
	mulsd  xmm4, [esp + _qqOH] /* xmm4=voul=qq*(rinv+ krsq) */
	addsd  xmm6, xmm4	/* add to local vctot */

	/* H1-O interaction */
	movapd xmm0, [esp + _rinvH1O]
	movapd xmm7, xmm0	/* xmm7=rinv */
	movapd xmm5, [esp + _krf]	
	movapd xmm1, xmm0
	mulsd  xmm5, [esp + _rsqH1O] /* xmm5=krsq */
	movapd xmm4, xmm5
	addsd  xmm4, xmm7	/* xmm4=rinv+ krsq */
	mulsd xmm0, xmm0
	subsd  xmm4, [esp + _crf]
	mulsd  xmm4, [esp + _qqOH] /* xmm4=voul=qq*(rinv+ krsq) */
	addsd  xmm6, xmm4	/* add to local vctot */

	/* H1-H1 interaction */
	movapd xmm0, [esp + _rinvH1H1]
	movapd xmm7, xmm0	/* xmm7=rinv */
	movapd xmm5, [esp + _krf]	
	movapd xmm1, xmm0
	mulsd  xmm5, [esp + _rsqH1H1] /* xmm5=krsq */
	movapd xmm4, xmm5
	addsd  xmm4, xmm7	/* xmm4=r inv+ krsq */
	subsd  xmm4, [esp + _crf]
	mulsd xmm0, xmm0
	mulsd  xmm4, [esp + _qqHH] /* xmm4=voul=qq*(rinv+ krsq) */
	addsd  xmm6, xmm4	/* add to local vctot */

	/* H1-H2 interaction */
	movapd xmm0, [esp + _rinvH1H2]
	movapd xmm7, xmm0	/* xmm7=rinv */
	movapd xmm5, [esp + _krf]	
	movapd xmm1, xmm0
	mulsd  xmm5, [esp + _rsqH1H2] /* xmm5=krsq */
	movapd xmm4, xmm5
	addsd  xmm4, xmm7	/* xmm4=r inv+ krsq */
	mulsd xmm0, xmm0
	subsd  xmm4, [esp + _crf]
	mulsd  xmm4, [esp + _qqHH] /* xmm4=voul=qq*(rinv+ krsq) */
	addsd  xmm6, xmm4	/* add to local vctot */

	/* H2-O interaction */
	movapd xmm0, [esp + _rinvH2O]
	movapd xmm7, xmm0	/* xmm7=rinv */
	movapd xmm5, [esp + _krf]	
	movapd xmm1, xmm0
	mulsd  xmm5, [esp + _rsqH2O] /* xmm5=krsq */
	movapd xmm4, xmm5
	addsd  xmm4, xmm7	/* xmm4=r inv+ krsq */
	subsd  xmm4, [esp + _crf]
	mulsd xmm0, xmm0
	mulsd  xmm4, [esp + _qqOH] /* xmm4=voul=qq*(rinv+ krsq) */
	addsd  xmm6, xmm4	/* add to local vctot */

	/* H2-H1 interaction */
	movapd xmm0, [esp + _rinvH2H1]
	movapd xmm7, xmm0	/* xmm7=rinv */
	movapd xmm5, [esp + _krf]	
	movapd xmm1, xmm0
	mulsd  xmm5, [esp + _rsqH2H1] /* xmm5=krsq */
	movapd xmm4, xmm5
	addsd  xmm4, xmm7	/* xmm4=r inv+ krsq */
	subsd  xmm4, [esp + _crf]
	mulsd xmm0, xmm0
	mulsd  xmm4, [esp + _qqHH] /* xmm4=voul=qq*(rinv+ krsq) */
	addsd  xmm6, xmm4	/* add to local vctot */

	/* H2-H2 interaction */
	movapd xmm0, [esp + _rinvH2H2]
	movapd xmm7, xmm0	/* xmm7=rinv */
	movapd xmm5, [esp + _krf]	
	movapd xmm1, xmm0
	mulsd  xmm5, [esp + _rsqH2H2] /* xmm5=krsq */
	movapd xmm4, xmm5
	addsd  xmm4, xmm7	/* xmm4=r inv+ krsq */
	subsd  xmm4, [esp + _crf]
	mulsd xmm0, xmm0
	mulsd  xmm4, [esp + _qqHH] /* xmm4=voul=qq*(rinv+ krsq) */
	addsd  xmm6, xmm4	/* add to local vctot */
	movlpd [esp + _vctot], xmm6
	
.imc2130_updateouterdata:
	/* get gid */
	mov   edx, [ebp + _gid]  
	mov   edx, [edx]
	add   [ebp + _gid],  4	

	/* accumulate total potential energy and update it */
	movapd xmm7, [esp + _vctot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */

	/* add earlier value from mem */
	mov   eax, [ebp + _Vc]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* accumulate total lj energy and update it */
	movapd xmm7, [esp + _vnbtot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */
	
	/* add earlier value from mem */
	mov   eax, [ebp + _Vnb]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* finish if last */
	mov   ecx, [ebp + _nri]
	dec ecx
	jecxz .imc2130_end
	/* not last, iterate once more! */ 
	mov [ebp + _nri], ecx
	jmp .imc2130_outer
.imc2130_end:
	emms
	mov eax, [esp + _salign]
	add esp, eax
	add esp, 772
	pop edi
	pop esi
        pop edx
        pop ecx
        pop ebx
        pop eax
	leave
	ret


	

.globl mcinl2020_sse2
	.type mcinl2020_sse2,@function
mcinl2020_sse2:	
.equ		_nri,		8
.equ		_iinr,		12
.equ		_jindex,	16
.equ		_jjnr,		20
.equ		_shift,		24
.equ		_shiftvec,	28
.equ		_gid,		32
.equ		_pos,		36		
.equ		_charge,	40
.equ		_facel,		44 /* double */
.equ		_Vc,		52			
.equ		_argkrf,	56 /* double */
.equ		_argcrf,	64 /* double */	
	/* stack offsets for local variables */ 
	/* bottom of stack is cache-aligned for sse use */
.equ		_ixO,		0
.equ		_iyO,		16
.equ		_izO,		32
.equ		_ixH1,		48
.equ		_iyH1,		64
.equ		_izH1,		80
.equ		_ixH2,		96
.equ		_iyH2,		112
.equ		_izH2,		128
.equ		_iqO,		144 
.equ		_iqH,		160 
.equ		_qqO,		176
.equ		_qqH,		192
.equ		_vctot,		208
.equ		_half,		224
.equ		_three,		240
.equ		_krf,		256
.equ		_crf,		272
.equ		_krsqO,		288
.equ		_krsqH1,	304
.equ		_krsqH2,	320	 		
.equ		_is3,		336
.equ		_ii3,		340
.equ		_innerjjnr,	344
.equ		_innerk,	348
.equ		_salign,	352
	push ebp
	mov ebp,esp	
        push eax
        push ebx
        push ecx
        push edx
	push esi
	push edi
	sub esp, 356		/* local stack space */
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + _salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_three]
	movsd xmm5, [ebp + _argkrf]
	movsd xmm6, [ebp + _argcrf]

	movapd [esp + _half],  xmm0
	movapd [esp + _three], xmm1
	shufpd xmm5, xmm5, 0
	shufpd xmm6, xmm6, 0
	movapd [esp + _krf], xmm5
	movapd [esp + _crf], xmm6
	
	/* assume we have at least one i particle - start directly */
	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	mov   ebx, [ecx]	        /* ebx =ii */

	mov   edx, [ebp + _charge]
	movsd xmm3, [edx + ebx*8]	
	movsd xmm4, [edx + ebx*8 + 8]	
	movsd xmm5, [ebp + _facel]
	mulsd  xmm3, xmm5
	mulsd  xmm4, xmm5

	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	movapd [esp + _iqO], xmm3
	movapd [esp + _iqH], xmm4
			
.imc2020_outer:
	mov   eax, [ebp + _shift]      /* eax = pointer into shift[] */
	mov   ebx, [eax]		/* ebx=shift[n] */
	add   [ebp + _shift],  4  /* advance pointer one step */
	
	lea   ebx, [ebx + ebx*2]        /* ebx=3*is */

	mov   eax, [ebp + _shiftvec]   /* eax = base of shiftvec[] */

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	add   [ebp + _iinr],  4   /* advance pointer */
	mov   ebx, [ecx]	        /* ebx =ii */

	movapd xmm3, xmm0
	movapd xmm4, xmm1
	movapd xmm5, xmm2

	lea   ebx, [ebx + ebx*2]	/* ebx = 3*ii=ii3 */
	mov   eax, [ebp + _pos]        /* eax = base of pos[] */ 
	mov   [esp + _ii3], ebx

	addsd xmm3, [eax + ebx*8]
	addsd xmm4, [eax + ebx*8 + 8]
	addsd xmm5, [eax + ebx*8 + 16]		
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _ixO], xmm3
	movapd [esp + _iyO], xmm4
	movapd [esp + _izO], xmm5

	movsd xmm3, xmm0
	movsd xmm4, xmm1
	movsd xmm5, xmm2
	addsd xmm0, [eax + ebx*8 + 24]
	addsd xmm1, [eax + ebx*8 + 32]
	addsd xmm2, [eax + ebx*8 + 40]		
	addsd xmm3, [eax + ebx*8 + 48]
	addsd xmm4, [eax + ebx*8 + 56]
	addsd xmm5, [eax + ebx*8 + 64]		

	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _ixH1], xmm0
	movapd [esp + _iyH1], xmm1
	movapd [esp + _izH1], xmm2
	movapd [esp + _ixH2], xmm3
	movapd [esp + _iyH2], xmm4
	movapd [esp + _izH2], xmm5
	
	/* clear vctot */
	xorpd xmm4, xmm4
	movapd [esp + _vctot], xmm4
	
	mov   eax, [ebp + _jindex]
	mov   ecx, [eax]	         /* jindex[n] */
	mov   edx, [eax + 4]	         /* jindex[n+1] */
	add   [ebp + _jindex],  4
	sub   edx, ecx                   /* number of innerloop atoms */

	mov   esi, [ebp + _pos]
	mov   eax, [ebp + _jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + _innerjjnr], eax     /* pointer to jjnr[nj0] */
	sub   edx,  2
	mov   [esp + _innerk], edx        /* number of innerloop atoms */
	jge   .imc2020_unroll_loop
	jmp   .imc2020_checksingle
.imc2020_unroll_loop:
	/* twice unrolled innerloop here */
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]	
	mov   ebx, [edx + 4]

	add   [esp + _innerjjnr],  8	/* advance pointer (unrolled 2) */

	mov esi, [ebp + _charge]        /* base of charge[] */
	
	movlpd xmm3, [esi + eax*8]
	movhpd xmm3, [esi + ebx*8]
	movapd xmm4, xmm3
	mulpd  xmm3, [esp + _iqO]
	mulpd  xmm4, [esp + _iqH]
	movapd  [esp + _qqO], xmm3
	movapd  [esp + _qqH], xmm4	

	mov esi, [ebp + _pos]       /* base of pos[] */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */
	lea   ebx, [ebx + ebx*2]	

	/* move two coordinates to xmm0-xmm2 */
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]

	/* move ixO-izO to xmm4-xmm6 */
	movapd xmm4, [esp + _ixO]
	movapd xmm5, [esp + _iyO]
	movapd xmm6, [esp + _izO]

	/* calc dr */
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	/* square it */
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6
	movapd xmm7, xmm4
	/* rsqO in xmm7 */

	/* move ixH1-izH1 to xmm4-xmm6 */
	movapd xmm4, [esp + _ixH1]
	movapd xmm5, [esp + _iyH1]
	movapd xmm6, [esp + _izH1]

	/* calc dr */
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	/* square it */
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm6, xmm5
	addpd xmm6, xmm4
	/* rsqH1 in xmm6 */

	/* move ixH2-izH2 to xmm3-xmm5 */ 
	movapd xmm3, [esp + _ixH2]
	movapd xmm4, [esp + _iyH2]
	movapd xmm5, [esp + _izH2]

	/* calc dr */
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2

	/* square it */
	mulpd xmm3,xmm3
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	addpd xmm5, xmm4
	addpd xmm5, xmm3
	/* rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 */

	movapd xmm0, xmm5
	movapd xmm1, xmm6
	movapd xmm2, xmm7

	mulpd  xmm0, [esp + _krf]	
	mulpd  xmm1, [esp + _krf]	
	mulpd  xmm2, [esp + _krf]	

	movapd [esp + _krsqH2], xmm0
	movapd [esp + _krsqH1], xmm1
	movapd [esp + _krsqO], xmm2
	
	/* start with rsqO - put seed in xmm2 */
	cvtpd2ps xmm2, xmm7	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulpd   xmm2, xmm7	/* rsq*lu*lu */
	subpd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulpd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulpd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm3, xmm4
	mulpd xmm4, xmm4	/* lu*lu */
	mulpd xmm7, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subpd xmm4, xmm7	/* 3-rsq*lu*lu */
	mulpd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulpd xmm4, [esp + _half] /* rinv */
	movapd  xmm7, xmm4	/* rinvO in xmm7 */
	
	/* rsqH1 - seed in xmm2 */
	cvtpd2ps xmm2, xmm6	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulpd   xmm2, xmm6	/* rsq*lu*lu */
	subpd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulpd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulpd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm3, xmm4
	mulpd xmm4, xmm4	/* lu*lu */
	mulpd xmm6, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subpd xmm4, xmm6	/* 3-rsq*lu*lu */
	mulpd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulpd xmm4, [esp + _half] /* rinv */
	movapd  xmm6, xmm4	/* rinvH1 in xmm6 */
	
	/* rsqH2 - seed in xmm2 */
	cvtpd2ps xmm2, xmm5	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulpd   xmm2, xmm5	/* rsq*lu*lu */
	subpd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulpd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulpd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm3, xmm4
	mulpd xmm4, xmm4	/* lu*lu */
	mulpd xmm5, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subpd xmm4, xmm5	/* 3-rsq*lu*lu */
	mulpd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulpd xmm4, [esp + _half] /* rinv */
	movapd  xmm5, xmm4	/* rinvH2 in xmm5 */

	/* do O interactions */
	movapd  xmm0, [esp + _krsqO]
	addpd   xmm7, xmm0	/* xmm7=rinv+ krsq */
	subpd   xmm7, [esp + _crf]
	mulpd   xmm7, [esp + _qqO] /* vcoul */	
	addpd  xmm7, [esp + _vctot]

	/* H1 interactions */
	movapd  xmm0, [esp + _krsqH1]
	addpd   xmm6, xmm0	/* xmm6=rinv+ krsq */
	subpd   xmm6, [esp + _crf]
	mulpd   xmm6, [esp + _qqH] /* vcoul */
	addpd  xmm6, xmm7

	/* H2 interactions */
	movapd  xmm0, [esp + _krsqH2]
	addpd   xmm5, xmm0	/* xmm5=rinv+ krsq */
	subpd   xmm5, [esp + _crf]
	mulpd   xmm5, [esp + _qqH] /* vcoul */
	addpd  xmm5, xmm6
	movapd [esp + _vctot], xmm5
		
	/* should we do one more iteration? */
	sub   [esp + _innerk],  2
	jl    .imc2020_checksingle
	jmp   .imc2020_unroll_loop
.imc2020_checksingle:	
	mov   edx, [esp + _innerk]
	and   edx, 1
	jnz   .imc2020_dosingle
	jmp   .imc2020_updateouterdata
.imc2020_dosingle:
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]	
	add   [esp + _innerjjnr],  4	

	mov esi, [ebp + _charge]        /* base of charge[] */
	xorpd xmm3, xmm3
	movlpd xmm3, [esi + eax*8]
	movapd xmm4, xmm3
	mulpd  xmm3, [esp + _iqO]
	mulpd  xmm4, [esp + _iqH]
	movapd  [esp + _qqO], xmm3
	movapd  [esp + _qqH], xmm4
	
	mov esi, [ebp + _pos]       /* base of pos[] */
	lea   eax, [eax + eax*2]         /* replace jnr with j3 */

	/* move coordinates to xmm0-xmm2 */
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]

	/* move ixO-izO to xmm4-xmm6 */
	movapd xmm4, [esp + _ixO]
	movapd xmm5, [esp + _iyO]
	movapd xmm6, [esp + _izO]

	/* calc dr */
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	/* square it */
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6
	movapd xmm7, xmm4
	/* rsqO in xmm7 */

	/* move ixH1-izH1 to xmm4-xmm6 */
	movapd xmm4, [esp + _ixH1]
	movapd xmm5, [esp + _iyH1]
	movapd xmm6, [esp + _izH1]

	/* calc dr */
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	/* square it */
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm6, xmm5
	addsd xmm6, xmm4
	/* rsqH1 in xmm6 */

	/* move ixH2-izH2 to xmm3-xmm5 */ 
	movapd xmm3, [esp + _ixH2]
	movapd xmm4, [esp + _iyH2]
	movapd xmm5, [esp + _izH2]

	/* calc dr */
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2

	/* square it */
	mulsd xmm3,xmm3
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	addsd xmm5, xmm4
	addsd xmm5, xmm3
	/* rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 */
	
	movapd xmm0, xmm5
	movapd xmm1, xmm6
	movapd xmm2, xmm7

	mulsd  xmm0, [esp + _krf]	
	mulsd  xmm1, [esp + _krf]	
	mulsd  xmm2, [esp + _krf]	

	movapd [esp + _krsqH2], xmm0
	movapd [esp + _krsqH1], xmm1
	movapd [esp + _krsqO], xmm2
	
	/* start with rsqO - put seed in xmm2 */
	cvtsd2ss xmm2, xmm7	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulsd   xmm2, xmm7	/* rsq*lu*lu */
	subsd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulsd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulsd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm3, xmm4
	mulsd xmm4, xmm4	/* lu*lu */
	mulsd xmm7, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subsd xmm4, xmm7	/* 3-rsq*lu*lu */
	mulsd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulsd xmm4, [esp + _half] /* rinv */
	movapd  xmm7, xmm4	/* rinvO in xmm7 */
	
	/* rsqH1 - seed in xmm2 */
	cvtsd2ss xmm2, xmm6	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulsd   xmm2, xmm6	/* rsq*lu*lu */
	subsd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulsd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulsd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm3, xmm4
	mulsd xmm4, xmm4	/* lu*lu */
	mulsd xmm6, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subsd xmm4, xmm6	/* 3-rsq*lu*lu */
	mulsd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulsd xmm4, [esp + _half] /* rinv */
	movapd  xmm6, xmm4	/* rinvH1 in xmm6 */
	
	/* rsqH2 - seed in xmm2 */
	cvtsd2ss xmm2, xmm5	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulsd   xmm2, xmm5	/* rsq*lu*lu */
	subsd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulsd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulsd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm3, xmm4
	mulsd xmm4, xmm4	/* lu*lu */
	mulsd xmm5, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subsd xmm4, xmm5	/* 3-rsq*lu*lu */
	mulsd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulsd xmm4, [esp + _half] /* rinv */
	movapd  xmm5, xmm4	/* rinvH2 in xmm5 */

	/* do O interactions */
	movapd  xmm0, [esp + _krsqO]
	addsd   xmm7, xmm0	/* xmm7=rinv+ krsq */
	subsd   xmm7, [esp + _crf]
	mulsd   xmm7, [esp + _qqO] /* vcoul */	
	addsd  xmm7, [esp + _vctot]

	/* H1 interactions */
	movapd  xmm0, [esp + _krsqH1]
	addsd   xmm6, xmm0	/* xmm6=rinv+ krsq */
	subsd   xmm6, [esp + _crf]
	mulsd   xmm6, [esp + _qqH] /* vcoul */
	addsd  xmm6, xmm7

	/* H2 interactions */
	movapd  xmm0, [esp + _krsqH2]
	addsd   xmm5, xmm0	/* xmm5=rinv+ krsq */
	subsd   xmm5, [esp + _crf]
	mulsd   xmm5, [esp + _qqH] /* vcoul */
	addsd  xmm5, xmm6
	movlpd [esp + _vctot], xmm5
		
.imc2020_updateouterdata:
	/* get gid */
	mov   edx, [ebp + _gid]  
	mov   edx, [edx]
	add   [ebp + _gid],  4	

	/* accumulate total potential energy and update it */
	movapd xmm7, [esp + _vctot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */
        
	/* add earlier value from mem */
	mov   eax, [ebp + _Vc]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* finish if last */
	mov   ecx, [ebp + _nri]
	dec ecx
	jecxz .imc2020_end
	/* not last, iterate once more! */ 
	mov [ebp + _nri], ecx
	jmp .imc2020_outer
.imc2020_end:
	emms
	mov eax, [esp + _salign]
	add esp, eax
	add esp, 356
	pop edi
	pop esi
        pop edx
        pop ecx
        pop ebx
        pop eax
	leave
	ret


	
.globl mcinl2030_sse2
	.type mcinl2030_sse2,@function
mcinl2030_sse2:	
.equ		_nri,		8
.equ		_iinr,		12
.equ		_jindex,	16
.equ		_jjnr,		20
.equ		_shift,		24
.equ		_shiftvec,	28
.equ		_gid,		32
.equ		_pos,		36		
.equ		_charge,	40
.equ		_facel,		44 /* double */
.equ		_Vc,		52
.equ		_argkrf,	56 /* double */
.equ		_argcrf,	64 /* double */
	/* stack offsets for local variables */ 
	/* bottom of stack is cache-aligned for sse use */
.equ		_ixO,		0
.equ		_iyO,		16
.equ		_izO,		32
.equ		_ixH1,		48
.equ		_iyH1,		64
.equ		_izH1,		80
.equ		_ixH2,		96
.equ		_iyH2,		112
.equ		_izH2,		128
.equ		_jxO,		144
.equ		_jyO,		160
.equ		_jzO,		176
.equ		_jxH1,		192
.equ		_jyH1,		208
.equ		_jzH1,		224
.equ		_jxH2,		240
.equ		_jyH2,		256
.equ		_jzH2,		272
.equ		_qqOO,		288
.equ		_qqOH,		304
.equ		_qqHH,		320
.equ		_vctot,		336
.equ		_half,		352
.equ		_three,		368
.equ		_rsqOO,		384
.equ		_rsqOH1,	400
.equ		_rsqOH2,	416
.equ		_rsqH1O,	432
.equ		_rsqH1H1,	448
.equ		_rsqH1H2,	464
.equ		_rsqH2O,	480
.equ		_rsqH2H1,	496
.equ		_rsqH2H2,	512
.equ		_rinvOO,	528
.equ		_rinvOH1,	544
.equ		_rinvOH2,	560
.equ		_rinvH1O,	576
.equ		_rinvH1H1,	592
.equ		_rinvH1H2,	608
.equ		_rinvH2O,	624
.equ		_rinvH2H1,	640
.equ		_rinvH2H2,	656
.equ		_krf,		672	
.equ		_crf,		688
.equ		_is3,		704
.equ		_ii3,		708
.equ		_innerjjnr,	712
.equ		_innerk,	716
.equ		_salign,	720
	push ebp
	mov ebp,esp	
        push eax
        push ebx
        push ecx
        push edx
	push esi
	push edi
	sub esp, 724		/* local stack space */
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + _salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm1, [sse2_three]
	movsd xmm5, [ebp + _argkrf]
	movsd xmm6, [ebp + _argcrf]
	
	movapd [esp + _half],  xmm0
	movapd [esp + _three], xmm1
	shufpd xmm5, xmm5, 0
	shufpd xmm6, xmm6, 0
	movapd [esp + _krf], xmm5
	movapd [esp + _crf], xmm6
	
	/* assume we have at least one i particle - start directly */
	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	mov   ebx, [ecx]	        /* ebx =ii */

	mov   edx, [ebp + _charge]
	movsd xmm3, [edx + ebx*8]	
	movsd xmm4, xmm3	
	movsd xmm5, [edx + ebx*8 + 8]	
	movsd xmm6, [ebp + _facel]
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm5
	mulsd  xmm5, xmm5
	mulsd  xmm3, xmm6
	mulsd  xmm4, xmm6
	mulsd  xmm5, xmm6
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _qqOO], xmm3
	movapd [esp + _qqOH], xmm4
	movapd [esp + _qqHH], xmm5
	
.imc2030_outer:
	mov   eax, [ebp + _shift]      /* eax = pointer into shift[] */
	mov   ebx, [eax]		/* ebx=shift[n] */
	add   [ebp + _shift],  4  /* advance pointer one step */
	
	lea   ebx, [ebx + ebx*2]        /* ebx=3*is */

	mov   eax, [ebp + _shiftvec]   /* eax = base of shiftvec[] */

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	add   [ebp + _iinr],  4   /* advance pointer */
	mov   ebx, [ecx]	        /* ebx =ii */

	lea   ebx, [ebx + ebx*2]	/* ebx = 3*ii=ii3 */
	mov   eax, [ebp + _pos]        /* eax = base of pos[] */ 
	mov   [esp + _ii3], ebx	
	
	movapd xmm3, xmm0
	movapd xmm4, xmm1
	movapd xmm5, xmm2
	addsd xmm3, [eax + ebx*8]
	addsd xmm4, [eax + ebx*8 + 8]
	addsd xmm5, [eax + ebx*8 + 16]		
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _ixO], xmm3
	movapd [esp + _iyO], xmm4
	movapd [esp + _izO], xmm5

	movsd xmm3, xmm0
	movsd xmm4, xmm1
	movsd xmm5, xmm2
	addsd xmm0, [eax + ebx*8 + 24]
	addsd xmm1, [eax + ebx*8 + 32]
	addsd xmm2, [eax + ebx*8 + 40]		
	addsd xmm3, [eax + ebx*8 + 48]
	addsd xmm4, [eax + ebx*8 + 56]
	addsd xmm5, [eax + ebx*8 + 64]		

	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _ixH1], xmm0
	movapd [esp + _iyH1], xmm1
	movapd [esp + _izH1], xmm2
	movapd [esp + _ixH2], xmm3
	movapd [esp + _iyH2], xmm4
	movapd [esp + _izH2], xmm5

	/* clear vctot */
	xorpd xmm4, xmm4
	movapd [esp + _vctot], xmm4
	
	mov   eax, [ebp + _jindex]
	mov   ecx, [eax]	         /* jindex[n] */
	mov   edx, [eax + 4]	         /* jindex[n+1] */
	add   [ebp + _jindex],  4
	sub   edx, ecx                   /* number of innerloop atoms */

	mov   esi, [ebp + _pos]
	mov   eax, [ebp + _jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + _innerjjnr], eax     /* pointer to jjnr[nj0] */
	sub   edx,  2
	mov   [esp + _innerk], edx        /* number of innerloop atoms */
	jge   .imc2030_unroll_loop
	jmp   .imc2030_checksingle
.imc2030_unroll_loop:
	/* twice unrolled innerloop here */
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]	
	mov   ebx, [edx + 4] 
	
	add   [esp + _innerjjnr],  8	/* advance pointer (unrolled 2) */

	mov esi, [ebp + _pos]       /* base of pos[] */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */
	lea   ebx, [ebx + ebx*2]	
	
	/* move j coordinates to local temp variables */
	movlpd xmm2, [esi + eax*8]
	movlpd xmm3, [esi + eax*8 + 8]
	movlpd xmm4, [esi + eax*8 + 16]
	movlpd xmm5, [esi + eax*8 + 24]
	movlpd xmm6, [esi + eax*8 + 32]
	movlpd xmm7, [esi + eax*8 + 40]
	movhpd xmm2, [esi + ebx*8]
	movhpd xmm3, [esi + ebx*8 + 8]
	movhpd xmm4, [esi + ebx*8 + 16]
	movhpd xmm5, [esi + ebx*8 + 24]
	movhpd xmm6, [esi + ebx*8 + 32]
	movhpd xmm7, [esi + ebx*8 + 40]
	movapd 	[esp + _jxO], xmm2
	movapd 	[esp + _jyO], xmm3
	movapd 	[esp + _jzO], xmm4
	movapd 	[esp + _jxH1], xmm5
	movapd 	[esp + _jyH1], xmm6
	movapd 	[esp + _jzH1], xmm7
	movlpd xmm2, [esi + eax*8 + 48]
	movlpd xmm3, [esi + eax*8 + 56]
	movlpd xmm4, [esi + eax*8 + 64]
	movhpd xmm2, [esi + ebx*8 + 48]
	movhpd xmm3, [esi + ebx*8 + 56]
	movhpd xmm4, [esi + ebx*8 + 64]
	movapd 	[esp + _jxH2], xmm2
	movapd 	[esp + _jyH2], xmm3
	movapd 	[esp + _jzH2], xmm4
	
	movapd xmm0, [esp + _ixO]
	movapd xmm1, [esp + _iyO]
	movapd xmm2, [esp + _izO]
	movapd xmm3, [esp + _ixO]
	movapd xmm4, [esp + _iyO]
	movapd xmm5, [esp + _izO]
	subpd  xmm0, [esp + _jxO]
	subpd  xmm1, [esp + _jyO]
	subpd  xmm2, [esp + _jzO]
	subpd  xmm3, [esp + _jxH1]
	subpd  xmm4, [esp + _jyH1]
	subpd  xmm5, [esp + _jzH1]
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + _rsqOO], xmm0
	movapd [esp + _rsqOH1], xmm3

	movapd xmm0, [esp + _ixO]
	movapd xmm1, [esp + _iyO]
	movapd xmm2, [esp + _izO]
	movapd xmm3, [esp + _ixH1]
	movapd xmm4, [esp + _iyH1]
	movapd xmm5, [esp + _izH1]
	subpd  xmm0, [esp + _jxH2]
	subpd  xmm1, [esp + _jyH2]
	subpd  xmm2, [esp + _jzH2]
	subpd  xmm3, [esp + _jxO]
	subpd  xmm4, [esp + _jyO]
	subpd  xmm5, [esp + _jzO]
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + _rsqOH2], xmm0
	movapd [esp + _rsqH1O], xmm3

	movapd xmm0, [esp + _ixH1]
	movapd xmm1, [esp + _iyH1]
	movapd xmm2, [esp + _izH1]
	movapd xmm3, [esp + _ixH1]
	movapd xmm4, [esp + _iyH1]
	movapd xmm5, [esp + _izH1]
	subpd  xmm0, [esp + _jxH1]
	subpd  xmm1, [esp + _jyH1]
	subpd  xmm2, [esp + _jzH1]
	subpd  xmm3, [esp + _jxH2]
	subpd  xmm4, [esp + _jyH2]
	subpd  xmm5, [esp + _jzH2]
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + _rsqH1H1], xmm0
	movapd [esp + _rsqH1H2], xmm3

	movapd xmm0, [esp + _ixH2]
	movapd xmm1, [esp + _iyH2]
	movapd xmm2, [esp + _izH2]
	movapd xmm3, [esp + _ixH2]
	movapd xmm4, [esp + _iyH2]
	movapd xmm5, [esp + _izH2]
	subpd  xmm0, [esp + _jxO]
	subpd  xmm1, [esp + _jyO]
	subpd  xmm2, [esp + _jzO]
	subpd  xmm3, [esp + _jxH1]
	subpd  xmm4, [esp + _jyH1]
	subpd  xmm5, [esp + _jzH1]
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm4, xmm3
	addpd  xmm4, xmm5
	movapd [esp + _rsqH2O], xmm0
	movapd [esp + _rsqH2H1], xmm4

	movapd xmm0, [esp + _ixH2]
	movapd xmm1, [esp + _iyH2]
	movapd xmm2, [esp + _izH2]
	subpd  xmm0, [esp + _jxH2]
	subpd  xmm1, [esp + _jyH2]
	subpd  xmm2, [esp + _jzH2]
	mulpd xmm0, xmm0
	mulpd xmm1, xmm1
	mulpd xmm2, xmm2
	addpd xmm0, xmm1
	addpd xmm0, xmm2
	movapd [esp + _rsqH2H2], xmm0
		
	/* start doing invsqrt use rsq values in xmm0, xmm4 */
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulpd   xmm1, xmm1	/* luA*luA */
	mulpd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	mulpd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subpd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm3, [esp + _half] /* iter1 */
	mulpd   xmm7, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulpd   xmm3, xmm3	/* luA*luA */
	mulpd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	mulpd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subpd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm1, [esp + _half] /* rinv */
	mulpd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvH2H2], xmm1
	movapd [esp + _rinvH2H1], xmm5

	movapd xmm0, [esp + _rsqOO]
	movapd xmm4, [esp + _rsqOH1]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulpd   xmm1, xmm1	/* luA*luA */
	mulpd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	mulpd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subpd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm3, [esp + _half] /* iter1 of  */
	mulpd   xmm7, [esp + _half] /* iter1 of  */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulpd   xmm3, xmm3	/* luA*luA */
	mulpd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	mulpd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subpd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm1, [esp + _half] /* rinv */
	mulpd   xmm5, [esp + _half] /* rinv*/
	movapd [esp + _rinvOO], xmm1
	movapd [esp + _rinvOH1], xmm5

	movapd xmm0, [esp + _rsqOH2]
	movapd xmm4, [esp + _rsqH1O]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulpd   xmm1, xmm1	/* luA*luA */
	mulpd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	mulpd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subpd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm3, [esp + _half] /* iter1 */
	mulpd   xmm7, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulpd   xmm3, xmm3	/* luA*luA */
	mulpd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	mulpd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subpd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm1, [esp + _half] /* rinv */
	mulpd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvOH2], xmm1
	movapd [esp + _rinvH1O], xmm5

	movapd xmm0, [esp + _rsqH1H1]
	movapd xmm4, [esp + _rsqH1H2]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulpd   xmm1, xmm1	/* luA*luA */
	mulpd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	mulpd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subpd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm3, [esp + _half] /* iter1a */
	mulpd   xmm7, [esp + _half] /* iter1b */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulpd   xmm3, xmm3	/* luA*luA */
	mulpd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	mulpd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subpd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm1, [esp + _half] /* rinv */
	mulpd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvH1H1], xmm1
	movapd [esp + _rinvH1H2], xmm5

	movapd xmm0, [esp + _rsqH2O]
	cvtpd2ps xmm1, xmm0	
	rsqrtps xmm1, xmm1
	cvtps2pd xmm1, xmm1
	
	movapd  xmm2, xmm1	/* copy of luA */
	mulpd   xmm1, xmm1	/* luA*luA */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm3, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	mulpd   xmm3, xmm3	/* luA*luA */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm1, [esp + _half] /* rinv */
	movapd [esp + _rinvH2O], xmm1
	
	/* start with OO interaction */
	movapd xmm6, [esp + _krf]
	mulpd  xmm6, [esp + _rsqOO]	/* xmm5=krsq */
	addpd  xmm6, [esp + _rinvOO]	/* xmm6=rinv+ krsq */
	subpd  xmm6, [esp + _crf]
	
	mulpd  xmm6, [esp + _qqOO] /* xmm6=voul=qq*(rinv+ krsq-crf) */
	addpd  xmm6, [esp + _vctot] /* local vctot summation variable */

	/* O-H1 interaction */
	movapd xmm5, [esp + _krf]
	mulpd  xmm5, [esp + _rsqOH1]	/* xmm5=krsq */
	addpd  xmm5, [esp + _rinvOH1]	/* xmm6=rinv+ krsq */
	subpd  xmm5, [esp + _crf]
	
	mulpd  xmm5, [esp + _qqOH] /* xmm6=voul=qq*(rinv+ krsq-crf) */
	addpd  xmm6, xmm5 /* local vctot summation variable */

	/* O-H2 interaction */
	movapd xmm7, [esp + _krf]
	mulpd  xmm7, [esp + _rsqOH2]	/* xmm5=krsq */
	addpd  xmm7, [esp + _rinvOH2]	/* xmm6=rinv+ krsq */
	subpd  xmm7, [esp + _crf]
	
	mulpd  xmm7, [esp + _qqOH] /* xmm6=voul=qq*(rinv+ krsq-crf) */
	addpd  xmm6, xmm7 /* local vctot summation variable */

	/* H1-O interaction */
	movapd xmm4, [esp + _krf]
	mulpd  xmm4, [esp + _rsqH1O]	/* xmm5=krsq */
	addpd  xmm4, [esp + _rinvH1O]	/* xmm6=rinv+ krsq */
	subpd  xmm4, [esp + _crf]
	
	mulpd  xmm4, [esp + _qqOH] /* xmm6=voul=qq*(rinv+ krsq-crf) */
	addpd  xmm6, xmm4 /* local vctot summation variable */
	
	/* H1-H1 interaction */
	movapd xmm5, [esp + _krf]
	mulpd  xmm5, [esp + _rsqH1H1]	/* xmm5=krsq */
	addpd  xmm5, [esp + _rinvH1H1]	/* xmm6=rinv+ krsq */
	subpd  xmm5, [esp + _crf]
	
	mulpd  xmm5, [esp + _qqHH] /* xmm6=voul=qq*(rinv+ krsq-crf) */
	addpd  xmm6, xmm5 /* local vctot summation variable */

	/* H1-H2 interaction */
	movapd xmm7, [esp + _krf]
	mulpd  xmm7, [esp + _rsqH1H2]	/* xmm5=krsq */
	addpd  xmm7, [esp + _rinvH1H2]	/* xmm6=rinv+ krsq */
	subpd  xmm7, [esp + _crf]
	
	mulpd  xmm7, [esp + _qqHH] /* xmm6=voul=qq*(rinv+ krsq-crf) */
	addpd  xmm6, xmm7 /* local vctot summation variable */

	/* H2-O interaction */
	movapd xmm4, [esp + _krf]
	mulpd  xmm4, [esp + _rsqH2O]	/* xmm5=krsq */
	addpd  xmm4, [esp + _rinvH2O]	/* xmm6=rinv+ krsq */
	subpd  xmm4, [esp + _crf]
	
	mulpd  xmm4, [esp + _qqOH] /* xmm6=voul=qq*(rinv+ krsq-crf) */
	addpd  xmm6, xmm4 /* local vctot summation variable */
	
	/* H2-H1 interaction */
	movapd xmm5, [esp + _krf]
	mulpd  xmm5, [esp + _rsqH2H1]	/* xmm5=krsq */
	addpd  xmm5, [esp + _rinvH2H1]	/* xmm6=rinv+ krsq */
	subpd  xmm5, [esp + _crf]
	
	mulpd  xmm5, [esp + _qqHH] /* xmm6=voul=qq*(rinv+ krsq-crf) */
	addpd  xmm6, xmm5 /* local vctot summation variable */

	/* H2-H2 interaction */
	movapd xmm7, [esp + _krf]
	mulpd  xmm7, [esp + _rsqH2H2]	/* xmm5=krsq */
	addpd  xmm7, [esp + _rinvH2H2]	/* xmm6=rinv+ krsq */
	subpd  xmm7, [esp + _crf]
	
	mulpd  xmm7, [esp + _qqHH] /* xmm6=voul=qq*(rinv+ krsq-crf) */
	addpd  xmm6, xmm7 /* local vctot summation variable */
	movapd [esp + _vctot], xmm6

	/* should we do one more iteration? */
	sub   [esp + _innerk],  2
	jl    .imc2030_checksingle
	jmp   .imc2030_unroll_loop
.imc2030_checksingle:
	mov   edx, [esp + _innerk]
	and   edx, 1
	jnz   .imc2030_dosingle
	jmp   .imc2030_updateouterdata
.imc2030_dosingle:
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]
	
	mov esi, [ebp + _pos]
	lea   eax, [eax + eax*2]  

	/* fetch j coordinates */
	movlpd xmm2, [esi + eax*8]
	movlpd xmm3, [esi + eax*8 + 8]
	movlpd xmm4, [esi + eax*8 + 16]
	movlpd xmm5, [esi + eax*8 + 24]
	movlpd xmm6, [esi + eax*8 + 32]
	movlpd xmm7, [esi + eax*8 + 40]
	movapd 	[esp + _jxO], xmm2
	movapd 	[esp + _jyO], xmm3
	movapd 	[esp + _jzO], xmm4
	movapd 	[esp + _jxH1], xmm5
	movapd 	[esp + _jyH1], xmm6
	movapd 	[esp + _jzH1], xmm7
	movlpd xmm2, [esi + eax*8 + 48]
	movlpd xmm3, [esi + eax*8 + 56]
	movlpd xmm4, [esi + eax*8 + 64]
	movapd 	[esp + _jxH2], xmm2
	movapd 	[esp + _jyH2], xmm3
	movapd 	[esp + _jzH2], xmm4
	
	movapd xmm0, [esp + _ixO]
	movapd xmm1, [esp + _iyO]
	movapd xmm2, [esp + _izO]
	movapd xmm3, [esp + _ixO]
	movapd xmm4, [esp + _iyO]
	movapd xmm5, [esp + _izO]
	subsd  xmm0, [esp + _jxO]
	subsd  xmm1, [esp + _jyO]
	subsd  xmm2, [esp + _jzO]
	subsd  xmm3, [esp + _jxH1]
	subsd  xmm4, [esp + _jyH1]
	subsd  xmm5, [esp + _jzH1]
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + _rsqOO], xmm0
	movapd [esp + _rsqOH1], xmm3

	movapd xmm0, [esp + _ixO]
	movapd xmm1, [esp + _iyO]
	movapd xmm2, [esp + _izO]
	movapd xmm3, [esp + _ixH1]
	movapd xmm4, [esp + _iyH1]
	movapd xmm5, [esp + _izH1]
	subsd  xmm0, [esp + _jxH2]
	subsd  xmm1, [esp + _jyH2]
	subsd  xmm2, [esp + _jzH2]
	subsd  xmm3, [esp + _jxO]
	subsd  xmm4, [esp + _jyO]
	subsd  xmm5, [esp + _jzO]
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + _rsqOH2], xmm0
	movapd [esp + _rsqH1O], xmm3

	movapd xmm0, [esp + _ixH1]
	movapd xmm1, [esp + _iyH1]
	movapd xmm2, [esp + _izH1]
	movapd xmm3, [esp + _ixH1]
	movapd xmm4, [esp + _iyH1]
	movapd xmm5, [esp + _izH1]
	subsd  xmm0, [esp + _jxH1]
	subsd  xmm1, [esp + _jyH1]
	subsd  xmm2, [esp + _jzH1]
	subsd  xmm3, [esp + _jxH2]
	subsd  xmm4, [esp + _jyH2]
	subsd  xmm5, [esp + _jzH2]
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + _rsqH1H1], xmm0
	movapd [esp + _rsqH1H2], xmm3

	movapd xmm0, [esp + _ixH2]
	movapd xmm1, [esp + _iyH2]
	movapd xmm2, [esp + _izH2]
	movapd xmm3, [esp + _ixH2]
	movapd xmm4, [esp + _iyH2]
	movapd xmm5, [esp + _izH2]
	subsd  xmm0, [esp + _jxO]
	subsd  xmm1, [esp + _jyO]
	subsd  xmm2, [esp + _jzO]
	subsd  xmm3, [esp + _jxH1]
	subsd  xmm4, [esp + _jyH1]
	subsd  xmm5, [esp + _jzH1]
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm4, xmm3
	addsd  xmm4, xmm5
	movapd [esp + _rsqH2O], xmm0
	movapd [esp + _rsqH2H1], xmm4

	movapd xmm0, [esp + _ixH2]
	movapd xmm1, [esp + _iyH2]
	movapd xmm2, [esp + _izH2]
	subsd  xmm0, [esp + _jxH2]
	subsd  xmm1, [esp + _jyH2]
	subsd  xmm2, [esp + _jzH2]
	mulsd xmm0, xmm0
	mulsd xmm1, xmm1
	mulsd xmm2, xmm2
	addsd xmm0, xmm1
	addsd xmm0, xmm2
	movapd [esp + _rsqH2H2], xmm0
		
	/* start doing invsqrt use rsq values in xmm0, xmm4 */
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulsd   xmm1, xmm1	/* luA*luA */
	mulsd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	mulsd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subsd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm3, [esp + _half] /* iter1 */
	mulsd   xmm7, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulsd   xmm3, xmm3	/* luA*luA */
	mulsd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	mulsd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subsd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm1, [esp + _half] /* rinv */
	mulsd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvH2H2], xmm1
	movapd [esp + _rinvH2H1], xmm5

	movapd xmm0, [esp + _rsqOO]
	movapd xmm4, [esp + _rsqOH1]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulsd   xmm1, xmm1	/* luA*luA */
	mulsd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	mulsd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subsd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm3, [esp + _half] /* iter1 of  */
	mulsd   xmm7, [esp + _half] /* iter1 of  */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulsd   xmm3, xmm3	/* luA*luA */
	mulsd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	mulsd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subsd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm1, [esp + _half] /* rinv */
	mulsd   xmm5, [esp + _half] /* rinv*/
	movapd [esp + _rinvOO], xmm1
	movapd [esp + _rinvOH1], xmm5

	movapd xmm0, [esp + _rsqOH2]
	movapd xmm4, [esp + _rsqH1O]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulsd   xmm1, xmm1	/* luA*luA */
	mulsd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	mulsd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subsd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm3, [esp + _half] /* iter1 */
	mulsd   xmm7, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulsd   xmm3, xmm3	/* luA*luA */
	mulsd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	mulsd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subsd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm1, [esp + _half] /* rinv */
	mulsd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvOH2], xmm1
	movapd [esp + _rinvH1O], xmm5

	movapd xmm0, [esp + _rsqH1H1]
	movapd xmm4, [esp + _rsqH1H2]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulsd   xmm1, xmm1	/* luA*luA */
	mulsd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	mulsd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subsd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm3, [esp + _half] /* iter1a */
	mulsd   xmm7, [esp + _half] /* iter1b */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulsd   xmm3, xmm3	/* luA*luA */
	mulsd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	mulsd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subsd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm1, [esp + _half] /* rinv */
	mulsd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvH1H1], xmm1
	movapd [esp + _rinvH1H2], xmm5

	movapd xmm0, [esp + _rsqH2O]
	cvtsd2ss xmm1, xmm0	
	rsqrtss xmm1, xmm1
	cvtss2sd xmm1, xmm1
	
	movapd  xmm2, xmm1	/* copy of luA */
	mulsd   xmm1, xmm1	/* luA*luA */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm3, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	mulsd   xmm3, xmm3	/* luA*luA */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm1, [esp + _half] /* rinv */
	movapd [esp + _rinvH2O], xmm1
	
	/* start with OO interaction */
	movapd xmm6, [esp + _krf]
	mulsd  xmm6, [esp + _rsqOO]	/* xmm5=krsq */
	addsd  xmm6, [esp + _rinvOO]	/* xmm6=rinv+ krsq */
	subsd  xmm6, [esp + _crf]
	
	mulsd  xmm6, [esp + _qqOO] /* xmm6=voul=qq*(rinv+ krsq-crf) */
	addsd  xmm6, [esp + _vctot] /* local vctot summation variable */

	/* O-H1 interaction */
	movapd xmm5, [esp + _krf]
	mulsd  xmm5, [esp + _rsqOH1]	/* xmm5=krsq */
	addsd  xmm5, [esp + _rinvOH1]	/* xmm6=rinv+ krsq */
	subsd  xmm5, [esp + _crf]
	
	mulsd  xmm5, [esp + _qqOH] /* xmm6=voul=qq*(rinv+ krsq-crf) */
	addsd  xmm6, xmm5 /* local vctot summation variable */

	/* O-H2 interaction */
	movapd xmm7, [esp + _krf]
	mulsd  xmm7, [esp + _rsqOH2]	/* xmm5=krsq */
	addsd  xmm7, [esp + _rinvOH2]	/* xmm6=rinv+ krsq */
	subsd  xmm7, [esp + _crf]
	
	mulsd  xmm7, [esp + _qqOH] /* xmm6=voul=qq*(rinv+ krsq-crf) */
	addsd  xmm6, xmm7 /* local vctot summation variable */

	/* H1-O interaction */
	movapd xmm4, [esp + _krf]
	mulsd  xmm4, [esp + _rsqH1O]	/* xmm5=krsq */
	addsd  xmm4, [esp + _rinvH1O]	/* xmm6=rinv+ krsq */
	subsd  xmm4, [esp + _crf]
	
	mulsd  xmm4, [esp + _qqOH] /* xmm6=voul=qq*(rinv+ krsq-crf) */
	addsd  xmm6, xmm4 /* local vctot summation variable */
	
	/* H1-H1 interaction */
	movapd xmm5, [esp + _krf]
	mulsd  xmm5, [esp + _rsqH1H1]	/* xmm5=krsq */
	addsd  xmm5, [esp + _rinvH1H1]	/* xmm6=rinv+ krsq */
	subsd  xmm5, [esp + _crf]
	
	mulsd  xmm5, [esp + _qqHH] /* xmm6=voul=qq*(rinv+ krsq-crf) */
	addsd  xmm6, xmm5 /* local vctot summation variable */

	/* H1-H2 interaction */
	movapd xmm7, [esp + _krf]
	mulsd  xmm7, [esp + _rsqH1H2]	/* xmm5=krsq */
	addsd  xmm7, [esp + _rinvH1H2]	/* xmm6=rinv+ krsq */
	subsd  xmm7, [esp + _crf]
	
	mulsd  xmm7, [esp + _qqHH] /* xmm6=voul=qq*(rinv+ krsq-crf) */
	addsd  xmm6, xmm7 /* local vctot summation variable */

	/* H2-O interaction */
	movapd xmm4, [esp + _krf]
	mulsd  xmm4, [esp + _rsqH2O]	/* xmm5=krsq */
	addsd  xmm4, [esp + _rinvH2O]	/* xmm6=rinv+ krsq */
	subsd  xmm4, [esp + _crf]
	
	mulsd  xmm4, [esp + _qqOH] /* xmm6=voul=qq*(rinv+ krsq-crf) */
	addsd  xmm6, xmm4 /* local vctot summation variable */
	
	/* H2-H1 interaction */
	movapd xmm5, [esp + _krf]
	mulsd  xmm5, [esp + _rsqH2H1]	/* xmm5=krsq */
	addsd  xmm5, [esp + _rinvH2H1]	/* xmm6=rinv+ krsq */
	subsd  xmm5, [esp + _crf]
	
	mulsd  xmm5, [esp + _qqHH] /* xmm6=voul=qq*(rinv+ krsq-crf) */
	addsd  xmm6, xmm5 /* local vctot summation variable */

	/* H2-H2 interaction */
	movapd xmm7, [esp + _krf]
	mulsd  xmm7, [esp + _rsqH2H2]	/* xmm5=krsq */
	addsd  xmm7, [esp + _rinvH2H2]	/* xmm6=rinv+ krsq */
	subsd  xmm7, [esp + _crf]
	
	mulsd  xmm7, [esp + _qqHH] /* xmm6=voul=qq*(rinv+ krsq-crf) */
	addsd  xmm6, xmm7 /* local vctot summation variable */
	movlpd [esp + _vctot], xmm6
	
.imc2030_updateouterdata:
	/* get gid */
	mov   edx, [ebp + _gid]  
	mov   edx, [edx]
	add   [ebp + _gid],  4	

	/* accumulate total potential energy and update it */
	movapd xmm7, [esp + _vctot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */
        
	/* add earlier value from mem */
	mov   eax, [ebp + _Vc]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* finish if last */
	mov   ecx, [ebp + _nri]
	dec ecx
	jecxz .imc2030_end
	/* not last, iterate once more! */ 
	mov [ebp + _nri], ecx
	jmp .imc2030_outer
.imc2030_end:
	emms
	mov eax, [esp + _salign]
	add esp, eax
	add esp, 724
	pop edi
	pop esi
        pop edx
        pop ecx
        pop ebx
        pop eax
	leave
	ret

	
	

.globl mcinl3000_sse2
	.type mcinl3000_sse2,@function
mcinl3000_sse2:	
.equ		_nri,		8
.equ		_iinr,		12
.equ		_jindex,	16
.equ		_jjnr,		20
.equ		_shift,		24
.equ		_shiftvec,	28
.equ		_gid,		32
.equ		_pos,		36		
.equ		_charge,	40
.equ		_facel,		44 /* double */
.equ		_Vc,		52			
.equ		_tabscale,	56 /* double */
.equ		_VFtab,		64
	/* stack offsets for local variables */ 
	/* bottom of stack is cache-aligned for sse use */
.equ		_ix,		0
.equ		_iy,		16
.equ		_iz,		32
.equ		_iq,		48
.equ		_tsc,		64
.equ		_qq,		80
.equ		_vctot,		96
.equ		_half,		112
.equ		_three,		128
.equ		_is3,		144
.equ		_ii3,		148
.equ		_innerjjnr,	152
.equ		_innerk,	156
.equ		_salign,	160
	push ebp
	mov ebp,esp	
        push eax
        push ebx
        push ecx
        push edx
	push esi
	push edi
	sub esp, 164		/* local stack space */
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + _salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm2, [sse2_three]
	movsd xmm3, [ebp + _tabscale]
	movapd [esp + _half],  xmm0
	movapd [esp + _three],  xmm2
	shufpd xmm3, xmm3, 0
	movapd [esp + _tsc], xmm3

	/* assume we have at least one i particle - start directly */	
.imc3000_outer:
	mov   eax, [ebp + _shift]      /* eax = pointer into shift[] */
	mov   ebx, [eax]		/* ebx=shift[n] */
	add   [ebp + _shift],  4  /* advance pointer one step */
	
	lea   ebx, [ebx + ebx*2]        /* ebx=3*is */

	mov   eax, [ebp + _shiftvec]   /* eax = base of shiftvec[] */

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	add   [ebp + _iinr],  4   /* advance pointer */
	mov   ebx, [ecx]	        /* ebx =ii */

	mov   edx, [ebp + _charge]
	movsd xmm3, [edx + ebx*8]	
	mulsd xmm3, [ebp + _facel]
	shufpd xmm3, xmm3, 0

	lea   ebx, [ebx + ebx*2]	/* ebx = 3*ii=ii3 */
	mov   eax, [ebp + _pos]        /* eax = base of pos[] */ 

	addsd xmm0, [eax + ebx*8]
	addsd xmm1, [eax + ebx*8 + 8]
	addsd xmm2, [eax + ebx*8 + 16]

	movapd [esp + _iq], xmm3
	
	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0

	movapd [esp + _ix], xmm0
	movapd [esp + _iy], xmm1
	movapd [esp + _iz], xmm2

	mov   [esp + _ii3], ebx
	
	/* clear vctot */
	xorpd xmm4, xmm4
	movapd [esp + _vctot], xmm4
	
	mov   eax, [ebp + _jindex]
	mov   ecx, [eax]	         /* jindex[n] */
	mov   edx, [eax + 4]	         /* jindex[n+1] */
	add   [ebp + _jindex],  4
	sub   edx, ecx                   /* number of innerloop atoms */

	mov   esi, [ebp + _pos]
	mov   eax, [ebp + _jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + _innerjjnr], eax     /* pointer to jjnr[nj0] */
	sub   edx,  2
	mov   [esp + _innerk], edx        /* number of innerloop atoms */
	jge   .imc3000_unroll_loop
	jmp   .imc3000_checksingle
.imc3000_unroll_loop:
	/* twice unrolled innerloop here */
	mov   edx, [esp + _innerjjnr]   /* pointer to jjnr[k] */
	mov   eax, [edx]
	mov   ebx, [edx + 4]
	add   [esp + _innerjjnr], 8	/* advance pointer (unrolled 2) */

	mov esi, [ebp + _charge]        /* base of charge[] */

	movlpd xmm3, [esi + eax*8]
	movhpd xmm3, [esi + ebx*8]

	movapd xmm2, [esp + _iq]
	mulpd  xmm3, xmm2
	movapd [esp + _qq], xmm3	
	
	mov esi, [ebp + _pos]		/* base of pos[] */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */
	lea   ebx, [ebx + ebx*2]	

	/* move two coordinates to xmm0-xmm2 */
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]		

	/* move _ix-iz to xmm4-xmm6 */
	movapd xmm4, [esp + _ix]
	movapd xmm5, [esp + _iy]
	movapd xmm6, [esp + _iz]

	/* calc dr */
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	/* square it */
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6
	/* rsq in xmm4 */

	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm5, xmm5
	cvtps2pd xmm2, xmm5	/* lu in low xmm2 */

	/* lookup seed in xmm2 */
	movapd xmm5, xmm2	/* copy of lu */
	mulpd xmm2, xmm2	/* lu*lu */
	movapd xmm1, [esp + _three]
	mulpd xmm2, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subpd xmm1, xmm2	/* 30-rsq*lu*lu */
	mulpd xmm1, xmm5	
	mulpd xmm1, xmm0	/* xmm0=iter1 of rinv (new lu) */

	movapd xmm5, xmm1	/* copy of lu */
	mulpd xmm1, xmm1	/* lu*lu */
	movapd xmm2, [esp + _three]
	mulpd xmm1, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subpd xmm2, xmm1	/* 30-rsq*lu*lu */
	mulpd xmm2, xmm5	
	mulpd xmm0, xmm2	/* xmm0=iter2 of rinv (new lu) */
	mulpd xmm4, xmm0	/* xmm4=r */
	mulpd xmm4, [esp + _tsc]

	cvttpd2pi mm6, xmm4	/* mm6 = lu idx */
	cvtpi2pd xmm5, mm6
	subpd xmm4, xmm5
	movapd xmm1, xmm4	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qq]
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
	/* at this point mm5 contains vcoul  */
	/* increment vcoul - then we can get rid of mm5 */
	/* update vctot */
	addpd  xmm5, [esp + _vctot]
	movapd [esp + _vctot], xmm5 

	/* should we do one more iteration? */
	sub   [esp + _innerk],  2
	jl    .imc3000_checksingle
	jmp   .imc3000_unroll_loop
.imc3000_checksingle:
	mov   edx, [esp + _innerk]
	and   edx, 1
	jnz    .imc3000_dosingle
	jmp    .imc3000_updateouterdata
.imc3000_dosingle:
	mov esi, [ebp + _charge]
	mov edi, [ebp + _pos]
	mov   ecx, [esp + _innerjjnr]
	mov   eax, [ecx]	
	xorpd  xmm6, xmm6
	movlpd xmm6, [esi + eax*8]	/* xmm6(0) has the charge */	
	mulsd  xmm6, [esp + _iq]
	movapd [esp + _qq], xmm6
		
	lea   eax, [eax + eax*2]
	
	/* move coordinates to xmm0-xmm2 */
	movlpd xmm0, [edi + eax*8]
	movlpd xmm1, [edi + eax*8 + 8]
	movlpd xmm2, [edi + eax*8 + 16]

	/* move _ix-iz to xmm4-xmm6 */
	movapd xmm4, [esp + _ix]
	movapd xmm5, [esp + _iy]
	movapd xmm6, [esp + _iz]

	/* calc dr */
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	/* square it */
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6
	/* rsq in xmm4 */

	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm5, xmm5
	cvtss2sd xmm2, xmm5	/* lu in low xmm2 */

	/* lookup seed in xmm2 */
	movapd xmm5, xmm2	/* copy of lu */
	mulsd xmm2, xmm2	/* lu*lu */
	movapd xmm1, [esp + _three]
	mulsd xmm2, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subsd xmm1, xmm2	/* 30-rsq*lu*lu */
	mulsd xmm1, xmm5	
	mulsd xmm1, xmm0	/* xmm0=iter1 of rinv (new lu) */

	movapd xmm5, xmm1	/* copy of lu */
	mulsd xmm1, xmm1	/* lu*lu */
	movapd xmm2, [esp + _three]
	mulsd xmm1, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subsd xmm2, xmm1	/* 30-rsq*lu*lu */
	mulsd xmm2, xmm5	
	mulsd xmm0, xmm2	/* xmm0=iter2 of rinv (new lu) */
	
	mulsd xmm4, xmm0	/* xmm4=r */
	mulsd xmm4, [esp + _tsc]
	
	cvttsd2si eax, xmm4	/* mm6 = lu idx */
	cvtsi2sd xmm5, eax
	subsd xmm4, xmm5
	movapd xmm1, xmm4	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	
	mov  esi, [ebp + _VFtab]

	/* Coulomb */
	movupd xmm4, [esi + eax*8]	/* Y1 F1 */
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1  */
	unpckhpd xmm5, xmm3	/* F1  */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1  */
	unpckhpd xmm7, xmm3	/* H1  */	
	/* table ready in xmm4-xmm7 */

	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qq]
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
	/* at this point mm5 contains vcoul */
	/* increment vcoul - then we can get rid of mm5 */
	/* update vctot */
	addsd  xmm5, [esp + _vctot]
	movsd [esp + _vctot], xmm5 

.imc3000_updateouterdata:
	/* get group index for i particle */
	mov   edx, [ebp + _gid]      /* get group index for this i particle */
	mov   edx, [edx]
	add   [ebp + _gid],  4  /* advance pointer */

	/* accumulate total potential energy and update it */
	movapd xmm7, [esp + _vctot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */

	/* add earlier value from mem */
	mov   eax, [ebp + _Vc]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* finish if last */
	mov   ecx, [ebp + _nri]
	dec ecx
	jecxz .imc3000_end
	/* not last, iterate once more! */ 
	mov [ebp + _nri], ecx
	jmp .imc3000_outer
.imc3000_end:
	emms
	mov eax, [esp + _salign]
	add esp, eax
	add esp, 164
	pop edi
	pop esi
        pop edx
        pop ecx
        pop ebx
        pop eax
	leave
	ret




.globl mcinl3020_sse2
	.type mcinl3020_sse2,@function
mcinl3020_sse2:	
.equ		_nri,		8
.equ		_iinr,		12
.equ		_jindex,	16
.equ		_jjnr,		20
.equ		_shift,		24
.equ		_shiftvec,	28
.equ		_gid,		32
.equ		_pos,		36		
.equ		_charge,	40
.equ		_facel,		44 /* double */
.equ		_Vc,		52			
.equ		_tabscale,	56 /* double */	
.equ		_VFtab,		64	
	/* stack offsets for local variables */ 
	/* bottom of stack is cache-aligned for sse use */
.equ		_ixO,		0
.equ		_iyO,		16
.equ		_izO,		32
.equ		_ixH1,		48
.equ		_iyH1,		64
.equ		_izH1,		80
.equ		_ixH2,		96
.equ		_iyH2,		112
.equ		_izH2,		128
.equ		_iqO,		144 
.equ		_iqH,		160 
.equ		_qqO,		176
.equ		_qqH,		192
.equ		_rinvO,		208
.equ		_rinvH1,	224
.equ		_rinvH2,	240		
.equ		_rO,		256
.equ		_rH1,		272
.equ		_rH2,		288
.equ		_tsc,		304
.equ		_vctot,		320
.equ		_half,		336
.equ		_three,		352
.equ		_is3,		368
.equ		_ii3,		372
.equ		_innerjjnr,	376
.equ		_innerk,	380
.equ		_salign,	384
	push ebp
	mov ebp,esp	
        push eax
        push ebx
        push ecx
        push edx
	push esi
	push edi
	sub esp, 388		/* local stack space */
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + _salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm2, [sse2_three]
	movsd xmm3, [ebp + _tabscale]
	
	movapd [esp + _half],  xmm0
	movapd [esp + _three],  xmm2
	shufpd xmm3, xmm3, 0 
	movapd [esp + _tsc], xmm3
	
	/* assume we have at least one i particle - start directly */
	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	mov   ebx, [ecx]	        /* ebx =ii */

	mov   edx, [ebp + _charge]
	movsd xmm3, [edx + ebx*8]	
	movsd xmm4, [edx + ebx*8 + 8]	
	movsd xmm5, [ebp + _facel]
	mulsd  xmm3, xmm5
	mulsd  xmm4, xmm5

	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	movapd [esp + _iqO], xmm3
	movapd [esp + _iqH], xmm4
	
.imc3020_outer:
	mov   eax, [ebp + _shift]      /* eax = pointer into shift[] */
	mov   ebx, [eax]		/* ebx=shift[n] */
	add   [ebp + _shift],  4  /* advance pointer one step */
	
	lea   ebx, [ebx + ebx*2]        /* ebx=3*is */

	mov   eax, [ebp + _shiftvec]   /* eax = base of shiftvec[] */

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	add   [ebp + _iinr],  4   /* advance pointer */
	mov   ebx, [ecx]	        /* ebx =ii */

	movapd xmm3, xmm0
	movapd xmm4, xmm1
	movapd xmm5, xmm2

	lea   ebx, [ebx + ebx*2]	/* ebx = 3*ii=ii3 */
	mov   eax, [ebp + _pos]        /* eax = base of pos[] */ 
	mov   [esp + _ii3], ebx

	addsd xmm3, [eax + ebx*8]
	addsd xmm4, [eax + ebx*8 + 8]
	addsd xmm5, [eax + ebx*8 + 16]		
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _ixO], xmm3
	movapd [esp + _iyO], xmm4
	movapd [esp + _izO], xmm5

	movsd xmm3, xmm0
	movsd xmm4, xmm1
	movsd xmm5, xmm2
	addsd xmm0, [eax + ebx*8 + 24]
	addsd xmm1, [eax + ebx*8 + 32]
	addsd xmm2, [eax + ebx*8 + 40]		
	addsd xmm3, [eax + ebx*8 + 48]
	addsd xmm4, [eax + ebx*8 + 56]
	addsd xmm5, [eax + ebx*8 + 64]		

	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _ixH1], xmm0
	movapd [esp + _iyH1], xmm1
	movapd [esp + _izH1], xmm2
	movapd [esp + _ixH2], xmm3
	movapd [esp + _iyH2], xmm4
	movapd [esp + _izH2], xmm5
	
	/* clear vctot */
	xorpd xmm4, xmm4
	movapd [esp + _vctot], xmm4
	
	mov   eax, [ebp + _jindex]
	mov   ecx, [eax]	         /* jindex[n] */
	mov   edx, [eax + 4]	         /* jindex[n+1] */
	add   [ebp + _jindex],  4
	sub   edx, ecx                   /* number of innerloop atoms */

	mov   esi, [ebp + _pos]
	mov   eax, [ebp + _jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + _innerjjnr], eax     /* pointer to jjnr[nj0] */
	sub   edx,  2
	mov   [esp + _innerk], edx        /* number of innerloop atoms */
	jge   .imc3020_unroll_loop
	jmp   .imc3020_checksingle
.imc3020_unroll_loop:
	/* twice unrolled innerloop here */
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]	
	mov   ebx, [edx + 4]

	add   [esp + _innerjjnr],  8	/* advance pointer (unrolled 2) */
	mov esi, [ebp + _charge]        /* base of charge[] */
	
	movlpd xmm3, [esi + eax*8]
	movhpd xmm3, [esi + ebx*8]
	movapd xmm4, xmm3	     
	mulpd  xmm3, [esp + _iqO]
	mulpd  xmm4, [esp + _iqH]

	movapd  [esp + _qqO], xmm3
	movapd  [esp + _qqH], xmm4	

	mov esi, [ebp + _pos]       /* base of pos[] */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */
	lea   ebx, [ebx + ebx*2]	

	/* move two coordinates to xmm0-xmm2 */	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]		

	/* move ixO-izO to xmm4-xmm6 */
	movapd xmm4, [esp + _ixO]
	movapd xmm5, [esp + _iyO]
	movapd xmm6, [esp + _izO]

	/* calc dr */
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	/* square it */
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6
	movapd xmm7, xmm4
	/* rsqO in xmm7 */

	/* move ixH1-izH1 to xmm4-xmm6 */
	movapd xmm4, [esp + _ixH1]
	movapd xmm5, [esp + _iyH1]
	movapd xmm6, [esp + _izH1]

	/* calc dr */
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	/* square it */
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm6, xmm5
	addpd xmm6, xmm4
	/* rsqH1 in xmm6 */

	/* move ixH2-izH2 to xmm3-xmm5 */ 
	movapd xmm3, [esp + _ixH2]
	movapd xmm4, [esp + _iyH2]
	movapd xmm5, [esp + _izH2]

	/* calc dr */
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2

	/* square it */
	mulpd xmm3,xmm3
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	addpd xmm5, xmm4
	addpd xmm5, xmm3
	/* rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 */

	/* start with rsqO - put seed in xmm2 */
	cvtpd2ps xmm2, xmm7	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulpd   xmm2, xmm7	/* rsq*lu*lu */
	subpd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulpd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulpd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm2, xmm7
	movapd xmm3, xmm4
	mulpd xmm4, xmm4	/* lu*lu */
	mulpd xmm2, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subpd xmm4, xmm2	/* 3-rsq*lu*lu */
	mulpd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulpd xmm4, [esp + _half] /* rinv */
	movapd  [esp + _rinvO], xmm4	/* rinvO in xmm4 */
	mulpd   xmm7, xmm4
	movapd  [esp + _rO], xmm7	/* r in xmm7 */
	
	/* rsqH1 - seed in xmm2 */
	cvtpd2ps xmm2, xmm6	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulpd   xmm2, xmm6	/* rsq*lu*lu */
	subpd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulpd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulpd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm2, xmm6
	movapd xmm3, xmm4
	mulpd xmm4, xmm4	/* lu*lu */
	mulpd xmm2, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subpd xmm4, xmm2	/* 3-rsq*lu*lu */
	mulpd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulpd xmm4, [esp + _half] /* rinv */
	movapd [esp + _rinvH1], xmm4	/* rinvH1 */
	mulpd  xmm6, xmm4
	movapd [esp + _rH1], xmm6	/* rH1 */
	
	/* rsqH2 - seed in xmm2 */
	cvtpd2ps xmm2, xmm5	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulpd   xmm2, xmm5	/* rsq*lu*lu */
	subpd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulpd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulpd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm2, xmm5
	movapd xmm3, xmm4
	mulpd xmm4, xmm4	/* lu*lu */
	mulpd xmm2, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subpd xmm4, xmm2	/* 3-rsq*lu*lu */
	mulpd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulpd xmm4, [esp + _half] /* rinv */
	movapd [esp + _rinvH2], xmm4 /* rinv */
	mulpd xmm5, xmm4
	movapd [esp + _rH2], xmm5 /* r */

	/* do O interactions */
	/* rO is still in xmm7 */
	mulpd xmm7, [esp + _tsc]
	cvttpd2pi mm6, xmm7	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm7, xmm6
	movapd xmm1, xmm7	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqO]
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul */
        /* increment vcoul - then we can get rid of mm5 */
        addpd  xmm5, [esp + _vctot]
        movapd [esp + _vctot], xmm5 

	/* Done with O interactions - now H1! */
	movapd xmm7, [esp + _rH1]
	mulpd xmm7, [esp + _tsc]
	cvttpd2pi mm6, xmm7	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm7, xmm6
	movapd xmm1, xmm7	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqH]
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul */
        /* increment vcoul */
        addpd  xmm5, [esp + _vctot]
	movapd [esp + _vctot], xmm5
	
	/* Done with H1, finally we do H2 interactions */
	movapd xmm7, [esp + _rH2]
	mulpd   xmm7, [esp + _tsc]
	cvttpd2pi mm6, xmm7	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm7, xmm6
	movapd xmm1, xmm7	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqH]
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul */
        /* increment vcoul */
        addpd  xmm5, [esp + _vctot]
	movapd [esp + _vctot], xmm5

	/* should we do one more iteration? */
	sub   [esp + _innerk],  2
	jl    .imc3020_checksingle
	jmp   .imc3020_unroll_loop
.imc3020_checksingle:	
	mov   edx, [esp + _innerk]
	and   edx, 1
	jnz   .imc3020_dosingle
	jmp   .imc3020_updateouterdata
.imc3020_dosingle:
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]	

	mov esi, [ebp + _charge]        /* base of charge[] */
	xorpd xmm3, xmm3
	movlpd xmm3, [esi + eax*8]
	movapd xmm4, xmm3	     
	mulpd  xmm3, [esp + _iqO]
	mulpd  xmm4, [esp + _iqH]

	movapd  [esp + _qqO], xmm3
	movapd  [esp + _qqH], xmm4	

	mov esi, [ebp + _pos]       /* base of pos[] */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */
	/* move coordinates to xmm0-xmm2 */	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]

	/* move ixO-izO to xmm4-xmm6 */
	movapd xmm4, [esp + _ixO]
	movapd xmm5, [esp + _iyO]
	movapd xmm6, [esp + _izO]

	/* calc dr */
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	/* square it */
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6
	movapd xmm7, xmm4
	/* rsqO in xmm7 */

	/* move ixH1-izH1 to xmm4-xmm6 */
	movapd xmm4, [esp + _ixH1]
	movapd xmm5, [esp + _iyH1]
	movapd xmm6, [esp + _izH1]

	/* calc dr */
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	/* square it */
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm6, xmm5
	addsd xmm6, xmm4
	/* rsqH1 in xmm6 */

	/* move ixH2-izH2 to xmm3-xmm5 */ 
	movapd xmm3, [esp + _ixH2]
	movapd xmm4, [esp + _iyH2]
	movapd xmm5, [esp + _izH2]

	/* calc dr */
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2

	/* square it */
	mulsd xmm3,xmm3
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	addsd xmm5, xmm4
	addsd xmm5, xmm3
	/* rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 */

	/* start with rsqO - put seed in xmm2 */
	cvtsd2ss xmm2, xmm7	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulsd   xmm2, xmm7	/* rsq*lu*lu */
	subsd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulsd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulsd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm2, xmm7
	movapd xmm3, xmm4
	mulsd xmm4, xmm4	/* lu*lu */
	mulsd xmm2, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subsd xmm4, xmm2	/* 3-rsq*lu*lu */
	mulsd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulsd xmm4, [esp + _half] /* rinv */
	movapd  [esp + _rinvO], xmm4	/* rinvO in xmm4 */
	mulsd   xmm7, xmm4
	movapd  [esp + _rO], xmm7	/* r in xmm7 */
	
	/* rsqH1 - seed in xmm2 */
	cvtsd2ss xmm2, xmm6	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulsd   xmm2, xmm6	/* rsq*lu*lu */
	subsd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulsd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulsd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm2, xmm6
	movapd xmm3, xmm4
	mulsd xmm4, xmm4	/* lu*lu */
	mulsd xmm2, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subsd xmm4, xmm2	/* 3-rsq*lu*lu */
	mulsd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulsd xmm4, [esp + _half] /* rinv */
	movapd [esp + _rinvH1], xmm4	/* rinvH1 */
	mulsd  xmm6, xmm4
	movapd [esp + _rH1], xmm6	/* rH1 */
	
	/* rsqH2 - seed in xmm2 */
	cvtsd2ss xmm2, xmm5	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulsd   xmm2, xmm5	/* rsq*lu*lu */
	subsd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulsd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulsd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm2, xmm5
	movapd xmm3, xmm4
	mulsd xmm4, xmm4	/* lu*lu */
	mulsd xmm2, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subsd xmm4, xmm2	/* 3-rsq*lu*lu */
	mulsd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulsd xmm4, [esp + _half] /* rinv */
	movapd [esp + _rinvH2], xmm4 /* rinv */
	mulsd xmm5, xmm4
	movapd [esp + _rH2], xmm5 /* r */

	/* do O interactions */
	movd mm0, eax	
	/* rO is still in xmm7 */
	mulsd   xmm7, [esp + _tsc]
	cvttsd2si eax, xmm7	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm7, xmm6
	movapd xmm1, xmm7	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */
	xorpd xmm3, xmm3	
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1  */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqO]
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul */
        /* increment vcoul - then we can get rid of mm5 */
        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5 

	/* Done with O interactions - now H1! */
	movapd xmm7, [esp + _rH1]
	mulsd xmm7, [esp + _tsc]
	cvttsd2si eax, xmm7	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm7, xmm6
	movapd xmm1, xmm7	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	
	movupd xmm4, [esi + eax*8]	/* Y1 F1 */
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1  */
	unpckhpd xmm5, xmm3	/* F1  */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqH]
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul */
        /* increment vcoul */
        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5 


	/* Done with H1, finally we do H2 interactions */
	movapd xmm7, [esp + _rH2]
	mulsd   xmm7, [esp + _tsc]
	cvttsd2si eax, xmm7	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm7, xmm6
	movapd xmm1, xmm7	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqH]
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul */
        /* increment vcoul */
        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5 

.imc3020_updateouterdata:
	/* get gid */
	mov   edx, [ebp + _gid]  
	mov   edx, [edx]
	add   [ebp + _gid],  4	

	/* accumulate total potential energy and update it */
	movapd xmm7, [esp + _vctot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */
        
	/* add earlier value from mem */
	mov   eax, [ebp + _Vc]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* finish if last */
	mov   ecx, [ebp + _nri]
	dec ecx
	jecxz .imc3020_end
	/* not last, iterate once more! */ 
	mov [ebp + _nri], ecx
	jmp .imc3020_outer
.imc3020_end:
	emms
	mov eax, [esp + _salign]
	add esp, eax
	add esp, 388
	pop edi
	pop esi
        pop edx
        pop ecx
        pop ebx
        pop eax
	leave
	ret
	

.globl mcinl3030_sse2
	.type mcinl3030_sse2,@function
mcinl3030_sse2:
.equ		_nri,		8
.equ		_iinr,		12
.equ		_jindex,	16
.equ		_jjnr,		20
.equ		_shift,		24
.equ		_shiftvec,	28
.equ		_gid,		32
.equ		_pos,		36		
.equ		_charge,	40
.equ		_facel,		44 /* double */	
.equ		_Vc,		52			
.equ		_tabscale,	56 /* double */	
.equ		_VFtab,		64
	/* stack offsets for local variables */ 
	/* bottom of stack is cache-aligned for sse use */
.equ		_ixO,		0
.equ		_iyO,		16
.equ		_izO,		32
.equ		_ixH1,		48
.equ		_iyH1,		64
.equ		_izH1,		80
.equ		_ixH2,		96
.equ		_iyH2,		112
.equ		_izH2,		128
.equ		_jxO,		144
.equ		_jyO,		160
.equ		_jzO,		176
.equ		_jxH1,		192
.equ		_jyH1,		208
.equ		_jzH1,		224
.equ		_jxH2,		240
.equ		_jyH2,		256
.equ		_jzH2,		272
.equ		_qqOO,		288
.equ		_qqOH,		304
.equ		_qqHH,		320
.equ		_tsc,		336
.equ		_vctot,		352
.equ		_half,		368
.equ		_three,		384
.equ		_rsqOO,		400
.equ		_rsqOH1,	416
.equ		_rsqOH2,	432
.equ		_rsqH1O,	448
.equ		_rsqH1H1,	464
.equ		_rsqH1H2,	480
.equ		_rsqH2O,	496
.equ		_rsqH2H1,	512
.equ		_rsqH2H2,	528
.equ		_rinvOO,	544
.equ		_rinvOH1,	560
.equ		_rinvOH2,	576
.equ		_rinvH1O,	592
.equ		_rinvH1H1,	608
.equ		_rinvH1H2,	624
.equ		_rinvH2O,	640
.equ		_rinvH2H1,	656
.equ		_rinvH2H2,	672	
.equ		_is3,		688
.equ		_ii3,		692
.equ		_innerjjnr,	696
.equ		_innerk,	700
.equ		_salign,	704	
	push ebp
	mov ebp,esp	
        push eax
        push ebx
        push ecx
        push edx
	push esi
	push edi
	sub esp, 708		/* local stack space */
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + _salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm2, [sse2_three]
	movsd xmm3, [ebp + _tabscale]
	movapd [esp + _half],  xmm0
	movapd [esp + _three], xmm2
	shufpd xmm3, xmm3, 0
	movapd [esp + _tsc],  xmm3

	/* assume we have at least one i particle - start directly */
	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	mov   ebx, [ecx]	        /* ebx =ii */

	mov   edx, [ebp + _charge]
	movsd xmm3, [edx + ebx*8]	
	movsd xmm4, xmm3
	movsd xmm5, [edx + ebx*8 + 8]	
	movsd xmm6, [ebp + _facel]
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm5
	mulsd  xmm5, xmm5
	mulsd  xmm3, xmm6
	mulsd  xmm4, xmm6
	mulsd  xmm5, xmm6
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _qqOO], xmm3
	movapd [esp + _qqOH], xmm4
	movapd [esp + _qqHH], xmm5		

.imc3030_outer:
	mov   eax, [ebp + _shift]      /* eax = pointer into shift[] */
	mov   ebx, [eax]		/* ebx=shift[n] */
	add   [ebp + _shift],  4  /* advance pointer one step */
	
	lea   ebx, [ebx + ebx*2]        /* ebx=3*is */
	mov   [esp + _is3],ebx    	/* store is3 */

	mov   eax, [ebp + _shiftvec]   /* eax = base of shiftvec[] */

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	add   [ebp + _iinr],  4   /* advance pointer */
	mov   ebx, [ecx]	        /* ebx =ii */

	lea   ebx, [ebx + ebx*2]	/* ebx = 3*ii=ii3 */
	mov   eax, [ebp + _pos]        /* eax = base of pos[] */ 
	mov   [esp + _ii3], ebx	
	
	movapd xmm3, xmm0
	movapd xmm4, xmm1
	movapd xmm5, xmm2
	addsd xmm3, [eax + ebx*8]
	addsd xmm4, [eax + ebx*8 + 8]
	addsd xmm5, [eax + ebx*8 + 16]		
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _ixO], xmm3
	movapd [esp + _iyO], xmm4
	movapd [esp + _izO], xmm5

	movsd xmm3, xmm0
	movsd xmm4, xmm1
	movsd xmm5, xmm2
	addsd xmm0, [eax + ebx*8 + 24]
	addsd xmm1, [eax + ebx*8 + 32]
	addsd xmm2, [eax + ebx*8 + 40]		
	addsd xmm3, [eax + ebx*8 + 48]
	addsd xmm4, [eax + ebx*8 + 56]
	addsd xmm5, [eax + ebx*8 + 64]		

	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _ixH1], xmm0
	movapd [esp + _iyH1], xmm1
	movapd [esp + _izH1], xmm2
	movapd [esp + _ixH2], xmm3
	movapd [esp + _iyH2], xmm4
	movapd [esp + _izH2], xmm5

	/* clear vctot */
	xorpd xmm4, xmm4
	movapd [esp + _vctot], xmm4
	
	mov   eax, [ebp + _jindex]
	mov   ecx, [eax]	         /* jindex[n] */
	mov   edx, [eax + 4]	         /* jindex[n+1] */
	add   [ebp + _jindex],  4
	sub   edx, ecx                   /* number of innerloop atoms */

	mov   esi, [ebp + _pos]
	mov   eax, [ebp + _jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + _innerjjnr], eax     /* pointer to jjnr[nj0] */
	sub   edx,  2
	mov   [esp + _innerk], edx        /* number of innerloop atoms */
	jge   .imc3030_unroll_loop
	jmp   .imc3030_checksingle
.imc3030_unroll_loop:	
	/* twice unrolled innerloop here */
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]	
	mov   ebx, [edx + 4] 
	
	add   [esp + _innerjjnr], 8 /* advance pointer (unrolled 2) */

	mov esi, [ebp + _pos]       /* base of pos[] */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */
	lea   ebx, [ebx + ebx*2]	
	
	/* move j coordinates to local temp variables */
	movlpd xmm2, [esi + eax*8]
	movlpd xmm3, [esi + eax*8 + 8]
	movlpd xmm4, [esi + eax*8 + 16]
	movlpd xmm5, [esi + eax*8 + 24]
	movlpd xmm6, [esi + eax*8 + 32]
	movlpd xmm7, [esi + eax*8 + 40]
	movhpd xmm2, [esi + ebx*8]
	movhpd xmm3, [esi + ebx*8 + 8]
	movhpd xmm4, [esi + ebx*8 + 16]
	movhpd xmm5, [esi + ebx*8 + 24]
	movhpd xmm6, [esi + ebx*8 + 32]
	movhpd xmm7, [esi + ebx*8 + 40]
	movapd 	[esp + _jxO], xmm2
	movapd 	[esp + _jyO], xmm3
	movapd 	[esp + _jzO], xmm4
	movapd 	[esp + _jxH1], xmm5
	movapd 	[esp + _jyH1], xmm6
	movapd 	[esp + _jzH1], xmm7
	movlpd xmm2, [esi + eax*8 + 48]
	movlpd xmm3, [esi + eax*8 + 56]
	movlpd xmm4, [esi + eax*8 + 64]
	movhpd xmm2, [esi + ebx*8 + 48]
	movhpd xmm3, [esi + ebx*8 + 56]
	movhpd xmm4, [esi + ebx*8 + 64]
	movapd 	[esp + _jxH2], xmm2
	movapd 	[esp + _jyH2], xmm3
	movapd 	[esp + _jzH2], xmm4
	
	movapd xmm0, [esp + _ixO]
	movapd xmm1, [esp + _iyO]
	movapd xmm2, [esp + _izO]
	movapd xmm3, [esp + _ixO]
	movapd xmm4, [esp + _iyO]
	movapd xmm5, [esp + _izO]
	subpd  xmm0, [esp + _jxO]
	subpd  xmm1, [esp + _jyO]
	subpd  xmm2, [esp + _jzO]
	subpd  xmm3, [esp + _jxH1]
	subpd  xmm4, [esp + _jyH1]
	subpd  xmm5, [esp + _jzH1]
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + _rsqOO], xmm0
	movapd [esp + _rsqOH1], xmm3

	movapd xmm0, [esp + _ixO]
	movapd xmm1, [esp + _iyO]
	movapd xmm2, [esp + _izO]
	movapd xmm3, [esp + _ixH1]
	movapd xmm4, [esp + _iyH1]
	movapd xmm5, [esp + _izH1]
	subpd  xmm0, [esp + _jxH2]
	subpd  xmm1, [esp + _jyH2]
	subpd  xmm2, [esp + _jzH2]
	subpd  xmm3, [esp + _jxO]
	subpd  xmm4, [esp + _jyO]
	subpd  xmm5, [esp + _jzO]
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + _rsqOH2], xmm0
	movapd [esp + _rsqH1O], xmm3

	movapd xmm0, [esp + _ixH1]
	movapd xmm1, [esp + _iyH1]
	movapd xmm2, [esp + _izH1]
	movapd xmm3, [esp + _ixH1]
	movapd xmm4, [esp + _iyH1]
	movapd xmm5, [esp + _izH1]
	subpd  xmm0, [esp + _jxH1]
	subpd  xmm1, [esp + _jyH1]
	subpd  xmm2, [esp + _jzH1]
	subpd  xmm3, [esp + _jxH2]
	subpd  xmm4, [esp + _jyH2]
	subpd  xmm5, [esp + _jzH2]
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + _rsqH1H1], xmm0
	movapd [esp + _rsqH1H2], xmm3

	movapd xmm0, [esp + _ixH2]
	movapd xmm1, [esp + _iyH2]
	movapd xmm2, [esp + _izH2]
	movapd xmm3, [esp + _ixH2]
	movapd xmm4, [esp + _iyH2]
	movapd xmm5, [esp + _izH2]
	subpd  xmm0, [esp + _jxO]
	subpd  xmm1, [esp + _jyO]
	subpd  xmm2, [esp + _jzO]
	subpd  xmm3, [esp + _jxH1]
	subpd  xmm4, [esp + _jyH1]
	subpd  xmm5, [esp + _jzH1]
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm4, xmm3
	addpd  xmm4, xmm5
	movapd [esp + _rsqH2O], xmm0
	movapd [esp + _rsqH2H1], xmm4

	movapd xmm0, [esp + _ixH2]
	movapd xmm1, [esp + _iyH2]
	movapd xmm2, [esp + _izH2]
	subpd  xmm0, [esp + _jxH2]
	subpd  xmm1, [esp + _jyH2]
	subpd  xmm2, [esp + _jzH2]
	mulpd xmm0, xmm0
	mulpd xmm1, xmm1
	mulpd xmm2, xmm2
	addpd xmm0, xmm1
	addpd xmm0, xmm2
	movapd [esp + _rsqH2H2], xmm0
		
	/* start doing invsqrt use rsq values in xmm0, xmm4 */
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulpd   xmm1, xmm1	/* luA*luA */
	mulpd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	mulpd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subpd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm3, [esp + _half] /* iter1 */
	mulpd   xmm7, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulpd   xmm3, xmm3	/* luA*luA */
	mulpd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	mulpd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subpd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm1, [esp + _half] /* rinv */
	mulpd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvH2H2], xmm1
	movapd [esp + _rinvH2H1], xmm5

	movapd xmm0, [esp + _rsqOO]
	movapd xmm4, [esp + _rsqOH1]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulpd   xmm1, xmm1	/* luA*luA */
	mulpd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	mulpd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subpd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm3, [esp + _half] /* iter1 of  */
	mulpd   xmm7, [esp + _half] /* iter1 of  */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulpd   xmm3, xmm3	/* luA*luA */
	mulpd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	mulpd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subpd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm1, [esp + _half] /* rinv */
	mulpd   xmm5, [esp + _half] /* rinv*/
	movapd [esp + _rinvOO], xmm1
	movapd [esp + _rinvOH1], xmm5

	movapd xmm0, [esp + _rsqOH2]
	movapd xmm4, [esp + _rsqH1O]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulpd   xmm1, xmm1	/* luA*luA */
	mulpd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	mulpd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subpd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm3, [esp + _half] /* iter1 */
	mulpd   xmm7, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulpd   xmm3, xmm3	/* luA*luA */
	mulpd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	mulpd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subpd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm1, [esp + _half] /* rinv */
	mulpd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvOH2], xmm1
	movapd [esp + _rinvH1O], xmm5

	movapd xmm0, [esp + _rsqH1H1]
	movapd xmm4, [esp + _rsqH1H2]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulpd   xmm1, xmm1	/* luA*luA */
	mulpd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	mulpd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subpd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm3, [esp + _half] /* iter1a */
	mulpd   xmm7, [esp + _half] /* iter1b */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulpd   xmm3, xmm3	/* luA*luA */
	mulpd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	mulpd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subpd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm1, [esp + _half] /* rinv */
	mulpd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvH1H1], xmm1
	movapd [esp + _rinvH1H2], xmm5

	movapd xmm0, [esp + _rsqH2O]
	cvtpd2ps xmm1, xmm0	
	rsqrtps xmm1, xmm1
	cvtps2pd xmm1, xmm1
	
	movapd  xmm2, xmm1	/* copy of luA */
	mulpd   xmm1, xmm1	/* luA*luA */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm3, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	mulpd   xmm3, xmm3	/* luA*luA */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm1, [esp + _half] /* rinv */
	movapd [esp + _rinvH2O], xmm1
	
	/* start with OO interaction */
	movapd xmm0, [esp + _rinvOO]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + _rsqOO] /* xmm1=r */
	mulpd  xmm1, [esp + _tsc]

	cvttpd2pi mm6, xmm1	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqOO]
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul*/
        /* increment vcoul - then we can get rid of mm5 */
        /* update vctot */
        addpd  xmm5, [esp + _vctot]
        movapd [esp + _vctot], xmm5

	/* O-H1 interaction */
	movapd xmm0, [esp + _rinvOH1]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + _rsqOH1] /* xmm1=r */
	mulpd  xmm1, [esp + _tsc]

	cvttpd2pi mm6, xmm1	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqOH]
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul */

        addpd  xmm5, [esp + _vctot]
        movapd [esp + _vctot], xmm5

	/* O-H2 interaction */ 
	movapd xmm0, [esp + _rinvOH2]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + _rsqOH2] /* xmm1=r */
	mulpd  xmm1, [esp + _tsc]
	
	cvttpd2pi mm6, xmm1	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqOH]
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul */

        addpd  xmm5, [esp + _vctot]
        movapd [esp + _vctot], xmm5

	/* H1-O interaction */
	movapd xmm0, [esp + _rinvH1O]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + _rsqH1O] /* xmm1=r */
	mulpd  xmm1, [esp + _tsc]
	
	cvttpd2pi mm6, xmm1	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqOH]
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul */

        addpd  xmm5, [esp + _vctot]
        movapd [esp + _vctot], xmm5

	/* H1-H1 interaction */
	movapd xmm0, [esp + _rinvH1H1]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + _rsqH1H1] /* xmm1=r */
	mulpd  xmm1, [esp + _tsc]	
	cvttpd2pi mm6, xmm1	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqHH]
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul */

        addpd  xmm5, [esp + _vctot]
        movapd [esp + _vctot], xmm5
	
	/* H1-H2 interaction */
	movapd xmm0, [esp + _rinvH1H2]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + _rsqH1H2] /* xmm1=r */
	mulpd  xmm1, [esp + _tsc]
	cvttpd2pi mm6, xmm1	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqHH]
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul */

        addpd  xmm5, [esp + _vctot]
        movapd [esp + _vctot], xmm5

	/* H2-O interaction */
	movapd xmm0, [esp + _rinvH2O]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + _rsqH2O] /* xmm1=r */
	mulpd  xmm1, [esp + _tsc]	
	cvttpd2pi mm6, xmm1	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqOH]
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul */

        addpd  xmm5, [esp + _vctot]
        movapd [esp + _vctot], xmm5

	/* H2-H1 interaction */
	movapd xmm0, [esp + _rinvH2H1]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + _rsqH2H1] /* xmm1=r */
	mulpd  xmm1, [esp + _tsc]
	cvttpd2pi mm6, xmm1	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqHH]
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul */

        addpd  xmm5, [esp + _vctot]
        movapd [esp + _vctot], xmm5	

	/* H2-H2 interaction */
	movapd xmm0, [esp + _rinvH2H2]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + _rsqH2H2] /* xmm1=r */
	mulpd  xmm1, [esp + _tsc]	
	cvttpd2pi mm6, xmm1	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqHH]
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul */
	
        addpd  xmm5, [esp + _vctot]
        movapd [esp + _vctot], xmm5
	
	/* should we do one more iteration? */
	sub   [esp + _innerk],  2
	jl    .imc3030_checksingle
	jmp   .imc3030_unroll_loop
.imc3030_checksingle:
	mov   edx, [esp + _innerk]
	and   edx, 1
	jnz   .imc3030_dosingle
	jmp   .imc3030_updateouterdata
.imc3030_dosingle:
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]

	mov esi, [ebp + _pos]
	lea   eax, [eax + eax*2]  

	/* fetch j coordinates */
	movlpd xmm2, [esi + eax*8]
	movlpd xmm3, [esi + eax*8 + 8]
	movlpd xmm4, [esi + eax*8 + 16]
	movlpd xmm5, [esi + eax*8 + 24]
	movlpd xmm6, [esi + eax*8 + 32]
	movlpd xmm7, [esi + eax*8 + 40]
	movapd 	[esp + _jxO], xmm2
	movapd 	[esp + _jyO], xmm3
	movapd 	[esp + _jzO], xmm4
	movapd 	[esp + _jxH1], xmm5
	movapd 	[esp + _jyH1], xmm6
	movapd 	[esp + _jzH1], xmm7
	movlpd xmm2, [esi + eax*8 + 48]
	movlpd xmm3, [esi + eax*8 + 56]
	movlpd xmm4, [esi + eax*8 + 64]
	movapd 	[esp + _jxH2], xmm2
	movapd 	[esp + _jyH2], xmm3
	movapd 	[esp + _jzH2], xmm4
	
	movapd xmm0, [esp + _ixO]
	movapd xmm1, [esp + _iyO]
	movapd xmm2, [esp + _izO]
	movapd xmm3, [esp + _ixO]
	movapd xmm4, [esp + _iyO]
	movapd xmm5, [esp + _izO]
	subsd  xmm0, [esp + _jxO]
	subsd  xmm1, [esp + _jyO]
	subsd  xmm2, [esp + _jzO]
	subsd  xmm3, [esp + _jxH1]
	subsd  xmm4, [esp + _jyH1]
	subsd  xmm5, [esp + _jzH1]
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + _rsqOO], xmm0
	movapd [esp + _rsqOH1], xmm3

	movapd xmm0, [esp + _ixO]
	movapd xmm1, [esp + _iyO]
	movapd xmm2, [esp + _izO]
	movapd xmm3, [esp + _ixH1]
	movapd xmm4, [esp + _iyH1]
	movapd xmm5, [esp + _izH1]
	subsd  xmm0, [esp + _jxH2]
	subsd  xmm1, [esp + _jyH2]
	subsd  xmm2, [esp + _jzH2]
	subsd  xmm3, [esp + _jxO]
	subsd  xmm4, [esp + _jyO]
	subsd  xmm5, [esp + _jzO]
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + _rsqOH2], xmm0
	movapd [esp + _rsqH1O], xmm3

	movapd xmm0, [esp + _ixH1]
	movapd xmm1, [esp + _iyH1]
	movapd xmm2, [esp + _izH1]
	movapd xmm3, [esp + _ixH1]
	movapd xmm4, [esp + _iyH1]
	movapd xmm5, [esp + _izH1]
	subsd  xmm0, [esp + _jxH1]
	subsd  xmm1, [esp + _jyH1]
	subsd  xmm2, [esp + _jzH1]
	subsd  xmm3, [esp + _jxH2]
	subsd  xmm4, [esp + _jyH2]
	subsd  xmm5, [esp + _jzH2]
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + _rsqH1H1], xmm0
	movapd [esp + _rsqH1H2], xmm3

	movapd xmm0, [esp + _ixH2]
	movapd xmm1, [esp + _iyH2]
	movapd xmm2, [esp + _izH2]
	movapd xmm3, [esp + _ixH2]
	movapd xmm4, [esp + _iyH2]
	movapd xmm5, [esp + _izH2]
	subsd  xmm0, [esp + _jxO]
	subsd  xmm1, [esp + _jyO]
	subsd  xmm2, [esp + _jzO]
	subsd  xmm3, [esp + _jxH1]
	subsd  xmm4, [esp + _jyH1]
	subsd  xmm5, [esp + _jzH1]
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm4, xmm3
	addsd  xmm4, xmm5
	movapd [esp + _rsqH2O], xmm0
	movapd [esp + _rsqH2H1], xmm4

	movapd xmm0, [esp + _ixH2]
	movapd xmm1, [esp + _iyH2]
	movapd xmm2, [esp + _izH2]
	subsd  xmm0, [esp + _jxH2]
	subsd  xmm1, [esp + _jyH2]
	subsd  xmm2, [esp + _jzH2]
	mulsd xmm0, xmm0
	mulsd xmm1, xmm1
	mulsd xmm2, xmm2
	addsd xmm0, xmm1
	addsd xmm0, xmm2
	movapd [esp + _rsqH2H2], xmm0
		
	/* start doing invsqrt use rsq values in xmm0, xmm4 */
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulsd   xmm1, xmm1	/* luA*luA */
	mulsd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	mulsd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subsd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm3, [esp + _half] /* iter1 */
	mulsd   xmm7, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulsd   xmm3, xmm3	/* luA*luA */
	mulsd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	mulsd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subsd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm1, [esp + _half] /* rinv */
	mulsd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvH2H2], xmm1
	movapd [esp + _rinvH2H1], xmm5

	movapd xmm0, [esp + _rsqOO]
	movapd xmm4, [esp + _rsqOH1]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulsd   xmm1, xmm1	/* luA*luA */
	mulsd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	mulsd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subsd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm3, [esp + _half] /* iter1 of  */
	mulsd   xmm7, [esp + _half] /* iter1 of  */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulsd   xmm3, xmm3	/* luA*luA */
	mulsd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	mulsd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subsd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm1, [esp + _half] /* rinv */
	mulsd   xmm5, [esp + _half] /* rinv*/
	movapd [esp + _rinvOO], xmm1
	movapd [esp + _rinvOH1], xmm5

	movapd xmm0, [esp + _rsqOH2]
	movapd xmm4, [esp + _rsqH1O]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulsd   xmm1, xmm1	/* luA*luA */
	mulsd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	mulsd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subsd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm3, [esp + _half] /* iter1 */
	mulsd   xmm7, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulsd   xmm3, xmm3	/* luA*luA */
	mulsd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	mulsd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subsd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm1, [esp + _half] /* rinv */
	mulsd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvOH2], xmm1
	movapd [esp + _rinvH1O], xmm5

	movapd xmm0, [esp + _rsqH1H1]
	movapd xmm4, [esp + _rsqH1H2]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulsd   xmm1, xmm1	/* luA*luA */
	mulsd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	mulsd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subsd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm3, [esp + _half] /* iter1a */
	mulsd   xmm7, [esp + _half] /* iter1b */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulsd   xmm3, xmm3	/* luA*luA */
	mulsd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	mulsd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subsd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm1, [esp + _half] /* rinv */
	mulsd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvH1H1], xmm1
	movapd [esp + _rinvH1H2], xmm5

	movapd xmm0, [esp + _rsqH2O]
	cvtsd2ss xmm1, xmm0	
	rsqrtss xmm1, xmm1
	cvtss2sd xmm1, xmm1
	
	movapd  xmm2, xmm1	/* copy of luA */
	mulsd   xmm1, xmm1	/* luA*luA */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm3, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	mulsd   xmm3, xmm3	/* luA*luA */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm1, [esp + _half] /* rinv */
	movapd [esp + _rinvH2O], xmm1
	
	/* start with OO interaction */
	movapd xmm0, [esp + _rinvOO]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + _rsqOO] /* xmm1=r */
	mulsd  xmm1, [esp + _tsc]

	cvttsd2si eax, xmm1	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1  */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1  */
	unpckhpd xmm7, xmm3	/* H1  */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqOO]
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul */
        /* increment vcoul - then we can get rid of mm5 */
        /* update vctot */
        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5

	/* O-H1 interaction */
	movapd xmm0, [esp + _rinvOH1]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + _rsqOH1] /* xmm1=r */
	mulsd  xmm1, [esp + _tsc]

	cvttsd2si eax, xmm1	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1  */
	unpckhpd xmm5, xmm3	/* F1  */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqOH]
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul  */

        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5

	/* O-H2 interaction */ 
	movapd xmm0, [esp + _rinvOH2]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + _rsqOH2] /* xmm1=r */
	mulsd  xmm1, [esp + _tsc]
	
	cvttsd2si eax, xmm1	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqOH]
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul */

        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5

	/* H1-O interaction */
	movapd xmm0, [esp + _rinvH1O]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + _rsqH1O] /* xmm1=r */
	mulsd  xmm1, [esp + _tsc]
	
	cvttsd2si eax, xmm1	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqOH]
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul */

        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5

	/* H1-H1 interaction */
	movapd xmm0, [esp + _rinvH1H1]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + _rsqH1H1] /* xmm1=r */
	mulsd  xmm1, [esp + _tsc]	
	cvttsd2si eax, xmm1	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqHH]
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul */

        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5

	/* H1-H2 interaction */
	movapd xmm0, [esp + _rinvH1H2]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + _rsqH1H2] /* xmm1=r */
	mulsd  xmm1, [esp + _tsc]
	cvttsd2si eax, xmm1	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqHH]
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul */

        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5

	/* H2-O interaction */
	movapd xmm0, [esp + _rinvH2O]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + _rsqH2O] /* xmm1=r */
	mulsd  xmm1, [esp + _tsc]	
	cvttsd2si eax, xmm1	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqOH]
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul */

        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5

	/* H2-H1 interaction */
	movapd xmm0, [esp + _rinvH2H1]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + _rsqH2H1] /* xmm1=r */
	mulsd  xmm1, [esp + _tsc]
	cvttsd2si eax, xmm1	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subpd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqHH]
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul */

        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5

	/* H2-H2 interaction */
	movapd xmm0, [esp + _rinvH2H2]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + _rsqH2H2] /* xmm1=r */
	mulsd  xmm1, [esp + _tsc]	
	cvttsd2si eax, xmm1	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqHH]
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul */

        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5
	
.imc3030_updateouterdata:
	/* get gid */
	mov   edx, [ebp + _gid]  
	mov   edx, [edx]
	add   [ebp + _gid],  4	

	/* accumulate total potential energy and update it */
	movapd xmm7, [esp + _vctot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */
        
	/* add earlier value from mem */
	mov   eax, [ebp + _Vc]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* finish if last */
	mov   ecx, [ebp + _nri]
	dec ecx
	jecxz .imc3030_end
	/* not last, iterate once more! */ 
	mov [ebp + _nri], ecx
	jmp .imc3030_outer
.imc3030_end:
	emms
	mov eax, [esp + _salign]
	add esp, eax
	add esp, 708
	pop edi
	pop esi
        pop edx
        pop ecx
        pop ebx
        pop eax
	leave
	ret
	



.globl mcinl3100_sse2
	.type mcinl3100_sse2,@function
mcinl3100_sse2:	
.equ		_nri,		8
.equ		_iinr,		12
.equ		_jindex,	16
.equ		_jjnr,		20
.equ		_shift,		24
.equ		_shiftvec,	28
.equ		_gid,		32
.equ		_pos,		36
.equ		_charge,	40
.equ		_facel,		44 /* double */
.equ		_Vc,		52			
.equ		_type,		56
.equ		_ntype,		60
.equ		_nbfp,		64	
.equ		_Vnb,		68
.equ		_tabscale,	72 /* double */
.equ		_VFtab,		80
	/* stack offsets for local variables */ 
	/* bottom of stack is cache-aligned for sse use */
.equ		_ix,		0
.equ		_iy,		16
.equ		_iz,		32
.equ		_iq,		48
.equ		_tsc,		64
.equ		_qq,		80	
.equ		_c6,		96
.equ		_c12,		112
.equ		_vctot,		128
.equ		_vnbtot,	144
.equ		_half,		160
.equ		_three,		176
.equ		_is3,		192
.equ		_ii3,		196
.equ		_ntia,		200	
.equ		_innerjjnr,	204
.equ		_innerk,	208
.equ		_salign,	212
	push ebp
	mov ebp,esp	
        push eax
        push ebx
        push ecx
        push edx
	push esi
	push edi
	sub esp, 216		/* local stack space */
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + _salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm2, [sse2_three]
	movsd xmm5, [ebp + _tabscale]
	movapd [esp + _half],  xmm0
	movapd [esp + _three],  xmm2
	shufpd xmm5, xmm5, 0
	movapd [esp + _tsc], xmm5

	/* assume we have at least one i particle - start directly */	
.imc3100_outer:
	mov   eax, [ebp + _shift]      /* eax = pointer into shift[] */
	mov   ebx, [eax]		/* ebx=shift[n] */
	add   [ebp + _shift],  4  /* advance pointer one step */
	
	lea   ebx, [ebx + ebx*2]        /* ebx=3*is */

	mov   eax, [ebp + _shiftvec]   /* eax = base of shiftvec[] */

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	add   [ebp + _iinr],  4   /* advance pointer */
	mov   ebx, [ecx]	        /* ebx =ii */

	mov   edx, [ebp + _charge]
	movsd xmm3, [edx + ebx*8]	
	mulsd xmm3, [ebp + _facel]
	shufpd xmm3, xmm3, 0

        mov   edx, [ebp + _type] 
        mov   edx, [edx + ebx*4]
        imul  edx, [ebp + _ntype]
        shl   edx, 1
        mov   [esp + _ntia], edx
		
	lea   ebx, [ebx + ebx*2]	/* ebx = 3*ii=ii3 */
	mov   eax, [ebp + _pos]        /* eax = base of pos[] */ 

	addsd xmm0, [eax + ebx*8]
	addsd xmm1, [eax + ebx*8 + 8]
	addsd xmm2, [eax + ebx*8 + 16]

	movapd [esp + _iq], xmm3
	
	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0

	movapd [esp + _ix], xmm0
	movapd [esp + _iy], xmm1
	movapd [esp + _iz], xmm2

	mov   [esp + _ii3], ebx
	
	/* clear vctot */
	xorpd xmm4, xmm4
	movapd [esp + _vctot], xmm4
	movapd [esp + _vnbtot], xmm4
	
	mov   eax, [ebp + _jindex]
	mov   ecx, [eax]	         /* jindex[n] */
	mov   edx, [eax + 4]	         /* jindex[n+1] */
	add   [ebp + _jindex],  4
	sub   edx, ecx                   /* number of innerloop atoms */

	mov   esi, [ebp + _pos]
	mov   eax, [ebp + _jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + _innerjjnr], eax     /* pointer to jjnr[nj0] */
	sub   edx,  2
	mov   [esp + _innerk], edx        /* number of innerloop atoms */
	jge   .imc3100_unroll_loop
	jmp   .imc3100_checksingle
.imc3100_unroll_loop:	
	/* twice unrolled innerloop here */
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]	
	mov   ebx, [edx + 4]              
	add   [esp + _innerjjnr],  8 /* advance pointer (unrolled 2) */

	mov esi, [ebp + _charge]        /* base of charge[] */
	movlpd xmm3, [esi + eax*8]
	movhpd xmm3, [esi + ebx*8]

	movapd xmm2, [esp + _iq]
	mulpd  xmm3, xmm2
	movapd [esp + _qq], xmm3	
	
	movd  mm0, eax		/* use mmx registers as temp storage */
	movd  mm1, ebx
	
	mov esi, [ebp + _type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov esi, [ebp + _nbfp]
	shl eax, 1
	shl ebx, 1
	mov edi, [esp + _ntia]
	add eax, edi
	add ebx, edi

	movupd xmm6, [esi + eax*8]	/* c6a c12a */
	movupd xmm7, [esi + ebx*8]	/* c6b c12b */
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0
	movd  ebx, mm1
	movapd [esp + _c6], xmm4
	movapd [esp + _c12], xmm6
	
	mov esi, [ebp + _pos]       /* base of pos[] */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */
	lea   ebx, [ebx + ebx*2]	

	/* move two coordinates to xmm0-xmm2 */	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]		
	
	/* move ix-iz to xmm4-xmm6 */
	movapd xmm4, [esp + _ix]
	movapd xmm5, [esp + _iy]
	movapd xmm6, [esp + _iz]

	/* calc dr */
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	/* square it */
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6
	/* rsq in xmm4 */

	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm5, xmm5
	cvtps2pd xmm2, xmm5	/* lu in low xmm2 */

	/* lookup seed in xmm2 */
	movapd xmm5, xmm2	/* copy of lu */
	mulpd xmm2, xmm2	/* lu*lu */
	movapd xmm1, [esp + _three]
	mulpd xmm2, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subpd xmm1, xmm2	/* 30-rsq*lu*lu */
	mulpd xmm1, xmm5	
	mulpd xmm1, xmm0	/* xmm0=iter1 of rinv (new lu) */

	movapd xmm5, xmm1	/* copy of lu */
	mulpd xmm1, xmm1	/* lu*lu */
	movapd xmm2, [esp + _three]
	mulpd xmm1, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subpd xmm2, xmm1	/* 30-rsq*lu*lu */
	mulpd xmm2, xmm5	
	mulpd xmm0, xmm2	/* xmm0=rinv */
	
	mulpd xmm4, xmm0	/* xmm4=r */
	mulpd xmm4, [esp + _tsc]

	cvttpd2pi mm6, xmm4	/* mm6 = lu idx */
	cvtpi2pd xmm5, mm6
	subpd xmm4, xmm5
	movapd xmm1, xmm4	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qq]
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
	/* at this point mm5 contains vcoul */
	
	/* L-J */
	movapd xmm4, xmm0
	mulpd  xmm4, xmm0	/* xmm4=rinvsq */

	/* increment vcoul - then we can get rid of mm5 */
	/* update vctot */
	addpd  xmm5, [esp + _vctot]

	movapd xmm6, xmm4
	mulpd  xmm6, xmm4

	movapd [esp + _vctot], xmm5 

	mulpd  xmm6, xmm4	/* xmm6=rinvsix */
	movapd xmm4, xmm6
	mulpd  xmm4, xmm4	/* xmm4=rinvtwelve */
	mulpd  xmm6, [esp + _c6]
	mulpd  xmm4, [esp + _c12]
	movapd xmm7, [esp + _vnbtot]
	addpd  xmm7, xmm4
	subpd  xmm7, xmm6
	movapd [esp + _vnbtot], xmm7
		
	/* should we do one more iteration? */
	sub   [esp + _innerk],  2
	jl    .imc3100_checksingle
	jmp   .imc3100_unroll_loop
.imc3100_checksingle:
	mov   edx, [esp + _innerk]
	and   edx, 1
	jnz    .imc3100_dosingle
	jmp    .imc3100_updateouterdata
.imc3100_dosingle:
	mov esi, [ebp + _charge]
	mov edi, [ebp + _pos]
	mov   ecx, [esp + _innerjjnr]
	mov   eax, [ecx]
	
	xorpd  xmm3, xmm3
	movlpd xmm3, [esi + eax*8]
	movapd xmm2, [esp + _iq]
	mulpd  xmm3, xmm2
	movapd [esp + _qq], xmm3	
	
	movd  mm0, eax		/* use mmx registers as temp storage */
	mov esi, [ebp + _type]
	mov eax, [esi + eax*4]
	mov esi, [ebp + _nbfp]
	shl eax, 1
	mov edi, [esp + _ntia]
	add eax, edi

	movupd xmm6, [esi + eax*8]	/* c6a c12a */
	xorpd xmm7, xmm7
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0
	movapd [esp + _c6], xmm4
	movapd [esp + _c12], xmm6
	
	mov esi, [ebp + _pos]       /* base of pos[] */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */

	/* move coordinates to xmm0-xmm2 */	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	
	/* move ix-iz to xmm4-xmm6 */
	movapd xmm4, [esp + _ix]
	movapd xmm5, [esp + _iy]
	movapd xmm6, [esp + _iz]

	/* calc dr */
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	/* square it */
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6
	/* rsq in xmm4 */

	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm5, xmm5
	cvtss2sd xmm2, xmm5	/* lu in low xmm2 */

	/* lookup seed in xmm2 */
	movapd xmm5, xmm2	/* copy of lu */
	mulsd xmm2, xmm2	/* lu*lu */
	movapd xmm1, [esp + _three]
	mulsd xmm2, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subsd xmm1, xmm2	/* 30-rsq*lu*lu */
	mulsd xmm1, xmm5	
	mulsd xmm1, xmm0	/* xmm0=iter1 of rinv (new lu) */

	movapd xmm5, xmm1	/* copy of lu */
	mulsd xmm1, xmm1	/* lu*lu */
	movapd xmm2, [esp + _three]
	mulsd xmm1, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subsd xmm2, xmm1	/* 30-rsq*lu*lu */
	mulsd xmm2, xmm5	
	mulsd xmm0, xmm2	/* xmm0=rinv */
	
	mulsd xmm4, xmm0	/* xmm4=r */
	mulsd xmm4, [esp + _tsc]

	movd mm0, eax	
	cvttsd2si eax, xmm4	/* mm6 = lu idx */
	cvtsi2sd xmm5, eax
	subsd xmm4, xmm5
	movapd xmm1, xmm4	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	
	mov  esi, [ebp + _VFtab]

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qq]
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
	/* at this point mm5 contains vcoul */
	
	/* L-J */
	movapd xmm4, xmm0
	mulsd  xmm4, xmm0	/* xmm4=rinvsq */

	/* increment vcoul - then we can get rid of mm5 */
	/* update vctot */
	addsd  xmm5, [esp + _vctot]

	movapd xmm6, xmm4
	mulsd  xmm6, xmm4

	movlpd [esp + _vctot], xmm5 

	mulsd  xmm6, xmm4	/* xmm6=rinvsix */
	movapd xmm4, xmm6
	mulsd  xmm4, xmm4	/* xmm4=rinvtwelve */
	mulsd  xmm6, [esp + _c6]
	mulsd  xmm4, [esp + _c12]
	movapd xmm7, [esp + _vnbtot]
	addsd  xmm7, xmm4
	subsd  xmm7, xmm6
	movlpd [esp + _vnbtot], xmm7
		
.imc3100_updateouterdata:
	/* get group index for i particle */
	mov   edx, [ebp + _gid]      /* get group index for this i particle */
	mov   edx, [edx]
	add   [ebp + _gid],  4  /* advance pointer */

	/* accumulate total potential energy and update it */
	movapd xmm7, [esp + _vctot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */

	/* add earlier value from mem */
	mov   eax, [ebp + _Vc]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* accumulate total lj energy and update it */
	movapd xmm7, [esp + _vnbtot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */
	
	/* add earlier value from mem */
	mov   eax, [ebp + _Vnb]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* finish if last */
	mov   ecx, [ebp + _nri]
	dec ecx
	jecxz .imc3100_end
	/* not last, iterate once more! */ 
	mov [ebp + _nri], ecx
	jmp .imc3100_outer
.imc3100_end:
	emms
	mov eax, [esp + _salign]
	add esp, eax
	add esp, 216
	pop edi
	pop esi
        pop edx
        pop ecx
        pop ebx
        pop eax
	leave
	ret




.globl mcinl3120_sse2
	.type mcinl3120_sse2,@function
mcinl3120_sse2:
.equ		_nri,		8
.equ		_iinr,		12
.equ		_jindex,	16
.equ		_jjnr,		20
.equ		_shift,		24
.equ		_shiftvec,	28
.equ		_gid,		32
.equ		_pos,		36		
.equ		_charge,	40
.equ		_facel,		44 /* double */
.equ		_Vc,		52			
.equ		_type,		56
.equ		_ntype,		60
.equ		_nbfp,		64	
.equ		_Vnb,		68	
.equ		_tabscale,	72 /* double */	
.equ		_VFtab,		80
	/* stack offsets for local variables */ 
	/* bottom of stack is cache-aligned for sse use */
.equ		_ixO,		0
.equ		_iyO,		16
.equ		_izO,		32
.equ		_ixH1,		48
.equ		_iyH1,		64
.equ		_izH1,		80
.equ		_ixH2,		96
.equ		_iyH2,		112
.equ		_izH2,		128
.equ		_iqO,		144 
.equ		_iqH,		160 
.equ		_qqO,		176
.equ		_qqH,		192
.equ		_rinvO,		208
.equ		_rinvH1,	224
.equ		_rinvH2,	240		
.equ		_rO,		256
.equ		_rH1,		272
.equ		_rH2,		288
.equ		_tsc,		304
.equ		_c6,		320
.equ		_c12,		336
.equ		_vctot,		352
.equ		_vnbtot,	368
.equ		_half,		384
.equ		_three,		400
.equ		_is3,		416
.equ		_ii3,		420
.equ		_ntia,		424	
.equ		_innerjjnr,	428
.equ		_innerk,	432
.equ		_salign,	436		
	push ebp
	mov ebp,esp	
        push eax
        push ebx
        push ecx
        push edx
	push esi
	push edi
	sub esp, 440		/* local stack space */
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + _salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm2, [sse2_three]
	movsd xmm5, [ebp + _tabscale]
	
	movapd [esp + _half],  xmm0
	movapd [esp + _three],  xmm2
	shufpd xmm5, xmm5, 0
	movapd [esp + _tsc], xmm5
	
	/* assume we have at least one i particle - start directly */
	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	mov   ebx, [ecx]	        /* ebx =ii */

	mov   edx, [ebp + _charge]
	movsd xmm3, [edx + ebx*8]	
	movsd xmm4, [edx + ebx*8 + 8]	
	movsd xmm5, [ebp + _facel]
	mulsd  xmm3, xmm5
	mulsd  xmm4, xmm5

	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	movapd [esp + _iqO], xmm3
	movapd [esp + _iqH], xmm4
	
	mov   edx, [ebp + _type]
	mov   ecx, [edx + ebx*4]
	shl   ecx, 1
	imul  ecx, [ebp + _ntype]      /* ecx = ntia = 2*ntype*type[ii0] */
	mov   [esp + _ntia], ecx		
.imc3120_outer:
	mov   eax, [ebp + _shift]      /* eax = pointer into shift[] */
	mov   ebx, [eax]		/* ebx=shift[n] */
	add   [ebp + _shift],  4  /* advance pointer one step */
	
	lea   ebx, [ebx + ebx*2]        /* ebx=3*is */

	mov   eax, [ebp + _shiftvec]   /* eax = base of shiftvec[] */

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	add   [ebp + _iinr],  4   /* advance pointer */
	mov   ebx, [ecx]	        /* ebx =ii */

	movapd xmm3, xmm0
	movapd xmm4, xmm1
	movapd xmm5, xmm2

	lea   ebx, [ebx + ebx*2]	/* ebx = 3*ii=ii3 */
	mov   eax, [ebp + _pos]        /* eax = base of pos[] */ 
	mov   [esp + _ii3], ebx

	addsd xmm3, [eax + ebx*8]
	addsd xmm4, [eax + ebx*8 + 8]
	addsd xmm5, [eax + ebx*8 + 16]		
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _ixO], xmm3
	movapd [esp + _iyO], xmm4
	movapd [esp + _izO], xmm5

	movsd xmm3, xmm0
	movsd xmm4, xmm1
	movsd xmm5, xmm2
	addsd xmm0, [eax + ebx*8 + 24]
	addsd xmm1, [eax + ebx*8 + 32]
	addsd xmm2, [eax + ebx*8 + 40]		
	addsd xmm3, [eax + ebx*8 + 48]
	addsd xmm4, [eax + ebx*8 + 56]
	addsd xmm5, [eax + ebx*8 + 64]		

	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _ixH1], xmm0
	movapd [esp + _iyH1], xmm1
	movapd [esp + _izH1], xmm2
	movapd [esp + _ixH2], xmm3
	movapd [esp + _iyH2], xmm4
	movapd [esp + _izH2], xmm5
	
	/* clear vctot */
	xorpd xmm4, xmm4
	movapd [esp + _vctot], xmm4
	movapd [esp + _vnbtot], xmm4
	
	mov   eax, [ebp + _jindex]
	mov   ecx, [eax]	         /* jindex[n] */
	mov   edx, [eax + 4]	         /* jindex[n+1] */
	add   [ebp + _jindex],  4
	sub   edx, ecx                   /* number of innerloop atoms */

	mov   esi, [ebp + _pos]
	mov   eax, [ebp + _jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + _innerjjnr], eax     /* pointer to jjnr[nj0] */
	sub   edx,  2
	mov   [esp + _innerk], edx        /* number of innerloop atoms */
	jge   .imc3120_unroll_loop
	jmp   .imc3120_checksingle
.imc3120_unroll_loop:
	/* twice unrolled innerloop here */
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]	
	mov   ebx, [edx + 4]

	add   [esp + _innerjjnr],  8 /* advance pointer (unrolled 2) */

	mov esi, [ebp + _charge]        /* base of charge[] */
	
	movlpd xmm3, [esi + eax*8]
	movhpd xmm3, [esi + ebx*8]
	movapd xmm4, xmm3	     
	mulpd  xmm3, [esp + _iqO]
	mulpd  xmm4, [esp + _iqH]

	movd  mm0, eax		/* use mmx registers as temp storage */
	movd  mm1, ebx

	movapd  [esp + _qqO], xmm3
	movapd  [esp + _qqH], xmm4	

	mov esi, [ebp + _type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov esi, [ebp + _nbfp]
	shl eax, 1	
	shl ebx, 1	
	mov edi, [esp + _ntia]
	add eax, edi
	add ebx, edi

	movupd xmm6, [esi + eax*8]	/* c6a c12a */
	movupd xmm7, [esi + ebx*8]	/* c6b c12b */
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0
	movd  ebx, mm1
	movapd [esp + _c6], xmm4
	movapd [esp + _c12], xmm6

	mov esi, [ebp + _pos]       /* base of pos[] */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */
	lea   ebx, [ebx + ebx*2]	

	/* move two coordinates to xmm0-xmm2 */	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]		

	/* move ixO-izO to xmm4-xmm6 */
	movapd xmm4, [esp + _ixO]
	movapd xmm5, [esp + _iyO]
	movapd xmm6, [esp + _izO]

	/* calc dr */
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	/* square it */
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6
	movapd xmm7, xmm4
	/* rsqO in xmm7 */

	/* move ixH1-izH1 to xmm4-xmm6 */
	movapd xmm4, [esp + _ixH1]
	movapd xmm5, [esp + _iyH1]
	movapd xmm6, [esp + _izH1]

	/* calc dr */
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	/* square it */
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm6, xmm5
	addpd xmm6, xmm4
	/* rsqH1 in xmm6 */

	/* move ixH2-izH2 to xmm3-xmm5 */ 
	movapd xmm3, [esp + _ixH2]
	movapd xmm4, [esp + _iyH2]
	movapd xmm5, [esp + _izH2]

	/* calc dr */
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2

	/* square it */
	mulpd xmm3,xmm3
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	addpd xmm5, xmm4
	addpd xmm5, xmm3
	/* rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 */

	/* start with rsqO - put seed in xmm2 */
	cvtpd2ps xmm2, xmm7	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulpd   xmm2, xmm7	/* rsq*lu*lu */
	subpd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulpd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulpd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm2, xmm7
	movapd xmm3, xmm4
	mulpd xmm4, xmm4	/* lu*lu */
	mulpd xmm2, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subpd xmm4, xmm2	/* 3-rsq*lu*lu */
	mulpd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulpd xmm4, [esp + _half] /* rinv */
	movapd  [esp + _rinvO], xmm4	/* rinvO in xmm4 */
	mulpd   xmm7, xmm4
	movapd  [esp + _rO], xmm7	/* r in xmm7 */
	
	/* rsqH1 - seed in xmm2 */
	cvtpd2ps xmm2, xmm6	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulpd   xmm2, xmm6	/* rsq*lu*lu */
	subpd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulpd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulpd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm2, xmm6
	movapd xmm3, xmm4
	mulpd xmm4, xmm4	/* lu*lu */
	mulpd xmm2, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subpd xmm4, xmm2	/* 3-rsq*lu*lu */
	mulpd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulpd xmm4, [esp + _half] /* rinv */
	movapd [esp + _rinvH1], xmm4	/* rinvH1 */
	mulpd  xmm6, xmm4
	movapd [esp + _rH1], xmm6	/* rH1 */
	
	/* rsqH2 - seed in xmm2 */
	cvtpd2ps xmm2, xmm5	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulpd   xmm2, xmm5	/* rsq*lu*lu */
	subpd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulpd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulpd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm2, xmm5
	movapd xmm3, xmm4
	mulpd xmm4, xmm4	/* lu*lu */
	mulpd xmm2, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subpd xmm4, xmm2	/* 3-rsq*lu*lu */
	mulpd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulpd xmm4, [esp + _half] /* rinv */
	movapd [esp + _rinvH2], xmm4 /* rinv */
	mulpd xmm5, xmm4
	movapd [esp + _rH2], xmm5 /* r */

	/* do O interactions */
	/* rO is still in xmm7 */
	movapd xmm0, [esp + _rinvO]
	mulpd   xmm7, [esp + _tsc]
	cvttpd2pi mm6, xmm7	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm7, xmm6
	movapd xmm1, xmm7	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	movd mm0, eax	
	movd mm1, ebx
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 
        mulpd  xmm6, xmm1       /* xmm6=Geps */
        mulpd  xmm7, xmm2       /* xmm7=Heps2 */
        addpd  xmm5, xmm6
        addpd  xmm5, xmm7       /* xmm5=Fp */       
        movapd xmm0, [esp + _qqO]
        mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
        addpd  xmm5, xmm4 /* xmm5=VV */
        mulpd  xmm5, xmm0 /* vcoul=qq*VV */ 

	/* do nontable L-J */
	movapd xmm2, [esp + _rinvO]
	mulpd  xmm2, xmm2

        /* at this point mm5 contains vcoul and xmm0 fijC */
        /* increment vcoul - then we can get rid of mm5 */
        addpd  xmm5, [esp + _vctot]
        movapd [esp + _vctot], xmm5 

	movapd xmm1, xmm2
	mulpd  xmm1, xmm1
	mulpd  xmm1, xmm2	/* xmm1=rinvsix */
	movapd xmm4, xmm1
	mulpd  xmm4, xmm4	/* xmm4=rinvtwelve */
	mulpd  xmm1, [esp + _c6]
	mulpd  xmm4, [esp + _c12]
	movapd xmm3, xmm4
	subpd  xmm3, xmm1	/* xmm3=vnb12-vnb6 */
	addpd  xmm3, [esp + _vnbtot]
	movapd [esp + _vnbtot], xmm3
	

	/* Done with O interactions - now H1! */
	movapd xmm7, [esp + _rH1]
	mulpd xmm7, [esp + _tsc]
	cvttpd2pi mm6, xmm7	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm7, xmm6
	movapd xmm1, xmm7	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqH]
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */
        /* at this point mm5 contains vcoul */
        /* increment vcoul */
        addpd  xmm5, [esp + _vctot]
        movapd [esp + _vctot], xmm5 

	/* Done with H1, finally we do H2 interactions */
	movapd xmm7, [esp + _rH2]
	mulpd   xmm7, [esp + _tsc]
	cvttpd2pi mm6, xmm7	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm7, xmm6
	movapd xmm1, xmm7	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqH]
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */
        /* at this point mm5 contains vcoul */
        /* increment vcoul */
        addpd  xmm5, [esp + _vctot]
        movapd [esp + _vctot], xmm5 
			
	/* should we do one more iteration? */
	sub   [esp + _innerk],  2
	jl    .imc3120_checksingle
	jmp   .imc3120_unroll_loop
.imc3120_checksingle:	
	mov   edx, [esp + _innerk]
	and   edx, 1
	jnz   .imc3120_dosingle
	jmp   .imc3120_updateouterdata
.imc3120_dosingle:
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]

	mov esi, [ebp + _charge]        /* base of charge[] */
	xorpd xmm3, xmm3	
	movlpd xmm3, [esi + eax*8]
	movapd xmm4, xmm3	     
	mulpd  xmm3, [esp + _iqO]
	mulpd  xmm4, [esp + _iqH]

	movd  mm0, eax		/* use mmx registers as temp storage */
	movapd  [esp + _qqO], xmm3
	movapd  [esp + _qqH], xmm4	

	mov esi, [ebp + _type]
	mov eax, [esi + eax*4]
	mov esi, [ebp + _nbfp]
	shl eax, 1	
	mov edi, [esp + _ntia]
	add eax, edi

	movupd xmm6, [esi + eax*8]	/* c6a c12a */
	xorpd xmm7, xmm7
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0
	movapd [esp + _c6], xmm4
	movapd [esp + _c12], xmm6
	
	mov esi, [ebp + _pos]       /* base of pos[] */
	lea   eax, [eax + eax*2]         /* replace jnr with j3 */
	
	/* move coords to xmm0-xmm2 */
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]

	/* move ixO-izO to xmm4-xmm6 */
	movapd xmm4, [esp + _ixO]
	movapd xmm5, [esp + _iyO]
	movapd xmm6, [esp + _izO]

	/* calc dr */
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	/* square it */
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6
	movapd xmm7, xmm4
	/* rsqO in xmm7 */

	/* move ixH1-izH1 to xmm4-xmm6 */
	movapd xmm4, [esp + _ixH1]
	movapd xmm5, [esp + _iyH1]
	movapd xmm6, [esp + _izH1]

	/* calc dr */
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	/* square it */
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm6, xmm5
	addsd xmm6, xmm4
	/* rsqH1 in xmm6 */

	/* move ixH2-izH2 to xmm3-xmm5 */ 
	movapd xmm3, [esp + _ixH2]
	movapd xmm4, [esp + _iyH2]
	movapd xmm5, [esp + _izH2]

	/* calc dr */
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2

	/* square it */
	mulsd xmm3,xmm3
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	addsd xmm5, xmm4
	addsd xmm5, xmm3
	/* rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 */

	/* start with rsqO - put seed in xmm2 */
	cvtsd2ss xmm2, xmm7	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulsd   xmm2, xmm7	/* rsq*lu*lu */
	subsd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulsd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulsd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm2, xmm7
	movapd xmm3, xmm4
	mulsd xmm4, xmm4	/* lu*lu */
	mulsd xmm2, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subsd xmm4, xmm2	/* 3-rsq*lu*lu */
	mulsd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulsd xmm4, [esp + _half] /* rinv */
	movapd  [esp + _rinvO], xmm4	/* rinvO in xmm4 */
	mulsd   xmm7, xmm4
	movapd  [esp + _rO], xmm7	/* r in xmm7 */
	
	/* rsqH1 - seed in xmm2 */
	cvtsd2ss xmm2, xmm6	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulsd   xmm2, xmm6	/* rsq*lu*lu */
	subsd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulsd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulsd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm2, xmm6
	movapd xmm3, xmm4
	mulsd xmm4, xmm4	/* lu*lu */
	mulsd xmm2, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subsd xmm4, xmm2	/* 3-rsq*lu*lu */
	mulsd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulsd xmm4, [esp + _half] /* rinv */
	movapd [esp + _rinvH1], xmm4	/* rinvH1 */
	mulsd  xmm6, xmm4
	movapd [esp + _rH1], xmm6	/* rH1 */
	
	/* rsqH2 - seed in xmm2 */
	cvtsd2ss xmm2, xmm5	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulsd   xmm2, xmm5	/* rsq*lu*lu */
	subsd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulsd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulsd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm2, xmm5
	movapd xmm3, xmm4
	mulsd xmm4, xmm4	/* lu*lu */
	mulsd xmm2, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subsd xmm4, xmm2	/* 3-rsq*lu*lu */
	mulsd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulsd xmm4, [esp + _half] /* rinv */
	movapd [esp + _rinvH2], xmm4 /* rinv */
	mulsd xmm5, xmm4
	movapd [esp + _rH2], xmm5 /* r */

	/* do O interactions */
	movd mm0, eax	
	/* rO is still in xmm7 */
	movapd xmm0, [esp + _rinvO]
	mulsd   xmm7, [esp + _tsc]
	cvttsd2si eax, xmm7	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm7, xmm6
	movapd xmm1, xmm7	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 
        mulsd  xmm6, xmm1       /* xmm6=Geps */
        mulsd  xmm7, xmm2       /* xmm7=Heps2 */
        addsd  xmm5, xmm6
        addsd  xmm5, xmm7       /* xmm5=Fp */       
        movapd xmm0, [esp + _qqO]
        mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
        addsd  xmm5, xmm4 /* xmm5=VV */
        mulsd  xmm5, xmm0 /* vcoul=qq*VV */ 

	/* do nontable L-J */
	movapd xmm2, [esp + _rinvO]
	mulsd  xmm2, xmm2

        /* at this point mm5 contains vcoul */
        /* increment vcoul - then we can get rid of mm5 */
        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5 

	movapd xmm1, xmm2
	mulsd  xmm1, xmm1
	mulsd  xmm1, xmm2	/* xmm1=rinvsix */
	movapd xmm4, xmm1
	mulsd  xmm4, xmm4	/* xmm4=rinvtwelve */
	mulsd  xmm1, [esp + _c6]
	mulsd  xmm4, [esp + _c12]
	movapd xmm3, xmm4
	subsd  xmm3, xmm1	/* xmm3=vnb12-vnb6 */
	addsd  xmm3, [esp + _vnbtot]
	movlpd [esp + _vnbtot], xmm3

	/* Done with O interactions - now H1! */
	movapd xmm7, [esp + _rH1]
	mulpd xmm7, [esp + _tsc]
	cvttsd2si eax, xmm7	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subpd xmm7, xmm6
	movapd xmm1, xmm7	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqH]
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul */
        /* increment vcoul */
        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5 

	/* Done with H1, finally we do H2 interactions */
	movapd xmm7, [esp + _rH2]
	mulsd   xmm7, [esp + _tsc]
	cvttsd2si eax, xmm7	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm7, xmm6
	movapd xmm1, xmm7	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqH]
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul */
        /* increment vcoul */
        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5
	
.imc3120_updateouterdata:
	/* get gid */
	mov   edx, [ebp + _gid]  
	mov   edx, [edx]
	add   [ebp + _gid],  4	

	/* accumulate total potential energy and update it */
	movapd xmm7, [esp + _vctot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */
        
	/* add earlier value from mem */
	mov   eax, [ebp + _Vc]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* accumulate total lj energy and update it */
	movapd xmm7, [esp + _vnbtot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */

	/* add earlier value from mem */
	mov   eax, [ebp + _Vnb]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* finish if last */
	mov   ecx, [ebp + _nri]
	dec ecx
	jecxz .imc3120_end
	/* not last, iterate once more! */ 
	mov [ebp + _nri], ecx
	jmp .imc3120_outer
.imc3120_end:
	emms
	mov eax, [esp + _salign]
	add esp, eax
	add esp, 440
	pop edi
	pop esi
        pop edx
        pop ecx
        pop ebx
        pop eax
	leave
	ret
	

	
.globl mcinl3130_sse2
	.type mcinl3130_sse2,@function
mcinl3130_sse2:	
.equ		_nri,		8
.equ		_iinr,		12
.equ		_jindex,	16
.equ		_jjnr,		20
.equ		_shift,		24
.equ		_shiftvec,	28
.equ		_gid,		32
.equ		_pos,		36		
.equ		_charge,	40
.equ		_facel,		44 /* double */	
.equ		_Vc,		52			
.equ		_type,		56
.equ		_ntype,		60
.equ		_nbfp,		64	
.equ		_Vnb,		68
.equ		_tabscale,	72 /* double */	
.equ		_VFtab,		80
	/* stack offsets for local variables */ 
	/* bottom of stack is cache-aligned for sse use */
.equ		_ixO,		0
.equ		_iyO,		16
.equ		_izO,		32
.equ		_ixH1,		48
.equ		_iyH1,		64
.equ		_izH1,		80
.equ		_ixH2,		96
.equ		_iyH2,		112
.equ		_izH2,		128
.equ		_jxO,		144
.equ		_jyO,		160
.equ		_jzO,		176
.equ		_jxH1,		192
.equ		_jyH1,		208
.equ		_jzH1,		224 
.equ		_jxH2,		240
.equ		_jyH2,		256
.equ		_jzH2,		272
.equ		_qqOO,		288
.equ		_qqOH,		304
.equ		_qqHH,		320
.equ		_tsc,		336
.equ		_c6,		352
.equ		_c12,		368		 
.equ		_vctot,		384
.equ		_vnbtot,	400
.equ		_half,		416
.equ		_three,		432
.equ		_rsqOO,		448
.equ		_rsqOH1,	464
.equ		_rsqOH2,	480
.equ		_rsqH1O,	496
.equ		_rsqH1H1,	512
.equ		_rsqH1H2,	528
.equ		_rsqH2O,	544
.equ		_rsqH2H1,	560
.equ		_rsqH2H2,	576
.equ		_rinvOO,	592
.equ		_rinvOH1,	608
.equ		_rinvOH2,	624
.equ		_rinvH1O,	640
.equ		_rinvH1H1,	656
.equ		_rinvH1H2,	672
.equ		_rinvH2O,	688
.equ		_rinvH2H1,	704
.equ		_rinvH2H2,	720	
.equ		_is3,		736
.equ		_ii3,		740
.equ		_innerjjnr,	744
.equ		_innerk,	748
.equ		_salign,	752
	push ebp
	mov ebp,esp	
        push eax
        push ebx
        push ecx
        push edx
	push esi
	push edi
	sub esp, 756		/* local stack space */
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + _salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm2, [sse2_three]
	movsd xmm5, [ebp + _tabscale]
	movapd [esp + _half],  xmm0
	movapd [esp + _three], xmm2
	shufpd xmm5, xmm5, 0
	movapd [esp + _tsc],  xmm5

	/* assume we have at least one i particle - start directly */
	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	mov   ebx, [ecx]	        /* ebx =ii */

	mov   edx, [ebp + _charge]
	movsd xmm3, [edx + ebx*8]	
	movsd xmm4, xmm3	
	movsd xmm5, [edx + ebx*8 + 8]	
	movsd xmm6, [ebp + _facel]
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm5
	mulsd  xmm5, xmm5
	mulsd  xmm3, xmm6
	mulsd  xmm4, xmm6
	mulsd  xmm5, xmm6
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _qqOO], xmm3
	movapd [esp + _qqOH], xmm4
	movapd [esp + _qqHH], xmm5
		
	xorpd xmm0, xmm0
	mov   edx, [ebp + _type]
	mov   ecx, [edx + ebx*4]
	shl   ecx, 1
	mov   edx, ecx
	imul  ecx, [ebp + _ntype]      /* ecx = ntia = 2*ntype*type[ii0] */
	add   edx, ecx
	mov   eax, [ebp + _nbfp]
	movupd xmm0, [eax + edx*8] 
	movhlps xmm1, xmm0
	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	movapd [esp + _c6], xmm0
	movapd [esp + _c12], xmm1

.imc3130_outer:
	mov   eax, [ebp + _shift]      /* eax = pointer into shift[] */
	mov   ebx, [eax]		/* ebx=shift[n] */
	add   [ebp + _shift],  4  /* advance pointer one step */
	
	lea   ebx, [ebx + ebx*2]        /* ebx=3*is */

	mov   eax, [ebp + _shiftvec]   /* eax = base of shiftvec[] */

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	add   [ebp + _iinr],  4   /* advance pointer */
	mov   ebx, [ecx]	        /* ebx =ii */

	lea   ebx, [ebx + ebx*2]	/* ebx = 3*ii=ii3 */
	mov   eax, [ebp + _pos]        /* eax = base of pos[] */ 
	mov   [esp + _ii3], ebx	
	
	movapd xmm3, xmm0
	movapd xmm4, xmm1
	movapd xmm5, xmm2
	addsd xmm3, [eax + ebx*8]
	addsd xmm4, [eax + ebx*8 + 8]
	addsd xmm5, [eax + ebx*8 + 16]		
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _ixO], xmm3
	movapd [esp + _iyO], xmm4
	movapd [esp + _izO], xmm5

	movsd xmm3, xmm0
	movsd xmm4, xmm1
	movsd xmm5, xmm2
	addsd xmm0, [eax + ebx*8 + 24]
	addsd xmm1, [eax + ebx*8 + 32]
	addsd xmm2, [eax + ebx*8 + 40]		
	addsd xmm3, [eax + ebx*8 + 48]
	addsd xmm4, [eax + ebx*8 + 56]
	addsd xmm5, [eax + ebx*8 + 64]		

	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _ixH1], xmm0
	movapd [esp + _iyH1], xmm1
	movapd [esp + _izH1], xmm2
	movapd [esp + _ixH2], xmm3
	movapd [esp + _iyH2], xmm4
	movapd [esp + _izH2], xmm5

	/* clear vctot */
	xorpd xmm4, xmm4
	movapd [esp + _vctot], xmm4
	movapd [esp + _vnbtot], xmm4
	
	mov   eax, [ebp + _jindex]
	mov   ecx, [eax]	         /* jindex[n] */
	mov   edx, [eax + 4]	         /* jindex[n+1] */
	add   [ebp + _jindex],  4
	sub   edx, ecx                   /* number of innerloop atoms */

	mov   esi, [ebp + _pos]
	mov   eax, [ebp + _jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + _innerjjnr], eax     /* pointer to jjnr[nj0] */
	sub   edx,  2
	mov   [esp + _innerk], edx        /* number of innerloop atoms */
	jge   .imc3130_unroll_loop
	jmp   .imc3130_checksingle
.imc3130_unroll_loop:	
	/* twice unrolled innerloop here */
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]	
	mov   ebx, [edx + 4] 
	
	add   [esp + _innerjjnr], 8 /* advance pointer (unrolled 2) */

	mov esi, [ebp + _pos]       /* base of pos[] */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */
	lea   ebx, [ebx + ebx*2]	
	
	/* move j coordinates to local temp variables */
	movlpd xmm2, [esi + eax*8]
	movlpd xmm3, [esi + eax*8 + 8]
	movlpd xmm4, [esi + eax*8 + 16]
	movlpd xmm5, [esi + eax*8 + 24]
	movlpd xmm6, [esi + eax*8 + 32]
	movlpd xmm7, [esi + eax*8 + 40]
	movhpd xmm2, [esi + ebx*8]
	movhpd xmm3, [esi + ebx*8 + 8]
	movhpd xmm4, [esi + ebx*8 + 16]
	movhpd xmm5, [esi + ebx*8 + 24]
	movhpd xmm6, [esi + ebx*8 + 32]
	movhpd xmm7, [esi + ebx*8 + 40]
	movapd 	[esp + _jxO], xmm2
	movapd 	[esp + _jyO], xmm3
	movapd 	[esp + _jzO], xmm4
	movapd 	[esp + _jxH1], xmm5
	movapd 	[esp + _jyH1], xmm6
	movapd 	[esp + _jzH1], xmm7
	movlpd xmm2, [esi + eax*8 + 48]
	movlpd xmm3, [esi + eax*8 + 56]
	movlpd xmm4, [esi + eax*8 + 64]
	movhpd xmm2, [esi + ebx*8 + 48]
	movhpd xmm3, [esi + ebx*8 + 56]
	movhpd xmm4, [esi + ebx*8 + 64]
	movapd 	[esp + _jxH2], xmm2
	movapd 	[esp + _jyH2], xmm3
	movapd 	[esp + _jzH2], xmm4
	
	movapd xmm0, [esp + _ixO]
	movapd xmm1, [esp + _iyO]
	movapd xmm2, [esp + _izO]
	movapd xmm3, [esp + _ixO]
	movapd xmm4, [esp + _iyO]
	movapd xmm5, [esp + _izO]
	subpd  xmm0, [esp + _jxO]
	subpd  xmm1, [esp + _jyO]
	subpd  xmm2, [esp + _jzO]
	subpd  xmm3, [esp + _jxH1]
	subpd  xmm4, [esp + _jyH1]
	subpd  xmm5, [esp + _jzH1]
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + _rsqOO], xmm0
	movapd [esp + _rsqOH1], xmm3

	movapd xmm0, [esp + _ixO]
	movapd xmm1, [esp + _iyO]
	movapd xmm2, [esp + _izO]
	movapd xmm3, [esp + _ixH1]
	movapd xmm4, [esp + _iyH1]
	movapd xmm5, [esp + _izH1]
	subpd  xmm0, [esp + _jxH2]
	subpd  xmm1, [esp + _jyH2]
	subpd  xmm2, [esp + _jzH2]
	subpd  xmm3, [esp + _jxO]
	subpd  xmm4, [esp + _jyO]
	subpd  xmm5, [esp + _jzO]
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + _rsqOH2], xmm0
	movapd [esp + _rsqH1O], xmm3

	movapd xmm0, [esp + _ixH1]
	movapd xmm1, [esp + _iyH1]
	movapd xmm2, [esp + _izH1]
	movapd xmm3, [esp + _ixH1]
	movapd xmm4, [esp + _iyH1]
	movapd xmm5, [esp + _izH1]
	subpd  xmm0, [esp + _jxH1]
	subpd  xmm1, [esp + _jyH1]
	subpd  xmm2, [esp + _jzH1]
	subpd  xmm3, [esp + _jxH2]
	subpd  xmm4, [esp + _jyH2]
	subpd  xmm5, [esp + _jzH2]
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + _rsqH1H1], xmm0
	movapd [esp + _rsqH1H2], xmm3

	movapd xmm0, [esp + _ixH2]
	movapd xmm1, [esp + _iyH2]
	movapd xmm2, [esp + _izH2]
	movapd xmm3, [esp + _ixH2]
	movapd xmm4, [esp + _iyH2]
	movapd xmm5, [esp + _izH2]
	subpd  xmm0, [esp + _jxO]
	subpd  xmm1, [esp + _jyO]
	subpd  xmm2, [esp + _jzO]
	subpd  xmm3, [esp + _jxH1]
	subpd  xmm4, [esp + _jyH1]
	subpd  xmm5, [esp + _jzH1]
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm4, xmm3
	addpd  xmm4, xmm5
	movapd [esp + _rsqH2O], xmm0
	movapd [esp + _rsqH2H1], xmm4

	movapd xmm0, [esp + _ixH2]
	movapd xmm1, [esp + _iyH2]
	movapd xmm2, [esp + _izH2]
	subpd  xmm0, [esp + _jxH2]
	subpd  xmm1, [esp + _jyH2]
	subpd  xmm2, [esp + _jzH2]
	mulpd xmm0, xmm0
	mulpd xmm1, xmm1
	mulpd xmm2, xmm2
	addpd xmm0, xmm1
	addpd xmm0, xmm2
	movapd [esp + _rsqH2H2], xmm0
		
	/* start doing invsqrt use rsq values in xmm0, xmm4 */
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulpd   xmm1, xmm1	/* luA*luA */
	mulpd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	mulpd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subpd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm3, [esp + _half] /* iter1 */
	mulpd   xmm7, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulpd   xmm3, xmm3	/* luA*luA */
	mulpd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	mulpd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subpd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm1, [esp + _half] /* rinv */
	mulpd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvH2H2], xmm1
	movapd [esp + _rinvH2H1], xmm5

	movapd xmm0, [esp + _rsqOO]
	movapd xmm4, [esp + _rsqOH1]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulpd   xmm1, xmm1	/* luA*luA */
	mulpd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	mulpd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subpd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm3, [esp + _half] /* iter1 of  */
	mulpd   xmm7, [esp + _half] /* iter1 of  */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulpd   xmm3, xmm3	/* luA*luA */
	mulpd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	mulpd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subpd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm1, [esp + _half] /* rinv */
	mulpd   xmm5, [esp + _half] /* rinv*/
	movapd [esp + _rinvOO], xmm1
	movapd [esp + _rinvOH1], xmm5

	movapd xmm0, [esp + _rsqOH2]
	movapd xmm4, [esp + _rsqH1O]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulpd   xmm1, xmm1	/* luA*luA */
	mulpd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	mulpd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subpd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm3, [esp + _half] /* iter1 */
	mulpd   xmm7, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulpd   xmm3, xmm3	/* luA*luA */
	mulpd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	mulpd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subpd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm1, [esp + _half] /* rinv */
	mulpd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvOH2], xmm1
	movapd [esp + _rinvH1O], xmm5

	movapd xmm0, [esp + _rsqH1H1]
	movapd xmm4, [esp + _rsqH1H2]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulpd   xmm1, xmm1	/* luA*luA */
	mulpd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	mulpd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subpd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm3, [esp + _half] /* iter1a */
	mulpd   xmm7, [esp + _half] /* iter1b */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulpd   xmm3, xmm3	/* luA*luA */
	mulpd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	mulpd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subpd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm1, [esp + _half] /* rinv */
	mulpd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvH1H1], xmm1
	movapd [esp + _rinvH1H2], xmm5

	movapd xmm0, [esp + _rsqH2O]
	cvtpd2ps xmm1, xmm0	
	rsqrtps xmm1, xmm1
	cvtps2pd xmm1, xmm1
	
	movapd  xmm2, xmm1	/* copy of luA */
	mulpd   xmm1, xmm1	/* luA*luA */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm3, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	mulpd   xmm3, xmm3	/* luA*luA */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm1, [esp + _half] /* rinv */
	movapd [esp + _rinvH2O], xmm1
	
	/* start with OO interaction */
	movapd xmm0, [esp + _rinvOO]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + _rsqOO] /* xmm1=r */
	mulpd  xmm1, [esp + _tsc]

	cvttpd2pi mm6, xmm1	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqOO]
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul */
        /* increment vcoul - then we can get rid of mm5 */
        /* update vctot */
        addpd  xmm5, [esp + _vctot]
        movapd [esp + _vctot], xmm5

	/* start doing lj */
	movapd xmm2, xmm0
	mulpd  xmm2, xmm2
	movapd xmm1, xmm2
	mulpd  xmm1, xmm2
	mulpd  xmm1, xmm2	/* xmm1=rinvsix */
	movapd xmm2, xmm1
	mulpd  xmm2, xmm2	/* xmm2=rinvtwelve */
	mulpd  xmm1, [esp + _c6]
	mulpd  xmm2, [esp + _c12]
	movapd xmm4, xmm2
	subpd  xmm4, xmm1
	addpd  xmm4, [esp + _vnbtot]
	movapd [esp + _vnbtot], xmm4

	/* O-H1 interaction */
	movapd xmm0, [esp + _rinvOH1]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + _rsqOH1] /* xmm1=r */
	mulpd  xmm1, [esp + _tsc]

	cvttpd2pi mm6, xmm1	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqOH]
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul */

        addpd  xmm5, [esp + _vctot]
        movapd [esp + _vctot], xmm5

	/* O-H2 interaction */ 
	movapd xmm0, [esp + _rinvOH2]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + _rsqOH2] /* xmm1=r */
	mulpd  xmm1, [esp + _tsc]
	
	cvttpd2pi mm6, xmm1	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqOH]
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul */

        addpd  xmm5, [esp + _vctot]
        movapd [esp + _vctot], xmm5

	/* H1-O interaction */
	movapd xmm0, [esp + _rinvH1O]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + _rsqH1O] /* xmm1=r */
	mulpd  xmm1, [esp + _tsc]
	
	cvttpd2pi mm6, xmm1	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqOH]
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul */

        addpd  xmm5, [esp + _vctot]
        movapd [esp + _vctot], xmm5

	/* H1-H1 interaction */
	movapd xmm0, [esp + _rinvH1H1]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + _rsqH1H1] /* xmm1=r */
	mulpd  xmm1, [esp + _tsc]	
	cvttpd2pi mm6, xmm1	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqHH]
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul */

        addpd  xmm5, [esp + _vctot]
        movapd [esp + _vctot], xmm5

	/* H1-H2 interaction */
	movapd xmm0, [esp + _rinvH1H2]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + _rsqH1H2] /* xmm1=r */
	mulpd  xmm1, [esp + _tsc]
	cvttpd2pi mm6, xmm1	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqHH]
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul */

        addpd  xmm5, [esp + _vctot]
        movapd [esp + _vctot], xmm5

	/* H2-O interaction */
	movapd xmm0, [esp + _rinvH2O]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + _rsqH2O] /* xmm1=r */
	mulpd  xmm1, [esp + _tsc]	
	cvttpd2pi mm6, xmm1	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqOH]
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul */

        addpd  xmm5, [esp + _vctot]
        movapd [esp + _vctot], xmm5

	/* H2-H1 interaction */
	movapd xmm0, [esp + _rinvH2H1]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + _rsqH2H1] /* xmm1=r */
	mulpd  xmm1, [esp + _tsc]
	cvttpd2pi mm6, xmm1	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqHH]
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul */

        addpd  xmm5, [esp + _vctot]
        movapd [esp + _vctot], xmm5

	/* H2-H2 interaction */
	movapd xmm0, [esp + _rinvH2H2]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + _rsqH2H2] /* xmm1=r */
	mulpd  xmm1, [esp + _tsc]	
	cvttpd2pi mm6, xmm1	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqHH]
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul */
	
        addpd  xmm5, [esp + _vctot]
        movapd [esp + _vctot], xmm5

	/* should we do one more iteration? */
	sub   [esp + _innerk],  2
	jl    .imc3130_checksingle
	jmp   .imc3130_unroll_loop
.imc3130_checksingle:
	mov   edx, [esp + _innerk]
	and   edx, 1
	jnz   .imc3130_dosingle
	jmp   .imc3130_updateouterdata
.imc3130_dosingle:
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]

	mov esi, [ebp + _pos]
	lea   eax, [eax + eax*2]  

	/* fetch j coordinates */
	movlpd xmm2, [esi + eax*8]
	movlpd xmm3, [esi + eax*8 + 8]
	movlpd xmm4, [esi + eax*8 + 16]
	movlpd xmm5, [esi + eax*8 + 24]
	movlpd xmm6, [esi + eax*8 + 32]
	movlpd xmm7, [esi + eax*8 + 40]
	movapd 	[esp + _jxO], xmm2
	movapd 	[esp + _jyO], xmm3
	movapd 	[esp + _jzO], xmm4
	movapd 	[esp + _jxH1], xmm5
	movapd 	[esp + _jyH1], xmm6
	movapd 	[esp + _jzH1], xmm7
	movlpd xmm2, [esi + eax*8 + 48]
	movlpd xmm3, [esi + eax*8 + 56]
	movlpd xmm4, [esi + eax*8 + 64]
	movapd 	[esp + _jxH2], xmm2
	movapd 	[esp + _jyH2], xmm3
	movapd 	[esp + _jzH2], xmm4
	
	movapd xmm0, [esp + _ixO]
	movapd xmm1, [esp + _iyO]
	movapd xmm2, [esp + _izO]
	movapd xmm3, [esp + _ixO]
	movapd xmm4, [esp + _iyO]
	movapd xmm5, [esp + _izO]
	subsd  xmm0, [esp + _jxO]
	subsd  xmm1, [esp + _jyO]
	subsd  xmm2, [esp + _jzO]
	subsd  xmm3, [esp + _jxH1]
	subsd  xmm4, [esp + _jyH1]
	subsd  xmm5, [esp + _jzH1]
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + _rsqOO], xmm0
	movapd [esp + _rsqOH1], xmm3

	movapd xmm0, [esp + _ixO]
	movapd xmm1, [esp + _iyO]
	movapd xmm2, [esp + _izO]
	movapd xmm3, [esp + _ixH1]
	movapd xmm4, [esp + _iyH1]
	movapd xmm5, [esp + _izH1]
	subsd  xmm0, [esp + _jxH2]
	subsd  xmm1, [esp + _jyH2]
	subsd  xmm2, [esp + _jzH2]
	subsd  xmm3, [esp + _jxO]
	subsd  xmm4, [esp + _jyO]
	subsd  xmm5, [esp + _jzO]
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + _rsqOH2], xmm0
	movapd [esp + _rsqH1O], xmm3

	movapd xmm0, [esp + _ixH1]
	movapd xmm1, [esp + _iyH1]
	movapd xmm2, [esp + _izH1]
	movapd xmm3, [esp + _ixH1]
	movapd xmm4, [esp + _iyH1]
	movapd xmm5, [esp + _izH1]
	subsd  xmm0, [esp + _jxH1]
	subsd  xmm1, [esp + _jyH1]
	subsd  xmm2, [esp + _jzH1]
	subsd  xmm3, [esp + _jxH2]
	subsd  xmm4, [esp + _jyH2]
	subsd  xmm5, [esp + _jzH2]
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + _rsqH1H1], xmm0
	movapd [esp + _rsqH1H2], xmm3

	movapd xmm0, [esp + _ixH2]
	movapd xmm1, [esp + _iyH2]
	movapd xmm2, [esp + _izH2]
	movapd xmm3, [esp + _ixH2]
	movapd xmm4, [esp + _iyH2]
	movapd xmm5, [esp + _izH2]
	subsd  xmm0, [esp + _jxO]
	subsd  xmm1, [esp + _jyO]
	subsd  xmm2, [esp + _jzO]
	subsd  xmm3, [esp + _jxH1]
	subsd  xmm4, [esp + _jyH1]
	subsd  xmm5, [esp + _jzH1]
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm4, xmm3
	addsd  xmm4, xmm5
	movapd [esp + _rsqH2O], xmm0
	movapd [esp + _rsqH2H1], xmm4

	movapd xmm0, [esp + _ixH2]
	movapd xmm1, [esp + _iyH2]
	movapd xmm2, [esp + _izH2]
	subsd  xmm0, [esp + _jxH2]
	subsd  xmm1, [esp + _jyH2]
	subsd  xmm2, [esp + _jzH2]
	mulsd xmm0, xmm0
	mulsd xmm1, xmm1
	mulsd xmm2, xmm2
	addsd xmm0, xmm1
	addsd xmm0, xmm2
	movapd [esp + _rsqH2H2], xmm0
		
	/* start doing invsqrt use rsq values in xmm0, xmm4 */
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulsd   xmm1, xmm1	/* luA*luA */
	mulsd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	mulsd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subsd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm3, [esp + _half] /* iter1 */
	mulsd   xmm7, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulsd   xmm3, xmm3	/* luA*luA */
	mulsd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	mulsd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subsd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm1, [esp + _half] /* rinv */
	mulsd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvH2H2], xmm1
	movapd [esp + _rinvH2H1], xmm5

	movapd xmm0, [esp + _rsqOO]
	movapd xmm4, [esp + _rsqOH1]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulsd   xmm1, xmm1	/* luA*luA */
	mulsd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	mulsd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subsd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm3, [esp + _half] /* iter1 of  */
	mulsd   xmm7, [esp + _half] /* iter1 of  */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulsd   xmm3, xmm3	/* luA*luA */
	mulsd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	mulsd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subsd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm1, [esp + _half] /* rinv */
	mulsd   xmm5, [esp + _half] /* rinv*/
	movapd [esp + _rinvOO], xmm1
	movapd [esp + _rinvOH1], xmm5

	movapd xmm0, [esp + _rsqOH2]
	movapd xmm4, [esp + _rsqH1O]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulsd   xmm1, xmm1	/* luA*luA */
	mulsd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	mulsd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subsd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm3, [esp + _half] /* iter1 */
	mulsd   xmm7, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulsd   xmm3, xmm3	/* luA*luA */
	mulsd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	mulsd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subsd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm1, [esp + _half] /* rinv */
	mulsd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvOH2], xmm1
	movapd [esp + _rinvH1O], xmm5

	movapd xmm0, [esp + _rsqH1H1]
	movapd xmm4, [esp + _rsqH1H2]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulsd   xmm1, xmm1	/* luA*luA */
	mulsd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	mulsd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subsd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm3, [esp + _half] /* iter1a */
	mulsd   xmm7, [esp + _half] /* iter1b */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulsd   xmm3, xmm3	/* luA*luA */
	mulsd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	mulsd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subsd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm1, [esp + _half] /* rinv */
	mulsd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvH1H1], xmm1
	movapd [esp + _rinvH1H2], xmm5

	movapd xmm0, [esp + _rsqH2O]
	cvtsd2ss xmm1, xmm0	
	rsqrtss xmm1, xmm1
	cvtss2sd xmm1, xmm1
	
	movapd  xmm2, xmm1	/* copy of luA */
	mulsd   xmm1, xmm1	/* luA*luA */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm3, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	mulsd   xmm3, xmm3	/* luA*luA */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm1, [esp + _half] /* rinv */
	movapd [esp + _rinvH2O], xmm1
	
	/* start with OO interaction */
	movapd xmm0, [esp + _rinvOO]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + _rsqOO] /* xmm1=r */
	mulsd  xmm1, [esp + _tsc]

	movd mm0, eax	
	cvttsd2si eax, xmm1	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1  */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1  */
	unpckhpd xmm7, xmm3	/* H1  */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqOO]
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul */
        /* increment vcoul - then we can get rid of mm5 */
        /* update vctot */
        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5

	/* start doing lj */
	movapd xmm2, xmm0
	mulsd  xmm2, xmm2
	movapd xmm1, xmm2
	mulsd  xmm1, xmm2
	mulsd  xmm1, xmm2	/* xmm1=rinvsix */
	movapd xmm2, xmm1
	mulsd  xmm2, xmm2	/* xmm2=rinvtwelve */
	mulsd  xmm1, [esp + _c6]
	mulsd  xmm2, [esp + _c12]
	movapd xmm4, xmm2
	subsd  xmm4, xmm1
	addsd  xmm4, [esp + _vnbtot]
	movlpd [esp + _vnbtot], xmm4

	/* O-H1 interaction */
	movapd xmm0, [esp + _rinvOH1]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + _rsqOH1] /* xmm1=r */
	mulsd  xmm1, [esp + _tsc]

	cvttsd2si eax, xmm1	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1  */
	unpckhpd xmm5, xmm3	/* F1  */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqOH]
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */
        /* at this point mm5 contains vcoul */

        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5

	/* O-H2 interaction */ 
	movapd xmm0, [esp + _rinvOH2]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + _rsqOH2] /* xmm1=r */
	mulsd  xmm1, [esp + _tsc]
	
	cvttsd2si eax, xmm1	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqOH]
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul */

        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5

	/* H1-O interaction */
	movapd xmm0, [esp + _rinvH1O]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + _rsqH1O] /* xmm1=r */
	mulsd  xmm1, [esp + _tsc]
	
	cvttsd2si eax, xmm1	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqOH]
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul */

        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5

	/* H1-H1 interaction */
	movapd xmm0, [esp + _rinvH1H1]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + _rsqH1H1] /* xmm1=r */
	mulsd  xmm1, [esp + _tsc]	
	cvttsd2si eax, xmm1	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqHH]
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul */

        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5

	/* H1-H2 interaction */
	movapd xmm0, [esp + _rinvH1H2]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + _rsqH1H2] /* xmm1=r */
	mulsd  xmm1, [esp + _tsc]
	cvttsd2si eax, xmm1	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqHH]
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul */

        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5

	/* H2-O interaction */
	movapd xmm0, [esp + _rinvH2O]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + _rsqH2O] /* xmm1=r */
	mulsd  xmm1, [esp + _tsc]	
	cvttsd2si eax, xmm1	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqOH]
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul */

        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5

	/* H2-H1 interaction */
	movapd xmm0, [esp + _rinvH2H1]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + _rsqH2H1] /* xmm1=r */
	mulsd  xmm1, [esp + _tsc]
	cvttsd2si eax, xmm1	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subpd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqHH]
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul */

        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5
	
	/* H2-H2 interaction */
	movapd xmm0, [esp + _rinvH2H2]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + _rsqH2H2] /* xmm1=r */
	mulsd  xmm1, [esp + _tsc]	
	cvttsd2si eax, xmm1	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqHH]
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul */

        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5
	
.imc3130_updateouterdata:
	/* get gid */
	mov   edx, [ebp + _gid]  
	mov   edx, [edx]
	add   [ebp + _gid],  4	

	/* accumulate total potential energy and update it */
	movapd xmm7, [esp + _vctot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */
        
	/* add earlier value from mem */
	mov   eax, [ebp + _Vc]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* accumulate total lj energy and update it */
	movapd xmm7, [esp + _vnbtot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */

	/* add earlier value from mem */
	mov   eax, [ebp + _Vnb]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* finish if last */
	mov   ecx, [ebp + _nri]
	dec ecx
	jecxz .imc3130_end
	/* not last, iterate once more! */ 
	mov [ebp + _nri], ecx
	jmp .imc3130_outer
.imc3130_end:
	emms
	mov eax, [esp + _salign]
	add esp, eax
	add esp, 756
	pop edi
	pop esi
        pop edx
        pop ecx
        pop ebx
        pop eax
	leave
	ret

	


.globl mcinl3300_sse2
	.type mcinl3300_sse2,@function
mcinl3300_sse2:	
.equ		_nri,		8
.equ		_iinr,		12
.equ		_jindex,	16
.equ		_jjnr,		20
.equ		_shift,		24
.equ		_shiftvec,	28
.equ		_gid,		32
.equ		_pos,		36		
.equ		_charge,	40
.equ		_facel,		44 /* double */
.equ		_Vc,		52			
.equ		_type,		56
.equ		_ntype,		60
.equ		_nbfp,		64	
.equ		_Vnb,		68
.equ		_tabscale,	72 /* double */
.equ		_VFtab,		80
	/* stack offsets for local variables */ 
	/* bottom of stack is cache-aligned for sse use */
.equ		_ix,		0
.equ		_iy,		16
.equ		_iz,		32
.equ		_iq,		48
.equ		_tsc,		64
.equ		_qq,		80	
.equ		_c6,		96
.equ		_c12,		112
.equ		_vctot,		128
.equ		_vnbtot,	144
.equ		_half,		160
.equ		_three,		176
.equ		_is3,		192
.equ		_ii3,		196
.equ		_ntia,		200	
.equ		_innerjjnr,	204
.equ		_innerk,	208
.equ		_salign,	212
	push ebp
	mov ebp,esp	
        push eax
        push ebx
        push ecx
        push edx
	push esi
	push edi
	sub esp, 216		/* local stack space */
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + _salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm2, [sse2_three]
	movsd xmm3, [ebp + _tabscale]
	movapd [esp + _half],  xmm0
	movapd [esp + _three],  xmm2
	shufpd xmm3, xmm3, 0
	movapd [esp + _tsc], xmm3

	/* assume we have at least one i particle - start directly */	
.imc3300_outer:
	mov   eax, [ebp + _shift]      /* eax = pointer into shift[] */
	mov   ebx, [eax]		/* ebx=shift[n] */
	add   [ebp + _shift],  4  /* advance pointer one step */
	
	lea   ebx, [ebx + ebx*2]        /* ebx=3*is */

	mov   eax, [ebp + _shiftvec]   /* eax = base of shiftvec[] */

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	add   [ebp + _iinr],  4   /* advance pointer */
	mov   ebx, [ecx]	        /* ebx =ii */

	mov   edx, [ebp + _charge]
	movsd xmm3, [edx + ebx*8]	
	mulsd xmm3, [ebp + _facel]
	shufpd xmm3, xmm3, 0

        mov   edx, [ebp + _type] 
        mov   edx, [edx + ebx*4]
        imul  edx, [ebp + _ntype]
        shl   edx, 1
        mov   [esp + _ntia], edx
		
	lea   ebx, [ebx + ebx*2]	/* ebx = 3*ii=ii3 */
	mov   eax, [ebp + _pos]        /* eax = base of pos[] */ 

	addsd xmm0, [eax + ebx*8]
	addsd xmm1, [eax + ebx*8 + 8]
	addsd xmm2, [eax + ebx*8 + 16]

	movapd [esp + _iq], xmm3
	
	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0

	movapd [esp + _ix], xmm0
	movapd [esp + _iy], xmm1
	movapd [esp + _iz], xmm2

	mov   [esp + _ii3], ebx
	
	/* clear vctot */
	xorpd xmm4, xmm4
	movapd [esp + _vctot], xmm4
	movapd [esp + _vnbtot], xmm4
	
	mov   eax, [ebp + _jindex]
	mov   ecx, [eax]	         /* jindex[n] */
	mov   edx, [eax + 4]	         /* jindex[n+1] */
	add   [ebp + _jindex],  4
	sub   edx, ecx                   /* number of innerloop atoms */

	mov   esi, [ebp + _pos]
	mov   eax, [ebp + _jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + _innerjjnr], eax     /* pointer to jjnr[nj0] */
	sub   edx,  2
	mov   [esp + _innerk], edx        /* number of innerloop atoms */
	jge   .imc3300_unroll_loop
	jmp   .imc3300_checksingle
.imc3300_unroll_loop:	
	/* twice unrolled innerloop here */
	mov   edx, [esp + _innerjjnr]   /* pointer to jjnr[k] */
	mov   eax, [edx]
	mov   ebx, [edx + 4]
	add   [esp + _innerjjnr], 8	/* advance pointer (unrolled 2) */

	mov esi, [ebp + _charge]        /* base of charge[] */

	movlpd xmm3, [esi + eax*8]
	movhpd xmm3, [esi + ebx*8]

	movapd xmm2, [esp + _iq]
	mulpd  xmm3, xmm2
	movapd [esp + _qq], xmm3	

	movd  mm0, eax		/* use mmx registers as temp storage */
	movd  mm1, ebx
	
	mov esi, [ebp + _type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov esi, [ebp + _nbfp]
	shl eax, 1
	shl ebx, 1
	mov edi, [esp + _ntia]
	add eax, edi
	add ebx, edi

	movupd xmm6, [esi + eax*8]	/* c6a c12a */
	movupd xmm7, [esi + ebx*8]	/* c6b c12b */
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0
	movd  ebx, mm1
	movapd [esp + _c6], xmm4
	movapd [esp + _c12], xmm6
	
	mov esi, [ebp + _pos]		/* base of pos[] */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */
	lea   ebx, [ebx + ebx*2]	

	/* move two coordinates to xmm0-xmm2 */
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]		

	/* move _ix-iz to xmm4-xmm6 */
	movapd xmm4, [esp + _ix]
	movapd xmm5, [esp + _iy]
	movapd xmm6, [esp + _iz]

	/* calc dr */
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	/* square it */
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6
	/* rsq in xmm4 */

	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm5, xmm5
	cvtps2pd xmm2, xmm5	/* lu in low xmm2 */

	/* lookup seed in xmm2 */
	movapd xmm5, xmm2	/* copy of lu */
	mulpd xmm2, xmm2	/* lu*lu */
	movapd xmm1, [esp + _three]
	mulpd xmm2, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subpd xmm1, xmm2	/* 30-rsq*lu*lu */
	mulpd xmm1, xmm5	
	mulpd xmm1, xmm0	/* xmm0=iter1 of rinv (new lu) */

	movapd xmm5, xmm1	/* copy of lu */
	mulpd xmm1, xmm1	/* lu*lu */
	movapd xmm2, [esp + _three]
	mulpd xmm1, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subpd xmm2, xmm1	/* 30-rsq*lu*lu */
	mulpd xmm2, xmm5	
	mulpd xmm0, xmm2	/* xmm0=iter2 of rinv (new lu) */
	mulpd xmm4, xmm0	/* xmm4=r */
	mulpd xmm4, [esp + _tsc]

	cvttpd2pi mm6, xmm4	/* mm6 = lu idx */
	cvtpi2pd xmm5, mm6
	subpd xmm4, xmm5
	movapd xmm1, xmm4	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */

	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */
	lea   eax, [eax + eax*2]	/* idx*=3 (12 total now) */
	lea   ebx, [ebx + ebx*2]	/* idx*=3 (12 total now) */

	/* Coulomb */
	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qq]
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */
	/* at this point mm5 contains vcoul */
	/* increment vcoul - then we can get rid of mm5 */
	/* update vctot */
	addpd  xmm5, [esp + _vctot]
	movapd [esp + _vctot], xmm5 

	/* Dispersion */
	movupd xmm4, [esi + eax*8 + 32]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8 + 32]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 48]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 48]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* Dispersion table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */

	mulpd  xmm5, [esp + _c6] /* vnb6 */

	addpd  xmm5, [esp + _vnbtot]
	movapd [esp + _vnbtot], xmm5

	/* Repulsion */
	movupd xmm4, [esi + eax*8 + 64]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8 + 64]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 80]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 80]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* Dispersion table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */

	mulpd  xmm5, [esp + _c12] /* vnb12 */
	
	addpd  xmm5, [esp + _vnbtot]
	movapd [esp + _vnbtot], xmm5

	/* should we do one more iteration? */
	sub   [esp + _innerk],  2
	jl    .imc3300_checksingle
	jmp   .imc3300_unroll_loop
.imc3300_checksingle:
	mov   edx, [esp + _innerk]
	and   edx, 1
	jnz    .imc3300_dosingle
	jmp    .imc3300_updateouterdata
.imc3300_dosingle:
	mov esi, [ebp + _charge]
	mov edi, [ebp + _pos]
	mov   ecx, [esp + _innerjjnr]
	mov   eax, [ecx]	
	xorpd  xmm3, xmm3
	movlpd xmm3, [esi + eax*8]	/* xmm6(0) has the charge */	
	mulpd  xmm3, [esp + _iq]
	movapd [esp + _qq], xmm3

	movd  mm0, eax		/* use mmx registers as temp storage */
	
	mov esi, [ebp + _type]
	mov eax, [esi + eax*4]
	mov esi, [ebp + _nbfp]
	shl eax, 1
	mov edi, [esp + _ntia]
	add eax, edi

	movupd xmm6, [esi + eax*8]	/* c6a c12a */
	xorpd xmm7, xmm7
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0
	movd  ebx, mm1
	movapd [esp + _c6], xmm4
	movapd [esp + _c12], xmm6
	
	mov esi, [ebp + _pos]		/* base of pos[] */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */

	/* move two coordinates to xmm0-xmm2 */
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]

	/* move _ix-iz to xmm4-xmm6 */
	movapd xmm4, [esp + _ix]
	movapd xmm5, [esp + _iy]
	movapd xmm6, [esp + _iz]

	/* calc dr */
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	/* square it */
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6
	/* rsq in xmm4 */

	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm5, xmm5
	cvtss2sd xmm2, xmm5	/* lu in low xmm2 */

	/* lookup seed in xmm2 */
	movapd xmm5, xmm2	/* copy of lu */
	mulsd xmm2, xmm2	/* lu*lu */
	movapd xmm1, [esp + _three]
	mulsd xmm2, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subsd xmm1, xmm2	/* 30-rsq*lu*lu */
	mulsd xmm1, xmm5	
	mulsd xmm1, xmm0	/* xmm0=iter1 of rinv (new lu) */

	movapd xmm5, xmm1	/* copy of lu */
	mulsd xmm1, xmm1	/* lu*lu */
	movapd xmm2, [esp + _three]
	mulsd xmm1, xmm4	/* rsq*lu*lu */			
	movapd xmm0, [esp + _half]
	subsd xmm2, xmm1	/* 30-rsq*lu*lu */
	mulsd xmm2, xmm5	
	mulsd xmm0, xmm2	/* xmm0=iter2 of rinv (new lu) */
	mulsd xmm4, xmm0	/* xmm4=r */
	mulsd xmm4, [esp + _tsc]

	movd mm0, eax	
	cvttsd2si eax, xmm4	/* mm6 = lu idx */
	cvtsi2sd xmm5, eax
	subsd xmm4, xmm5
	movapd xmm1, xmm4	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	lea   eax, [eax + eax*2]	/* idx*=3 (12 total now) */

	/* Coulomb */
	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qq]
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
	/* at this point mm5 contains vcoul */
	/* increment vcoul - then we can get rid of mm5 */
	/* update vctot */
	addsd  xmm5, [esp + _vctot]
	movlpd [esp + _vctot], xmm5 

	/* Dispersion */
	movupd xmm4, [esi + eax*8 + 32]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 48]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* Dispersion table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qq]
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */

	mulsd  xmm5, [esp + _c6]	 /* vnb6 */

	/* Update vnbtot directly */
	addsd  xmm5, [esp + _vnbtot]
	movlpd [esp + _vnbtot], xmm5

	/* Repulsion */
	movupd xmm4, [esi + eax*8 + 64]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 80]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* Dispersion table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qq]
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */

	mulsd  xmm5, [esp + _c12] /* vnb12 */
	
	addsd  xmm5, [esp + _vnbtot]
	movlpd [esp + _vnbtot], xmm5
	
.imc3300_updateouterdata:
	/* get group index for i particle */
	mov   edx, [ebp + _gid]      /* get group index for this i particle */
	mov   edx, [edx]
	add   [ebp + _gid],  4  /* advance pointer */

	/* accumulate total potential energy and update it */
	movapd xmm7, [esp + _vctot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */

	/* add earlier value from mem */
	mov   eax, [ebp + _Vc]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* accumulate total lj energy and update it */
	movapd xmm7, [esp + _vnbtot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */
	
	/* add earlier value from mem */
	mov   eax, [ebp + _Vnb]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* finish if last */
	mov   ecx, [ebp + _nri]
	dec ecx
	jecxz .imc3300_end
	/* not last, iterate once more! */ 
	mov [ebp + _nri], ecx
	jmp .imc3300_outer
.imc3300_end:
	emms
	mov eax, [esp + _salign]
	add esp, eax
	add esp, 216
	pop edi
	pop esi
        pop edx
        pop ecx
        pop ebx
        pop eax
	leave
	ret



.globl mcinl3320_sse2
	.type mcinl3320_sse2,@function
mcinl3320_sse2:	
.equ		_nri,		8
.equ		_iinr,		12
.equ		_jindex,	16
.equ		_jjnr,		20
.equ		_shift,		24
.equ		_shiftvec,	28
.equ		_gid,		32
.equ		_pos,		36		
.equ		_charge,	40
.equ		_facel,		44 /* double */	
.equ		_Vc,		52			
.equ		_type,		56
.equ		_ntype,		60
.equ		_nbfp,		64	
.equ		_Vnb,		68	
.equ		_tabscale,	72 /* double */	
.equ		_VFtab,		80	
	/* stack offsets for local variables */ 
	/* bottom of stack is cache-aligned for sse use */
.equ		_ixO,		0
.equ		_iyO,		16
.equ		_izO,		32
.equ		_ixH1,		48
.equ		_iyH1,		64
.equ		_izH1,		80
.equ		_ixH2,		96
.equ		_iyH2,		112
.equ		_izH2,		128
.equ		_iqO,		144 
.equ		_iqH,		160 
.equ		_qqO,		176
.equ		_qqH,		192
.equ		_rinvO,		208
.equ		_rinvH1,	224
.equ		_rinvH2,	240		
.equ		_rO,		256
.equ		_rH1,		272
.equ		_rH2,		288
.equ		_tsc,		304	
.equ		_c6,		320
.equ		_c12,		336
.equ		_vctot,		352
.equ		_vnbtot,	368
.equ		_half,		384
.equ		_three,		400
.equ		_is3,		416
.equ		_ii3,		420
.equ		_ntia,		424	
.equ		_innerjjnr,	428
.equ		_innerk,	432
.equ		_salign,	436
	push ebp
	mov ebp,esp	
        push eax
        push ebx
        push ecx
        push edx
	push esi
	push edi
	sub esp, 440		/* local stack space */
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + _salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm2, [sse2_three]
	movsd xmm5, [ebp + _tabscale]
	
	movapd [esp + _half],  xmm0
	movapd [esp + _three],  xmm2
	shufpd xmm5, xmm5, 0
	movapd [esp + _tsc], xmm5
	
	/* assume we have at least one i particle - start directly */
	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	mov   ebx, [ecx]	        /* ebx =ii */

	mov   edx, [ebp + _charge]
	movsd xmm3, [edx + ebx*8]	
	movsd xmm4, [edx + ebx*8 + 8]	
	movsd xmm5, [ebp + _facel]
	mulsd  xmm3, xmm5
	mulsd  xmm4, xmm5

	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	movapd [esp + _iqO], xmm3
	movapd [esp + _iqH], xmm4
	
	mov   edx, [ebp + _type]
	mov   ecx, [edx + ebx*4]
	shl   ecx, 1
	imul  ecx, [ebp + _ntype]      /* ecx = ntia = 2*ntype*type[ii0] */
	mov   [esp + _ntia], ecx		
.imc3320_outer:
	mov   eax, [ebp + _shift]      /* eax = pointer into shift[] */
	mov   ebx, [eax]		/* ebx=shift[n] */
	add   [ebp + _shift],  4  /* advance pointer one step */
	
	lea   ebx, [ebx + ebx*2]        /* ebx=3*is */

	mov   eax, [ebp + _shiftvec]   /* eax = base of shiftvec[] */

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	add   [ebp + _iinr],  4   /* advance pointer */
	mov   ebx, [ecx]	        /* ebx =ii */

	movapd xmm3, xmm0
	movapd xmm4, xmm1
	movapd xmm5, xmm2

	lea   ebx, [ebx + ebx*2]	/* ebx = 3*ii=ii3 */
	mov   eax, [ebp + _pos]        /* eax = base of pos[] */ 
	mov   [esp + _ii3], ebx

	addsd xmm3, [eax + ebx*8]
	addsd xmm4, [eax + ebx*8 + 8]
	addsd xmm5, [eax + ebx*8 + 16]		
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _ixO], xmm3
	movapd [esp + _iyO], xmm4
	movapd [esp + _izO], xmm5

	movsd xmm3, xmm0
	movsd xmm4, xmm1
	movsd xmm5, xmm2
	addsd xmm0, [eax + ebx*8 + 24]
	addsd xmm1, [eax + ebx*8 + 32]
	addsd xmm2, [eax + ebx*8 + 40]		
	addsd xmm3, [eax + ebx*8 + 48]
	addsd xmm4, [eax + ebx*8 + 56]
	addsd xmm5, [eax + ebx*8 + 64]		

	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _ixH1], xmm0
	movapd [esp + _iyH1], xmm1
	movapd [esp + _izH1], xmm2
	movapd [esp + _ixH2], xmm3
	movapd [esp + _iyH2], xmm4
	movapd [esp + _izH2], xmm5
	
	/* clear vctot */
	xorpd xmm4, xmm4
	movapd [esp + _vctot], xmm4
	movapd [esp + _vnbtot], xmm4
	
	mov   eax, [ebp + _jindex]
	mov   ecx, [eax]	         /* jindex[n] */
	mov   edx, [eax + 4]	         /* jindex[n+1] */
	add   [ebp + _jindex],  4
	sub   edx, ecx                   /* number of innerloop atoms */

	mov   esi, [ebp + _pos]
	mov   eax, [ebp + _jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + _innerjjnr], eax     /* pointer to jjnr[nj0] */
	sub   edx,  2
	mov   [esp + _innerk], edx        /* number of innerloop atoms */
	jge   .imc3320_unroll_loop
	jmp   .imc3320_checksingle
.imc3320_unroll_loop:
	/* twice unrolled innerloop here */
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]	
	mov   ebx, [edx + 4]
	
	add   [esp + _innerjjnr],  8 /* advance pointer (unrolled 2) */

	mov esi, [ebp + _charge]        /* base of charge[] */
	
	movlpd xmm3, [esi + eax*8]
	movhpd xmm3, [esi + ebx*8]
	movapd xmm4, xmm3	     
	mulpd  xmm3, [esp + _iqO]
	mulpd  xmm4, [esp + _iqH]
	movapd  [esp + _qqO], xmm3
	movapd  [esp + _qqH], xmm4	

	movd  mm0, eax		/* use mmx registers as temp storage */
	movd  mm1, ebx
	mov esi, [ebp + _type]
	mov eax, [esi + eax*4]
	mov ebx, [esi + ebx*4]
	mov esi, [ebp + _nbfp]
	shl eax, 1	
	shl ebx, 1	
	mov edi, [esp + _ntia]
	add eax, edi
	add ebx, edi

	movupd xmm6, [esi + eax*8]	/* c6a c12a */
	movupd xmm7, [esi + ebx*8]	/* c6b c12b */
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0
	movd  ebx, mm1
	movapd [esp + _c6], xmm4
	movapd [esp + _c12], xmm6

	mov esi, [ebp + _pos]       /* base of pos[] */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */
	lea   ebx, [ebx + ebx*2]	

	/* move two coordinates to xmm0-xmm2 */	
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]
	movhpd xmm0, [esi + ebx*8]
	movhpd xmm1, [esi + ebx*8 + 8]
	movhpd xmm2, [esi + ebx*8 + 16]		

	/* move ixO-izO to xmm4-xmm6 */
	movapd xmm4, [esp + _ixO]
	movapd xmm5, [esp + _iyO]
	movapd xmm6, [esp + _izO]

	/* calc dr */
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	/* square it */
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm4, xmm5
	addpd xmm4, xmm6
	movapd xmm7, xmm4
	/* rsqO in xmm7 */

	/* move ixH1-izH1 to xmm4-xmm6 */
	movapd xmm4, [esp + _ixH1]
	movapd xmm5, [esp + _iyH1]
	movapd xmm6, [esp + _izH1]

	/* calc dr */
	subpd xmm4, xmm0
	subpd xmm5, xmm1
	subpd xmm6, xmm2

	/* square it */
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	mulpd xmm6,xmm6
	addpd xmm6, xmm5
	addpd xmm6, xmm4
	/* rsqH1 in xmm6 */

	/* move ixH2-izH2 to xmm3-xmm5 */ 
	movapd xmm3, [esp + _ixH2]
	movapd xmm4, [esp + _iyH2]
	movapd xmm5, [esp + _izH2]

	/* calc dr */
	subpd xmm3, xmm0
	subpd xmm4, xmm1
	subpd xmm5, xmm2

	/* square it */
	mulpd xmm3,xmm3
	mulpd xmm4,xmm4
	mulpd xmm5,xmm5
	addpd xmm5, xmm4
	addpd xmm5, xmm3
	/* rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 */

	/* start with rsqO - put seed in xmm2 */
	cvtpd2ps xmm2, xmm7	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulpd   xmm2, xmm7	/* rsq*lu*lu */
	subpd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulpd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulpd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm2, xmm7
	movapd xmm3, xmm4
	mulpd xmm4, xmm4	/* lu*lu */
	mulpd xmm2, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subpd xmm4, xmm2	/* 3-rsq*lu*lu */
	mulpd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulpd xmm4, [esp + _half] /* rinv */
	movapd  [esp + _rinvO], xmm4	/* rinvO in xmm4 */
	mulpd   xmm7, xmm4
	movapd  [esp + _rO], xmm7	/* r in xmm7 */
	
	/* rsqH1 - seed in xmm2 */
	cvtpd2ps xmm2, xmm6	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulpd   xmm2, xmm6	/* rsq*lu*lu */
	subpd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulpd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulpd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm2, xmm6
	movapd xmm3, xmm4
	mulpd xmm4, xmm4	/* lu*lu */
	mulpd xmm2, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subpd xmm4, xmm2	/* 3-rsq*lu*lu */
	mulpd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulpd xmm4, [esp + _half] /* rinv */
	movapd [esp + _rinvH1], xmm4	/* rinvH1 */
	mulpd  xmm6, xmm4
	movapd [esp + _rH1], xmm6	/* rH1 */
	
	/* rsqH2 - seed in xmm2 */
	cvtpd2ps xmm2, xmm5	
	rsqrtps xmm2, xmm2
	cvtps2pd xmm2, xmm2

	movapd  xmm3, xmm2
	mulpd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulpd   xmm2, xmm5	/* rsq*lu*lu */
	subpd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulpd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulpd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm2, xmm5
	movapd xmm3, xmm4
	mulpd xmm4, xmm4	/* lu*lu */
	mulpd xmm2, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subpd xmm4, xmm2	/* 3-rsq*lu*lu */
	mulpd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulpd xmm4, [esp + _half] /* rinv */
	movapd [esp + _rinvH2], xmm4 /* rinv */
	mulpd xmm5, xmm4
	movapd [esp + _rH2], xmm5 /* r */

	/* do O interactions */
	/* rO is still in xmm7 */
	movapd xmm0, [esp + _rinvO]
	mulpd   xmm7, [esp + _tsc]
	cvttpd2pi mm6, xmm7	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm7, xmm6
	movapd xmm1, xmm7	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	movd mm0, eax	
	movd mm1, ebx
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */
	lea   eax, [eax + eax*2] /* idx *= 3 (total *=12 now) */
	lea   ebx, [ebx + ebx*2]
	
	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 
        mulpd  xmm6, xmm1       /* xmm6=Geps */
        mulpd  xmm7, xmm2       /* xmm7=Heps2 */
        addpd  xmm5, xmm6
        addpd  xmm5, xmm7       /* xmm5=Fp */       
        movapd xmm0, [esp + _qqO]
        mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
        addpd  xmm5, xmm4 /* xmm5=VV */
        mulpd  xmm5, xmm0 /* vcoul=qq*VV */ 
	/* at this point xmm5 contains vcoul */
	/* increment vcoul - then we can get rid of mm5 */
	/* update vctot */
	addpd  xmm5, [esp + _vctot]
	movapd [esp + _vctot], xmm5 
	
	/* Dispersion */
	movupd xmm4, [esi + eax*8 + 32]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8 + 32]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 48]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 48]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* Dispersion table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */

	mulpd  xmm5, [esp + _c6]	 /* vnb6 */
		
	addpd  xmm5, [esp + _vnbtot]
	movapd [esp + _vnbtot], xmm5
	
	/* Repulsion */
	movupd xmm4, [esi + eax*8 + 64]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8 + 64]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 80]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 80]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* Dispersion table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */

	mulpd  xmm5, [esp + _c12] /* vnb12 */
	addpd  xmm5, [esp + _vnbtot]
	movapd [esp + _vnbtot], xmm5

	/* Done with O interactions - now H1! */
	movapd xmm7, [esp + _rH1]
	mulpd xmm7, [esp + _tsc]
	cvttpd2pi mm6, xmm7	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm7, xmm6
	movapd xmm1, xmm7	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */
	lea   eax, [eax + eax*2] /* idx *= 3 (total *=12 now) */	
	lea   ebx, [ebx + ebx*2]
	
	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqH]
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul*/
        /* increment vcoul */
        addpd  xmm5, [esp + _vctot]
        movapd [esp + _vctot], xmm5 

	/* Done with H1, finally we do H2 interactions */
	movapd xmm7, [esp + _rH2]
	mulpd   xmm7, [esp + _tsc]
	cvttpd2pi mm6, xmm7	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm7, xmm6
	movapd xmm1, xmm7	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */
	lea   eax, [eax + eax*2] /* idx *= 3 (total *=12 now)*/
	lea   ebx, [ebx + ebx*2]

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqH]
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul */
        /* increment vcoul */
        addpd  xmm5, [esp + _vctot]
        movapd [esp + _vctot], xmm5 
			
	/* should we do one more iteration? */
	sub   [esp + _innerk],  2
	jl    .imc3320_checksingle
	jmp   .imc3320_unroll_loop
.imc3320_checksingle:	
	mov   edx, [esp + _innerk]
	and   edx, 1
	jnz   .imc3320_dosingle
	jmp   .imc3320_updateouterdata
.imc3320_dosingle:
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]

	mov esi, [ebp + _charge]        /* base of charge[] */
	xorpd xmm3, xmm3	
	movlpd xmm3, [esi + eax*8]
	movapd xmm4, xmm3	     
	mulpd  xmm3, [esp + _iqO]
	mulpd  xmm4, [esp + _iqH]

	movd  mm0, eax		/* use mmx registers as temp storage */
	movapd  [esp + _qqO], xmm3
	movapd  [esp + _qqH], xmm4	
	
	mov esi, [ebp + _type]
	mov eax, [esi + eax*4]
	mov esi, [ebp + _nbfp]
	shl eax, 1	
	mov edi, [esp + _ntia]
	add eax, edi

	movupd xmm6, [esi + eax*8]	/* c6a c12a */
	xorpd xmm7, xmm7
	movapd xmm4, xmm6
	unpcklpd xmm4, xmm7
	unpckhpd xmm6, xmm7
	
	movd  eax, mm0
	movapd [esp + _c6], xmm4
	movapd [esp + _c12], xmm6
	
	mov esi, [ebp + _pos]       /* base of pos[] */
	lea   eax, [eax + eax*2]         /* replace jnr with j3 */
	
	/* move coords to xmm0-xmm2 */
	movlpd xmm0, [esi + eax*8]
	movlpd xmm1, [esi + eax*8 + 8]
	movlpd xmm2, [esi + eax*8 + 16]

	/* move ixO-izO to xmm4-xmm6 */
	movapd xmm4, [esp + _ixO]
	movapd xmm5, [esp + _iyO]
	movapd xmm6, [esp + _izO]

	/* calc dr */
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	/* square it */
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm4, xmm5
	addsd xmm4, xmm6
	movapd xmm7, xmm4
	/* rsqO in xmm7 */

	/* move ixH1-izH1 to xmm4-xmm6 */
	movapd xmm4, [esp + _ixH1]
	movapd xmm5, [esp + _iyH1]
	movapd xmm6, [esp + _izH1]

	/* calc dr */
	subsd xmm4, xmm0
	subsd xmm5, xmm1
	subsd xmm6, xmm2

	/* square it */
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	mulsd xmm6,xmm6
	addsd xmm6, xmm5
	addsd xmm6, xmm4
	/* rsqH1 in xmm6 */

	/* move ixH2-izH2 to xmm3-xmm5 */ 
	movapd xmm3, [esp + _ixH2]
	movapd xmm4, [esp + _iyH2]
	movapd xmm5, [esp + _izH2]

	/* calc dr */
	subsd xmm3, xmm0
	subsd xmm4, xmm1
	subsd xmm5, xmm2

	/* square it */
	mulsd xmm3,xmm3
	mulsd xmm4,xmm4
	mulsd xmm5,xmm5
	addsd xmm5, xmm4
	addsd xmm5, xmm3
	/* rsqH2 in xmm5, rsqH1 in xmm6, rsqO in xmm7 */

	/* start with rsqO - put seed in xmm2 */
	cvtsd2ss xmm2, xmm7	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulsd   xmm2, xmm7	/* rsq*lu*lu */
	subsd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulsd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulsd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm2, xmm7
	movapd xmm3, xmm4
	mulsd xmm4, xmm4	/* lu*lu */
	mulsd xmm2, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subsd xmm4, xmm2	/* 3-rsq*lu*lu */
	mulsd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulsd xmm4, [esp + _half] /* rinv */
	movapd  [esp + _rinvO], xmm4	/* rinvO in xmm4 */
	mulsd   xmm7, xmm4
	movapd  [esp + _rO], xmm7	/* r in xmm7 */

	/* rsqH1 - seed in xmm2 */
	cvtsd2ss xmm2, xmm6	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulsd   xmm2, xmm6	/* rsq*lu*lu */
	subsd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulsd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulsd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm2, xmm6
	movapd xmm3, xmm4
	mulsd xmm4, xmm4	/* lu*lu */
	mulsd xmm2, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subsd xmm4, xmm2	/* 3-rsq*lu*lu */
	mulsd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulsd xmm4, [esp + _half] /* rinv */
	movapd [esp + _rinvH1], xmm4	/* rinvH1 */
	mulsd  xmm6, xmm4
	movapd [esp + _rH1], xmm6	/* rH1 */
	
	/* rsqH2 - seed in xmm2 */
	cvtsd2ss xmm2, xmm5	
	rsqrtss xmm2, xmm2
	cvtss2sd xmm2, xmm2

	movapd  xmm3, xmm2
	mulsd   xmm2, xmm2
	movapd  xmm4, [esp + _three]
	mulsd   xmm2, xmm5	/* rsq*lu*lu */
	subsd   xmm4, xmm2	/* 30-rsq*lu*lu */
	mulsd   xmm4, xmm3	/* lu*(3-rsq*lu*lu) */
	mulsd   xmm4, [esp + _half] /* iter1 ( new lu) */

	movapd xmm2, xmm5
	movapd xmm3, xmm4
	mulsd xmm4, xmm4	/* lu*lu */
	mulsd xmm2, xmm4	/* rsq*lu*lu */
	movapd xmm4, [esp + _three]
	subsd xmm4, xmm2	/* 3-rsq*lu*lu */
	mulsd xmm4, xmm3	/* lu*(	3-rsq*lu*lu) */
	mulsd xmm4, [esp + _half] /* rinv */
	movapd [esp + _rinvH2], xmm4 /* rinv */
	mulsd xmm5, xmm4
	movapd [esp + _rH2], xmm5 /* r */

	/* do O interactions */
	movd mm0, eax	
	/* rO is still in xmm7 */
	mulsd   xmm7, [esp + _tsc]
	cvttsd2si eax, xmm7	/* lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm7, xmm6
	movapd xmm1, xmm7	/* xmm1=eps */
	movapd xmm2, xmm7
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	 	
	shl eax, 2		
	mov  esi, [ebp + _VFtab]
	lea   eax, [eax + eax*2] /* idx *= 3 (total *=12 now) */	
	
	movupd xmm4, [esi + eax*8]	/* Y1 F1 */
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 
        mulsd  xmm6, xmm1       /* xmm6=Geps */
        mulsd  xmm7, xmm2       /* xmm7=Heps2 */
        addsd  xmm5, xmm6	/* F+Geps */
        addsd  xmm5, xmm7       /* xmm5=Fp=F+Geps+Heps2 */       
        mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
        addsd  xmm5, xmm4 /* xmm5=VV */
	
        movapd  xmm0, [esp + _qqO]
        mulsd  xmm5, xmm0 /* vcoul=qq*VV */ 
	/* at this point xmm5 contains vcoul */
	/* increment vcoul - then we can get rid of mm5 */
	/* update vctot */
	addsd  xmm5, [esp + _vctot]
	movlpd [esp + _vctot], xmm5 
	
	/* Dispersion */
	movupd xmm4, [esi + eax*8 + 32]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 48]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* Dispersion table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */

	mulsd  xmm5, [esp + _c6]	 /* vnb6 */
		
	addsd  xmm5, [esp + _vnbtot]
	movsd [esp + _vnbtot], xmm5
	
	/* Repulsion */
	movupd xmm4, [esi + eax*8 + 64]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 80]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* Dispersion table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */

	mulsd  xmm5, [esp + _c12] /* vnb12 */

	addsd  xmm5, [esp + _vnbtot]
	movsd [esp + _vnbtot], xmm5

	/* Done with O interactions - now H1! */
	movapd xmm7, [esp + _rH1]
	mulpd xmm7, [esp + _tsc]
	cvttsd2si eax, xmm7	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subpd xmm7, xmm6
	movapd xmm1, xmm7	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	lea   eax, [eax + eax*2] /* idx *= 3 (total *=12 now)*/	

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqH]
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul */
        /* increment vcoul */
        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5 

	/* Done with H1, finally we do H2 interactions */
	movapd xmm7, [esp + _rH2]
	mulsd   xmm7, [esp + _tsc]
	cvttsd2si eax, xmm7	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm7, xmm6
	movapd xmm1, xmm7	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	lea   eax, [eax + eax*2] /* idx *= 3 (total *=12 now)*/	

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqH]
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul */
        /* increment vcoul */
        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5 

.imc3320_updateouterdata:
	/* get gid */
	mov   edx, [ebp + _gid]  
	mov   edx, [edx]
	add   [ebp + _gid],  4	

	/* accumulate total potential energy and update it */
	movapd xmm7, [esp + _vctot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */
        
	/* add earlier value from mem */
	mov   eax, [ebp + _Vc]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* accumulate total lj energy and update it */
	movapd xmm7, [esp + _vnbtot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */

	/* add earlier value from mem */
	mov   eax, [ebp + _Vnb]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* finish if last */
	mov   ecx, [ebp + _nri]
	dec ecx
	jecxz .imc3320_end
	/* not last, iterate once more! */ 
	mov [ebp + _nri], ecx
	jmp .imc3320_outer
.imc3320_end:
	emms
	mov eax, [esp + _salign]
	add esp, eax
	add esp, 440
	pop edi
	pop esi
        pop edx
        pop ecx
        pop ebx
        pop eax
	leave
	ret


	
	
.globl mcinl3330_sse2
	.type mcinl3330_sse2,@function
mcinl3330_sse2:	
.equ		_nri,		8
.equ		_iinr,		12
.equ		_jindex,	16
.equ		_jjnr,		20
.equ		_shift,		24
.equ		_shiftvec,	28
.equ		_gid,		32
.equ		_pos,		36		
.equ		_charge,	40
.equ		_facel,		44 /* double */
.equ		_Vc,		52
.equ		_type,		56
.equ		_ntype,		60
.equ		_nbfp,		64	
.equ		_Vnb,		68
.equ		_tabscale,	72 /* double */
.equ		_VFtab,		80
	/* stack offsets for local variables */ 
	/* bottom of stack is cache-aligned for sse use */
.equ		_ixO,		0
.equ		_iyO,		16
.equ		_izO,		32
.equ		_ixH1,		48
.equ		_iyH1,		64
.equ		_izH1,		80
.equ		_ixH2,		96
.equ		_iyH2,		112
.equ		_izH2,		128
.equ		_jxO,		144
.equ		_jyO,		160
.equ		_jzO,		176
.equ		_jxH1,		192
.equ		_jyH1,		208
.equ		_jzH1,		224
.equ		_jxH2,		240
.equ		_jyH2,		256
.equ		_jzH2,		272
.equ		_qqOO,		288
.equ		_qqOH,		304
.equ		_qqHH,		320
.equ		_tsc,		336
.equ		_c6,		352
.equ		_c12,		368		 
.equ		_vctot,		384
.equ		_vnbtot,	400
.equ		_half,		416
.equ		_three,		432
.equ		_rsqOO,		448
.equ		_rsqOH1,	464
.equ		_rsqOH2,	480
.equ		_rsqH1O,	496
.equ		_rsqH1H1,	512
.equ		_rsqH1H2,	528
.equ		_rsqH2O,	544
.equ		_rsqH2H1,	560
.equ		_rsqH2H2,	576
.equ		_rinvOO,	592
.equ		_rinvOH1,	608
.equ		_rinvOH2,	624
.equ		_rinvH1O,	640
.equ		_rinvH1H1,	656
.equ		_rinvH1H2,	672
.equ		_rinvH2O,	688
.equ		_rinvH2H1,	704
.equ		_rinvH2H2,	720	
.equ		_is3,		736
.equ		_ii3,		740
.equ		_innerjjnr,	744
.equ		_innerk,	748
.equ		_salign,	752
	push ebp
	mov ebp,esp	
        push eax
        push ebx
        push ecx
        push edx
	push esi
	push edi
	sub esp, 756		/* local stack space */
	mov  eax, esp
	and  eax, 0xf
	sub esp, eax
	mov [esp + _salign], eax

	emms

	movupd xmm0, [sse2_half]
	movupd xmm2, [sse2_three]
	movsd xmm3, [ebp + _tabscale]
	movapd [esp + _half],  xmm0
	movapd [esp + _three], xmm2
	shufpd xmm3, xmm3, 0
	movapd [esp + _tsc],  xmm3

	/* assume we have at least one i particle - start directly */
	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	mov   ebx, [ecx]	        /* ebx =ii */

	mov   edx, [ebp + _charge]
	movsd xmm3, [edx + ebx*8]	
	movsd xmm4, xmm3	
	movsd xmm5, [edx + ebx*8 + 8]	
	movsd xmm6, [ebp + _facel]
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm5
	mulsd  xmm5, xmm5
	mulsd  xmm3, xmm6
	mulsd  xmm4, xmm6
	mulsd  xmm5, xmm6
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _qqOO], xmm3
	movapd [esp + _qqOH], xmm4
	movapd [esp + _qqHH], xmm5
		
	xorpd xmm0, xmm0
	mov   edx, [ebp + _type]
	mov   ecx, [edx + ebx*4]
	shl   ecx, 1
	mov   edx, ecx
	imul  ecx, [ebp + _ntype]      /* ecx = ntia = 2*ntype*type[ii0] */
	add   edx, ecx
	mov   eax, [ebp + _nbfp]
	movupd xmm0, [eax + edx*8]
	movhlps xmm1, xmm0
	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	movapd [esp + _c6], xmm0
	movapd [esp + _c12], xmm1

.imc3330_outer:
	mov   eax, [ebp + _shift]      /* eax = pointer into shift[] */
	mov   ebx, [eax]		/* ebx=shift[n] */
	add   [ebp + _shift],  4  /* advance pointer one step */
	
	lea   ebx, [ebx + ebx*2]        /* ebx=3*is */

	mov   eax, [ebp + _shiftvec]   /* eax = base of shiftvec[] */

	movsd xmm0, [eax + ebx*8]
	movsd xmm1, [eax + ebx*8 + 8]
	movsd xmm2, [eax + ebx*8 + 16] 

	mov   ecx, [ebp + _iinr]       /* ecx = pointer into iinr[] */	
	add   [ebp + _iinr],  4   /* advance pointer */
	mov   ebx, [ecx]	        /* ebx =ii */

	lea   ebx, [ebx + ebx*2]	/* ebx = 3*ii=ii3 */
	mov   eax, [ebp + _pos]        /* eax = base of pos[] */ 
	mov   [esp + _ii3], ebx	
	
	movapd xmm3, xmm0
	movapd xmm4, xmm1
	movapd xmm5, xmm2
	addsd xmm3, [eax + ebx*8]
	addsd xmm4, [eax + ebx*8 + 8]
	addsd xmm5, [eax + ebx*8 + 16]		
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _ixO], xmm3
	movapd [esp + _iyO], xmm4
	movapd [esp + _izO], xmm5

	movsd xmm3, xmm0
	movsd xmm4, xmm1
	movsd xmm5, xmm2
	addsd xmm0, [eax + ebx*8 + 24]
	addsd xmm1, [eax + ebx*8 + 32]
	addsd xmm2, [eax + ebx*8 + 40]		
	addsd xmm3, [eax + ebx*8 + 48]
	addsd xmm4, [eax + ebx*8 + 56]
	addsd xmm5, [eax + ebx*8 + 64]		

	shufpd xmm0, xmm0, 0
	shufpd xmm1, xmm1, 0
	shufpd xmm2, xmm2, 0
	shufpd xmm3, xmm3, 0
	shufpd xmm4, xmm4, 0
	shufpd xmm5, xmm5, 0
	movapd [esp + _ixH1], xmm0
	movapd [esp + _iyH1], xmm1
	movapd [esp + _izH1], xmm2
	movapd [esp + _ixH2], xmm3
	movapd [esp + _iyH2], xmm4
	movapd [esp + _izH2], xmm5

	/* clear vctot */
	xorpd xmm4, xmm4
	movapd [esp + _vctot], xmm4
	movapd [esp + _vnbtot], xmm4
	
	mov   eax, [ebp + _jindex]
	mov   ecx, [eax]	         /* jindex[n] */
	mov   edx, [eax + 4]	         /* jindex[n+1] */
	add   [ebp + _jindex],  4
	sub   edx, ecx                   /* number of innerloop atoms */

	mov   esi, [ebp + _pos] 
	mov   eax, [ebp + _jjnr]
	shl   ecx, 2
	add   eax, ecx
	mov   [esp + _innerjjnr], eax     /* pointer to jjnr[nj0] */
	sub   edx,  2
	mov   [esp + _innerk], edx        /* number of innerloop atoms */
	jge   .imc3330_unroll_loop
	jmp   .imc3330_checksingle
.imc3330_unroll_loop:
	/* twice unrolled innerloop here */
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]	
	mov   ebx, [edx + 4] 
	
	add   [esp + _innerjjnr], 8 /* advance pointer (unrolled 2) */

	mov esi, [ebp + _pos]       /* base of pos[] */

	lea   eax, [eax + eax*2]         /* replace jnr with j3 */
	lea   ebx, [ebx + ebx*2]	
	
	/* move j coordinates to local temp variables */
	movlpd xmm2, [esi + eax*8]
	movlpd xmm3, [esi + eax*8 + 8]
	movlpd xmm4, [esi + eax*8 + 16]
	movlpd xmm5, [esi + eax*8 + 24]
	movlpd xmm6, [esi + eax*8 + 32]
	movlpd xmm7, [esi + eax*8 + 40]
	movhpd xmm2, [esi + ebx*8]
	movhpd xmm3, [esi + ebx*8 + 8]
	movhpd xmm4, [esi + ebx*8 + 16]
	movhpd xmm5, [esi + ebx*8 + 24]
	movhpd xmm6, [esi + ebx*8 + 32]
	movhpd xmm7, [esi + ebx*8 + 40]
	movapd 	[esp + _jxO], xmm2
	movapd 	[esp + _jyO], xmm3
	movapd 	[esp + _jzO], xmm4
	movapd 	[esp + _jxH1], xmm5
	movapd 	[esp + _jyH1], xmm6
	movapd 	[esp + _jzH1], xmm7
	movlpd xmm2, [esi + eax*8 + 48]
	movlpd xmm3, [esi + eax*8 + 56]
	movlpd xmm4, [esi + eax*8 + 64]
	movhpd xmm2, [esi + ebx*8 + 48]
	movhpd xmm3, [esi + ebx*8 + 56]
	movhpd xmm4, [esi + ebx*8 + 64]
	movapd 	[esp + _jxH2], xmm2
	movapd 	[esp + _jyH2], xmm3
	movapd 	[esp + _jzH2], xmm4
	
	movapd xmm0, [esp + _ixO]
	movapd xmm1, [esp + _iyO]
	movapd xmm2, [esp + _izO]
	movapd xmm3, [esp + _ixO]
	movapd xmm4, [esp + _iyO]
	movapd xmm5, [esp + _izO]
	subpd  xmm0, [esp + _jxO]
	subpd  xmm1, [esp + _jyO]
	subpd  xmm2, [esp + _jzO]
	subpd  xmm3, [esp + _jxH1]
	subpd  xmm4, [esp + _jyH1]
	subpd  xmm5, [esp + _jzH1]
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + _rsqOO], xmm0
	movapd [esp + _rsqOH1], xmm3

	movapd xmm0, [esp + _ixO]
	movapd xmm1, [esp + _iyO]
	movapd xmm2, [esp + _izO]
	movapd xmm3, [esp + _ixH1]
	movapd xmm4, [esp + _iyH1]
	movapd xmm5, [esp + _izH1]
	subpd  xmm0, [esp + _jxH2]
	subpd  xmm1, [esp + _jyH2]
	subpd  xmm2, [esp + _jzH2]
	subpd  xmm3, [esp + _jxO]
	subpd  xmm4, [esp + _jyO]
	subpd  xmm5, [esp + _jzO]
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + _rsqOH2], xmm0
	movapd [esp + _rsqH1O], xmm3

	movapd xmm0, [esp + _ixH1]
	movapd xmm1, [esp + _iyH1]
	movapd xmm2, [esp + _izH1]
	movapd xmm3, [esp + _ixH1]
	movapd xmm4, [esp + _iyH1]
	movapd xmm5, [esp + _izH1]
	subpd  xmm0, [esp + _jxH1]
	subpd  xmm1, [esp + _jyH1]
	subpd  xmm2, [esp + _jzH1]
	subpd  xmm3, [esp + _jxH2]
	subpd  xmm4, [esp + _jyH2]
	subpd  xmm5, [esp + _jzH2]
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm3, xmm4
	addpd  xmm3, xmm5
	movapd [esp + _rsqH1H1], xmm0
	movapd [esp + _rsqH1H2], xmm3

	movapd xmm0, [esp + _ixH2]
	movapd xmm1, [esp + _iyH2]
	movapd xmm2, [esp + _izH2]
	movapd xmm3, [esp + _ixH2]
	movapd xmm4, [esp + _iyH2]
	movapd xmm5, [esp + _izH2]
	subpd  xmm0, [esp + _jxO]
	subpd  xmm1, [esp + _jyO]
	subpd  xmm2, [esp + _jzO]
	subpd  xmm3, [esp + _jxH1]
	subpd  xmm4, [esp + _jyH1]
	subpd  xmm5, [esp + _jzH1]
	mulpd  xmm0, xmm0
	mulpd  xmm1, xmm1
	mulpd  xmm2, xmm2
	mulpd  xmm3, xmm3
	mulpd  xmm4, xmm4
	mulpd  xmm5, xmm5
	addpd  xmm0, xmm1
	addpd  xmm0, xmm2
	addpd  xmm4, xmm3
	addpd  xmm4, xmm5
	movapd [esp + _rsqH2O], xmm0
	movapd [esp + _rsqH2H1], xmm4

	movapd xmm0, [esp + _ixH2]
	movapd xmm1, [esp + _iyH2]
	movapd xmm2, [esp + _izH2]
	subpd  xmm0, [esp + _jxH2]
	subpd  xmm1, [esp + _jyH2]
	subpd  xmm2, [esp + _jzH2]
	mulpd xmm0, xmm0
	mulpd xmm1, xmm1
	mulpd xmm2, xmm2
	addpd xmm0, xmm1
	addpd xmm0, xmm2
	movapd [esp + _rsqH2H2], xmm0
		
	/* start doing invsqrt use rsq values in xmm0, xmm4 */
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulpd   xmm1, xmm1	/* luA*luA */
	mulpd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	mulpd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subpd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm3, [esp + _half] /* iter1 */
	mulpd   xmm7, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulpd   xmm3, xmm3	/* luA*luA */
	mulpd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	mulpd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subpd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm1, [esp + _half] /* rinv */
	mulpd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvH2H2], xmm1
	movapd [esp + _rinvH2H1], xmm5

	movapd xmm0, [esp + _rsqOO]
	movapd xmm4, [esp + _rsqOH1]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulpd   xmm1, xmm1	/* luA*luA */
	mulpd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	mulpd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subpd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm3, [esp + _half] /* iter1 of  */
	mulpd   xmm7, [esp + _half] /* iter1 of  */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulpd   xmm3, xmm3	/* luA*luA */
	mulpd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	mulpd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subpd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm1, [esp + _half] /* rinv */
	mulpd   xmm5, [esp + _half] /* rinv*/
	movapd [esp + _rinvOO], xmm1
	movapd [esp + _rinvOH1], xmm5

	movapd xmm0, [esp + _rsqOH2]
	movapd xmm4, [esp + _rsqH1O]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulpd   xmm1, xmm1	/* luA*luA */
	mulpd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	mulpd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subpd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm3, [esp + _half] /* iter1 */
	mulpd   xmm7, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulpd   xmm3, xmm3	/* luA*luA */
	mulpd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	mulpd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subpd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm1, [esp + _half] /* rinv */
	mulpd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvOH2], xmm1
	movapd [esp + _rinvH1O], xmm5

	movapd xmm0, [esp + _rsqH1H1]
	movapd xmm4, [esp + _rsqH1H2]	
	cvtpd2ps xmm1, xmm0	
	cvtpd2ps xmm5, xmm4	
	rsqrtps xmm1, xmm1
	rsqrtps xmm5, xmm5
	cvtps2pd xmm1, xmm1
	cvtps2pd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulpd   xmm1, xmm1	/* luA*luA */
	mulpd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	mulpd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subpd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm3, [esp + _half] /* iter1a */
	mulpd   xmm7, [esp + _half] /* iter1b */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulpd   xmm3, xmm3	/* luA*luA */
	mulpd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	mulpd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subpd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulpd   xmm1, [esp + _half] /* rinv */
	mulpd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvH1H1], xmm1
	movapd [esp + _rinvH1H2], xmm5

	movapd xmm0, [esp + _rsqH2O]
	cvtpd2ps xmm1, xmm0	
	rsqrtps xmm1, xmm1
	cvtps2pd xmm1, xmm1
	
	movapd  xmm2, xmm1	/* copy of luA */
	mulpd   xmm1, xmm1	/* luA*luA */
	movapd  xmm3, [esp + _three]
	mulpd   xmm1, xmm0	/* rsqA*luA*luA */
	subpd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	mulpd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm3, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	mulpd   xmm3, xmm3	/* luA*luA */
	movapd  xmm1, [esp + _three]
	mulpd   xmm3, xmm0	/* rsqA*luA*luA */
	subpd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	mulpd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulpd   xmm1, [esp + _half] /* rinv */
	movapd [esp + _rinvH2O], xmm1
	
	/* start with OO interaction */
	movapd xmm0, [esp + _rinvOO]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + _rsqOO] /* xmm1=r */
	mulpd  xmm1, [esp + _tsc]

	cvttpd2pi mm6, xmm1	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */
	lea   eax, [eax + eax*2]	/* idx*=3 (12 total now) */
	lea   ebx, [ebx + ebx*2]	/* idx*=3 (12 total now) */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqOO]
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */
        /* at this point mm5 contains vcoul */
        /* increment vcoul - then we can get rid of mm5 */
        /* update vctot */
        addpd  xmm5, [esp + _vctot]
        movapd [esp + _vctot], xmm5

	/* Dispersion */
	movupd xmm4, [esi + eax*8 + 32]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8 + 32]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 48]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 48]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* Dispersion table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */

	mulpd  xmm5, [esp + _c6] /* vnb6 */

	addpd  xmm5, [esp + _vnbtot]
	movapd [esp + _vnbtot], xmm5

	/* Repulsion */
	movupd xmm4, [esi + eax*8 + 64]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8 + 64]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 80]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 80]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* Dispersion table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */

	mulpd  xmm5, [esp + _c12] /* vnb12 */

	addpd  xmm5, [esp + _vnbtot]
	movapd [esp + _vnbtot], xmm5

	/* O-H1 interaction */
	movapd xmm0, [esp + _rinvOH1]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + _rsqOH1] /* xmm1=r */
	mulpd  xmm1, [esp + _tsc]

	cvttpd2pi mm6, xmm1	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */
	lea   eax, [eax + eax*2]	/* idx*=3 (12 total now) */
	lea   ebx, [ebx + ebx*2]	/* idx*=3 (12 total now) */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqOH]
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul */

        addpd  xmm5, [esp + _vctot]
        movapd [esp + _vctot], xmm5

	/* O-H2 interaction */ 
	movapd xmm0, [esp + _rinvOH2]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + _rsqOH2] /* xmm1=r */
	mulpd  xmm1, [esp + _tsc]
	
	cvttpd2pi mm6, xmm1	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */
	lea   eax, [eax + eax*2]	/* idx*=3 (12 total now) */
	lea   ebx, [ebx + ebx*2]	/* idx*=3 (12 total now) */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqOH]
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul */

        addpd  xmm5, [esp + _vctot]
        movapd [esp + _vctot], xmm5

	/* H1-O interaction */
	movapd xmm0, [esp + _rinvH1O]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + _rsqH1O] /* xmm1=r */
	mulpd  xmm1, [esp + _tsc]
	
	cvttpd2pi mm6, xmm1	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */
	lea   eax, [eax + eax*2]	/* idx*=3 (12 total now) */
	lea   ebx, [ebx + ebx*2]	/* idx*=3 (12 total now) */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqOH]
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */
        /* at this point mm5 contains vcoul */

        addpd  xmm5, [esp + _vctot]
        movapd [esp + _vctot], xmm5

	/* H1-H1 interaction */
	movapd xmm0, [esp + _rinvH1H1]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + _rsqH1H1] /* xmm1=r */
	mulpd  xmm1, [esp + _tsc]	
	cvttpd2pi mm6, xmm1	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */
	lea   eax, [eax + eax*2]	/* idx*=3 (12 total now) */
	lea   ebx, [ebx + ebx*2]	/* idx*=3 (12 total now) */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqHH]
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul */

        addpd  xmm5, [esp + _vctot]
        movapd [esp + _vctot], xmm5

	/* H1-H2 interaction */
	movapd xmm0, [esp + _rinvH1H2]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + _rsqH1H2] /* xmm1=r */
	mulpd  xmm1, [esp + _tsc]
	cvttpd2pi mm6, xmm1	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */
	lea   eax, [eax + eax*2]	/* idx*=3 (12 total now) */
	lea   ebx, [ebx + ebx*2]	/* idx*=3 (12 total now) */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqHH]
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */
        /* at this point mm5 contains vcoul */

        addpd  xmm5, [esp + _vctot]
        movapd [esp + _vctot], xmm5

	/* H2-O interaction */
	movapd xmm0, [esp + _rinvH2O]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + _rsqH2O] /* xmm1=r */
	mulpd  xmm1, [esp + _tsc]	
	cvttpd2pi mm6, xmm1	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */
	lea   eax, [eax + eax*2]	/* idx*=3 (12 total now) */
	lea   ebx, [ebx + ebx*2]	/* idx*=3 (12 total now) */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqOH]
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul */

        addpd  xmm5, [esp + _vctot]
        movapd [esp + _vctot], xmm5
	
	/* H2-H1 interaction */
	movapd xmm0, [esp + _rinvH2H1]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + _rsqH2H1] /* xmm1=r */
	mulpd  xmm1, [esp + _tsc]
	cvttpd2pi mm6, xmm1	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */
	lea   eax, [eax + eax*2]	/* idx*=3 (12 total now) */
	lea   ebx, [ebx + ebx*2]	/* idx*=3 (12 total now) */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqHH]
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul */

        addpd  xmm5, [esp + _vctot]
        movapd [esp + _vctot], xmm5

	/* H2-H2 interaction */
	movapd xmm0, [esp + _rinvH2H2]
	movapd xmm1, xmm0
	mulpd  xmm1, [esp + _rsqH2H2] /* xmm1=r */
	mulpd  xmm1, [esp + _tsc]	
	cvttpd2pi mm6, xmm1	/* mm6 = lu idx */
	cvtpi2pd xmm6, mm6
	subpd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	pslld mm6, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	movd eax, mm6
	psrlq mm6, 32
	movd ebx, mm6		/* indices in eax/ebx */
	lea   eax, [eax + eax*2]	/* idx*=3 (12 total now) */
	lea   ebx, [ebx + ebx*2]	/* idx*=3 (12 total now) */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	movupd xmm3, [esi + ebx*8]	/* Y2 F2 */
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 Y2 */
	unpckhpd xmm5, xmm3	/* F1 F2 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	movupd xmm3, [esi + ebx*8 + 16]	/* G2 H2 */
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 G2 */
	unpckhpd xmm7, xmm3	/* H1 H2 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulpd  xmm6, xmm1	/* xmm6=Geps */
	mulpd  xmm7, xmm2	/* xmm7=Heps2 */
	addpd  xmm5, xmm6
	addpd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqHH]
	mulpd  xmm5, xmm1 /* xmm5=eps*Fp */
	addpd  xmm5, xmm4 /* xmm5=VV */
	mulpd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul */
	
        addpd  xmm5, [esp + _vctot]
        movapd [esp + _vctot], xmm5

	/* should we do one more iteration? */
	sub   [esp + _innerk],  2
	jl    .imc3330_checksingle
	jmp   .imc3330_unroll_loop
.imc3330_checksingle:
	mov   edx, [esp + _innerk]
	and   edx, 1
	jnz   .imc3330_dosingle
	jmp   .imc3330_updateouterdata
.imc3330_dosingle:
	mov   edx, [esp + _innerjjnr]     /* pointer to jjnr[k] */
	mov   eax, [edx]

	mov esi, [ebp + _pos]
	lea   eax, [eax + eax*2]  

	/* fetch j coordinates */
	movlpd xmm2, [esi + eax*8]
	movlpd xmm3, [esi + eax*8 + 8]
	movlpd xmm4, [esi + eax*8 + 16]
	movlpd xmm5, [esi + eax*8 + 24]
	movlpd xmm6, [esi + eax*8 + 32]
	movlpd xmm7, [esi + eax*8 + 40]
	movapd 	[esp + _jxO], xmm2
	movapd 	[esp + _jyO], xmm3
	movapd 	[esp + _jzO], xmm4
	movapd 	[esp + _jxH1], xmm5
	movapd 	[esp + _jyH1], xmm6
	movapd 	[esp + _jzH1], xmm7
	movlpd xmm2, [esi + eax*8 + 48]
	movlpd xmm3, [esi + eax*8 + 56]
	movlpd xmm4, [esi + eax*8 + 64]
	movapd 	[esp + _jxH2], xmm2
	movapd 	[esp + _jyH2], xmm3
	movapd 	[esp + _jzH2], xmm4
	
	movapd xmm0, [esp + _ixO]
	movapd xmm1, [esp + _iyO]
	movapd xmm2, [esp + _izO]
	movapd xmm3, [esp + _ixO]
	movapd xmm4, [esp + _iyO]
	movapd xmm5, [esp + _izO]
	subsd  xmm0, [esp + _jxO]
	subsd  xmm1, [esp + _jyO]
	subsd  xmm2, [esp + _jzO]
	subsd  xmm3, [esp + _jxH1]
	subsd  xmm4, [esp + _jyH1]
	subsd  xmm5, [esp + _jzH1]
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + _rsqOO], xmm0
	movapd [esp + _rsqOH1], xmm3

	movapd xmm0, [esp + _ixO]
	movapd xmm1, [esp + _iyO]
	movapd xmm2, [esp + _izO]
	movapd xmm3, [esp + _ixH1]
	movapd xmm4, [esp + _iyH1]
	movapd xmm5, [esp + _izH1]
	subsd  xmm0, [esp + _jxH2]
	subsd  xmm1, [esp + _jyH2]
	subsd  xmm2, [esp + _jzH2]
	subsd  xmm3, [esp + _jxO]
	subsd  xmm4, [esp + _jyO]
	subsd  xmm5, [esp + _jzO]
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + _rsqOH2], xmm0
	movapd [esp + _rsqH1O], xmm3

	movapd xmm0, [esp + _ixH1]
	movapd xmm1, [esp + _iyH1]
	movapd xmm2, [esp + _izH1]
	movapd xmm3, [esp + _ixH1]
	movapd xmm4, [esp + _iyH1]
	movapd xmm5, [esp + _izH1]
	subsd  xmm0, [esp + _jxH1]
	subsd  xmm1, [esp + _jyH1]
	subsd  xmm2, [esp + _jzH1]
	subsd  xmm3, [esp + _jxH2]
	subsd  xmm4, [esp + _jyH2]
	subsd  xmm5, [esp + _jzH2]
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm3, xmm4
	addsd  xmm3, xmm5
	movapd [esp + _rsqH1H1], xmm0
	movapd [esp + _rsqH1H2], xmm3

	movapd xmm0, [esp + _ixH2]
	movapd xmm1, [esp + _iyH2]
	movapd xmm2, [esp + _izH2]
	movapd xmm3, [esp + _ixH2]
	movapd xmm4, [esp + _iyH2]
	movapd xmm5, [esp + _izH2]
	subsd  xmm0, [esp + _jxO]
	subsd  xmm1, [esp + _jyO]
	subsd  xmm2, [esp + _jzO]
	subsd  xmm3, [esp + _jxH1]
	subsd  xmm4, [esp + _jyH1]
	subsd  xmm5, [esp + _jzH1]
	mulsd  xmm0, xmm0
	mulsd  xmm1, xmm1
	mulsd  xmm2, xmm2
	mulsd  xmm3, xmm3
	mulsd  xmm4, xmm4
	mulsd  xmm5, xmm5
	addsd  xmm0, xmm1
	addsd  xmm0, xmm2
	addsd  xmm4, xmm3
	addsd  xmm4, xmm5
	movapd [esp + _rsqH2O], xmm0
	movapd [esp + _rsqH2H1], xmm4

	movapd xmm0, [esp + _ixH2]
	movapd xmm1, [esp + _iyH2]
	movapd xmm2, [esp + _izH2]
	subsd  xmm0, [esp + _jxH2]
	subsd  xmm1, [esp + _jyH2]
	subsd  xmm2, [esp + _jzH2]
	mulsd xmm0, xmm0
	mulsd xmm1, xmm1
	mulsd xmm2, xmm2
	addsd xmm0, xmm1
	addsd xmm0, xmm2
	movapd [esp + _rsqH2H2], xmm0
		
	/* start doing invsqrt use rsq values in xmm0, xmm4 */
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulsd   xmm1, xmm1	/* luA*luA */
	mulsd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	mulsd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subsd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm3, [esp + _half] /* iter1 */
	mulsd   xmm7, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulsd   xmm3, xmm3	/* luA*luA */
	mulsd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	mulsd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subsd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm1, [esp + _half] /* rinv */
	mulsd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvH2H2], xmm1
	movapd [esp + _rinvH2H1], xmm5

	movapd xmm0, [esp + _rsqOO]
	movapd xmm4, [esp + _rsqOH1]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulsd   xmm1, xmm1	/* luA*luA */
	mulsd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	mulsd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subsd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm3, [esp + _half] /* iter1 of  */
	mulsd   xmm7, [esp + _half] /* iter1 of  */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulsd   xmm3, xmm3	/* luA*luA */
	mulsd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	mulsd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subsd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm1, [esp + _half] /* rinv */
	mulsd   xmm5, [esp + _half] /* rinv*/
	movapd [esp + _rinvOO], xmm1
	movapd [esp + _rinvOH1], xmm5

	movapd xmm0, [esp + _rsqOH2]
	movapd xmm4, [esp + _rsqH1O]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulsd   xmm1, xmm1	/* luA*luA */
	mulsd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	mulsd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subsd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm3, [esp + _half] /* iter1 */
	mulsd   xmm7, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulsd   xmm3, xmm3	/* luA*luA */
	mulsd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	mulsd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subsd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm1, [esp + _half] /* rinv */
	mulsd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvOH2], xmm1
	movapd [esp + _rinvH1O], xmm5

	movapd xmm0, [esp + _rsqH1H1]
	movapd xmm4, [esp + _rsqH1H2]	
	cvtsd2ss xmm1, xmm0	
	cvtsd2ss xmm5, xmm4	
	rsqrtss xmm1, xmm1
	rsqrtss xmm5, xmm5
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm5, xmm5
	
	movapd  xmm2, xmm1	/* copy of luA */
	movapd  xmm6, xmm5	/* copy of luB */
	mulsd   xmm1, xmm1	/* luA*luA */
	mulsd   xmm5, xmm5	/* luB*luB */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	mulsd   xmm5, xmm4	/* rsqB*luB*luB */	
	movapd  xmm7, xmm3
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	subsd   xmm7, xmm5	/* 3-rsqB*luB*luB */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm7, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm3, [esp + _half] /* iter1a */
	mulsd   xmm7, [esp + _half] /* iter1b */

	movapd  xmm2, xmm3	/* copy of luA */
	movapd  xmm6, xmm7	/* copy of luB */
	mulsd   xmm3, xmm3	/* luA*luA */
	mulsd   xmm7, xmm7	/* luB*luB */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	mulsd   xmm7, xmm4	/* rsqB*luB*luB */	
	movapd  xmm5, xmm1
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	subsd   xmm5, xmm7	/* 3-rsqB*luB*luB */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm5, xmm6	/* luB*(3-rsqB*luB*luB) */
	mulsd   xmm1, [esp + _half] /* rinv */
	mulsd   xmm5, [esp + _half] /* rinv */
	movapd [esp + _rinvH1H1], xmm1
	movapd [esp + _rinvH1H2], xmm5

	movapd xmm0, [esp + _rsqH2O]
	cvtsd2ss xmm1, xmm0	
	rsqrtss xmm1, xmm1
	cvtss2sd xmm1, xmm1
	
	movapd  xmm2, xmm1	/* copy of luA */
	mulsd   xmm1, xmm1	/* luA*luA */
	movapd  xmm3, [esp + _three]
	mulsd   xmm1, xmm0	/* rsqA*luA*luA */
	subsd   xmm3, xmm1	/* 3-rsqA*luA*luA */
	mulsd   xmm3, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm3, [esp + _half] /* iter1 */

	movapd  xmm2, xmm3	/* copy of luA */
	mulsd   xmm3, xmm3	/* luA*luA */
	movapd  xmm1, [esp + _three]
	mulsd   xmm3, xmm0	/* rsqA*luA*luA */
	subsd   xmm1, xmm3	/* 3-rsqA*luA*luA */
	mulsd   xmm1, xmm2	/* luA*(3-rsqA*luA*luA) */
	mulsd   xmm1, [esp + _half] /* rinv */
	movapd [esp + _rinvH2O], xmm1
	
	/* start with OO interaction */
	movapd xmm0, [esp + _rinvOO]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + _rsqOO] /* xmm1=r */
	mulsd  xmm1, [esp + _tsc]

	cvttsd2si eax, xmm1	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	lea   eax, [eax + eax*2]	/* idx*=3 (12 total now) */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1  */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1  */
	unpckhpd xmm7, xmm3	/* H1  */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqOO]
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul */

        /* increment vcoul - then we can get rid of mm5 */
        /* update vctot */
        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5

	/* Dispersion */
	movupd xmm4, [esi + eax*8 + 32]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 48]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* Dispersion table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */

	mulsd  xmm5, [esp + _c6]	 /* vnb6 */

	addsd  xmm5, [esp + _vnbtot]
	movlpd [esp + _vnbtot], xmm5

	/* Repulsion */
	movupd xmm4, [esi + eax*8 + 64]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 80]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* Repulsion table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */

	mulsd  xmm5, [esp + _c12] /* vnb12 */

	addsd  xmm5, [esp + _vnbtot]
	movlpd [esp + _vnbtot], xmm5

	/* O-H1 interaction */
	movapd xmm0, [esp + _rinvOH1]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + _rsqOH1] /* xmm1=r */
	mulsd  xmm1, [esp + _tsc]

	cvttsd2si eax, xmm1	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	lea   eax, [eax + eax*2]	/* idx*=3 (12 total now) */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1  */
	unpckhpd xmm5, xmm3	/* F1  */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqOH]
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul */

        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5

	/* O-H2 interaction */ 
	movapd xmm0, [esp + _rinvOH2]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + _rsqOH2] /* xmm1=r */
	mulsd  xmm1, [esp + _tsc]
	
	cvttsd2si eax, xmm1	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	lea   eax, [eax + eax*2]	/* idx*=3 (12 total now) */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqOH]
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul */

        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5

	/* H1-O interaction */
	movapd xmm0, [esp + _rinvH1O]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + _rsqH1O] /* xmm1=r */
	mulsd  xmm1, [esp + _tsc]
	
	cvttsd2si eax, xmm1	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	lea   eax, [eax + eax*2]	/* idx*=3 (12 total now) */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqOH]
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul */

        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5

	/* H1-H1 interaction */
	movapd xmm0, [esp + _rinvH1H1]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + _rsqH1H1] /* xmm1=r */
	mulsd  xmm1, [esp + _tsc]	
	cvttsd2si eax, xmm1	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	lea   eax, [eax + eax*2]	/* idx*=3 (12 total now) */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqHH]
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */
        /* at this point mm5 contains vcoul */

        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5

	/* H1-H2 interaction */
	movapd xmm0, [esp + _rinvH1H2]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + _rsqH1H2] /* xmm1=r */
	mulsd  xmm1, [esp + _tsc]
	cvttsd2si eax, xmm1	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	lea   eax, [eax + eax*2]	/* idx*=3 (12 total now) */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqHH]
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul */

        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5
	
	/* H2-O interaction */
	movapd xmm0, [esp + _rinvH2O]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + _rsqH2O] /* xmm1=r */
	mulsd  xmm1, [esp + _tsc]	
	cvttsd2si eax, xmm1	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	lea   eax, [eax + eax*2]	/* idx*=3 (12 total now) */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqOH]
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul */

        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5

	/* H2-H1 interaction */
	movapd xmm0, [esp + _rinvH2H1]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + _rsqH2H1] /* xmm1=r */
	mulsd  xmm1, [esp + _tsc]
	cvttsd2si eax, xmm1	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subpd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulpd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	lea   eax, [eax + eax*2]	/* idx*=3 (12 total now) */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqHH]
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul */

        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5

	/* H2-H2 interaction */
	movapd xmm0, [esp + _rinvH2H2]
	movapd xmm1, xmm0
	mulsd  xmm1, [esp + _rsqH2H2] /* xmm1=r */
	mulsd  xmm1, [esp + _tsc]	
	cvttsd2si eax, xmm1	/* mm6 = lu idx */
	cvtsi2sd xmm6, eax
	subsd xmm1, xmm6	/* xmm1=eps */
	movapd xmm2, xmm1	
	mulsd  xmm2, xmm2	/* xmm2=eps2 */
	
	shl eax, 2		/* idx *= 4 */
	mov  esi, [ebp + _VFtab]
	lea   eax, [eax + eax*2]	/* idx*=3 (12 total now) */

	movupd xmm4, [esi + eax*8]	/* Y1 F1 */	
	xorpd xmm3, xmm3
	movapd xmm5, xmm4
	unpcklpd xmm4, xmm3	/* Y1 */
	unpckhpd xmm5, xmm3	/* F1 */

	movupd xmm6, [esi + eax*8 + 16]	/* G1 H1 */	
	xorpd xmm3, xmm3
	movapd xmm7, xmm6
	unpcklpd xmm6, xmm3	/* G1 */
	unpckhpd xmm7, xmm3	/* H1 */
	/* coulomb table ready, in xmm4-xmm7 */ 		
	mulsd  xmm6, xmm1	/* xmm6=Geps */
	mulsd  xmm7, xmm2	/* xmm7=Heps2 */
	addsd  xmm5, xmm6
	addsd  xmm5, xmm7	/* xmm5=Fp */	
	movapd xmm3, [esp + _qqHH]
	mulsd  xmm5, xmm1 /* xmm5=eps*Fp */
	addsd  xmm5, xmm4 /* xmm5=VV */
	mulsd  xmm5, xmm3 /* vcoul=qq*VV */ 
        /* at this point mm5 contains vcoul */

        addsd  xmm5, [esp + _vctot]
        movlpd [esp + _vctot], xmm5
		
.imc3330_updateouterdata:
	/* get next gid */
	mov   edx, [ebp + _gid]  
	mov   edx, [edx]
	add   [ebp + _gid],  4	

	/* accumulate total potential energy and update it */
	movapd xmm7, [esp + _vctot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */
        
	/* add earlier value from mem */
	mov   eax, [ebp + _Vc]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* accumulate total lj energy and update it */
	movapd xmm7, [esp + _vnbtot]
	/* accumulate */
	movhlps xmm6, xmm7
	addsd  xmm7, xmm6	/* low xmm7 has the sum now */

	/* add earlier value from mem */
	mov   eax, [ebp + _Vnb]
	addsd xmm7, [eax + edx*8] 
	/* move back to mem */
	movsd [eax + edx*8], xmm7 
	
	/* finish if last */
	mov   ecx, [ebp + _nri]
	dec ecx
	jecxz .imc3330_end
	/* not last, iterate once more! */ 
	mov [ebp + _nri], ecx
	jmp .imc3330_outer
.imc3330_end:
	emms
	mov eax, [esp + _salign]
	add esp, eax
	add esp, 756
	pop edi
	pop esi
        pop edx
        pop ecx
        pop ebx
        pop eax
	leave
	ret




