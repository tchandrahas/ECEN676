# /*@@
#   @file      make.config.defn.in
#   @date      Sun Jan 17 22:33:51 1999
#   @author    Tom Goodale
#   @desc 
#   Make definition file for a configuration
#   Defines the compilers, etc.
#
#   Should be run through autoconf to produce make.config.defn
#   @enddesc 
#   @version $Id: make.config.defn.in,v 1.33 2001/05/14 13:05:35 goodale Exp $
# @@*/

# Include stuff defined by optional extra arrangements

include $(TOP)/config-data/make.extra.defn


# Compiler/executable info

SHELL             = /bin/sh
MKDIR             = mkdir
CC                = gcc
CXX               = c++
F90               = none
F77               = f77
CPP               = /lib/cpp
LD                = c++
AR                = ar
RANLIB            = ranlib
PERL              = perl

CFLAGS            = 
CXXFLAGS          = 
F90FLAGS          = 
F77FLAGS          = 

MKDIRFLAGS          = -p

LDFLAGS           =  

ARFLAGS           = rucs
RANLIBFLAGS       = -cs

# Debug flags

C_DEBUG_FLAGS            = -g
CXX_DEBUG_FLAGS          = -g
F90_DEBUG_FLAGS          = -g
F77_DEBUG_FLAGS          = -g

# Optimisation flags

C_OPTIMISE_FLAGS            = -O2
CXX_OPTIMISE_FLAGS          = -O2
F90_OPTIMISE_FLAGS          = 
F77_OPTIMISE_FLAGS          = 

# Warning flags

C_WARN_FLAGS            = -Wall -W -Wshadow -Wpointer-arith -Wbad-function-cast -Wcast-qual -Wcast-align -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations -Winline
CXX_WARN_FLAGS          = $(C_WARN_FLAGS) -Woverloaded-virtual
F90_WARN_FLAGS          = 
F77_WARN_FLAGS          = 

# Most compilers use -c -o to compile only, some do something different
CCOMPILEONLY = -c -o
FCOMPILEONLY = -c -o

# Most compilers use -o for naming the executable, alas some don't
CREATEEXE = -o

# On Unix a / 
DIRSEP = /

EMPTY_VAR = # Nothing.  Leading space is removed.

# Mostly a single space, sometimes nothing at all
OPTIONSEP = $(EMPTY_VAR) # a single space

# Some architectures need to do something special for linking in libraries

LIBNAME_PREFIX= lib# Make sure there is no space at end.
LIBNAME_SUFFIX= .a

CACTUSLIBLINKLINE= -L$(CCTK_LIBDIR) $(addprefix -l, $(ALLCACTUSLIBS))

C_DEPEND       = $(CC) -E -M $(CPPFLAGS)
CXX_DEPEND     = $(CXX) -E -M $(CPPFLAGS)
F_DEPEND       = $(CPP) -M $(CPPFLAGS)
F77_DEPEND     = $(CPP) -M $(CPPFLAGS)

C_DEPEND_OUT   =  > $@
CXX_DEPEND_OUT =  > $@
F_DEPEND_OUT   =  > $@
F77_DEPEND_OUT =  > $@

# Some compilers are very picky about the names of C++ files

CXX_WORKING_NAME = $(notdir $<)

# Some compilers are very picky about the suffix for fortran files

F90_SUFFIX = f90

# How to postprocess object files
C_POSTPROCESSING   = 
CXX_POSTPROCESSING = 
F77_POSTPROCESSING = 
F_POSTPROCESSING   = 
F90_POSTPROCESSING = 

# Do we need to use ranlib ?

USE_RANLIB = no

# Exclude some files from the dependency lists

DEP_EXCLUDE_FILES = cctk_FunctionAliases\.h|CParameterStructNames\.h|cctk_Arguments\.h|definethisthorn\.h|FParameters.h|CParameters\.h

# Command used to get the working directory
GET_WD = pwd

# Library info

LIBS    += crypt  m
LIBDIRS += 

# Command to generate the link line for libraries
GENERAL_LIBRARIES = $(LIBDIRS:%=-L%) $(LIBS:%=-l%)

# System include directories

SYS_INC_DIRS +=  

# Annoying stuff for some file systems.

PERL_BACKUP_NECESSARY = 

# Stuff for the architecture

OS     = linux-gnu
CPU    = i686
VENDOR = pc

# X stuff

X_LIB_DIR  = NONE
X_INC_DIR  = NONE

# GNU stuff

BUILD_GETOPT = no
BUILD_REGEX  = no

# Where the CCTK puts things
PACKAGE_DIR = $(CCTK_HOME)/arrangements
BUILD_DIR   = $(TOP)/build
CCTK_LIBDIR = $(TOP)/lib

#The perl scripts run by the make system
BUILD_ACTIVETHORNS = $(CCTK_HOME)/lib/sbin/BuildActiveThorns.pl
CST = $(CCTK_HOME)/lib//sbin/CST

C_FILE_PROCESSOR = $(CCTK_HOME)/lib/sbin/c_file_processor.pl
F_FILE_PROCESSOR = $(CCTK_HOME)/lib/sbin/f_file_processor.pl

# The directory in which to place the executable
EXEDIR = $(CCTK_HOME)/exe

# The name of the executable
EXE    = cactus_CPU2006


# Is this a debug configuration ?

CCTK_DEBUG_MODE = no

ifeq ($(strip $(CCTK_DEBUG_MODE)),yes)
  CFLAGS   += $(C_DEBUG_FLAGS)
  CXXFLAGS += $(CXX_DEBUG_FLAGS)
  F77FLAGS += $(F77_DEBUG_FLAGS)
  F90FLAGS += $(F90_DEBUG_FLAGS)
endif

# Is this a optimising configuration ?

CCTK_OPTIMISE_MODE = yes

ifeq ($(strip $(CCTK_OPTIMISE_MODE)),yes)
  CFLAGS   += $(C_OPTIMISE_FLAGS)
  CXXFLAGS += $(CXX_OPTIMISE_FLAGS)
  F77FLAGS += $(F77_OPTIMISE_FLAGS)
  F90FLAGS += $(F90_OPTIMISE_FLAGS)
endif

# Are we building with all warnings switched on ?

ifeq ($(strip $(CCTK_WARN_MODE)),yes)
  CFLAGS   += $(C_WARN_FLAGS)
  CXXFLAGS += $(CXX_WARN_FLAGS)
  F77FLAGS += $(F77_WARN_FLAGS)
  F90FLAGS += $(F90_WARN_FLAGS)
endif

# Stuff specific to an architecture.

include $(TOP)/config-data/make.arch.defn
