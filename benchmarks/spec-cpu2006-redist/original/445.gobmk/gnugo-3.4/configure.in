dnl Process this file with autoconf to produce a configure script.

dnl this is to determine if the config script is running in the proper place
dnl just give it one file relative to where it should be
AC_INIT
AC_CONFIG_SRCDIR([engine/dragon.c])

AM_CONFIG_HEADER(config.h)
AC_PREREQ(2.50)dnl               dnl Minimum Autoconf version required.

AH_TEMPLATE([PACKAGE],
[Define to the name of the distribution.])

AH_TEMPLATE([GNU_PACKAGE],
[The concatenation of the strings "GNU ", and PACKAGE.])

AH_TEMPLATE([VERSION],
[Define to the version of the distribution.])

dnl this defines VERSION and PACKAGE
AM_INIT_AUTOMAKE([gnugo], [3.4])
GNU_PACKAGE="GNU $PACKAGE"
AC_DEFINE_UNQUOTED(GNU_PACKAGE, "$GNU_PACKAGE")

AM_MAINTAINER_MODE

dnl See if user has expressed a preference for use of curses and/or color
dnl These set variables $enable_color and $with_curses to "no" if disabled
dnl "yes" if enabled, or undefined if not specified

AC_ARG_WITH(curses,
 [  --with-curses       try to use curses for colored debugging output (default)
  --without-curses    do not use curses for colored debugging output])

AC_ARG_ENABLE(color,
 [  --enable-color              use curses or ansi escape sequences for colored
                                   debug output
  --disable-color             do not try to generated colored debug output])

dnl and look to see if they want to disable the grid optimisation

AC_ARG_ENABLE(grid-opt,
 [  --enable-grid-opt           enable the grid optimsation within the pattern
                                matcher (default)
  --enable-grid-opt=distrust  enable the grid optimsation in non-trusting mode
  --disable-grid-opt          disable the grid optimisation])

default_cache_size=8
default_level=10
default_semeai_node_limit=500
default_owl_node_limit=1000

AC_ARG_ENABLE(cache-size,
  [  --enable-cache-size=n       reserve n Mb RAM for caching (16 default)])

AC_ARG_ENABLE(level,
  [  --enable-level=n            n = default level (up to 10 supported)])

AC_ARG_ENABLE(semeai-node-limit,
  [  --enable-semeai-node-limit=n        n = semeai variations (500 standard)])

AC_ARG_ENABLE(level,
  [  --enable-owl-node-limit=n           n = owl node limit (1000 standard)])

AC_ARG_ENABLE(dfa,
 [  --disable-dfa               use old non-dfa pattern matcher],
 [ if test ${enableval} = no; then	
     dfa_c=
   else	
     dfa_c=dfa
   fi] ,
 [ dfa_c=dfa ])

AC_ARG_ENABLE(chinese-rules,
 [  --enable-chinese-rules      use Chinese (area) counting
  --disable-chinese-rules     use Japanese counting (default)])

AC_ARG_ENABLE(resignation-allowed,
 [  --enable-resignation-allowed       resign lost games
  --disable-resignation-allowed      never resign (default)])

AC_ARG_ENABLE(oracle,
 [  --enable-oracle                    enable oracle
  --disable-oracle                   don't enable oracle (default)])

AC_ARG_ENABLE(experimental-semeai,
 [  --enable-experimental-semeai       use the semeai module (default)
  --disable-experimental-semeai      use old semeai module])

AC_ARG_ENABLE(experimental-break-in,
 [  --enable-experimental-break-in     use the breakin module (default)
  --disable-experimental-break-in    don't use the breakin module])

AC_ARG_ENABLE(experimental-owl-ext,
 [  --enable-experimental-owl-ext      use the experimental GAIN/LOSS codes
  --disable-experimental-owl-ext     use standard owl module (default)])

AC_ARG_ENABLE(experimental-reading,
 [  --enable-experimental-reading      use experimental pattern-based reading
  --disable-experimental-reading     use standard reading (default)])

AC_ARG_ENABLE(cosmic-gnugo,
 [  --enable-cosmic-gnugo              use center-oriented influence code
  --disable-cosmic-gnugo             use standard influence code (default)])

AC_ARG_ENABLE(experimental-connections,
 [  --enable-experimental-connections  use experimental connection analysis 
                                         (default)
  --disable-experimental-connections use standard connection analysis])

AC_ARG_ENABLE(alternate-connections,
 [  --enable-alternate-connections     use alternate experimental connection
                                         analysis
  --disable-alternate-connections    use primary experimental connection 
                                         analysis (default)])

AC_ARG_ENABLE(experimental-hashing,
 [  --enable-experimental-hashing      use experimental hashing scheme (default)
  --disable-experimental-hashing     use old hashing scheme])

AC_ARG_ENABLE(profile,
 [  --enable-profile                   compile gnugo with gprof option ])

dnl expand any instances of @matcher@ in Makefile
AC_SUBST(dfa_c)

AC_PROG_CC

dnl for automake 1.4.x
AC_EXEEXT

dnl add -lm to library list since we use some
dnl math functions such as pow and fabs

AC_SEARCH_LIBS(pow,m)

AC_CACHE_CHECK(
	[for mingw32],
	ac_cv_mingw32,
	AC_TRY_COMPILE(,
		[return __MINGW32__],
		ac_cv_mingw32="yes",
		ac_cv_mingw32="no")
)

if test $ac_cv_mingw32 = yes;then
    LIBS="$LIBS -lwsock32"
    AC_SEARCH_LIBS(vsnprintf, mingwex)
fi

AC_PROG_CPP
AC_PROG_GCC_TRADITIONAL
AC_PROG_RANLIB

dnl required since we use SUBDIRS in Makefile.am
AC_PROG_MAKE_SET

AC_HEADER_MAJOR
AC_HEADER_TIME

AC_C_CONST

AC_CHECK_HEADERS(unistd.h sys/time.h sys/times.h)
AC_CHECK_HEADERS(curses.h term.h ncurses/curses.h ncurses/term.h)

if test "$ac_cv_header_curses_h" = "yes";then
   curses_header="curses.h"
elif test "$ac_cv_header_ncurses_curses_h" = "yes";then
   curses_header="ncurses/curses.h"
else
   curses_header="no"
fi

if test "$ac_cv_header_term_h" = "yes";then
   term_header="term.h"
elif test "$ac_cv_header_ncurses_term_h" = "yes";then
   term_header="ncurses/term.h"
else
   term_header="no"
fi

AC_PATH_PROG(perl, perl)

AC_CHECK_SIZEOF(int)
AC_CHECK_SIZEOF(long)

dnl results of setlinebuf test used in interface/play_ascii.c
dnl vsnprintf not universally available
dnl usleep not available in Unicos and mingw32
AC_CHECK_FUNCS(setlinebuf vsnprintf gettimeofday usleep times)

dnl if snprintf not available try to use g_snprintf from glib
if test $ac_cv_func_vsnprintf = no; then
    AC_CHECK_PROG(glibconfig,glib-config,yes,no)
    if test $ac_cv_prog_glibconfig = yes;then
	glib_cflags=`glib-config --cflags`
	glib_libs=`glib-config --libs`
	CPPFLAGS="$CPPFLAGS $glib_cflags"
	LIBS="$LIBS $glib_libs"
	AC_CHECK_FUNCS(g_vsnprintf)
	AC_CHECK_HEADERS(glib.h)
	if test $ac_cv_func_g_vsnprintf = no; then
    	   AC_MSG_WARN([glib installation problem.
	   Continuing without glib ])
        fi
    else
    	   AC_MSG_WARN([Neither vsnprintf nor glib found. Gnugo is
	   compiled but it is safer to get glib at
	   http://www.gtk.org/])
    fi
fi
 
dnl AM_FUNC_ERROR_AT_LINE

AH_TEMPLATE([HAVE___FUNCTION__],
[Define if the preprocessor recognizes __FUNCTION__])

AC_CACHE_CHECK(
	[for __FUNCTION__],
	gnugo_cv_c___function__,
	AC_TRY_COMPILE(,
		[char *s=__FUNCTION__],
		gnugo_cv_c___function__="yes",
		gnugo_cv_c___function__="no")
)
if test "$gnugo_cv_c___function__" = "yes";then
      AC_DEFINE(HAVE___FUNCTION__)
fi
dnl ------ variadic #define -----------------------

AH_TEMPLATE([HAVE_VARIADIC_DEFINE],
[Define if #define can take a variable number of arguments])

AC_CACHE_CHECK(
	[for variadic cpp define],
	gnugo_cv_cpp_variadic_define,
	AC_TRY_COMPILE(
[#include <stdio.h>
#define zz(fmt,arg...) printf(fmt,##arg)],
		[zz("Hello");zz("%s","Hello");zz("%s%s","Hello","World")],
		gnugo_cv_cpp_variadic_define="yes",
		gnugo_cv_cpp_variadic_define="no")
)
if test "$gnugo_cv_cpp_variadic_define" = "yes";then
      AC_DEFINE(HAVE_VARIADIC_DEFINE)
fi

dnl check for a working curses library for use in debugboard

AH_TEMPLATE([CURSES],
[Define to use curses for color debugging])

AH_TEMPLATE([HAVE_CURSES_ARROWS],
[Define if the curses headers defines  KEY_{UP,DOWN,LEFT,RIGHT}])

if test "$curses_header" != "no";then
  AC_SEARCH_LIBS(initscr,ncurses curses pdcurses termcap terminfo termlib)
  if test "$ac_cv_search_initscr" != "no";then
    AC_DEFINE(CURSES)
    AC_CHECK_FUNCS(vwprintw keypad)
    AC_CACHE_CHECK(
	[for KEY_UP],
	gnugo_cv_decl_key_up,
	AC_TRY_COMPILE([#include <$curses_header>],
		[int c=KEY_UP],
		gnugo_cv_decl_key_up="yes",
		gnugo_cv_decl_key_up="no")
    )
    if test "$gnugo_cv_decl_key_up" = "yes";then
      AC_DEFINE(HAVE_CURSES_ARROWS)
    fi
  fi
fi

dnl -------- color debugging support -----------

AH_TEMPLATE([TERMINFO],
[Define to 1 if termcap/terminfo is available.])

AH_TEMPLATE([ANSI_COLOR],
[Define to use ansi escape sequences for color debugging])

tmp_color_result="none"

if test "$with_curses" != no -a "$enable_color" != no ; then
  tmp_color_result="none (curses failed)"

  dnl Do a separate test for curses and termcap
  dnl DJGPP does have pdcurses, but not termcap

  dnl make sure that both curses.h and term.h are available
  dnl FIXME: better to actually figure out here what headers
  dnl are really required
  if test "$term_header" != "no" -a "$curses_header" != "no" ; then

    dnl check for a working termcap library
    AC_SEARCH_LIBS(tparm,ncurses curses pdcurses termcap terminfo termlib)

    if test "$ac_cv_search_tparm" != "no" ; then
      AC_DEFINE(TERMINFO)
    tmp_color_result="curses"
    fi
  fi
fi


if test "$with_curses" = no -a "$enable_color" != no ; then
  dnl we asked for color, but there is no termcap
  AC_DEFINE(ANSI_COLOR)
  tmp_color_result="ANSI color"

fi

AC_MSG_CHECKING(for color support)
AC_MSG_RESULT($tmp_color_result)

dnl ---------- grid optimisation ------------

AH_TEMPLATE([GRID_OPT],
[Define as 1 to use the grid optimisation, or 2 to run it in self-test mode])

if test "$enable_grid_opt" = "distrust" ; then
  AC_DEFINE(GRID_OPT, 2)
else
  if test "$enable_grid_opt" = "no" ; then
    AC_DEFINE(GRID_OPT, 0)
  else
    AC_DEFINE(GRID_OPT, 1)
  fi
fi


dnl ------------ set cache size ----------

AH_TEMPLATE([DEFAULT_MEMORY],
[Default hash table size in megabytes])

if test "$enable_cache_size" ; then
   AC_DEFINE_UNQUOTED(DEFAULT_MEMORY, $enable_cache_size)
else
   AC_DEFINE_UNQUOTED(DEFAULT_MEMORY, $default_cache_size)
fi


dnl ------------ set default level  ----------

AH_TEMPLATE([DEFAULT_LEVEL],
[Default level (strength). Up to 10 supported])

if test "$enable_level" ; then
   AC_DEFINE_UNQUOTED(DEFAULT_LEVEL, $enable_level)
else
   AC_DEFINE_UNQUOTED(DEFAULT_LEVEL, $default_level)
fi

dnl ------------ set cache size ----------

AH_TEMPLATE([OWL_NODE_LIMIT],
[Owl Node Limit])

if test "$enable_owl_node_limit" ; then
   AC_DEFINE_UNQUOTED(OWL_NODE_LIMIT, $enable_owl_node_limit)
else
   AC_DEFINE_UNQUOTED(OWL_NODE_LIMIT, $default_owl_node_limit)
fi


dnl ------------ set semeai variations  ----------

AH_TEMPLATE([SEMEAI_NODE_LIMIT],
[Semeai Variations. 500 default])

if test "$enable_semeai_node_limit" ; then
   AC_DEFINE_UNQUOTED(SEMEAI_NODE_LIMIT, $enable_semeai_node_limit)
else
   AC_DEFINE_UNQUOTED(SEMEAI_NODE_LIMIT, $default_semeai_node_limit)
fi

dnl ------------ dfa -------------------

AM_CONDITIONAL(DFA_ENABLED, test "$enable_dfa" != "no")

dnl FIXME: Is there a more elegant approach for this?
dnl force owl c files rebuild
rm -f \
       patterns/owl_attackpat.c \
       patterns/owl_defendpat.c \
       patterns/owl_vital_apat.c


dnl ------------ gnugo_path -------------------


AH_TEMPLATE([GNUGO_PATH],
[Give the directory where gnugo was compiled])

AC_DEFINE_UNQUOTED(GNUGO_PATH, "`pwd`")

dnl ------------ Chinese Rules -------------------

AH_TEMPLATE([CHINESE_RULES],
[Ruleset. Default Japanese])

if test "$enable_chinese_rules" = "yes" ; then
   AC_DEFINE(CHINESE_RULES, 1)
else
   AC_DEFINE(CHINESE_RULES, 0)
fi

dnl ------------ Resignation allowed-------------------

AH_TEMPLATE([RESIGNATION_ALLOWED],
[Allow resignation. Default disabled])

if test "$enable_resignation_allowed" = "yes" ; then
   AC_DEFINE(RESIGNATION_ALLOWED, 1)
else
   AC_DEFINE(RESIGNATION_ALLOWED, 0)
fi

dnl ------------ Oracle enabled-------------------

AH_TEMPLATE([ORACLE],
[Oracle. Default not enabled.])

if test "$enable_oracle" = "yes" ; then
   AC_DEFINE(ORACLE, 1)
else
   AC_DEFINE(ORACLE, 0)
fi

dnl ------------ Experimental Breakin enabled-------------------

AH_TEMPLATE([USE_BREAK_IN],
[Break-in module. Enabled by default.])

if test "$enable_experimental_break_in" = "no" ; then
   AC_DEFINE(USE_BREAK_IN, 0)
else
   AC_DEFINE(USE_BREAK_IN, 1)
fi

dnl ------------ Semeai -------------------

AH_TEMPLATE([EXPERIMENTAL_SEMEAI],
[Semeai module. Default standard.])

if test "$enable_experimental_semeai" = "no" ; then
   AC_DEFINE(EXPERIMENTAL_SEMEAI, 0)
else
   AC_DEFINE(EXPERIMENTAL_SEMEAI, 1)
fi

dnl ------------ Owl extensions ------------

AH_TEMPLATE([EXPERIMENTAL_OWL_EXT],
[GAIN/LOSS codes. Disabled by default.])

if test "$enable_experimental_owl_ext" = "yes" ; then
   AC_DEFINE(EXPERIMENTAL_OWL_EXT, 1)
else
   AC_DEFINE(EXPERIMENTAL_OWL_EXT, 0)
fi

dnl ------------ Reading -------------------

AH_TEMPLATE([EXPERIMENTAL_READING],
[Experimental pattern based reading. Disabled by default.])

if test "$enable_experimental_reading" = "yes" ; then
   AC_DEFINE(EXPERIMENTAL_READING, 1)
else
   AC_DEFINE(EXPERIMENTAL_READING, 0)
fi

dnl ------------ Reading -------------------

AH_TEMPLATE([COSMIC_GNUGO],
[Center oriented influence. Disabled by default.])

if test "$enable_cosmic_gnugo" = "yes" ; then
   AC_DEFINE(COSMIC_GNUGO, 1)
else
   AC_DEFINE(COSMIC_GNUGO, 0)
fi

dnl ------------ Connections -------------------

AH_TEMPLATE([EXPERIMENTAL_CONNECTIONS],
[Connection module. Default experimental.])

if test "$enable_experimental_connections" = "no" ; then
   AC_DEFINE(EXPERIMENTAL_CONNECTIONS, 0)
else
   AC_DEFINE(EXPERIMENTAL_CONNECTIONS, 1)
fi

dnl ------------ Connections -------------------

AH_TEMPLATE([ALTERNATE_CONNECTIONS],
[Connection module. Default standard.])

if test "$enable_alternate_connections" = "no" ; then
   AC_DEFINE(ALTERNATE_CONNECTIONS, 0)
else
   AC_DEFINE(ALTERNATE_CONNECTIONS, 1)
fi

dnl ------------ Owl Threats -------------------

AH_TEMPLATE([OWL_THREATS],
[Owl Threats. 0 standard.])

if test "$enable_owl_threats" = "yes" ; then
   AC_DEFINE(OWL_THREATS, 1)
else
   AC_DEFINE(OWL_THREATS, 0)
fi

dnl ------------ Influence -------------------

AH_TEMPLATE([HASHING_SCHEME],
[Hashing scheme. Default scheme 2 (new).])

if test "$enable_experimental_hashing" = "no" ; then
   AC_DEFINE(HASHING_SCHEME, 1)
else
   AC_DEFINE(HASHING_SCHEME, 2)
fi

dnl  ----------- special-case use of gcc ---------

dnl Not sure if we are supposed to be accessing this variable, but...

AC_SUBST(GCC_ONLY)
AC_SUBST(GNUGO_SOME_WARNINGS)
AC_SUBST(GNUGO_ALL_WARNINGS)
AC_SUBST(NO_WARNINGS)

dnl Please add -Wp,-lang-c89 to SOME_WARNINGS soon

NO_WARNINGS="CFLAGS=$CFLAGS"
if test $ac_cv_c_compiler_gnu = yes; then
  GCC_ONLY=''
  GGO_SOME_WARNINGS='-Wall -W -Wpointer-arith -Wbad-function-cast -Wcast-qual -Wcast-align -Wwrite-strings -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations'
  GGO_ALL_WARNINGS='-Wall -W -Wshadow -Wpointer-arith -Wbad-function-cast -Wcast-qual -Wcast-align -Wwrite-strings -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations -Wp,-lang-c89'
  GNUGO_SOME_WARNINGS="CFLAGS=$CFLAGS $GGO_SOME_WARNINGS"
  GNUGO_ALL_WARNINGS="CFLAGS=$CFLAGS $GGO_ALL_WARNINGS"
  CFLAGS="$CFLAGS $GGO_SOME_WARNINGS"
  if test "$enable_profile" = "yes" ; then
     CFLAGS="-pg $CFLAGS"
  fi
else
  GCC_ONLY='#'
  GNUGO_SOME_WARNINGS=''
  GNUGO_ALL_WARNINGS=''
fi

dnl Now lines in Makefile.am can be prefixed @GCC_ONLY@, and
dnl we can specify either @GNUGO_SOME_WARNINGS@ or @GNUGO_ALL_WARNINGS@

dnl FIXME: please add warnings for other compilers !



#AM_GNU_GETTEXT
#AC_LINK_FILES($nls_cv_header_libgt, $nls_cv_header_intl)

dnl FIXME:
dnl autoconf 2.50 recommends AC_CONFIG_FILES and AC_OUPUT
dnl This however requires automake 1.4p2 or better

AC_OUTPUT([Makefile interface/Makefile patterns/Makefile sgf/Makefile
utils/Makefile engine/Makefile doc/Makefile regression/Makefile interface/debugboard/Makefile config.vc:config.vcin])
