# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# This is GNU Go, a Go program. Contact gnugo@gnu.org, or see   #
# http://www.gnu.org/software/gnugo/ for more information.      #
#                                                               #
# Copyright 1999, 2000, 2001, 2002 and 2003                     #
# by the Free Software Foundation.                              #
#                                                               #
# This program is free software; you can redistribute it and/or #
# modify it under the terms of the GNU General Public License   #
# as published by the Free Software Foundation - version 2.     #
#                                                               #
# This program is distributed in the hope that it will be       #
# useful, but WITHOUT ANY WARRANTY; without even the implied    #
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR       #
# PURPOSE.  See the GNU General Public License in file COPYING  #
# for more details.                                             #
#                                                               #
# You should have received a copy of the GNU General Public     #
# License along with this program; if not, write to the Free    #
# Software Foundation, Inc., 59 Temple Place - Suite 330,       #
# Boston, MA 02111, USA.                                        #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
# Database of connection patterns.
#
#  ? - don't care
#  . - empty
#  X - opposite color of O
#  O - color of dragon looking for connection
#  x - X or empty
#  o - O or empty
#  * - cutting point in the O formation, an X move here must be
#      tactically safe
#  ! - inhibit connection, eye space points for O are turned marginal
#
###################################
#
# Classification
#
# The connection database contains patterns of three different classes,
# which also are matched separately.
#
#  B - Indicate cutting points and inhibit connections.
#  C - Amalgamate worms into dragons.
#
# Additionally there are a few acceptance modifiers. 
#
#  s - Accept even if the pattern includes tactically unsafe strings
#  W - Only used with standard connections.
#  Y - Only used with experimental connections.
#
###################################
#
# Organisation
#
# The connection database is organized into a number of different
# categories and ordered so that more specific patterns are matched
# before more general ones, since evaluating the constraints of the
# latter usually is expensive.
#
#  EB    - Edge B patterns
#  CB    - Center B patterns
#  EC    - Edge C patterns
#  CC    - Center C patterns
#  Lunch - patterns that invalidate lunches, matched with I patterns
#
###################################


goal_elements none
# callback_data is dependent on pattern class in this database


########################
#
# B patterns on the edge
#
########################

callback_data X!


Pattern EB1

?XO
O*!
---

:8,BW


Pattern EB2

?XO
O*!
.!.
---

:8,BW


Pattern EB3
# second line clamp

x.!?
XO*!
x.!?
----

:8,BW


Pattern EB4
# db split (3.3.6)

X.O?
.*!x
..!!
----

:8,BW


Pattern EB4a
# db split (3.3.6)
# do not inhibit a potential connection

X.Ox
.*.O
..!!
----

:8,BW


Pattern EB5

OXO
!*!
.!.
---

:|,BW


Pattern EB6

?XO
O*!
.!.
.!.
---

:8,BW

?XO
O*!
cab
.!.
---

;!xplay_attack(*,a,b,b) || !xplay_attack(*,a,c,c)


Pattern EB7

Xx?
O*O
.!.
.!.
---

:8,BW

Xx?
c*O
ba.
.!.
---

;xplay_attack(*,a,c) && !xplay_attack(*,b,a,a)


Pattern EB8

?O?
X*!
O!.
---

:8,BW


Pattern EB9

?X?
XOX
O*O
.!.
---

:8,BW

?X?
XOX
a*b
.!.
---

;xplay_attack(*,a) || xplay_attack(*,b)


Pattern EB10

O.X
!*O
.!.
---

:8,BW

OaX
!*b
.!.
---

;xplay_attack(*,a,b)


Pattern EB11

?XX?
O*O.
!!!.
.!..
----

:8,BW

?XX?
O*Oc
!ab.
.!..
----

;xplay_attack_either(*,a,b,c,a,c)


Pattern EB12

??X?
O.*O
.!!.
..!.
----

:8,BW

??X?
Oc*O
.ba.
..!.
----

;xplay_attack(*,a,b,c,a)


Pattern EB13

?X?
O*O
o!o
---

:|,BW

?X?
b*c
oao
---

;xplay_attack_either(*,a,b,c)


Pattern EB14

??X?
O.*O
.!!.
.!!.
..!.
----

:8,BW

??X?
Oc*O
.bad
.!ef
..!.
----

;!xplay_attack_either(*,a,b,c,d,e,f,*,f)


Pattern EB15

?OX?
.!*O
..!O
----

:8,BW


Pattern EB16

??X?
O.*O
..!o
----

:8,BW

??X?
Oc*O
.bao
----

;xplay_attack_either(*,a,b,c,a,c)


Pattern EB17

?X?
OXO
!*!
!!!
.!.
---

:8,BW


Pattern EB18

X.O
O*!
.!.
---

:8,BW

XaO
d*b
.c.
---

;xplay_attack_either(*,a,a,d)
;&& (xplay_attack(*,b,d) || xplay_attack_either(*,b,c,a,a,d))


Pattern EB19

X!O
O*.
---

:8,BW

XaO
b*.
---

;xplay_attack_either(*,a,a,b)


Pattern EB20

?X??
OX.?
!*!O
!!!?
.!.?
----

:8,BW


Pattern EB21

??X?
.O*O
.!!!
..!.
----

:8,BW

??X?
.D*O
.!!!
..!.
----

; lib(D)==3


Pattern EB22

??X?
?XOX
.O*O
.!!!
..!.
----

:8,BW

??X?
?XOX
.D*O
.!!!
..!.
----

; lib(D)==3


Pattern EB23

O.X
!*.
.!O
---

:8,BW


Pattern EB24
# gf Revised pattern. (3.1.22)

??X
?!.
.*O
.!o
---

:8,BW

??X
?!.
.*a
.!o
---

;!xplay_defend(*,a)


Pattern EB25
# tm New Pattern (3.1.22)

O!.  cutable keima on edge
.*O
.!.
---

:8,BW

ca.
b*d
.!.
---

; xplay_attack_either(*,a,c,d)
; && xplay_attack_either(*,b,c,d)


##########################
#
# B patterns in the center
#
##########################

callback_data X!


Pattern CB1

?O.          fragile double connection 
X*O
?O.

:8,BW

?Oa
X*O
?Ob

;!xplay_attack_either(*,a,b,*,b) && !xplay_attack_either(*,b,a,*,a)


Pattern CB1b

?O.          fragile double connection 
X*O
?O.

:8,BY

?b.
X*O
?a.

;!xplay_connect(*,a,b)


Pattern CB2

?O.
?..          fragile double connection 
X*O
?O.

:8,BW

?O.
?ca
X*O
?Ob

;!xplay_attack_either(*,a,b,*,b) && xplay_defend_both(*,b,a,c,*,a)


Pattern CB2b

?O.
?..          fragile double connection 
X*O
?O.

:8,BY

?b.
?..
X*O
?a.

;!xplay_connect(*,a,b)


Pattern CB3

O!O
!*X
.O?

:8,BW

O!a
!*X
.b?

;lib(a)==2 || lib(b) == 2


Pattern CB3b

O!O
.*X
.O?

:8,BY

O!a
.*X
.b?

;!xplay_connect(*,a,b)


Pattern CB4

XO?
O*!
?!?

:\,BW,basic_cut_helper


Pattern CB5
# This pattern is needed to inhibit connection in a position like
#
# .XO..
# .XOXX
# OO.OX
# .XOOX
# .XXXX
#

XO
O*

:\,BW,basic_cut_helper


Pattern CB6
# This pattern is an ugly way to ensure that the X stone is at least
# regarded as a potential cutting stone. The helper returns 0 so the
# pattern does not fire as a B pattern. With an improved connectivity
# analysis, this pattern should no longer be needed.

XO
O*

:\,BW,ugly_cutstone_helper

AO
O*

;attack(A) && safe_xmove(*)


Pattern CB7
# This pattern is used to find potential cutting stones as defined by
# the field cutstone2 in the worm data. The helper returns 0 so the
# pattern doesn't fire as a B pattern.

XO
O*

:\,B,cutstone2_helper

AO
O*

;attack(A)


Pattern CB8

?O?
.*X
.!O
xOo

:8,BW


Pattern CB9

X.O
O*.
O!.
?XX

:8,BW

BaO
O*.
O!.
?XX

;xplay_defend_both(*,a,*,B)


Pattern CB10

o!X
O*O
X!o

:8,BW

oaB
O*O
Cdo

;xplay_defend_both(*,a,*,B) && xplay_defend_both(*,d,*,C)


Pattern CB11

?OX?
O!OX
?*!O
??O?

:8,BW

?OA?
OaOB
?*bO
??O?

;!attack(A) && !attack(B) && !xplay_attack(*,a,b,*) && !xplay_attack(*,b,a,*)


Pattern CB11b

?OX?
O!OX
?*!O
??O?

:8,BY

?bX?
O!OX
?*!a
??O?

;!xplay_connect(*,a,b)


Pattern CB12
# tm New pattern. (3.1.13)
# db modified (3.3.6)

?xx         another way to cut!
O*.
X!O

:8,BW

?xx
O*.
BaO

;xplay_defend_both(*,a,*,B)


Pattern CB12a
# db added (3.3.6)

.!O         another way to cut!
O*.
X!O

:8,BW

baO
O*.
X!O

;xplay_defend_both(*,a,b,*,b)


Pattern CB13
# tm New pattern (3.1.18)

xxx	cut!
.!.
O*O
Xxx

:8,BW

xxx
dae
O*O
Fbx

; xplay_defend_both(*,a,b,d,e)
; && xplay_defend_both(*,a,b,e,d)
; && xplay_defend_both(*,b,a,a,F)


Pattern CB14
# tm New Pattern (3.1.23)  (see arend:32)
# FIXME: only one of these points should be marginal
#   is it safe to use amalgamate_most_valuable helper here? How?

XO*O	double cut.
O!O!

:8,XBW

XA*O
ObOc

; xplay_attack(*,A) && !xplay_attack_either(*,b,c,c,*)


Pattern CB15
# tm New Pattern (3.1.23)  (see global:17, )
#   careful not to break trevord:730
# FIXME:  Need to use amalgamate_most_valuable helper.
# xplay_disconnect helper also might be useful here.

?*?   save cutting stone.
OXO
!O!

:8,BW

?*?
OXO
aOb

; !xplay_attack_either(*,b,a,*,a)
; && !xplay_attack_either(*,a,b,*,b)


Pattern CB15b
# tm New Pattern (3.1.23)  (see global:17, )
#   careful not to break trevord:730
# FIXME:  Need to use amalgamate_most_valuable helper.
# xplay_disconnect helper also might be useful here.

?*?   save cutting stone.
OXO
!O!

:8,BY

?*?
aXb
!O!

;!xplay_connect(*,a,b)


Pattern CB16
# gf Revised constraint. (3.3.13)

?O
x*          fragile double connection 
XO
O!

:8,BY

?a
x*
XO
b!

;xplay_connect(a,b) && !xplay_connect(*,a,b)


Pattern CB17

O!O
!*?        fragile double connection 
O??

:\,BY

O!a
!*?
b??

;!xplay_connect(*,a,b)


Pattern CB18

?X?
X.X        workaround for ko contingent connection
OXO
?O*

:8,BY

?X?
XbX
OAd
?c*

;xplay_attack(*,A)<WIN && !xplay_connect(*,?,b,c,d)


Pattern CB19
# db added (3.3.6)

OX?
!OX
*!O

:8,BW

OA?
dOB
*cO

; !attack(A) && !attack(B) && !xplay_attack(*,c,d,*) && !xplay_attack(*,d,c,*)


Pattern CB20
# db added (3.3.6)

X.o
O*o
X.?

:8,BW

A.a
O*b
B.?

; !attack(A) && !attack(B) && o_somewhere(a,b)


########################
#
# C patterns on the edge
#
########################

# Static connections need almost everything
callback_data .Oxo,!


Pattern EC1

??oo??
?....?
oO..Oo
o....o
o....o
------

:|,C


Pattern EC1b

??....??
o.O..O.o
o......o
o......o
--------

:|,C


Pattern EC2

O.O
...
...
---

:|,CW

OaO
dbc
...
---

;!xplay_defend(a,b,c,d,c) && !xplay_defend(a,b,d,c,d)


Pattern EC3a

o...o
oO.Oo
o...o
o...o
o...o
-----

:8,C

o...o
oO.Oo
o...o
oa..o
o...o
-----

;omoyo(a)


Pattern EC3b

o...?
.O.O?
.....
....o
....o
-----

:8,CW

ojc.?
iOaO?
febd.
hg..o
....o
-----

;!xplay_attack(a,b,c,d,e,f,g,h,i,j,j)


Pattern EC4

O..?     monkey jump connection
...O
----

:8,CW

Oae?
cbdf
----

;xplay_attack_either(a,b,c,c,a) && !xplay_attack(d,e,f)
;&& !xplay_attack(b,a,e,d,d)


##########################
#
# C patterns in the center
#
##############################################
#
# CC1xx - patterns without reading constraints
#
##############################################

# Static connections need almost everything
callback_data .Oxo,!


Pattern CC101

.O
O.

:X,C

aO
Ob

;!xcut(a) && !xcut(b)


Pattern CC102

OO
..
OO

:+,CW


Pattern CC103

?oooo?
o....o
oO..Oo
o....o
?oooo?

:+,C


Pattern CC104

?ooo??
o...oo
oO...o
o...Oo
oo...o
??ooo?

:8,C


Pattern CC105

?ooo?
.....
.O.O.
.....
?ooo?

:+,C


Pattern CC106

.O.O.
o...o
o...o
o.O.o

:8,C


Pattern CC107

.O.O.
o...o
o...o
.O.O.

:8,C


Pattern CC108

O.O
...
...
.O.

:|,C

OaO
bcd
efg
.O.

;omoyo(a) && oarea(c) && oarea(f)
;&& ((omoyo(b) + omoyo(c) + omoyo(d) + omoyo(e) + omoyo(f) +omoyo(g)) >= 3)


Pattern CC109
# gf Revised constraint. (3.3.3)

O.oo
..oo
..oo
.Ooo

:8,C

c.oo
.aoo
.boo
.doo

;omoyo(a) && omoyo(b) && lib(c)>=4 && lib(d)>=4


##########################################################
#
# CC2xx - patterns with reasonably inexpensive constraints
#
##########################################################

Pattern CC201

OO
..
O.

:8,CW

OO
ab
Oc

;xplay_attack_either(a,b,c,a,c)


Pattern CC202

OO
..
OX

:8,CW

OO
ab
OC

;!xplay_defend_both(a,b,a,C)


Pattern CC203

XO
..
OX

:8,CW

DO
ab
OC

;!xplay_defend_both(a,b,C,D) && !xplay_defend_both(b,a,C,D)


Pattern CC204

O
.
O

:+,CW

O
A
O

;!safe_xmove(A) && !ko(A) && !xcut(A)


Pattern CC205
# tm Modified (3.1.23)

???
?XO
?O.

:\,CW

?c?
dAO
?OB

; (((x_somewhere(c) || o_somewhere(c) || !xcut(c))
;    && (x_somewhere(d) || o_somewhere(c) || !xcut(d))) && attack(A))
; || (!ko(B) && !xcut(B) && !safe_xmove(B))


Pattern CC206
# tm modified (3.1.20)
#   FIXME: Should dragons be connectable via ko?
#   see trevord:260

O..
..O
ooo

:8,CW

Obc
daO
ooo

; xplay_attack_either(a,b,c,a,c) == WIN
; && xplay_attack_either(b,a,d,b,d) == WIN


Pattern CC206a
# tm removed duplicate name (3.1.20)

oOO..
.....
.O..O

:8,CW

oOO..
feca.
gOdbO

;xplay_attack_either(a,b,c,d,e,f,g,a,g)


Pattern CC207

XO
OX

:X,CW

AO
OB

;attack(A) && attack(B) && !oplay_defend_both(A,B)


Pattern CC208

OX
.O

:8,CW

OB
aO

; xplay_attack_either(a,a,B) == WIN


Pattern CC209

OO
XO
..
O.

:8,CW

OO
DO
ab
Oc

; xplay_attack_either(a,b,c,a,c) && !xplay_defend(b,a,D)

#############################################
#
# CC3xx - patterns with expensive constraints
#
#############################################
#
# CC30x - one space jump connections
#
####################################

Pattern CC302

?O.
...
?O.

:-,CW

?gd
cab
?fe

;olib(c)>1 && (xplay_attack(a,b,c,d,e,e) || xplay_attack(a,b,c,e,d,d))
;&& !xplay_attack(a,b,f) && !xplay_attack(a,b,g)


###########################
#
# CC31x - keima connections
#
###########################

Pattern CC311
# tm modified (3.1.20)
#   FIXME: Should dragons be connectable via ko?
#   see trevord:260

O..
..O

:8,CW

Ebc
daF

;lib(E)>2 && lib(F)>2
;&& xplay_attack_either(a,b,c,a,c)==WIN
;&& xplay_attack_either(b,a,d,b,d)==WIN


Pattern CC312

.O
..
O.
oO

:8,CW

dO
ab
Oc
oO

;(xplay_attack(a,b,c,a) || xplay_attack(a,b,c,c))
;&& (xplay_attack(b,a,d,b) || xplay_attack(b,a,d,d))
;&& !xcut(c)


Pattern CC313
# tm modified (3.1.20)
#   FIXME: Should dragons be connectable via ko?
#   see trevord:260

O..
..O
...

:8,CW

Obc
daf
.e.

;xplay_attack_either(a,b,c,a,c) == WIN
;&& (xplay_attack_either(b,a,d,b,d) == WIN || !xplay_break_through(b,d,a,e,d,e,f))


####################################
#
# CC32x - two space jump connections
#
####################################

Pattern CC321

O..O
O..O

:+,CW

OadO
ObcO

;!xplay_defend_both(a,b,c,d,a,c) && !xplay_defend_both(b,a,d,c,b,d)


Pattern CC322

O..O
O...

:8,CW

OacO
Obde

;xplay_attack_either(a,b,c,d,e,c,e) && !xplay_defend_both(a,b,d,c,a,d)
;&& xplay_attack(b,a,c,c)


Pattern CC323

O..O
O...

:8,CW

Oadf
Obce

;!xplay_defend_both(a,b,c,d,a,c) && xplay_attack_either(a,b,d,c,e,d,e)
;&& (!xplay_defend(d,c,b,a,d)
;    || (xplay_attack(d,c,b,a,e,d) && xplay_attack(d,c,b,a,e,b)
;        && xplay_attack(a,c,b,a,e,e)))
;&& xplay_defend_both(d,c,e,c,f)


############################
#
# CC33x - ogeima connections
#
############################

####################################################################
#
# CC4xx -  fragile double connections
#
# FIXME: These shouldn't be matched until all other amalgamation has
# been completed.
#
####################################################################

Pattern CC401
# Do amalgamate one of the two possible connections. We guess that
# the larger of the two dragons is the one we most want to keep in
# case of a cut.

?O.          fragile double connection 
X.O
?O.

:8,-

?d.
Xac
?b.

;xcut(a)

>amalgamate_most_valuable_helper(b,c,d);


Pattern CC402
# Do amalgamate one of the two possible connections. We guess that
# the larger of the two dragons is the one we most want to keep in
# case of a cut.

?O.
?..          fragile double connection 
X.O
?O.

:8,-

?gd
?bc
Xaf
?e.

;xcut(a)

>if (!xplay_attack_either(b,c,d,b,d) || !xplay_attack_either(c,b,a,c,a))
>  amalgamate(e,f);
>else
>  amalgamate_most_valuable_helper(e,f,g);


####################################################################
#
# CC5xx - experimental connection patterns
#
####################################################################
#
# Note about patterns CC501, CC502, CC502b, CC511
#
# In theory, these patterns go against the connection policy that the
# involved strings must be tactically stable (not capturable) and
# consequently, they should not be needed at all. In practice though,
# problems arise with the optics/owl analysis when such strings aren't
# amalgamated. An example (see owl:50)
#
# +------
# |...X.O
# |XXX.XO
# |.OOXXO
# |O.OOOO
#
# In the absence of the mentioned patterns, the topmost X stone would
# NOT be amalgamated with the others, because all attempts at
# defending these kosumi connections result in a tactical capture of
# the whole string, thus a successful cut.
#
# As a consequence, the owl code would be run against separate targets,
# and in the above case, it would even fail to find a way to kill the
# topmost X stone (the lack of context is then responsible for the 
# optics/owl code not being able to return vital points)
#
####################################################################


Pattern CC501
# Connect even if stones not tactically safe.

xO
O.

:\,sCY

xO
Oc

;x_suicide(c)


Pattern CC502
# Connect even if stones not tactically safe.

XO
O.

:\,sCY

Xb
ac

;lib(a)>1 && lib(b)>1 && !xcut(c) && xlib(c)==1 && xplay_attack(c,c)==WIN


Pattern CC502b
# Connect even if stones not tactically safe.

.O
O.

:\,sCY

db
ac

;lib(a)>1 && lib(b)>1 && !xcut(c) && !xcut(d)
;&& xlib(c)==1 && xplay_attack(c,c)


Pattern CC503

O
.
O

:+,CY

c
a
b

;!xcut(a) && !oplay_disconnect(b,c)


Pattern CC504

XO
O.

:\,CY

Xb
ca

;!xcut(a) && !oplay_disconnect(b,c)


Pattern CC505

XO
OX

:X,CY

Bc
dA

;(attack(A) || attack(B)) && !oplay_disconnect(c,d)


Pattern CC506

O
.
.
O

:+,CY

c
a
b
d

;!xcut(a) && !xcut(b) && !oplay_disconnect(c,d)


Pattern CC506b

O.
Xo
..
O.

:8,CY

c.
Eo
ab
d.

;!xcut(a) && !xcut(b) && lib(E)<=2 && !oplay_disconnect(c,d)


Pattern CC507

Ox
..
xO

:O,CY

cx
ab
xd

;!xcut(a) && !xcut(b) && !oplay_disconnect(c,d)


Pattern CC508

O?
.X
xO

:8,CY

b?
aX
xc

;!xcut(a) && !oplay_disconnect(b,c)


Pattern CC509

Ox
..
..
xO

:O,CY

ex
ab
cd
xf

;!xcut(a) && !xcut(b) && !xcut(c) && !xcut(d) && !oplay_disconnect(e,f)


# Pattern CC510
# 
# O?
# .x
# .X
# ?O
# 
# :8,CY
# 
# c?
# ax
# bX
# ?d
# 
# ;!xcut(a) && !xcut(b) && !oplay_disconnect(c,d)


Pattern CC511
# Connect even if stones not tactically safe.

.O
O.

:\,sCY

db
ac

;attack(a) && attack(b) && !xcut(c) && !xcut(d)


# END OF FILE
