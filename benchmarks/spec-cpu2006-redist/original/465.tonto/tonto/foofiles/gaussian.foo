!-------------------------------------------------------------------------------
!
! For describing a single gaussian function :: GAUSSIAN.
!
! Copyright (C) Dylan Jayatilaka, 1997
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id: gaussian.foo,v 1.7.2.1 2003/03/06 10:40:56 dylan Exp $
!-------------------------------------------------------------------------------

module GAUSSIAN

   implicit none

contains

   create
   ! Create a gaussian object
      self :: PTR
      nullify(self)
      allocate(self)
      ADD_MEMORY(GAUSSIAN_SIZE)
   end

   create(l,pos,ex)
   ! Create a gaussian object
      self :: PTR
       l :: INT
      pos :: REALVEC(3)
      ex :: REAL
      nullify(self)
      allocate(self)
      ADD_MEMORY(GAUSSIAN_SIZE)
      .set(l,pos,ex)
   end

   create(l,Rx,Ry,Rz,ex)
   ! Create a gaussian object
      self :: PTR
       l :: INT
      Rx,Ry,Rz :: REAL
      ex :: REAL
      nullify(self)
      allocate(self)
      ADD_MEMORY(GAUSSIAN_SIZE)
      .set(l,Rx,Ry,Rz,ex)
   end

   destroy
   ! Destroy a shell object
      self :: PTR
      if (.destroyed) return
      DELETE_MEMORY(GAUSSIAN_SIZE)
      deallocate(self)
   end

!   created result(res)
!   ! Returns true if self has been created
!      self :: PTR
!      res :: BIN
!      res = associated(self)
!   end

!   destroyed result(res)
!   ! Returns true if self has *not* been created
!      self :: PTR
!      res :: BIN
!      res = NOT associated(self)
!   end

   create_copy(G)
   ! Create a copy of "G"
      self :: PTR
       G :: GAUSSIAN
      .create
      .copy(G)
   end

   copy(G)
   ! Set the gaussian to "G"
      G :: GAUSSIAN
      self = G
   end

   set(l,pos,ex)
   ! Set a gaussian object
       l :: INT
      pos :: REALVEC(3)
      ex :: REAL
      .l = l
      .pos = pos
      .ex = ex
   end

   set(l,Rx,Ry,Rz,ex)
   ! Create a gaussian object
       l :: INT
      Rx,Ry,Rz :: REAL
      ex :: REAL
      .l = l
      .pos = (/Rx,Ry,Rz/)
      .ex = ex
   end

   set(ex)
   ! Set a gaussian object
      ex :: REAL
      .ex = ex
   end

   l_chr result(res)
   ! Return a character representation for the angular mtm
      res :: STR(1)
       l :: INT
      l = .l
      select case (l)
         case (0); res="s"
         case (1); res="p"
         case (2); res="d"
         case (3); res="f"
         case (4); res="g"
         case default;
            ENSURE(l<=23,"angular momentum too large:"// trim(l.to_str))
            res = achar(l-4+iachar("g"))
      end select
   end

!  **************
!  Output methods
!  **************

   put
   ! Put the gaussian information to file "stdout"
      stdout.show("L quantum number = ",.l,real_width=TRUE)
      stdout.show("Position         = ",.pos)
      stdout.show("Exponent         = ",.ex)
   end

!  *************
!  Input methods
!  *************

   read_keywords ::: get_from(OBJECT), recursive, leaky
   ! Read data from "stdin" using keyword style input.
   end

   process_keyword(keyword) ::: leaky
   ! Process command "keyword". Any required data needed by the "keyword" is
   ! inputted from "stdin".
      keyword :: STR(*)
      word :: STR
      word = keyword
      word.to_lower_case
      select case (word)
         case ("}     ");   ! exit case
         case ("ex=   ");   .read_ex
         case ("l=    ");   .read_l
         case ("l_chr=");   .read_l_chr
         case ("l_int=");   .read_l_int
         case ("pos=  ");   .read_pos
         case ("put   ");   .put
         case ("units=");   .read_units
         case default;      UNKNOWN(word)
      end
   end

   read_units ::: get_from(OBJECT)
   ! Read a string which describes the units to be used
   end

   read_junk ::: get_from(OBJECT)
   ! Read in a junk string, useful for ignoring a field
   end

   read_l
   ! Read in the l symbol
      word :: STR
      stdin.read(word)
      stdin.move_to_previous_item
      if (word.is_int) then; .read_l_int
      else;                  .read_l_chr
      end
   end

   read_l_int
   ! Read in the l integer
      word :: STR
      stdin.read(word)
      ENSURE(word.is_int,"expecting an integer for L")
      .l = word.to_int
   end

   read_l_chr
   ! Read in the l symbol
      word :: STR
      l_c :: STR(1)
      l :: INT
      stdin.read(word)
      ENSURE(len_trim(word)==1,"unknown L symbol")
      l_c = word
      l_c.to_lower_case
      select case (l_c)
         case ("s"); l = 0
         case ("p"); l = 1
         case ("d"); l = 2
         case ("f"); l = 3
         case ("g"); l = 4
         case default;
            DIE_IF(l_c<"g","unknown angular momentum character: "//l_c)
            l = 4 + iachar(l_c)-iachar("g")
      end
      .l = l
   end

   read_ex
   ! Read in the exponents
      stdin.read(.ex)
   end

   read_pos
   ! Read in the position
      stdin.read(.pos)
   end

!*****************
!  Inquiry methods
!*****************

   l result(res) ::: pure
   ! Return the angular momentum l
      self :: IN
      res :: INT
      res = .l
   end

   n_comp result(res) ::: pure
   ! Return the number of components in the gaussian shell.
      self :: IN
      res :: INT
      res = (.l+1)*(.l+2)/2
   end

   pos result(res) ::: pure
   ! Return the position of the shell
      self :: IN
      res :: REALVEC(3)
      res = .pos
   end

   pos(comp) result(res) ::: pure
   ! Return the position of the shell
      self :: IN
      comp :: INT, IN
      res :: REAL
      res = .pos(comp)
   end

   ex result(res) ::: pure
   ! Return the exponent vector pointer
      self :: IN
      res :: REAL
      res = .ex
   end

   make_grid(g,pt)
   ! Return "g(i,n)", the value of the gaussian component "n" on grid point "i"
   ! given a set of grid points "pt(i,1:3)"
      pt :: REALMAT, target
       g :: REALMAT, target
      x,y,z :: REALVEC*
   ENSURE(g.dim2==.n_comp,"incorrectly dimensioned")
      x => pt(:,1); y => pt(:,2); z => pt(:,3)
      .make_grid(g,x,y,z)
   end

   make_grid(g,x,y,z)
   ! Return "g(i,n)", the value of the gaussian component "n" on grid point "i"
   ! given a set of grid points "(x(i),y(i),z(i))"
      x,y,z :: REALVEC
      g :: REALMAT
      nx,ny,nz :: INTVEC*
      n_pt,n,b,j :: INT
      rr,xx,yy,zz,posx,posy,posz,g0,gbn :: REAL
      ENSURE(g.dim2==.n_comp,"incorrectly dimensioned")
      n_pt = size(x)
      posx = .pos(1); posy = .pos(2); posz = .pos(3)
      select case (.l)
        case (0)
          do n = 1,n_pt
             xx=x(n) - posx; yy=y(n) - posy; zz=z(n) - posz
             rr = xx*xx + yy*yy + zz*zz
             g(n,1) = exp( -rr * .ex )
          end
        case (1)
          do n = 1,n_pt
             xx=x(n) - posx; yy=y(n) - posy; zz=z(n) - posz
             rr = xx*xx + yy*yy + zz*zz
             g0 = exp( -rr * .ex )
             g(n,1) = xx*g0
             g(n,2) = yy*g0
             g(n,3) = zz*g0
          end
        case (2)
          do n = 1,n_pt
             xx=x(n) - posx; yy=y(n) - posy; zz=z(n) - posz
             rr = xx*xx + yy*yy + zz*zz
             g0 = exp( -rr * .ex )
             g(n,1) = xx*xx*g0
             g(n,2) = yy*yy*g0
             g(n,3) = zz*zz*g0
             g(n,4) = xx*yy*g0
             g(n,5) = xx*zz*g0
             g(n,6) = yy*zz*g0
          end
        case default
          nx.create(.n_comp); ny.create(.n_comp); nz.create(.n_comp)
          .l.make_gaussian_xyz_powers(nx,ny,nz)
          do n = 1,n_pt
             xx=x(n) - posx; yy=y(n) - posy; zz=z(n) - posz
             rr = xx*xx + yy*yy + zz*zz    ! Do exponential part of the gaussian
             g0 = exp( -rr * .ex )
             do b = 1,.n_comp              ! Loop over all basis functions
                gbn = g0                   ! Combine exponential and cartesian
                do j = 1,nx(b)             ! power of the x^j part
                   gbn = xx*gbn
                end
                do j = 1,ny(b)
                   gbn = yy*gbn
                end
                do j = 1,nz(b)
                   gbn = zz*gbn
                end
                g(n,b) = gbn
             end
          end
          nz.destroy; ny.destroy; nx.destroy
     end
   end

end
