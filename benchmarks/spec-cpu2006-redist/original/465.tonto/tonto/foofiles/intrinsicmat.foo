!-------------------------------------------------------------------------------
!
! INTRISICMAT: Generic matrix operations ...
!
! Copyright (C) Dylan Jayatilaka, 1996
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id: intrinsicmat.foo,v 1.1.2.1 2003/03/24 01:28:52 dylan Exp $
!-------------------------------------------------------------------------------

virtual module INTRINSICMAT

   implicit none

contains

   create(dim1,dim2)
   ! Create a matrix with the given dimensions
      self :: PTR
      dim1,dim2 :: INT, IN
      nullify(self)
      allocate(self(dim1,dim2))
      ADD_MEMORY(dim1*dim2*ELEMENT_TYPE_SIZE)
   end

   create(lb1,ub1,lb2,ub2)
   ! Create a matrix with the given dimensions
      self :: PTR
      lb1,ub1,lb2,ub2 :: INT, IN
      nullify(self)
      allocate(self(lb1:ub1,lb2:ub2))
      ADD_MEMORY((ub1-lb1+1)*(ub2-lb2+1)*ELEMENT_TYPE_SIZE)
   end

   create(bounds1,bounds2)
   ! Create a matrix with the specified bounds for each dimension
      self :: PTR
      bounds1,bounds2 :: INTVEC, IN
      .create(bounds1(1),bounds1(2),bounds2(1),bounds2(2))
   end

   create(bounds)
   ! Create a matrix with the given bounds for all dimensions
      self :: PTR
      bounds :: INTMAT(2,2), IN
      .create(bounds(1,1),bounds(1,2),bounds(2,1),bounds(2,2))
   end

   create_copy(matrix)
   ! Create a replica copy of matrix
      self :: PTR
      matrix :: SELF_TYPE, IN
      .create(lbound(matrix,1),ubound(matrix,1), &
              lbound(matrix,2),ubound(matrix,2)  )
      self = matrix
   end

   destroy
   ! Destroy the object
      self :: PTR
      if (.destroyed) return
      DELETE_MEMORY(size(self)*ELEMENT_TYPE_SIZE)
      deallocate(self)
   end

   shrink(dim1,dim2) ::: leaky
   ! Shrinks self to dimension dim1xdim2.  Contents are retained.
     self :: PTR
     dim1,dim2 :: INT, IN
     old :: SELF_TYPE*
     ENSURE(.created, "matrix not allocated")
     ENSURE(dim1<=.dim1, "1st dimension given is too large.")
     ENSURE(dim2<=.dim2, "2nd dimension given is too large.")
     if (dim1==.dim1 AND dim2==.dim2) return
     old => self
     nullify(self)
     self.create(dim1,dim2)
     self=old(1:dim1,1:dim2)
     old.destroy
   end

   shrink_columns(dim2) ::: leaky
   ! Shrinks columns of self to dimension dim2. Contents are retained.
     self :: PTR
     dim2 :: INT, IN
     old :: SELF_TYPE*
     dim1 :: INT
     ENSURE(.created,"matrix not allocated")
     ENSURE(dim2<=.dim2, "2nd dimension given is too large.")
     if (dim2==.dim2) return
     dim1 = .dim1
     old => self
     nullify(self)
     self.create(dim1,dim2)
     self=old(1:dim1,1:dim2)
     old.destroy
   end

   expand(dim1,dim2) ::: leaky
   ! Expands self to dimension dim1xdim2.  Contents are retained.
     self :: PTR
     dim1,dim2 :: INT, IN
     old :: SELF_TYPE*
     old_size1,old_size2 :: INT
     if (.destroyed) then
       .create(0,0)
     else
     ENSURE(dim1>=.dim1, "1st dimension given is too small")
     ENSURE(dim2>=.dim2, "2nd dimension given is too small")
     end
     old => self
     old_size1 = old.dim1
     old_size2 = old.dim2
     nullify(self)
     self.create(dim1,dim2)
     self(1:old_size1,1:old_size2)=old
     old.destroy
   end

   expand_columns(dim2) ::: leaky
   ! Expands the columns self to dim2.  Contents are retained.
     self :: PTR
     dim2 :: INT, IN
     dim1,old_dim2 :: INT
     old :: SELF_TYPE*
     ENSURE( .created, "matrix not allocated")
     ENSURE(dim2>=.dim2, "2nd dimension given is too small")
     dim1 = .dim1
     old => self
     old_dim2 = old.dim2
     nullify(self)
     self.create(dim1,dim2)
     self(:,1:old_dim2) = old
     old.destroy
   end

   append_columns(cols) ::: leaky
   ! Append the columns "cols" onto the end of self.
     self :: PTR
     cols :: SELF_TYPE
     old_dim2,new_dim2 :: INT
     ENSURE(.created, "self not allocated")
     ENSURE(.dim1==cols.dim1, "1st dimension wrong, cols")
     old_dim2 = .dim2
     new_dim2 = .dim2 + cols.dim2
     .expand_columns(new_dim2)
     self(:,old_dim2+1:new_dim2) = cols
   end


   is_same_shape_as(b) result(res) ::: pure
   ! Returns TRUE if the matrix "b" has the same shape as self
      self :: IN
      b :: CPXMAT, IN
      res :: BIN
      res = size(self,1)==size(b,1) AND size(self,2)==size(b,2)
   end

   is_same_shape_as(b) result(res) ::: pure
   ! Returns TRUE if the matrix "b" has the same shape as self
      self :: IN
      b :: REALMAT, IN
      res :: BIN
      res = size(self,1)==size(b,1) AND size(self,2)==size(b,2)
   end

   is_same_shape_as(b) result(res) ::: pure
   ! Returns TRUE if the matrix "b" has the same shape as self
      self :: IN
      b :: INTMAT, IN
      res :: BIN
      res = size(self,1)==size(b,1) AND size(self,2)==size(b,2)
   end

   is_same_shape_as(b) result(res) ::: pure
   ! Returns TRUE if the matrix "b" has the same shape as self
      self :: IN
      b :: BINMAT, IN
      res :: BIN
      res = size(self,1)==size(b,1) AND size(self,2)==size(b,2)
   end

   is_transposed_shape_of(b) result(res) ::: pure
   ! Returns TRUE if the matrix "b" is the transposed shape of self
      self :: IN
      b :: CPXMAT, IN
      res :: BIN
      res = size(self,1)==size(b,2) AND size(self,2)==size(b,1)
   end

   is_transposed_shape_of(b) result(res) ::: pure
   ! Returns TRUE if the matrix "b" is the transposed shape of self
      self :: IN
      b :: REALMAT, IN
      res :: BIN
      res = size(self,1)==size(b,2) AND size(self,2)==size(b,1)
   end

   is_transposed_shape_of(b) result(res) ::: pure
   ! Returns TRUE if the matrix "b" is the transposed shape of self
      self :: IN
      b :: INTMAT, IN
      res :: BIN
      res = size(self,1)==size(b,2) AND size(self,2)==size(b,1)
   end

   is_transposed_shape_of(b) result(res) ::: pure
   ! Returns TRUE if the matrix "b" is the transposed shape of self
      self :: IN
      b :: BINMAT, IN
      res :: BIN
      res = size(self,1)==size(b,2) AND size(self,2)==size(b,1)
   end

   trace result (res)
   ! Return the trace of self
      self :: IN
      res :: ELEMENT_TYPE
      dim,i :: INT
      ENSURE(.dim1==.dim2,"non-square matrix")
      dim = size(self,1)
      res = ZERO
      do i = 1,dim
         res = res + self(i,i)
      end
   end

   trace_product_with(b) result (res)
   ! Return the trace of the product of "self" with matrix b.
      self :: IN
      b :: SELF_TYPE, IN
      res :: ELEMENT_TYPE
      i :: INT
      ENSURE(.is_transposed_shape_of(b),"incompatible dimensions")
      res = ZERO
      do i = 1,size(self,1)
         res = res + sum( self(i,:)*b(:,i) )
      end
   end

   is_square result(res) ::: pure
   ! Returns TRUE if the matrix is square
      self :: IN
      res :: BIN
      res = size(self,1)==size(self,2)
   end

   swap_columns(col1,col2)
   ! Swap columns "col1" and "col2" of self
      col1,col2 :: INT, IN
      a1,a2,i :: INT
      val :: ELEMENT_TYPE
      ENSURE(col1<=.dim2 AND col2<=.dim2,"columns exceed dimesions")
      a1 = size(self,1)
      a2 = size(self,2)
      do i = 1,a1
         val = self(i,col1)
         self(i,col1) = self(i,col2)
         self(i,col2) = val
      end
   end

   set_to(b)
   ! Set self to "b"
      b :: SELF_TYPE, IN
      ENSURE(.is_same_shape_as(b),"incompatible shape")
      self = b
   end

   plus(b)
   ! Add to self the matrix "b"
      b :: SELF_TYPE, IN
      ENSURE(.is_same_shape_as(b),"incompatible shape")
      self = self+b
   end

   minus(b)
   ! Subtract from self the matrix "b"
      b :: SELF_TYPE, IN
      ENSURE(.is_same_shape_as(b),"incompatible shape")
      self = self-b
   end

end
