!-------------------------------------------------------------------------------
!
! MOL: An object representation of a molecule.
!
! Copyright (C) Dylan Jayatilaka, Daniel Grimwood, 1996
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id: mol.foo,v 1.161.2.58 2003/11/12 08:36:23 reaper Exp $
!-------------------------------------------------------------------------------

module MOL

   use REALVEC, only: minimise_BFGS
   use PARALLEL
   use ISOSURFACE

   implicit none

   saved_self :: MOL*, private

contains

!  **************************
!  Create and destroy methods
!  **************************

   create
   ! Create a molecule object
      self :: PTR
      nullify(self)
      allocate(self)
      ADD_MEMORY(MOL_SIZE)
      .nullify_ptr_part
      .set_defaults
   end

   destroy ::: recursive
   ! Destroy a molecule object
      self :: PTR
      if (.destroyed) return
      .destroy_ptr_part
      deallocate(self)
      DELETE_MEMORY(MOL_SIZE)
   end

   nullify_ptr_part
   ! Nullify the pointer parts of the molecule
      nullify(.atom)
      nullify(.basis)
      nullify(.slaterbasis)
      nullify(.coppensbasis)
      nullify(.grid)
      nullify(.isosurface)
      nullify(.dftgrid)
      nullify(.crystal)
      nullify(.cluster)
      nullify(.cif)
      nullify(.pointgroup)
      nullify(.atom_for_shell)
      nullify(.atom_shell_for_shell)
      nullify(.first_shell_for_atom)
      nullify(.last_shell_for_atom)
      nullify(.basis_shell_for_shell)
      nullify(.first_basis_fn_for_shell)
      nullify(.last_basis_fn_for_shell)
      nullify(.first_basis_fn_for_atom)
      nullify(.last_basis_fn_for_atom)
      nullify(.precomputed_basis_shellpair)
      nullify(.atom_kind)
      nullify(.unique_atom)
      nullify(.scfdata)
      nullify(.orbital_energies)
      nullify(.molecular_orbitals)
      nullify(.density_matrix)
      nullify(.natural_orbitals)
      nullify(.occupation_numbers)
      nullify(.fock_matrix)
      nullify(.constraint_matrix)
      nullify(.old_molecular_orbitals)
      nullify(.old_density_matrix)
      nullify(.old_fock_matrix)
      nullify(.old_constraint_matrix)
      nullify(.atom_group)
      nullify(.atom_group_energy)
      nullify(.group_charges)
      nullify(.roby)
      nullify(.saved)
   end

   destroy_ptr_part ::: recursive
   ! Destroy the pointer parts of a molecule object
      .saved.destroy
      if (.atom.created) then
         .atom.nullify_basis_part ! nullify this !
         .atom.nullify_slaterbasis_part
         .atom.nullify_coppensbasis_part
         .destroy_ANO_data        ! in case .roby was created
      end
      .atom.destroy
      .basis.destroy
      .slaterbasis.destroy
      .coppensbasis.destroy
      .grid.destroy
      .isosurface.destroy
      .dftgrid.destroy
      .crystal.destroy
      .cluster.destroy
      .cif.destroy
      .pointgroup.destroy
      .atom_for_shell.destroy
      .atom_shell_for_shell.destroy
      .first_shell_for_atom.destroy
      .last_shell_for_atom.destroy
      .basis_shell_for_shell.destroy
      .first_basis_fn_for_shell.destroy
      .last_basis_fn_for_shell.destroy
      .first_basis_fn_for_atom.destroy
      .last_basis_fn_for_atom.destroy
      .precomputed_basis_shellpair.destroy
      .atom_kind.destroy
      .unique_atom.destroy
      .scfdata.destroy
      .orbital_energies.destroy
      .molecular_orbitals.destroy
      .density_matrix.destroy
      .natural_orbitals.destroy
      .occupation_numbers.destroy
      .fock_matrix.destroy
      .constraint_matrix.destroy
      .old_molecular_orbitals.destroy
      .old_density_matrix.destroy
      .old_fock_matrix.destroy
      .old_constraint_matrix.destroy
      .atom_group.destroy
      .atom_group_energy.destroy
      .group_charges.destroy
      .roby.destroy
   end

   destroy_matrices
   ! Destroy the matrices of a molecule object
      .atom_for_shell.destroy
      .atom_shell_for_shell.destroy
      .first_shell_for_atom.destroy
      .last_shell_for_atom.destroy
      .first_basis_fn_for_shell.destroy
      .last_basis_fn_for_shell.destroy
      .first_basis_fn_for_atom.destroy
      .last_basis_fn_for_atom.destroy
      .orbital_energies.destroy
      .molecular_orbitals.destroy
      .density_matrix.destroy
      .natural_orbitals.destroy
      .occupation_numbers.destroy
      .fock_matrix.destroy
      .old_molecular_orbitals.destroy
      .old_density_matrix.destroy
      .old_fock_matrix.destroy
      .old_constraint_matrix.destroy
      .constraint_matrix.destroy
      .atom_group.destroy
   end

!   created result(res)
!   ! Returns true if self has been created
!      self :: PTR
!      res :: BIN
!      res = associated(self)
!   end

!   destroyed result(res)
!   ! Returns true if self has not been created
!      self :: PTR
!      res :: BIN
!      res = NOT associated(self)
!   end

   save ::: leaky
   ! Save everything about "self" in ".saved".
      self :: PTR
      saved :: MOL*
      saved => self
      .create
      .saved => saved
   end

   unsave ::: leaky
   ! Revert back to a previously saved molecule stored in .saved, and
   ! destroy everything about the current molecule in "self".
   ! WARNING: be careful when setting up self, make sure none of its pointer
   ! parts refer to .saved information.
      self :: PTR
      saved :: MOL*
   ENSURE(.saved.created,"no previous settings")
      saved => .saved
      nullify(.saved) ! don't destroy this
      .destroy        ! careful no .saved information is destroyed
      self => saved   ! restore
   end

   create_copy(mol) ::: leaky
   ! Create a copy of "mol"
      self :: PTR
      mol :: MOL, IN
      .create
      .copy(mol)
   end

   copy(mol) ::: leaky
   ! Set self to be a copy of "mol"
      mol :: MOL, IN
      ! Copy all non-pointer fields
      self.nullify_ptr_part
      self = mol
      ! Create a copy of all pointer fields
      if (mol.atom.created) &
         .atom.create_copy(mol.atom)
      if (mol.basis.created) &
         .basis.create_copy(mol.basis)
      if (mol.slaterbasis.created) &
         .slaterbasis.create_copy(mol.slaterbasis)
      if (mol.coppensbasis.created) &
         .coppensbasis.create_copy(mol.coppensbasis)
      if (mol.grid.created) &
         .grid.create_copy(mol.grid)
      if (mol.dftgrid.created) &
         .dftgrid.create_copy(mol.dftgrid)
      if (mol.crystal.created) &
         .crystal.create_copy(mol.crystal)
      if (mol.cluster.created) &
         .cluster.create_copy(mol.cluster)
      if (mol.cif.created) &
         .cif.create_copy(mol.cif)
      if (mol.pointgroup.created) &
         .pointgroup.create_copy(mol.pointgroup)
      if (mol.saved.created) &
         .saved.create_copy(mol.saved)
      if (mol.atom_for_shell.created) &
         .atom_for_shell.create_copy(mol.atom_for_shell)
      if (mol.atom_shell_for_shell.created) &
         .atom_shell_for_shell.create_copy(mol.atom_shell_for_shell)
      if (mol.first_shell_for_atom.created) &
         .first_shell_for_atom.create_copy(mol.first_shell_for_atom)
      if (mol.last_shell_for_atom.created) &
         .last_shell_for_atom.create_copy(mol.last_shell_for_atom)
      if (mol.first_basis_fn_for_shell.created) &
         .first_basis_fn_for_shell.create_copy(mol.first_basis_fn_for_shell)
      if (mol.last_basis_fn_for_shell.created) &
         .last_basis_fn_for_shell.create_copy(mol.last_basis_fn_for_shell)
      if (mol.atom_kind.created) &
         .atom_kind.create_copy(mol.atom_kind)
      if (mol.unique_atom.created) &
         .unique_atom.create_copy(mol.unique_atom)
      if (mol.first_basis_fn_for_atom.created) &
         .first_basis_fn_for_atom.create_copy(mol.first_basis_fn_for_atom)
      if (mol.last_basis_fn_for_atom.created) &
         .last_basis_fn_for_atom.create_copy(mol.last_basis_fn_for_atom)
      if (mol.scfdata.created) &
         .scfdata.create_copy(mol.scfdata)
      if (mol.orbital_energies.created) &
         .orbital_energies.create_copy(mol.orbital_energies)
      if (mol.molecular_orbitals.created) &
         .molecular_orbitals.create_copy(mol.molecular_orbitals)
      if (mol.density_matrix.created) &
         .density_matrix.create_copy(mol.density_matrix)
      if (mol.natural_orbitals.created) &
         .natural_orbitals.create_copy(mol.natural_orbitals)
      if (mol.occupation_numbers.created) &
         .occupation_numbers.create_copy(mol.occupation_numbers)
      if (mol.fock_matrix.created) &
         .fock_matrix.create_copy(mol.fock_matrix)
      if (mol.old_molecular_orbitals.created) &
         .old_molecular_orbitals.create_copy(mol.old_molecular_orbitals)
      if (mol.old_density_matrix.created) &
         .old_density_matrix.create_copy(mol.old_density_matrix)
      if (mol.old_fock_matrix.created) &
         .old_fock_matrix.create_copy(mol.old_fock_matrix)
      if (mol.constraint_matrix.created) &
         .constraint_matrix.create_copy(mol.constraint_matrix)
      if (mol.old_constraint_matrix.created) &
         .old_constraint_matrix.create_copy(mol.old_constraint_matrix)
      if (mol.atom_group.created) &
         .atom_group.create_copy(mol.atom_group)
      if (mol.group_charges.created) &
         .group_charges.create_copy(mol.group_charges)
   end

   set_defaults ::: leaky
   ! Set up a default molecule
      .name = "unknown"
      .E_field = ZERO
      .B_field = ZERO
      .gauge_origin = ZERO
      .charge = 0
      .mult = 1
      .optimise_thermals = FALSE
      .n_bf = 0
      .basis_set_kind = " "
      .basis_info_made = FALSE
      .CIF_file_name = " "
      .CIF_data_block_name = " "
      .CX_file_name = " "
      if (.atom.created) then
        .mult = .default_multiplicity
        .set_atom_info
      end
   end

   set_atom_info ::: leaky
   ! Set the associated atom information, including the number of alpha and beta
   ! electrons. NOTE: The multiplicity must be right for this to work.  The
   ! routine tries to reassign the multiplicity so that it will be consistent
   ! with the charge.
      ENSURE(.atom.created,"no atom info")
      .n_atom = size(.atom)
      if (NOT .has_valid_no_of_beta_electrons) then
         WARN("Incosistent charge and multiplicity")
         WARN("Reassigning the multiplicity")
         .mult = .default_multiplicity
      end
      .n_e = .no_of_electrons
      .n_a = .no_of_alpha_electrons
      .n_b = .no_of_beta_electrons
      .atom_kind.destroy
      .atom_kind.create(.n_atom)
      .atom.make_atom_kind_list(.atom_kind,.n_atom_kind)
      .unique_atom.destroy
      .unique_atom.create(.n_atom_kind)
      .atom.make_unique_atom_list(.unique_atom)
      if (.atom.groups_defined) .make_atom_groups
   end

   resolve_basis_info ::: leaky
   ! Match the basis set labels for every atom with the actual atomic basis set.
   ! Also perform any finalization procedures to fully define all objects.
      if (.atom.destroyed) return
      if (.n_atom <1) return
      if    (.basis_set_kind.same_as("Thakkar",ignore_case=TRUE)) then
         .resolve_slaterbasis_info
      else if (.basis_set_kind.same_as("Coppens",ignore_case=TRUE)) then
         .resolve_coppensbasis_info
      else
         .resolve_gaussianbasis_info
      end
   end

!   resolve_gaussianbasis_info ::: leaky
!   ! Match the basis set labels for every atom with the actual atomic basis set.
!   ! Also perform any finalization procedures to fully define all objects.
!      labels :: STRVEC*
!      if (.atom.destroyed) return
!      .basis_info_made = FALSE
!      ! Bases are fully or partially labelled ?
!      if (NOT .atom.bases_are_all_unlabeled) then
!         if (.basis.created) then ! first try to resolve using existing bases.
!            .atom.resolve_library_bases(.basis,clobber=TRUE,resolve_all=FALSE)
!            if (.atom.bases_are_resolved AND .basis_set_kind/=" ") then
!               WARN("basis_set_kind= specified but ignored")
!            end
!         end
!         if (NOT .atom.bases_are_resolved  AND .basis_set_kind/=" ") then
!            labels => .atom.library_basis_labels(.basis_set_kind,missing=TRUE)
!            .basis.read_library_data(.basis_set_library,labels) ! stdin is redirected
!            .atom.resolve_basis_suffix(.basis,.basis_set_kind,clobber=FALSE,resolve_all=TRUE)
!            labels.destroy
!         end
!      ! Bases unlabelled. Generic basis_set_kind= specifier used ?
!      else if (.basis_set_kind/=" ") then
!         ENSURE(.basis.destroyed,"all bases are unlabeled, can't use basis_set_kind=")
!         labels => .atom.library_basis_labels(.basis_set_kind)
!         .basis.read_library_data(.basis_set_library,labels) ! stdin is redirected
!         .atom.resolve_basis_suffix(.basis,.basis_set_kind,clobber=TRUE,resolve_all=TRUE)
!         labels.destroy
!      end
!      if (.atom.bases_are_resolved) then
!         ENSURE(.basis.created,"list of bases does not exists")
!         .basis.unnormalise ! NOTE this
!         .set_basis_info
!         stdout.text(" ")
!         stdout.text("Bases all resolved")
!      end
!   end

   resolve_gaussianbasis_info ::: leaky
   ! For a Coppens basis set, match the basis set labels for every atom with the
   ! actual fitted atomic basis set.
      library_basis_labels :: STRVEC*
      n_unique :: INT
      if (.basis.created) .basis.renormalise 
      ! First, add all library bases; this may scramble atom.basis ptr's
      if (.basis_set_kind/=" ") then 
         library_basis_labels => .atom.library_basis_labels(.basis_set_kind)
         .basis.read_library_data(.basis_set_library,library_basis_labels,n_unique) 
         stdout.text("Added "//n_unique.to_str.trim//" bases from library: "//.basis_set_kind.trim)
         library_basis_labels.destroy
      end
      ! Now try to resolve atom bases afresh
      if (.basis.created) then
         .atom.resolve_bases(.basis,.basis_set_kind)
         if (.atom.bases_are_resolved) stdout.text("Bases all resolved")
      end
      ! Unnormalise if completely done
      if (.basis.created) then
         .basis.unnormalise ! NOTE this
         .set_basis_info
      end
   end

!   resolve_slaterbasis_info ::: leaky
!   ! For a Slater basis set, match the basis set labels for every atom with the
!   ! actual fitted atomic basis set.
!      labels :: STRVEC*
!      ENSURE(.basis_set_kind.same_as("Slater",ignore_case=TRUE),"not a Slater basis")
!      ! Bases are fully or partially labelled ?
!      if (NOT .atom.slaterbases_are_all_unlabeled) then
!         if (.slaterbasis.created) then ! first try to resolve using existing bases.
!            .atom.resolve_library_bases(.slaterbasis,clobber=TRUE,resolve_all=FALSE)
!            if (.atom.slaterbases_are_resolved AND .basis_set_kind/=" ") then
!               WARN("basis_set_kind= specified but ignored")
!            end
!         end
!         if (NOT .atom.slaterbases_are_resolved  AND .basis_set_kind/=" ") then
!            labels => .atom.library_basis_labels(.basis_set_kind,missing=TRUE)
!            .slaterbasis.read_library_data(.basis_set_library,labels) ! stdin is redirected
!            .atom.resolve_basis_suffix(.slaterbasis,.basis_set_kind,clobber=FALSE,resolve_all=TRUE)
!            labels.destroy
!         end
!      ! Bases unlabelled. Generic basis_set_kind= specifier used ?
!      else if (.basis_set_kind/=" ") then
!      ENSURE(.slaterbasis.destroyed,"all bases are unlabeled, can't use basis_set_kind=")
!         labels => .atom.library_basis_labels(.basis_set_kind)
!         .slaterbasis.read_library_data(.basis_set_library,labels) ! stdin is redirected
!         .atom.resolve_basis_suffix(.slaterbasis,.basis_set_kind,clobber=TRUE,resolve_all=TRUE)
!         labels.destroy
!      end
!      if (.atom.slaterbases_are_resolved) then
!         stdout.text(" ")
!         stdout.text("Slater bases all resolved")
!      end
!   end

   resolve_slaterbasis_info ::: leaky
   ! For a Coppens basis set, match the basis set labels for every atom with the
   ! actual fitted atomic basis set.
      library_basis_labels :: STRVEC*
      n_unique :: INT
      ENSURE(.basis_set_kind.same_as("Thakkar",ignore_case=TRUE),"not a Slater basis")
      ! First, add all library bases; this may scramble atom.basis ptr's
      if (.basis_set_kind/=" ") then 
         library_basis_labels => .atom.library_basis_labels(.basis_set_kind)
         .slaterbasis.read_library_data(.basis_set_library,library_basis_labels,n_unique) 
         stdout.text("Added "//n_unique.to_str.trim//" bases from library: "//.basis_set_kind.trim)
         library_basis_labels.destroy
      end
      ! Now try to resolve atom bases afresh
      if (.slaterbasis.created) then
         .atom.resolve_bases(.slaterbasis,.basis_set_kind)
         if (.atom.slaterbases_are_resolved) stdout.text("Slater bases all resolved")
      end
      ! .set_basis_info
   end

   resolve_coppensbasis_info ::: leaky
   ! For a Coppens basis set, match the basis set labels for every atom with the
   ! actual fitted atomic basis set.
      library_basis_labels :: STRVEC*
      n_unique :: INT
      ENSURE(.basis_set_kind.same_as("Coppens",ignore_case=TRUE),"not a Coppens basis")
      if (.coppensbasis.created) .coppensbasis.renormalise 
      ! First, add all library bases; this may scramble atom.basis ptr's
      if (.basis_set_kind/=" ") then 
         library_basis_labels => .atom.library_basis_labels(.basis_set_kind)
         .coppensbasis.read_library_data(.basis_set_library,library_basis_labels,n_unique) 
         stdout.text("Added "//n_unique.to_str.trim//" bases from library: "//.basis_set_kind.trim)
         library_basis_labels.destroy
      end
      ! Now try to resolve atom bases afresh
      if (.coppensbasis.created) then
         .atom.resolve_bases(.coppensbasis,.basis_set_kind)
         if (.atom.coppensbases_are_resolved) stdout.text("Coppens bases all resolved")
      end
      ! Unnormalise if completely done
      if (.coppensbasis.created) .coppensbasis.unnormalise ! NOTE this
      ! .set_basis_info
   end

   basis_set_library result (res)
   ! Return a string giving the basis set library
      res :: STR
      basis :: BASISVEC*
      ENSURE(.basis_set_kind/=" ","no basis_set_kind specified")
      res = basis.library_directory(.basis_set_kind)
   end

   resolve_axis_system
   ! Change the axis system to crystal coordinates, if required.
      if (.crystal.destroyed) return
      if (.atom.destroyed) return
      .atom.resolve_axis_system(.crystal)
   end

   set_basis_info ::: leaky
   ! Set the associated basis set information
      .basis_info_made = TRUE
      .n_basis = size(.basis)
      .n_bf = .atom.n_bf
      .n_prim = .atom.n_prim
      .n_shell = .atom.n_shell
      .n_shell_pairs = .no_of_shell_pairs
      .molecular_orbitals.destroy
      .molecular_orbitals.create(.n_bf)
      .orbital_energies.destroy
      .orbital_energies.create(.n_bf)
      .density_matrix.destroy
      .density_matrix.create(.n_bf)
      .natural_orbitals.destroy
      .natural_orbitals.create(.n_bf)
      .occupation_numbers.destroy
      .occupation_numbers.create(.n_bf)
      .fock_matrix.destroy
      .fock_matrix.create(.n_bf)
      .make_shell_info
   end

   assign_natural_orbitals ::: leaky
   ! Assign the natural orbitals to be the molecular_orbitals
      NO_kind :: STR
      ENSURE(.molecular_orbitals.created, "no molecular orbitals")
      ENSURE(.molecular_orbitals.any_created, "no molecular orbitals")
      .natural_orbitals.destroy
      .natural_orbitals.create_copy(.molecular_orbitals)
      NO_kind = .natural_orbitals.spinorbital_kind
      .occupation_numbers.destroy
      .occupation_numbers.create(.n_bf,NO_kind)
      .occupation_numbers.zero
      .set_scf_occupations(NO_kind)
   end

   assign_MOs_to_NOs ::: leaky
   ! Assign the MOs to be the same as the natural orbitals
      NO_kind :: STR
      .molecular_orbitals.destroy
      .molecular_orbitals.create_copy(.natural_orbitals)
      NO_kind = .natural_orbitals.spinorbital_kind
      .occupation_numbers.create(NO_kind)
      .occupation_numbers.zero
      .set_scf_occupations(NO_kind)
   end

   set_scf_occupations(NO_kind)
   ! Set the SCF occupation numbers for the natural orbitals
      NO_kind :: STR
      select case (NO_kind)
         case ("restricted")
            .occupation_numbers.restricted(1:.n_a) = TWO
         case ("unrestricted")
            .occupation_numbers.alpha(1:.n_a) = ONE
            .occupation_numbers.beta(1:.n_b) = ONE
         case ("general")
            .occupation_numbers.general(1:.n_e) = ONE
         case ("restricted_complex")
            .occupation_numbers.restricted(1:.n_a) = TWO
         case ("unrestricted_complex")
            .occupation_numbers.alpha(1:.n_a) = ONE
            .occupation_numbers.beta(1:.n_b) = ONE
         case ("general_complex")
            .occupation_numbers.general(1:.n_e) = ONE
      end
   end

!  ***************************
!  ATOMVEC information methods
!  ***************************

   default_multiplicity result(res)
   ! Return the default multiplicity for a molecule.
     self :: IN
     res :: REAL
     n_e :: INT
     ENSURE(.atom.created,"no atom info")
     n_e = .no_of_electrons
     if (size(.atom)==1) then
        res = .atom(1).ground_state_multiplicity(n_e)
     else
        res = mod(n_e,2) + 1
     end
   end

   nuclear_energy result(res)
   ! Return the nuclear repulsion energy
      res :: REAL
      ENSURE(.atom.created,"atom list required")
      res = .atom.nuclear_energy
   end

   chemical_formula result(res)
   ! Return the chemical formula for the molecule, as a string, in alphabetical
   ! order of elements
      res :: STR
      ENSURE(.atom.created,"atom list required")
      res = .atom.chemical_formula
   end

   centre_of_mass result(centre)
   ! Return the centre of mass
      centre :: REALVEC(3)
      ENSURE(.atom.created,"atom list required")
      centre = .atom.centre_of_mass
   end

   move_origin_to_centre_of_mass
   ! Move the origin to the centre of mass
      com :: REALVEC(3)
      ENSURE(.atom.created,"atom list required")
      com = .atom.centre_of_mass
      .atom.translate(-com)
   end

   molecular_weight result(res)
   ! Return the molceular weight
      res :: REAL
      ENSURE(.atom.created,"atom list required")
      res = .atom.molecular_weight
   end

   reduced_mass result(res)
   ! Return the reduced mass
      res :: REAL
      ENSURE(.atom.created,"atom list required")
      res = .atom.reduced_mass
   end

   centre_of_atoms result(centre)
   ! Return the centroid of the atom positions
      centre :: REALVEC(3)
      ENSURE(.atom.created,"atom list required")
      centre = .atom.centre_of_atoms
   end

   atom_index_from_pos(pos) result(res)
   ! Return the index of atom from its position "pos"
      pos :: REALVEC(3)
      res :: INT
      ENSURE(.atom.created,"atom list required")
      res = .atom.atom_index_from_pos(pos)
   end

   get_geometry(g)
   ! Return the geometry "g" in a matrix
       g :: REALMAT
      ENSURE(.atom.created,"no atom list")
      .atom.get_geometry(g)
   end

   get_crystal_geometry(g)
   ! Return the crystal (fractional coordinate) geometry "g" in a matrix
       g :: REALMAT
       n :: INT
      .get_geometry(g)
      if (size(g,1)==3) then
         do n = 1,.n_atom
            .crystal.unitcell.inverse_matrix.rotate(g(:,n))
         end
      else if (size(g,2)==3) then
         do n = 1,.n_atom
            .crystal.unitcell.inverse_matrix.rotate(g(n,:))
         end
      end
   end

   get_atom_pair_indices(index,a,b)
   ! Return the atom indicies "a" and "b" which map to an atom-pair "index"
     index :: INT, IN
     a,b :: INT, OUT
     a  = (1+int(sqrt(8.0d0*index-7.0d0)))/2
     b  = index - a*(a-1)/2
   end

   get_atom_pair_indices(index,a,b,fa,la,fb,lb)
   ! Return the atom indicies "a" and "b" which map to an atom-pair "index".
   ! Also get the first and last basis functions for the atoms.
     index :: INT, IN
     a,b,fa,la,fb,lb :: INT, OUT
     a  = (1+int(sqrt(8.0d0*index-7.0d0)))/2
     b  = index - a*(a-1)/2
     fa = .first_basis_fn_for_atom(a)
     la =  .last_basis_fn_for_atom(a)
     fb = .first_basis_fn_for_atom(b)
     lb =  .last_basis_fn_for_atom(b)
   end

!  ********************************
!  ATOMVEC shell extraction methods
!  ********************************

   get_shell(shell,index) ::: leaky, private
   ! Get basis set "shell" corresponding to "index"
      index :: INT, IN
      shell :: SHELL, OUT
      aa,sa :: INT
      aa = .atom_for_shell(index)
      sa = .atom_shell_for_shell(index)
      shell.copy(.atom(aa).basis.shell(sa) )
   end

   get_shell(shell,index) ::: leaky, private
   ! Update the shell1 "shell".
      index :: INT, IN
      shell :: SHELL1, OUT
      aa,sa :: INT
      aa = .atom_for_shell(index)
      sa = .atom_shell_for_shell(index)
      shell.copy(shell=.atom(aa).basis.shell(sa),pos=.atom(aa).pos)
   end

   get_shell(shell,index,fa,la) ::: leaky, private
   ! Update the shell1 "shell".
      index :: INT, IN
      shell :: SHELL1, OUT
      fa,la :: INT, OUT
      aa,sa :: INT
      aa = .atom_for_shell(index)
      sa = .atom_shell_for_shell(index)
      fa = .first_basis_fn_for_shell(index)
      la = .last_basis_fn_for_shell(index)
      shell.copy(shell=.atom(aa).basis.shell(sa),pos=.atom(aa).pos)
   end

!  ******************
!  Shell pair indices
!  ******************

   get_shell_pair_indices(index,a,b)
   ! Return the actual shell indicies "a" and "b" which map to "index"
     index :: INT, IN
     a,b :: INT, OUT
     a  = (1+int(sqrt(8.0d0*index-7.0d0)))/2
     b  = index - a*(a-1)/2
   end

   get_shell_pair_indices(index,a,b,fa,la,fb,lb)
   ! Return the shell indicies "a" and "b" which map to "index"
   ! Also return the basis function start indices "fa", "la", etc ...
      index :: INT, IN
      a,b,fa,la,fb,lb :: INT, OUT
      a  = (1+int(sqrt(8.0d0*index-7.0d0)))/2
      b  = index - a*(a-1)/2
      fa = .first_basis_fn_for_shell(a)
      fb = .first_basis_fn_for_shell(b)
      la = .last_basis_fn_for_shell(a)
      lb = .last_basis_fn_for_shell(b)
   end

   get_shell_pair_indices(index,a,b,fa,la,fb,lb,atom_a,atom_b)
   ! Return the shell indicies "a" and "b" which map to "index"
   ! Also return the basis function start indices "fa", "la", etc ...
   ! Also return the atom indices "atom_a" and "atom_b" for each shell.
      index :: INT, IN
      a,b,fa,la,fb,lb,atom_a,atom_b :: INT, OUT
      a  = (1+int(sqrt(8.0d0*index-7.0d0)))/2
      b  = index - a*(a-1)/2
      fa = .first_basis_fn_for_shell(a)
      fb = .first_basis_fn_for_shell(b)
      la = .last_basis_fn_for_shell(a)
      lb = .last_basis_fn_for_shell(b)
      atom_a = .atom_for_shell(a)
      atom_b = .atom_for_shell(b)
   end

!  ***********
!  Shell pairs
!  ***********

   get_shell_pair(shell,index,fa,la,fb,lb) ::: leaky
   ! Get the SHELL2 object "shell" correponding to the pair index "index"
   ! Also return the basis function start indices "fa", "la", etc ...
      index :: INT, IN
      shell :: SHELL2, OUT
      fa,la,fb,lb :: INT, OUT
      a,b,aa,sa,bb,sb :: INT
      a  = (1+int(sqrt(8.0d0*index-7.0d0)))/2
      b  = index - a*(a-1)/2
      fa = .first_basis_fn_for_shell(a)
      fb = .first_basis_fn_for_shell(b)
      la = .last_basis_fn_for_shell(a)
      lb = .last_basis_fn_for_shell(b)
      aa = .atom_for_shell(a)
      bb = .atom_for_shell(b)
      sa = .atom_shell_for_shell(a)
      sb = .atom_shell_for_shell(b)
      shell.copy(.atom(aa).basis.shell(sa), .atom(bb).basis.shell(sb), &
                 .atom(aa).pos, .atom(bb).pos )
   end

   get_shell_pair(shell,index,fa,la,fb,lb,atom_a,atom_b) ::: leaky
   ! Get the SHELL2 object "shell" correponding to the pair index "index"
   ! Also return the basis function start indices "fa", "la", etc ...
   ! Plus the atoms the shells are located on, "atom_a" and "atom_b".
     index :: INT, IN
     shell :: SHELL2, OUT
     fa,la,fb,lb,atom_a,atom_b :: INT, OUT
     a,b,sa,sb :: INT
     a  = (1+int(sqrt(8.0d0*index-7.0d0)))/2
     b  = index - a*(a-1)/2
     fa = .first_basis_fn_for_shell(a)
     fb = .first_basis_fn_for_shell(b)
     la = .last_basis_fn_for_shell(a)
     lb = .last_basis_fn_for_shell(b)
     atom_a = .atom_for_shell(a)
     atom_b = .atom_for_shell(b)
     sa = .atom_shell_for_shell(a)
     sb = .atom_shell_for_shell(b)
     shell.copy(.atom(atom_a).basis.shell(sa), .atom(atom_b).basis.shell(sb), &
                .atom(atom_a).pos, .atom(atom_b).pos )
   end

   get_precomp_shell_pair(shell,index,fa,la,fb,lb) ::: leaky
   ! Get the SHELL2 object "shell" correponding to the pair index "index"
   ! Also return the basis function start indices "fa", "la", etc ...
      index :: INT, IN
      shell :: SHELL2, OUT
      fa,la,fb,lb :: INT, OUT
      a,b,aa,sa,bb,sb :: INT
      a  = (1+int(sqrt(8.0d0*index-7.0d0)))/2
      b  = index - a*(a-1)/2
      fa = .first_basis_fn_for_shell(a)
      fb = .first_basis_fn_for_shell(b)
      la = .last_basis_fn_for_shell(a)
      lb = .last_basis_fn_for_shell(b)
      aa = .atom_for_shell(a)
      bb = .atom_for_shell(b)
      sa = .basis_shell_for_shell(a)
      sb = .basis_shell_for_shell(b)
      shell.copy(.precomputed_basis_shellpair((sa-1)*.n_unique_shells+sb), &
                 .atom(aa).pos,.atom(bb).pos)
   end

!  *********************
!  Shell quartet indices
!  *********************

   get_shell_quartet_indices(index,a,b,c,d)
   ! Get the indexes a,b,c,d of the quartet from the "index".
   ! Note that "index" will die at 361 shells for integer(4).
     index :: INT, IN
     a,b,c,d :: INT, OUT
     ab,cd :: INT
     ab = (1+sqrt(8.0d0*index-7.0d0))/2
     cd = index - ab*(ab-1)/2
     a  = (1+sqrt(8.0d0*ab-7.0d0))/2
     b  = ab - a*(a-1)/2
     c  = (1+sqrt(8.0d0*cd-7.0d0))/2
     d  = cd - c*(c-1)/2
   end

   get_shell_quartet_indices(index,fa,la,fb,lb,fc,lc,fd,ld) ::: leaky
   ! For the quartet index "index" return the shell indicies "a", "b",
   ! "c" and "d" which map to "index". Also return the basis function
   ! start indices "fa", "la", etc ...
      index :: INT, IN
      fa,la,fb,lb,fc,lc,fd,ld :: INT, OUT
      a,b,c,d :: INT
      ab,cd :: INT
      ab = (1+sqrt(8.0d0*index-7.0d0))/2
      cd = index - ab*(ab-1)/2
      a  = (1+sqrt(8.0d0*ab-7.0d0))/2
      b  = ab - a*(a-1)/2
      c  = (1+sqrt(8.0d0*cd-7.0d0))/2
      d  = cd - c*(c-1)/2
      fa = .first_basis_fn_for_shell(a)
      fb = .first_basis_fn_for_shell(b)
      fc = .first_basis_fn_for_shell(c)
      fd = .first_basis_fn_for_shell(d)
      la = .last_basis_fn_for_shell(a)
      lb = .last_basis_fn_for_shell(b)
      lc = .last_basis_fn_for_shell(c)
      ld = .last_basis_fn_for_shell(d)
   end

   get_shell_quartet_indexes(index,a,b,c,d,atom_a,atom_b,atom_c,atom_d)
   ! For the quartet index "index" return the shell indicies "a", "b", "c" and
   ! "d" which map to "index" and the corresponding atom centers. Note different
   ! spelling for this routine and the one above to avoid overload problems.
      index :: INT, IN
      a,b,c,d,atom_a,atom_b,atom_c,atom_d :: INT, OUT
      ab,cd :: INT
      ab = (1+sqrt(8.0d0*index-7.0d0))/2
      cd = index - ab*(ab-1)/2
      a  = (1+sqrt(8.0d0*ab-7.0d0))/2
      b  = ab - a*(a-1)/2
      c  = (1+sqrt(8.0d0*cd-7.0d0))/2
      d  = cd - c*(c-1)/2
      atom_a = .atom_for_shell(a)
      atom_b = .atom_for_shell(b)
      atom_c = .atom_for_shell(c)
      atom_d = .atom_for_shell(d)
   end

!  **************
!  Shell quartets
!  **************

   get_shell_quartet(shell,a,b,c,d) ::: leaky
   ! Get the SHELL4 object "shell" correponding to the indicies "a", "b", "c"
   ! and "d".
      shell :: SHELL4, OUT
      a,b,c,d :: INT, IN
      aa,sa,bb,sb,cc,sc,dd,sd :: INT
      aa = .atom_for_shell(a)
      sa = .atom_shell_for_shell(a)
      bb = .atom_for_shell(b)
      sb = .atom_shell_for_shell(b)
      cc = .atom_for_shell(c)
      sc = .atom_shell_for_shell(c)
      dd = .atom_for_shell(d)
      sd = .atom_shell_for_shell(d)
      shell.copy(.atom(aa).basis.shell(sa), .atom(bb).basis.shell(sb), &
                 .atom(cc).basis.shell(sc), .atom(dd).basis.shell(sd), &
                 .atom(aa).pos, .atom(bb).pos, .atom(cc).pos, .atom(dd).pos )
   end

   get_shell_quartet(shell,index,a,b,c,d) ::: leaky
   ! Get the SHELL4 object "shell" correponding to the quartet index "index"
   ! Also return the shell indicies "a", "b", "c" and "d" which map to "index"
      index :: INT, IN
      shell :: SHELL4, OUT
      a,b,c,d :: INT, OUT
      ab,cd,aa,sa,bb,sb,cc,sc,dd,sd :: INT
      ab = (1+sqrt(8.0d0*index-7.0d0))/2
      cd = index - ab*(ab-1)/2
      a  = (1+sqrt(8.0d0*ab-7.0d0))/2
      b  = ab - a*(a-1)/2
      c  = (1+sqrt(8.0d0*cd-7.0d0))/2
      d  = cd - c*(c-1)/2
      aa = .atom_for_shell(a)
      sa = .atom_shell_for_shell(a)
      bb = .atom_for_shell(b)
      sb = .atom_shell_for_shell(b)
      cc = .atom_for_shell(c)
      sc = .atom_shell_for_shell(c)
      dd = .atom_for_shell(d)
      sd = .atom_shell_for_shell(d)
      shell.copy(.atom(aa).basis.shell(sa), .atom(bb).basis.shell(sb), &
                  .atom(cc).basis.shell(sc), .atom(dd).basis.shell(sd), &
                  .atom(aa).pos, .atom(bb).pos, .atom(cc).pos, .atom(dd).pos )
   end

   get_shell_quartet(shell,index,a,b,c,d,fa,la,fb,lb,fc,lc,fd,ld) ::: leaky
   ! Get the SHELL4 object "shell" correponding to the quartet index "index"
   ! Also return the shell indicies "a", "b", "c" and "d" which map to "index"
   ! Also return the basis function start indices "fa", "la", etc ...
      index :: INT, IN
      shell :: SHELL4, OUT
      a,b,c,d,fa,la,fb,lb,fc,lc,fd,ld :: INT, OUT
      ab,cd,aa,sa,bb,sb,cc,sc,dd,sd :: INT
      ab = (1+sqrt(8.0d0*index-7.0d0))/2
      cd = index - ab*(ab-1)/2
      a  = (1+sqrt(8.0d0*ab-7.0d0))/2
      b  = ab - a*(a-1)/2
      c  = (1+sqrt(8.0d0*cd-7.0d0))/2
      d  = cd - c*(c-1)/2
      aa = .atom_for_shell(a)
      sa = .atom_shell_for_shell(a)
      bb = .atom_for_shell(b)
      sb = .atom_shell_for_shell(b)
      cc = .atom_for_shell(c)
      sc = .atom_shell_for_shell(c)
      dd = .atom_for_shell(d)
      sd = .atom_shell_for_shell(d)
      shell.copy(.atom(aa).basis.shell(sa), .atom(bb).basis.shell(sb), &
                  .atom(cc).basis.shell(sc), .atom(dd).basis.shell(sd), &
                  .atom(aa).pos, .atom(bb).pos, .atom(cc).pos, .atom(dd).pos )
      fa = .first_basis_fn_for_shell(a)
      fb = .first_basis_fn_for_shell(b)
      fc = .first_basis_fn_for_shell(c)
      fd = .first_basis_fn_for_shell(d)
      la = .last_basis_fn_for_shell(a)
      lb = .last_basis_fn_for_shell(b)
      lc = .last_basis_fn_for_shell(c)
      ld = .last_basis_fn_for_shell(d)
   end

   get_shell_quartet(shell,index,a,b,c,d,atom_a,atom_b,atom_c,atom_d) ::: leaky
   ! Get the SHELL4 object "shell" correponding to the quartet index "index"
   ! Also return the shell indicies "a", "b", "c" and "d" which map to "index"
   ! Plus the atoms which the shells are on.
      index :: INT, IN
      shell :: SHELL4, OUT
      a,b,c,d,atom_a,atom_b,atom_c,atom_d :: INT, OUT
      ab,cd,sa,sb,sc,sd :: INT
      ab = (1+sqrt(8.0d0*index-7.0d0))/2
      cd = index - ab*(ab-1)/2
      a  = (1+sqrt(8.0d0*ab-7.0d0))/2
      b  = ab - a*(a-1)/2
      c  = (1+sqrt(8.0d0*cd-7.0d0))/2
      d  = cd - c*(c-1)/2
      atom_a = .atom_for_shell(a)
      sa = .atom_shell_for_shell(a)
      atom_b = .atom_for_shell(b)
      sb = .atom_shell_for_shell(b)
      atom_c = .atom_for_shell(c)
      sc = .atom_shell_for_shell(c)
      atom_d = .atom_for_shell(d)
      sd = .atom_shell_for_shell(d)
      shell.copy(.atom(atom_a).basis.shell(sa), .atom(atom_b).basis.shell(sb), &
                 .atom(atom_c).basis.shell(sc), .atom(atom_d).basis.shell(sd), &
                 .atom(atom_a).pos, .atom(atom_b).pos, &
                 .atom(atom_c).pos, .atom(atom_d).pos )
   end

   set_shell_quartet_ab(shell,a,b) ::: leaky
   ! Set the a and b parts of the "shell" SHELL4 object.
     shell :: SHELL4, INOUT
     a,b :: INT, IN
     aa,sa,bb,sb :: INT
     aa = .atom_for_shell(a)
     sa = .atom_shell_for_shell(a)
     bb = .atom_for_shell(b)
     sb = .atom_shell_for_shell(b)
     shell.copy_ab(.atom(aa).basis.shell(sa), .atom(bb).basis.shell(sb), &
                 .atom(aa).pos, .atom(bb).pos)
   end

   set_shell_quartet_cd(shell,c,d) ::: leaky
   ! Set the c and d parts of the "shell" SHELL4 object.
     shell :: SHELL4, INOUT
     c,d :: INT, IN
     cc,sc,dd,sd :: INT
     cc = .atom_for_shell(c)
     sc = .atom_shell_for_shell(c)
     dd = .atom_for_shell(d)
     sd = .atom_shell_for_shell(d)
     shell.copy_cd(.atom(cc).basis.shell(sc), .atom(dd).basis.shell(sd), &
                 .atom(cc).pos, .atom(dd).pos)
   end

   set_precomp_shell_quartet_ab(shell,a,b) ::: leaky
   ! Set the a and b parts of the "shell" SHELL4 object.
     shell :: SHELL1QUARTET, INOUT
     a,b :: INT, IN
     aa,sa,bb,sb :: INT
     aa = .atom_for_shell(a)         !which atom.
     sa = .basis_shell_for_shell(a)  !which shell.
     bb = .atom_for_shell(b)
     sb = .basis_shell_for_shell(b)
     shell.set_ab(.precomputed_basis_shellpair((sa-1)*.n_unique_shells+sb), &
                 .atom(aa).pos,.atom(bb).pos)
   end

   set_precomp_shell_quartet_cd(shell,c,d) ::: leaky
   ! Set the c and d parts of the "shell" SHELL4 object.
     shell :: SHELL1QUARTET, INOUT
     c,d :: INT, IN
     cc,sc,dd,sd :: INT
     cc = .atom_for_shell(c)         !which atom.
     sc = .basis_shell_for_shell(c)  !which shell.
     dd = .atom_for_shell(d)
     sd = .basis_shell_for_shell(d)
     shell.set_cd(.precomputed_basis_shellpair((sc-1)*.n_unique_shells+sd), &
                 .atom(cc).pos,.atom(dd).pos)
   end

!  ************************
!  Contraction Coefficients
!  ************************

   make_contraction_matrix(cc_mat)
   ! Returns the matrix of complete contraction coefficients for each basis set
   ! Size of cc_mat is [.n_prim,.n_bf].
      cc_mat :: REALMAT, OUT
      a, bf_count, prim_count,a_prim,a_bf :: INT
   ENSURE(cc_mat.dim1==.n_prim,"wrong shape, cc_mat")
   ENSURE(cc_mat.dim2==.n_bf,  "wrong shape, cc_mat")
      bf_count = 1
      prim_count = 1
      cc_mat = ZERO
      do a = 1, .n_atom
         a_prim = .atom(a).basis.n_prim
         a_bf = .atom(a).basis.n_bf
         cc_mat(prim_count : prim_count + a_prim - 1, bf_count : bf_count + a_bf - 1) &
                  = .atom(a).basis.contraction_matrix
         prim_count = prim_count + a_prim
         bf_count = bf_count + a_bf
      end
   end

!  **********************
!  Make shell information
!  **********************

   make_shell_info ::: leaky
   ! Define a vector of atom numbers corresponding to the molecule
   ! basis set shell numbers; also define a vector of atom shell numbers
   ! corresponding to the molecule basis set shell number
     ENSURE(.atom.created,"no atom information")
     ENSURE(.n_atom>0,"no atoms")
     ENSURE(.basis.created,"no basis set")
     .atom_for_shell.destroy
     .atom_for_shell       => .atom.atom_for_shell
     .atom_shell_for_shell.destroy
     .atom_shell_for_shell => .atom.atom_shell_for_shell
     .first_shell_for_atom.create(.n_atom)
     .last_shell_for_atom.create(.n_atom)
     .atom.make_shell_for_atom_limits(.first_shell_for_atom,.last_shell_for_atom)
     .first_basis_fn_for_shell.destroy
     .last_basis_fn_for_shell.destroy
     .atom.get_shell_limits(.first_basis_fn_for_shell, .last_basis_fn_for_shell)
     .first_basis_fn_for_atom.destroy
     .last_basis_fn_for_atom.destroy
     .atom.make_atom_basis_fn_limits(.first_basis_fn_for_atom,.last_basis_fn_for_atom)
     .make_basis_shell_for_shell
     .make_shellpair_vector
   end

   make_shellpair_vector ::: leaky, private
   ! Make a SHELLPAIR vector "shellpair" which includes precomputed data for the
   ! basis set.
   ! NOTE for later: n_unique_shells should be a basisvec routine.
   ! NOTE for later: precomputed_basis_shellpair should be a REALMAT type
     i,j,k,a,b :: INT
     ENSURE(.basis.created,"no basis set")
     i=0
     do k=1,size(.basis) ! Loop over bases
       i=i+.basis(k).n_shell
     end
     .n_unique_shells = i
     .precomputed_basis_shellpair.destroy
     .precomputed_basis_shellpair.create(i*i)
     i=0
     do j=1,size(.basis) ! Loop over bases
       do a = 1, .basis(j).n_shell
         do k=1,size(.basis) ! Loop over bases
           do b = 1, .basis(k).n_shell
             i=i+1
             .precomputed_basis_shellpair(i).copy_a(.basis(j).shell(a))
             .precomputed_basis_shellpair(i).copy_b(.basis(k).shell(b))
             .precomputed_basis_shellpair(i).make_precalculated_data
           end
         end
       end
     end
   end

   first_basis_shell_for_atom(atom) result(res)
   ! Return the index of the first shell in .basis (treating .basis as a
   ! flattened list of shells) which has the same basis label as "atom".
   ! NOTE for later: this should be a basisvec routine.
     atom :: INT, IN
     res :: INT
     i,j :: INT
     i=1
     do j=1,size(.basis) ! Loop over bases
       if (.basis(j).label==.atom(atom).basis.label) then
         res=i
         exit
       else
         i = i + .basis(j).n_shell
       end
     end
   end

   make_basis_shell_for_shell ::: leaky
   ! Return the index of the first shell in .basis (treating .basis as a
   ! flattened list of shells) for a given shell index in the molecular basis set
   ! (i.e. the flattened list of shells in the .atom list).
   ! NOTE for later: this should be a basisvec routine.
     sh,at,atom_shell,ind :: INT
     ENSURE(.basis.created,"no basis set")
     .basis_shell_for_shell.destroy
     .basis_shell_for_shell.create(.n_shell)
     do sh=1,.n_shell
       at = .atom_for_shell(sh)                 ! which atom
       atom_shell = .atom_shell_for_shell(sh)   ! which shell for this atom
       ind = .first_basis_shell_for_atom(at)    ! first shell for this atom in
                                                ! the basis set
       .basis_shell_for_shell(sh) = ind + atom_shell - 1
     end
   end

!  **********************
!  Density matrix methods
!  **********************

   make_scf_density_matrix(damp,scf_kind) ::: leaky
   ! Make the density matrix from the molecular orbitals. If "damp" is present
   ! use it to damp the updated density matrix.
   ! NOTE: the final computed density matrix is written to an archive
   ! NOTE: if any old density matrix exists, it is saved in an old archive.
     damp :: BIN, optional
     scf_kind :: STR(*), optional
     damping :: BIN
     D_old :: OPMATRIX*
     MO,D,MOa,MOb,Da,Db :: REALMAT*
     CMO,CD,CMOa,CMOb,CDa,CDb :: CPXMAT*
     orb_kind :: STR
     ENSURE(.basis_info_made, "no basis info")
     ENSURE(.molecular_orbitals.created, "no molecular orbitals")
     ! Determine if damping is to be used
     if (.scfdata.destroyed) then;                 damping = FALSE
     else if (.density_matrix.all_destroyed) then; damping = FALSE
     else
       damping = .scfdata.apply_damping
       if (present(damp)) damping = damp
     end
     if (damping) D_old.create_copy(.density_matrix)
     ! Determine the orb_kind of density matrix to be made
     if (.scfdata.destroyed) then; orb_kind = .molecular_orbitals.spinorbital_kind
     else;                         orb_kind = .scfdata.spinorbital_kind
     end
     ! Create space for the right kind of density matrix, or save old density matrix
     if (.density_matrix.destroyed(orb_kind)) then; .density_matrix.create(orb_kind)
     else;        .old_density_matrix.destroy
                  .old_density_matrix.create_copy(.density_matrix)
     end
     ! Now determine the kind of SCF (if any) associated with the density matrix
     if (present(scf_kind)) then;        orb_kind = scf_kind
     else if (.scfdata.destroyed) then;  orb_kind = .molecular_orbitals.guess_scf_kind
     else;                               orb_kind = .scfdata.kind
     end
     select case (orb_kind)
       case ("rhf","rdft","restricted_hartree_fock","xray_rdft", &
             "xray_rhf","noninteracting-group-rhf")
         ENSURE(.molecular_orbitals.created("restricted"),"no MO's")
         ENSURE(.mult==1,"this is not a singlet state")
         MO => .molecular_orbitals.restricted(:,1:.n_a)
         D  => .density_matrix.restricted
         D.to_scaled_product_of(TWO,MO,MO,transpose_b=TRUE)
       case ("rohf","restricted_open_shell_hartree_fock")
         ENSURE(.molecular_orbitals.created("restricted"),"no MO's")
         MOa => .molecular_orbitals.restricted(:,1:.n_a)
         MOb => .molecular_orbitals.restricted(:,1:.n_b)
         Da => .density_matrix.alpha
         Db => .density_matrix.beta
         Da.to_product_of(MOa,MOa,transpose_b=TRUE)
         Db.to_product_of(MOb,MOb,transpose_b=TRUE)
       case ("uhf","udft","unrestricted_hartree_fock")
         ENSURE(.molecular_orbitals.created("unrestricted"),"no MO's")
         MOa => .molecular_orbitals.alpha(:,1:.n_a)
         MOb => .molecular_orbitals.beta(:,1:.n_b)
         Da => .density_matrix.alpha
         Db => .density_matrix.beta
         Da.to_product_of(MOa,MOa,transpose_b=TRUE)
         Db.to_product_of(MOb,MOb,transpose_b=TRUE)
       case ("ghf","general_hartree_fock")
         ENSURE(.molecular_orbitals.created("general"),"no MO's")
         ENSURE(.mult==1,"this is not a singlet state")
         MO => .molecular_orbitals.general(:,1:.n_e)
         D =>  .density_matrix.general
         D.to_product_of(MO,MO,transpose_b=TRUE)
       case ("rchf","restricted_complex_hartree_fock")
         ENSURE(.molecular_orbitals.created("restricted_complex"),"no MO's")
         CMO => .molecular_orbitals.restricted_complex(:,1:.n_a)
         CD  => .density_matrix.restricted_complex
         CD.to_product_of(CMO,CMO,dagger_b=TRUE)
         CD = TWO*CD
       case ("uchf","unrestricted_complex_hartree_fock")
         ENSURE(.molecular_orbitals.created("unrestricted_complex"),"no MO's")
         CMOa => .molecular_orbitals.alpha_complex(:,1:.n_a)
         CMOb => .molecular_orbitals.beta_complex(:,1:.n_b)
         CDa => .density_matrix.alpha_complex
         CDb => .density_matrix.beta_complex
         CDa.to_product_of(CMOa,CMOa,dagger_b=TRUE)
         CDb.to_product_of(CMOb,CMOb,dagger_b=TRUE)
       case ("gchf","general_complex_hartree_fock")
         ENSURE(.molecular_orbitals.created("general_complex"),"no MO's")
         CMO => .molecular_orbitals.general_complex(:,1:.n_e)
         CD =>  .density_matrix.general_complex
         CD.to_product_of(CMO,CMO,dagger_b=TRUE)
       case default
         DIE("unknown SCF kind, "//trim(orb_kind))
     end
     if (damping) then
       .density_matrix.damp(D_old,.scfdata.damp_factor)
       D_old.destroy
     end
     .archive_density_matrix
   end

   make_ao_density_matrix ::: leaky
   ! Make the AO (spin independent) density matrix from the existing density
   ! matrix. The result is placed in the "restricted" part of the density
   ! matrix. NOTE: The density matrix is archived.
      orb_kind :: STR
      ENSURE(.basis_info_made, "no basis info")
      ENSURE(.density_matrix.created, "no density matrix")
      ENSURE(.density_matrix.any_created, "no density matrix")
      orb_kind = .density_matrix.spinorbital_kind
      select case (orb_kind)
         case ("restricted")
            ! do nothing
         case ("unrestricted")
            .density_matrix.destroy("restricted")
            .density_matrix.create("restricted")
            .density_matrix.restricted = .density_matrix.alpha + .density_matrix.beta
         case ("general")
            .density_matrix.destroy("restricted")
            .density_matrix.create("restricted")
            .density_matrix.restricted = .density_matrix.general.alpha_alpha &
                                       + .density_matrix.general.beta_beta
         case ("restricted_complex")
            ! do nothing
         case ("unrestricted_complex")
            .density_matrix.destroy("restricted_complex")
            .density_matrix.create("restricted_complex")
            .density_matrix.restricted_complex = .density_matrix.alpha_complex &
                                               + .density_matrix.beta_complex
         case ("general_complex")
            .density_matrix.destroy("restricted_complex")
            .density_matrix.create("restricted_complex")
            .density_matrix.restricted_complex = .density_matrix.general_complex.alpha_alpha &
                                               + .density_matrix.general_complex.beta_beta
         case default;    DIE("unknown kind, "//trim(orb_kind))
      end
      .archive_density_matrix ! archive the restricted (complex?) part only
   end

   make_ao_sz_density_matrix ::: leaky
   ! Make the AO (spin independent) density matrix from the existing density
   ! matrix. The result is placed in the "restricted" part of the density matrix
      orb_kind :: STR
      ENSURE(.basis_info_made, "no basis info")
      ENSURE(.density_matrix.created, "no density matrix")
      orb_kind = .density_matrix.spinorbital_kind
      if (orb_kind=="restricted") return
      if (orb_kind.includes("complex")) then
         .density_matrix.destroy("restricted_complex")
         .density_matrix.create("restricted_complex")
      else
         .density_matrix.destroy("restricted")
         .density_matrix.create("restricted")
      end
      select case (orb_kind)
         case ("unrestricted")
            .density_matrix.restricted = .density_matrix.alpha - .density_matrix.beta
         case ("general")
            .density_matrix.restricted = .density_matrix.general.alpha_alpha &
                                       - .density_matrix.general.beta_beta
         case ("unrestricted_complex")
            .density_matrix.restricted_complex = .density_matrix.alpha_complex &
                                               - .density_matrix.beta_complex
         case ("general_complex")
            .density_matrix.restricted_complex = .density_matrix.general_complex.alpha_alpha &
                                               - .density_matrix.general_complex.beta_beta
         case default;   DIE("unknown kind, "//trim(orb_kind))
      end
   end

   make_scf_density_matrix(n,nb)
   ! Make the density matrix from orbital "n" of the molecular orbitals.
   ! If present, orbital "nb" of the beta molecular orbitals is used.
   ! If either index is not an occupied MO, the density is set to zero.
      n :: INT, IN
      nb :: INT, IN, optional
      MO,D,MOa,MOb,Da,Db :: REALMAT*
      CMO,CD,CMOa,CMOb,CDa,CDb :: CPXMAT*
      orb_kind :: STR
      arch :: ARCHIVE
      m :: INT
      uhf :: BIN
      ENSURE(.basis_info_made, "no basis info")
      ENSURE(.molecular_orbitals.created, "no molecular orbitals")
      uhf = .scfdata.kind.includes("unrestricted")
      WARN_IF(present(nb) AND (NOT uhf), "nb ignored")
      m = n
      if (present(nb)) m = nb
      orb_kind = .scfdata.spinorbital_kind
      .density_matrix.destroy(orb_kind)
      .density_matrix.create(orb_kind)
      arch.set(.name,"density_matrix",orb_kind)
      orb_kind = .scfdata.kind
      select case (orb_kind)
         case ("rhf","rdft","restricted_hartree_fock","xray_rhf","xray_rks", &
               "xray_rdft","noninteracting-group-rhf")
            ENSURE(.mult==1,"this is not a singlet state")
            D  => .density_matrix.restricted
            if (n>0 AND n<=.n_a) then
               MO => .molecular_orbitals.restricted(:,n:n)
               D.to_scaled_product_of(TWO,MO,MO,transpose_b=TRUE)
            else
               D = ZERO
            end
         case ("rohf","restricted_open_shell_hartree_fock")
            Da => .density_matrix.alpha
            Db => .density_matrix.beta
            if (n>0 AND n<=.n_b) then
               MOa => .molecular_orbitals.restricted(:,n:n)
               MOb => .molecular_orbitals.restricted(:,n:n)
               Da.to_product_of(MOa,MOa,transpose_b=TRUE)
               Db.to_product_of(MOb,MOb,transpose_b=TRUE)
            else if (n>nb AND n<=.n_a) then
               MOa => .molecular_orbitals.restricted(:,n:n)
               Da.to_product_of(MOa,MOa,transpose_b=TRUE)
               Db = ZERO
            else
               Da = ZERO
               Db = ZERO
            end
         case ("uhf","udft","unrestricted_hartree_fock")
            Da => .density_matrix.alpha
            Db => .density_matrix.beta
            if (n>0 AND n<=.n_a) then
               MOa => .molecular_orbitals.alpha(:,n:n)
               Da.to_product_of(MOa,MOa,transpose_b=TRUE)
            else
               Da = ZERO
            end
            if (m>0 AND m<=.n_b) then
               MOb => .molecular_orbitals.beta(:,m:m)
               Db.to_product_of(MOb,MOb,transpose_b=TRUE)
            else
               Db = ZERO
            end
         case ("ghf","general_hartree_fock")
            ENSURE(.mult==1,"this is not a singlet state")
            D =>  .density_matrix.general
            if (n>0 AND n<=.n_e) then
               MO => .molecular_orbitals.general(:,n:n)
               D.to_product_of(MO,MO,transpose_b=TRUE)
            else
               D = ZERO
            end
         case ("rchf","restricted_complex_hartree_fock")
            CD  => .density_matrix.restricted_complex
            if (n>0 AND n<=.n_a) then
               CMO => .molecular_orbitals.restricted_complex(:,n:n)
               CD.to_scaled_product_of(TWO,CMO,CMO,dagger_b=TRUE)
            else
               CD = ZERO
            end
         case ("uchf","unrestricted_complex_hartree_fock")
            CDa => .density_matrix.alpha_complex
            CDb => .density_matrix.beta_complex
            if (n>0 AND n<=.n_a) then
               CMOa => .molecular_orbitals.alpha_complex(:,n:n)
               CDa.to_product_of(CMOa,CMOa,dagger_b=TRUE)
            else
               CDa = ZERO
            end
            if (m>0 AND m<=.n_b) then
               CMOb => .molecular_orbitals.beta_complex(:,m:m)
               CDb.to_product_of(CMOb,CMOb,dagger_b=TRUE)
            else
               CDb = ZERO
            end
         case ("gchf","general_complex_hartree_fock")
            CD =>  .density_matrix.general_complex
            if (n>0 AND n<=.n_e) then
               CMO => .molecular_orbitals.general_complex(:,n:n)
               CD.to_product_of(CMO,CMO,dagger_b=TRUE)
            else
               CD = ZERO
            end
         case default;
            DIE("unknown kind, "//trim(orb_kind))
      end
      arch.write(.density_matrix)
   end

   make_group_density_matrix
   ! Make the density matrix which is a sum of density matrices for
   ! each group specified in the molecule in the atom_group array.
   ! This will destroy any existing restricted density matrix archive.
      archive :: ARCHIVE
       P :: OPMATRIX*
      .make_group_density
      P.create(.n_bf)
      archive.set(.name,"group_density_matrix", genre="restricted")
      archive.read(P, genre="restricted")
      archive.set(.name,"density_matrix", genre="restricted")
      archive.write(P, genre="restricted")
   end

   make_promol_density_matrix ::: leaky
   ! Make the promolecule density matrix from symmetrically orthonormalised
   ! group (monomer) molecular orbitals. The promolecule orbitals are also
   ! made and are ordered by group.
   ! This will destroy any existing restricted density matrix and MOs.
   ENSURE(.molecular_orbitals.created,"no MO's")
      .make_group_density(MOs=TRUE)
      .symorthonormalise_occupied_MOs
      .natural_orbitals => .molecular_orbitals
      .make_density_matrix
      nullify(.natural_orbitals)
   end

   symorthonormalise_occupied_MOs
   ! Symmetrically orthonormalise the occupied MO's. The occupied orbitals
   ! are defined by the .occupation_numbers vector. The virtual orbitals are
   ! schmidt orthonormalised to the occupied MOs. Only works for restricted
   ! at the moment.
      occ,vir,all :: INTVEC*
      S,MO :: REALMAT*
      i,no,nv :: INT
   ENSURE(.molecular_orbitals.created,"no MO's")
   ENSURE(.molecular_orbitals.restricted.created,"no rhf MO's")
      no = count(.occupation_numbers.restricted >0.1); occ.create(no)
      nv = count(.occupation_numbers.restricted<=0.1); vir.create(nv)
      ENSURE((no+nv)==.n_bf,"error determining no and nv")
      stdout.flush
      stdout.show("No. of occupied MO's =",no)
      stdout.show("No. of virtual  MO's =",nv)
      S.create(.n_bf,.n_bf); .get_overlap_matrix(S)
      occ = pack([(i,i=1,.n_bf)],.occupation_numbers.restricted> 1.9)
      vir = pack([(i,i=1,.n_bf)],.occupation_numbers.restricted<=1.9)
      ! Symmetric orthonormalise the occupied
      MO.create(.n_bf,no)
!      MO = .molecular_orbitals.restricted(:,occ)
      stdout.flush
      stdout.text("Occupied molecular orbitals before symmetrisation:")
      stdout.put(MO)
      MO.symmetrically_orthonormalise(S)
      stdout.flush
      stdout.text("Occupied molecular orbitals after symmetrisation:")
      stdout.put(MO)
!      .molecular_orbitals.restricted(:,occ) = MO
      MO.destroy
      ! Schmidt orthonormalise the virtuals
      all => occ.join(vir)
      MO.create(.n_bf,.n_bf)
!      MO = .molecular_orbitals.restricted(:,all)
      MO.schmidt_orthonormalise(S)
!      .molecular_orbitals.restricted(:,all) = MO
      stdout.flush
      stdout.text("Occupied & virtual molecular orbitals after Schmidt:")
      stdout.put(MO)
      all.destroy
      ! Clean up
      MO.destroy
      S.destroy
      vir.destroy
      occ.destroy
   end

   make_density_matrix ::: leaky
   ! Make the .density_matrix from the .natural_orbitals and the
   ! .occupation_numbers vector. Only restricted so far.
     NO,D :: REALMAT*
     occ :: REALVEC*
     orb_kind :: STR
     arch :: ARCHIVE
     ENSURE(.occupation_numbers.created, "no occupation numbers")
     ENSURE(.natural_orbitals.created, "no natural orbitals")
     orb_kind = .natural_orbitals.spinorbital_kind
     .density_matrix.destroy(orb_kind)
     .density_matrix.create(orb_kind)
     arch.set(.name,"density_matrix",orb_kind)
     select case (orb_kind)
       case ("restricted")
         ENSURE(.natural_orbitals.created("restricted"),"no NO's")
         occ.create(.n_bf)
         occ = sqrt(.occupation_numbers.restricted)
         NO.create(.n_bf,.n_bf)
         NO.to_product_with_diagonal(.natural_orbitals.restricted,occ)
         D  => .density_matrix.restricted
         D.to_product_of(NO,NO,transpose_b=TRUE)
         NO.destroy
         occ.destroy
       case default
         DIE("unknown SCF kind, "//trim(orb_kind))
     end
     arch.write(.density_matrix)
   end

!****************************
!* Overlap Matrix formation *
!****************************


   get_overlap_matrix(S)
   ! Set "S" to the overlap matrix.
   ! If the archive file exists, read it; otherwise make it.
      S :: REALMAT
      arch :: ARCHIVE
      write_archive,calc_it :: BIN
      arch.set(.name,"overlap_matrix")
      calc_it = .scfdata.direct
      write_archive = NOT .scfdata.direct
      if (NOT calc_it) then
        if (arch.exists) then
          arch.read(S)
          calc_it = FALSE
          write_archive = FALSE
        else
          calc_it = TRUE
        end
      end
      if (calc_it) then
         if (.scfdata.group) then
               .make_group_overlap_matrix(S)
         else
               .make_overlap_matrix(S)
         end
      end
      if (write_archive) arch.write(S)
   end

   make_overlap_matrix(S)
   ! Calculate the overlap matrix "S"
     S :: REALMAT, target
     q,fa,la,fb,lb,start,step :: INT
     sh :: SHELL2
     ENSURE(.atom.created,  "no atom list")
     ENSURE(.basis_info_made, "no basis info")
     start = 1 + tonto_parallel.this_proc
     step = tonto_parallel.n_proc
     if (tonto_parallel.do_parallel) S = ZERO
     do q=start,.n_shell_pairs,step
       .get_shell_pair(sh,q,fa,la,fb,lb)
       sh.make_overlap(S(fa:la,fb:lb))
       sh.destroy_ptr_part
     end
     tonto_parallel.sum_symmetric_matrices(S)
     S.symmetric_reflect
   end

   make_group_overlap_matrix(S)
   ! Calculate the noninteracting group overlap matrix "S"
     S :: REALMAT, target
     q,fa,la,fb,lb, atom_a,atom_b :: INT
     sh :: SHELL2
     ENSURE(.basis_info_made, "no basis info")
     ENSURE(.atom.created,  "no atom list")
     ENSURE(.atom_group.created,"no atom_group info")
     do q=1,.n_shell_pairs
       .get_shell_pair(sh,q,fa,la,fb,lb,atom_a,atom_b)
       if (.in_same_atom_group(atom_a,atom_b)) sh.make_overlap(S(fa:la,fb:lb))
       sh.destroy_ptr_part
     end
     S.symmetric_reflect
   end

!  ***************
!  Inquiry methods
!  ***************

   no_of_electrons result(res)
   ! Work out and return the number of electrons in the molecule.
      res :: INT
      ENSURE(.atom.created,  "no atom list")
      res = .atom.n_e - .charge
   end

   no_of_alpha_electrons result(res)
   ! Work out and return the number of alpha electrons in the molecule.
      res :: INT
      res = .no_of_electrons - .no_of_beta_electrons
   end

   no_of_beta_electrons result(res)
   ! Work out and return the number of beta electrons in the molecule
      res :: INT
      tmp :: INT
      tmp = .no_of_electrons - .no_of_unpaired_electrons
      res = tmp/2
      ENSURE(tmp.is_even,"Inconsistent multiplicity, non integer # of beta electrons")
   end

   has_valid_no_of_beta_electrons result(res)
   ! Return TRUE if the number of beta electrons is valid based on the assigned
   ! charge and multiplicity i.e. it must come out integral.
      res :: BIN
      tmp :: INT
      tmp = .no_of_electrons - .no_of_unpaired_electrons
      res = tmp.is_even
   end

   no_of_unpaired_electrons result(res)
   ! Work out and return the number of unpaired electrons in the molecule
      res :: INT
      res = .mult - 1
      ENSURE(res<=.no_of_electrons,"Wrong multiplicity, not enough electrons")
   end

   no_of_atom_pairs result(res)
   ! Return the number of shell pairs in the basis set for the molecule
      res :: INT
      ENSURE(.atom.created,  "no atom list")
      res = .n_atom*(.n_atom+1)/2
   end

   no_of_shell_pairs result(res)
   ! Return the number of shell pairs in the basis set for the molecule
      res :: INT
      n_shell :: INT
      ENSURE(.basis_info_made, "no basis info")
      ENSURE(.atom.created,  "no atom list")
      n_shell = .atom.n_shell
      res = n_shell*(n_shell+1)/2
   end

   n_shell_quartets result (res)
   ! Return the number of shell quartets in the basis set for the molecule
   ! Note, "res" will die at 22 shells for integer(2).
   !       "res" will die at 361 shells for integer(4).
   !       "res" will die at 92681 shells for integer(8).
      res :: INT
      n_shell_pair :: INT
      n_shell_pair = .no_of_shell_pairs
      if (n_shell_pair/sqrt(TWO) <= (huge(n_shell_pair))**HALF) then
         res = n_shell_pair*(n_shell_pair+1)/2
      else
         WARN("too many shells")
         res = 0
      end
   end

   no_of_occupied_NOs(orb_kind,tol) result (res)
   ! Returns the number of non-zero occupied natural orbitals. For this purpose,
   ! zero is defined to be "tol" if present, or TOL(7) otherwise
      orb_kind :: STR(*), optional
      tol :: REAL, optional
      res :: INT
      ENSURE(.occupation_numbers.created,"no occupation numbers")
      res = .occupation_numbers.no_of_occupied(orb_kind,tol)
   end

!  ****************
!  Natural orbitals
!  ****************

   make_natural_orbitals ::: leaky
   ! Make the natural orbitals from the density matrix
      orb_kind :: STR
      ENSURE(.basis_info_made, "no basis info")
      ENSURE(.density_matrix.created, "no density matrix")
      ENSURE(.density_matrix.any_created, "no density matrix")
      orb_kind = .density_matrix.spinorbital_kind
      if (.natural_orbitals.created) .natural_orbitals.destroy_ptr_part
      select case (orb_kind)
         case ("restricted        "); .make_restricted_NOs
         case ("unrestricted      "); .make_unrestricted_NOs
!        case ("general           "); .make_general_NOs
         case ("restricted_complex"); .make_restricted_complex_NOs
         case ("general_complex   "); .make_general_complex_NOs
         case default;                UNKNOWN(orb_kind)
      end
      .archive_natural_orbitals
      .archive_occupation_numbers
   end

   make_restricted_NOs ::: leaky
   ! Make the restricted natural orbitals from the density matrix
      ENSURE(.density_matrix.created, "no density matrix")
      ENSURE(.density_matrix.restricted.created, "no density matrix")
      if (.natural_orbitals.created) .natural_orbitals.destroy("restricted")
      .natural_orbitals.create(.n_bf,"restricted")
      if (.occupation_numbers.created) .occupation_numbers.destroy("restricted")
      .occupation_numbers.create(.n_bf,"restricted")
      .make_r_NOs(.natural_orbitals.restricted, &
                  .occupation_numbers.restricted, &
                  .density_matrix.restricted)
   end

   make_unrestricted_NOs ::: leaky
   ! Make the unrestricted natural orbitals from the density matrix
      ENSURE(.density_matrix.created, "no density matrix")
      ENSURE(.density_matrix.alpha.created, "no density matrix")
      ENSURE(.density_matrix.beta.created, "no density matrix")
      if (.natural_orbitals.created) .natural_orbitals.destroy("unrestricted")
      .natural_orbitals.create(.n_bf,"unrestricted")
      if (.occupation_numbers.created) .occupation_numbers.destroy("unrestricted")
      .occupation_numbers.create(.n_bf,"unrestricted")
      .make_r_NOs(.natural_orbitals.alpha, &
                  .occupation_numbers.alpha, &
                  .density_matrix.alpha)
      .make_r_NOs(.natural_orbitals.beta, &
                  .occupation_numbers.beta, &
                  .density_matrix.beta)
   end

   make_r_NOs(NO,occupation,P)
   ! Make the real natural orbitals "NO" and "occupation" numbers from the
   ! density matrix "P"
      NO,P :: REALMAT
      occupation :: REALVEC
      V,X,S :: REALMAT*
      V.create(.n_bf,.n_bf)
      S.create(.n_bf,.n_bf); .get_overlap_matrix(S)
      V.to_sqrt(S)
      S.destroy
      X.create(.n_bf,.n_bf)
      X = P
      X.change_basis(V)
      X.solve_eigenproblem(occupation,V)
      S.create(.n_bf, .n_bf); .get_overlap_matrix(S)
      X.to_inverse_sqrt(S)
      S.destroy
      NO.to_product_of(X,V)
      X.destroy
      V.destroy
      occupation = occupation(.n_bf:1:-1)
      occupation.zero_small_values(TOL(10))
      NO = NO(:,.n_bf:1:-1)
   end

   make_restricted_complex_NOs ::: leaky
   ! Make the restricted complex natural orbitals from the density matrix
     V,X :: CPXMAT*
     S,O :: REALMAT*
     ENSURE(.density_matrix.created, "no density matrix")
     ENSURE(.density_matrix.restricted_complex.created, "no density matrix")
     if (.natural_orbitals.created) .natural_orbitals.destroy("restricted_complex")
     if (.occupation_numbers.created) .occupation_numbers.destroy("restricted")
     .natural_orbitals.create(.n_bf,"restricted_complex")
     .occupation_numbers.create(.n_bf,"restricted")
     V.create(.n_bf,.n_bf)
     X.create(.n_bf,.n_bf)
     O.create(.n_bf,.n_bf)
     S.create(.n_bf,.n_bf); .get_overlap_matrix(S)
     O.to_sqrt(S)
     S.destroy
     V = O
     X = .density_matrix.restricted_complex
     X.change_basis(V)
     X.solve_eigenproblem(.occupation_numbers.restricted,V)
     S.create(.n_bf, .n_bf); .get_overlap_matrix(S)
     O.to_inverse_sqrt(S)
     S.destroy
     X = O
     O.destroy
     .natural_orbitals.restricted_complex.to_product_of(X,V)
     X.destroy
     V.destroy
     .occupation_numbers.restricted = .occupation_numbers.restricted(.n_bf:1:-1)
     .occupation_numbers.restricted.zero_small_values(TOL(10))
     .natural_orbitals.restricted_complex = .natural_orbitals.restricted_complex(:,.n_bf:1:-1)
   end

   make_general_complex_NOs ::: leaky
   ! Make the general natural orbitals and occupations from the complex density
   ! matrix.
     S,R :: REALMAT*
     V,X :: CPXMAT*
     ENSURE(.density_matrix.created,"no density matrix")
     ENSURE(.density_matrix.general_complex.created,"no density matrix")
     if (.natural_orbitals.created) .natural_orbitals.destroy("general_complex")
     if (.occupation_numbers.created) .occupation_numbers.create(.n_bf,"general_complex")
     .natural_orbitals.create(.n_bf,"general_complex")
     .occupation_numbers.create(.n_bf,"general")
     V.create(2*.n_bf,2*.n_bf)
     R.create(.n_bf,.n_bf)
     S.create(.n_bf,.n_bf); .get_overlap_matrix(S)
     R.to_sqrt(S)
     S.destroy
     V.alpha_alpha_set_to(R)
     V.beta_beta_set_to(R)
     R.destroy
     X.create(2*.n_bf,2*.n_bf)
     X = .density_matrix.general_complex
     X.change_basis(V)
     X.solve_eigenproblem(.occupation_numbers.general,V)
     R.create(.n_bf,.n_bf)
     S.create(.n_bf,.n_bf); .get_overlap_matrix(S)
     R.to_inverse_sqrt(S)
     S.destroy
     X.alpha_alpha_set_to(R)
     X.beta_beta_set_to(R)
     R.destroy
     .natural_orbitals.general_complex.to_product_of(X,V)
     .occupation_numbers.general = .occupation_numbers.general(2*.n_bf:1:-1)
     .occupation_numbers.general.zero_small_values(TOL(10))
     .natural_orbitals.general = .natural_orbitals.general(:,2*.n_bf:1:-1)
     X.destroy
     V.destroy
   end

!  ***************************
!  Population Analysis Methods
!  ***************************

   make_mulliken_matrix
   ! sets the mulliken population matrix and the outputs it.
      mulliken_matrix, S :: REALMAT*
      diagonals :: REALVEC*
      S.create(.n_bf, .n_bf)
      mulliken_matrix.create(.n_bf, .n_bf)
      diagonals.create(.n_bf)
      .get_overlap_matrix(S)
      mulliken_matrix = matmul(.density_matrix.restricted, S)
      mulliken_matrix.get_diagonal(diagonals)
      .put_mulliken_populations(mulliken_matrix, diagonals)
      S.destroy
      mulliken_matrix.destroy
      diagonals.destroy
   end

   put_mulliken_populations(mulliken_matrix, diagonals)
   ! outputs the mulliken populations to the output file
      mulliken_matrix :: REALMAT
      diagonals :: REALVEC
      sum :: REAL
      o_count, a, b, c :: INT
      stdout.flush
      stdout.text("Mulliken population analysis: ")
      stdout.dash(int_fields=2,real_fields=1)
      stdout.put("Atom", int_width = TRUE)
      stdout.put("Type", int_width = TRUE)
      stdout.put("Population")
      stdout.flush
      stdout.dash(int_fields=2,real_fields=1)
      o_count = 1
      do a = 1, .n_atom
         do b = 1, .atom.n_shell_for_atom(a)
            do c = 1, .atom(a).basis.shell(b).n_comp
               stdout.put(.atom(a).label, int_width = TRUE)
               stdout.put(.atom(a).basis.shell(b).l_chr, int_width = TRUE)
               stdout.put(diagonals(c + o_count - 1))
               stdout.flush
            end
            o_count = o_count + .atom(a).basis.shell(b).n_comp
         end
      end
      stdout.flush
      stdout.text("Trace of the matrix: ")
      stdout.put(mulliken_matrix.trace )
      stdout.flush
      stdout.text("Atomic Populations: ")
      stdout.dash(int_fields=1, real_fields=1)
      stdout.put("Atom", int_width = TRUE)
      stdout.put("Population")
      stdout.flush
      stdout.dash(int_fields=1, real_fields=1)
      o_count = 1
      do a = 1, .n_atom
         stdout.put(.atom(a).label, int_width = TRUE)
         sum = 0
         do b = 1, .atom.n_shell_for_atom(a)
            sum = sum + diagonals(b - 1 + o_count)
         end
         stdout.put(sum)
         stdout.flush
         o_count = o_count + .atom(a).n_bf
      end
   end

   get_kinetic_matrix(T)
   ! Set "T" to the kinetic matrix
   ! If the archive file exists, read it; otherwise make it.
      T :: REALMAT
      arch :: ARCHIVE
      write_archive,calc_it :: BIN
      arch.set(.name,"kinetic_matrix")
      calc_it = .scfdata.direct
      write_archive = NOT .scfdata.direct
      if (NOT calc_it) then
        if (arch.exists) then
          arch.read(T)
          calc_it = FALSE
          write_archive = FALSE
        else
          calc_it = TRUE
        end
      end
      if (calc_it) then
         if      (.scfdata.nddo) then;  .make_nddo_kinetic_matrix(T)
         else if (.scfdata.nudo) then;  .make_nudo_kinetic_matrix(T)
         else if (.scfdata.group) then; .make_group_kinetic_matrix(T)
         else;                          .make_kinetic_matrix(T)
         end
      end
      if (write_archive) arch.write(T)
   end

   make_kinetic_matrix(T)
   ! Calculate the kinetic energy matrix "T".
     T :: REALMAT
     q,fa,la,fb,lb,start,step :: INT
     sh :: SHELL2
     ENSURE(.basis_info_made, "no basis info")
     ENSURE(.atom.created,  "no atom list")
     start = 1 + tonto_parallel.this_proc
     step = tonto_parallel.n_proc
     if (tonto_parallel.do_parallel) T = ZERO
     do q=start,.n_shell_pairs,step
       .get_shell_pair(sh,q,fa,la,fb,lb)
       sh.get_kei(T(fa:la,fb:lb))
       sh.destroy_ptr_part
     end
     tonto_parallel.sum_symmetric_matrices(T)
     T.symmetric_reflect
   end

   make_nddo_kinetic_matrix(T)
   ! Calculate the NDDO kinetic energy matrix "T".
     T :: REALMAT
     q,fa,la,fb,lb,atom_a,atom_b :: INT
     sh :: SHELL2
     ENSURE(.basis_info_made, "no basis info")
     ENSURE(.atom.created,  "no atom list")
     do q=1,.n_shell_pairs
       .get_shell_pair(sh,q,fa,la,fb,lb,atom_a,atom_b)
       if (atom_a==atom_b) then; sh.get_kei(T(fa:la,fb:lb))
       else;                     T(fa:la,fb:lb) = ZERO
       end
       sh.destroy_ptr_part
     end
     T.symmetric_reflect
   end

   make_nudo_kinetic_matrix(T)
   ! Calculate the NUDO kinetic energy matrix "T". NUDO = neglect of unconnected
   ! differential overlap.
     T :: REALMAT
     q,fa,la,fb,lb,atom_a,atom_b :: INT
     sh :: SHELL2
     ENSURE(.basis_info_made, "no basis info")
     ENSURE(.atom.created,  "no atom list")
     do q=1,.n_shell_pairs
       .get_shell_pair(sh,q,fa,la,fb,lb,atom_a,atom_b)
       if (.atom.bonded(atom_a,atom_b)) then; sh.get_kei(T(fa:la,fb:lb))
       else;                                  T(fa:la,fb:lb) = ZERO
       end
       sh.destroy_ptr_part
     end
     T.symmetric_reflect
   end

   make_group_kinetic_matrix(T)
   ! Calculate the noninteracting group  kinetic energy matrix "T".
     T :: REALMAT
     q,fa,la,fb,lb,atom_a,atom_b :: INT
     sh :: SHELL2
     ENSURE(.basis_info_made, "no basis info")
     ENSURE(.atom.created,  "no atom list")
     ENSURE(.atom_group.created,"no atom_group info")
     do q=1,.n_shell_pairs
       .get_shell_pair(sh,q,fa,la,fb,lb,atom_a,atom_b)
       if (.in_same_atom_group(atom_a,atom_b)) then; sh.get_kei(T(fa:la,fb:lb))
       else;                                         T(fa:la,fb:lb) = ZERO
       end
       sh.destroy_ptr_part
     end
     T.symmetric_reflect
   end

   get_kinetic_overlap(T,S)
   ! Set "S" to the overlap matrix and "T" to the kinetic matrix
   ! If both archives exists, read them; otherwise make them both!
      T,S :: REALMAT
      write_archive,calc_it :: BIN
      T_archive,S_archive :: ARCHIVE
      S_archive.set(.name,"overlap_matrix")
      T_archive.set(.name,"kinetic_matrix")
      calc_it = .scfdata.direct
      write_archive = NOT .scfdata.direct
      if (NOT calc_it) then
        if ((S_archive.exists) AND (T_archive.exists)) then
          S_archive.read(S)
          T_archive.read(T)
          calc_it = FALSE
          write_archive = FALSE
        else
          calc_it = TRUE
        end
      end
      if (calc_it) then
         if      (.scfdata.nddo) then;  .make_nddo_kinetic_overlap(T,S)
         else if (.scfdata.nudo) then;  .make_nudo_kinetic_overlap(T,S)
         else if (.scfdata.group) then; .make_group_kinetic_overlap(T,S)
         else;                          .make_kinetic_overlap(T,S)
         end
      end
      if (write_archive) then
        S_archive.write(S)
        T_archive.write(T)
      end
   end

   make_kinetic_overlap(T,S)
   ! Calculate the kinetic energy matrix "T" and overlap integral matrix "S"
     T,S :: REALMAT
     q,fa,la,fb,lb :: INT
     sh :: SHELL2
     ENSURE(.basis_info_made, "no basis info")
     ENSURE(.atom.created,  "no atom list")
     do q=1,.n_shell_pairs
       .get_shell_pair(sh,q,fa,la,fb,lb)
       sh.get_kei(T(fa:la,fb:lb), S(fa:la,fb:lb))
       sh.destroy_ptr_part
     end
     S.symmetric_reflect
     T.symmetric_reflect
   end

   make_nddo_kinetic_overlap(T,S)
   ! Calculate the NDDO kinetic energy matrix "T" and overlap integral matrix
   ! "S"
     T,S :: REALMAT
     q,fa,la,fb,lb,atom_a,atom_b :: INT
     sh :: SHELL2
     ENSURE(.basis_info_made, "no basis info")
     ENSURE(.atom.created,  "no atom list")
     do q=1,.n_shell_pairs
       .get_shell_pair(sh,q,fa,la,fb,lb,atom_a,atom_b)
       if (atom_a==atom_b) then; sh.get_kei(T(fa:la,fb:lb),S(fa:la,fb:lb))
       else;                     T(fa:la,fb:lb) = ZERO; S(fa:la,fb:lb) = ZERO
       end
       sh.destroy_ptr_part
     end
     S.symmetric_reflect
     T.symmetric_reflect
   end

   make_nudo_kinetic_overlap(T,S)
   ! Calculate the NUDO kinetic energy matrix "T" and overlap integral matrix
   ! "S"
     T,S :: REALMAT
     q,fa,la,fb,lb,atom_a,atom_b :: INT
     sh :: SHELL2
     ENSURE(.basis_info_made, "no basis info")
     ENSURE(.atom.created,  "no atom list")
     do q=1,.n_shell_pairs
       .get_shell_pair(sh,q,fa,la,fb,lb,atom_a,atom_b)
       if (.atom.bonded(atom_a,atom_b)) then; sh.get_kei(T(fa:la,fb:lb),S(fa:la,fb:lb))
       else;                                  T(fa:la,fb:lb) = ZERO; S(fa:la,fb:lb) = ZERO
       end
       sh.destroy_ptr_part
     end
     S.symmetric_reflect
     T.symmetric_reflect
   end

   make_group_kinetic_overlap(T,S)
   ! Calculate the noninteracting group kinetic energy matrix "T" and overlap
   ! integral matrix "S"
     T,S :: REALMAT
     q,fa,la,fb,lb,atom_a,atom_b :: INT
     sh :: SHELL2
     arch :: ARCHIVE
     ENSURE(.basis_info_made, "no basis info")
     ENSURE(.atom.created,  "no atom list")
     ENSURE(.atom_group.created,"no atom_group info")
     do q=1,.n_shell_pairs
       .get_shell_pair(sh,q,fa,la,fb,lb,atom_a,atom_b)
       if (.in_same_atom_group(atom_a,atom_b)) then; sh.get_kei(T(fa:la,fb:lb),S(fa:la,fb:lb))
       else;                                         T(fa:la,fb:lb) = ZERO; S(fa:la,fb:lb) = ZERO
       end
       sh.destroy_ptr_part
     end
     S.symmetric_reflect
     T.symmetric_reflect
     arch.set(.name,"kinetic_matrix")
     arch.write(T)
     arch.set(.name,"overlap_matrix")
     arch.write(S)
   end

   get_nuclear_matrix(Z)
   ! Set "Z" to the nuclear attraction matrix.
   ! If the archive file exists, read it; otherwise make it.
      Z :: REALMAT
      arch :: ARCHIVE
      write_archive,calc_it :: BIN
      arch.set(.name,"nuclear_matrix")
      calc_it = .scfdata.direct
      write_archive = NOT .scfdata.direct
      if (NOT calc_it) then
        if (arch.exists) then
          arch.read(Z)
          calc_it = FALSE
          write_archive = FALSE
        else
          calc_it = TRUE
        end
      end
      if (calc_it) then
         if      (.scfdata.nddo)  then; .make_nddo_nuclear_matrix(Z)
         else if (.scfdata.nudo)  then; .make_nudo_nuclear_matrix(Z)
         else if (.scfdata.group) then; .make_group_nuclear_matrix(Z)
         else if (.scfdata.pie)   then; .make_pie_nuclear_matrix(Z)
         else;                          .make_nuclear_matrix(Z)
         end
      end
      if (write_archive) arch.write(Z)
   end

   make_nuclear_matrix(Z)
   ! Calculate the nuclear attraction matrix "Z".
     Z :: REALMAT
     atom1 :: ATOM*
     Z_c :: REALMAT*
     q,c,fa,la,fb,lb,start,step :: INT
     sh :: SHELL2
     ENSURE(.basis_info_made, "no basis info")
     ENSURE(.atom.created,  "no atom list")
     Z = ZERO
     start = 1 + tonto_parallel.this_proc
     step = tonto_parallel.n_proc
     do q=start,.n_shell_pairs,step
       .get_shell_pair(sh,q,fa,la,fb,lb)
       Z_c.create(sh.a.n_comp,sh.b.n_comp)
       do c = 1,.n_atom
         atom1 => .atom(c)
         sh.get_nuc(Z_c, atom1.mass,atom1.pos)
       ! sh.make_nuclear_attraction_ints(Z_c, atom1.pos)
         Z(fa:la,fb:lb) = Z(fa:la,fb:lb) - atom1.atomic_number * Z_c
       end
       Z_c.destroy
       sh.destroy_ptr_part
     end
     tonto_parallel.sum_symmetric_matrices(Z)
     Z.symmetric_reflect
   end

   make_nuclear_matrix(Z,nuclei)
   ! Calculate the nuclear attraction matrix "Z" only for a specified
   ! list of "nuclei".
     Z :: REALMAT
     nuclei :: INTVEC
     atom1 :: ATOM*
     Z_c :: REALMAT*
     q,c,fa,la,fb,lb :: INT
     sh :: SHELL2
     ENSURE(.basis_info_made, "no basis info")
     ENSURE(.atom.created,  "no atom list")
     Z = ZERO
     do q = 1,.n_shell_pairs
       .get_shell_pair(sh,q,fa,la,fb,lb)
       Z_c.create(sh.a.n_comp,sh.b.n_comp)
       do c = 1,size(nuclei)
         atom1 => .atom(nuclei(c))
         sh.get_nuc(Z_c, atom1.mass,atom1.pos)
       ! sh.make_nuclear_attraction_ints(Z_c, atom1.pos)
         Z(fa:la,fb:lb) = Z(fa:la,fb:lb) - atom1.atomic_number * Z_c
       end
       Z_c.destroy
       sh.destroy_ptr_part
     end
     Z.symmetric_reflect
   end

   make_nddo_nuclear_matrix(Z)
   ! Calculate the NDDO nuclear attraction matrix "Z"
     Z :: REALMAT
     atom1 :: ATOM*
     Z_c :: REALMAT*
     q,c,fa,la,fb,lb,atom_a,atom_b :: INT
     sh :: SHELL2
     ENSURE(.basis_info_made, "no basis info")
     ENSURE(.atom.created,  "no atom list")
     Z = ZERO
     do q=1,.n_shell_pairs
       .get_shell_pair(sh,q,fa,la,fb,lb,atom_a,atom_b)
       if (atom_a==atom_b) then
         Z_c.create(sh.a.n_comp,sh.b.n_comp)
         do c=1,.n_atom
           atom1=>.atom(c)
           sh.get_nuc(Z_c, atom1.mass,atom1.pos)
         ! sh.make_nuclear_attraction_ints(Z_c, atom1.pos)
           Z(fa:la,fb:lb) = Z(fa:la,fb:lb) - atom1.atomic_number * Z_c
         end
         Z_c.destroy
       end
       sh.destroy_ptr_part
     end
     Z.symmetric_reflect
   end

   make_nddo_nuclear_matrix(Z,nuclei)
   ! Calculate the NDDO nuclear attraction matrix "Z" only for a
   ! specified list of nuclei.
     Z :: REALMAT
     nuclei :: INTVEC
     atom1 :: ATOM*
     Z_c :: REALMAT*
     q,c,fa,la,fb,lb,atom_a,atom_b :: INT
     sh :: SHELL2
     ENSURE(.basis_info_made, "no basis info")
     ENSURE(.atom.created,  "no atom list")
     Z = ZERO
     do q=1,.n_shell_pairs
       .get_shell_pair(sh,q,fa,la,fb,lb,atom_a,atom_b)
       if (atom_a==atom_b) then
         Z_c.create(sh.a.n_comp,sh.b.n_comp)
         do c=1,size(nuclei)
           atom1=>.atom(nuclei(c))
           sh.get_nuc(Z_c, atom1.mass,atom1.pos)
         ! sh.make_nuclear_attraction_ints(Z_c, atom1.pos)
           Z(fa:la,fb:lb) = Z(fa:la,fb:lb) - atom1.atomic_number * Z_c
         end
         Z_c.destroy
       end
       sh.destroy_ptr_part
     end
     Z.symmetric_reflect
   end

   make_nudo_nuclear_matrix(Z)
   ! Calculate the NUDO nuclear attraction matrix "Z"
     Z :: REALMAT
     atom1 :: ATOM*
     Z_c :: REALMAT*
     q,c,fa,la,fb,lb,atom_a,atom_b :: INT
     sh :: SHELL2
     ENSURE(.basis_info_made, "no basis info")
     ENSURE(.atom.created,  "no atom list")
     Z = ZERO
     do q=1,.n_shell_pairs
       .get_shell_pair(sh,q,fa,la,fb,lb,atom_a,atom_b)
       if (.atom.bonded(atom_a,atom_b)) then
         Z_c.create(sh.a.n_comp,sh.b.n_comp)
         do c=1,.n_atom
           atom1=>.atom(c)
           sh.get_nuc(Z_c, atom1.mass,atom1.pos)
         ! sh.make_nuclear_attraction_ints(Z_c, atom1.pos)
           Z(fa:la,fb:lb) = Z(fa:la,fb:lb) - atom1.atomic_number * Z_c
         end
         Z_c.destroy
       end
       sh.destroy_ptr_part
     end
     Z.symmetric_reflect
   end

   make_nudo_nuclear_matrix(Z,nuclei)
   ! Calculate the NUDO nuclear attraction matrix "Z" only for a specified
   ! list of "nuclei".
     Z :: REALMAT
     nuclei :: INTVEC
     atom1 :: ATOM*
     Z_c :: REALMAT*
     q,c,fa,la,fb,lb,atom_a,atom_b :: INT
     sh :: SHELL2
     ENSURE(.basis_info_made, "no basis info")
     ENSURE(.atom.created,  "no atom list")
     Z = ZERO
     do q = 1,.n_shell_pairs
       .get_shell_pair(sh,q,fa,la,fb,lb,atom_a,atom_b)
       if (.atom.bonded(atom_a,atom_b)) then
         Z_c.create(sh.a.n_comp,sh.b.n_comp)
         do c = 1,size(nuclei)
           atom1 => .atom(nuclei(c))
           sh.get_nuc(Z_c, atom1.mass,atom1.pos)
         ! sh.make_nuclear_attraction_ints(Z_c, atom1.pos)
           Z(fa:la,fb:lb) = Z(fa:la,fb:lb) - atom1.atomic_number * Z_c
         end
         Z_c.destroy
       end
       sh.destroy_ptr_part
     end
     Z.symmetric_reflect
   end

   make_group_nuclear_matrix(Z)
   ! Calculate the noninteracting group nuclear attraction matrix "Z"
     Z :: REALMAT
     atom1 :: ATOM*
     Z_c :: REALMAT*
     q,c,fa,la,fb,lb, atom_a,atom_b, n,g :: INT
     sh :: SHELL2
     ENSURE(.basis_info_made, "no basis info")
     ENSURE(.atom.created,  "no atom list")
     ENSURE(.atom_group.created,"no atom_group info")
     Z = ZERO
     do q=1,.n_shell_pairs
       .get_shell_pair(sh,q,fa,la,fb,lb,atom_a,atom_b)
       if (.in_same_atom_group(atom_a,atom_b,g)) then
         Z_c.create(sh.a.n_comp,sh.b.n_comp)
         do n = 1,size(.atom_group(g).element)
           c = .atom_group(g).element(n)
           atom1=>.atom(c)
           sh.get_nuc(Z_c, atom1.mass,atom1.pos)
         ! sh.make_nuclear_attraction_ints(Z_c, atom1.pos)
           Z(fa:la,fb:lb) = Z(fa:la,fb:lb) - atom1.atomic_number * Z_c
         end
         Z_c.destroy
       end
       sh.destroy_ptr_part
     end
     Z.symmetric_reflect
   end

   make_group_nuclear_matrix(Z,nuclei)
   ! Calculate the noninteracting group nuclear attraction matrix "Z"
   ! only for a specified list of "nuclei".
     Z :: REALMAT
     nuclei :: INTVEC
     atom1 :: ATOM*
     Z_c :: REALMAT*
     q,c,fa,la,fb,lb, atom_a,atom_b, n,g :: INT
     sh :: SHELL2
     ENSURE(.basis_info_made, "no basis info")
     ENSURE(.atom.created,  "no atom list")
     ENSURE(.atom_group.created,"no atom_group info")
     Z = ZERO
     do q=1,.n_shell_pairs
       .get_shell_pair(sh,q,fa,la,fb,lb,atom_a,atom_b)
       if (.in_same_atom_group(atom_a,atom_b,g)) then
         Z_c.create(sh.a.n_comp,sh.b.n_comp)
         do n = 1,size(.atom_group(g).element)
           c = .atom_group(g).element(n)
           if (all(nuclei/=c)) cycle
           atom1=>.atom(c)
           sh.get_nuc(Z_c, atom1.mass,atom1.pos)
         ! sh.make_nuclear_attraction_ints(Z_c, atom1.pos)
           Z(fa:la,fb:lb) = Z(fa:la,fb:lb) - atom1.atomic_number * Z_c
         end
         Z_c.destroy
       end
       sh.destroy_ptr_part
     end
     Z.symmetric_reflect
   end

   make_pie_nuclear_matrix(Z)
   ! Calculate the PIE nuclear attraction matrix "Z". In this scheme the three
   ! center nuclear attraction integrals are approximated by a diatom projective
   ! scheme. See Mayer, CPL 332, 381 (2000).
     Z :: REALMAT
     Z_c,S,S_a_c,S_inv,S_sub :: REALMAT*
     a,c,na,nc,nac,fc,lc :: INT
     ac :: INTVEC(2)
     ENSURE(.basis_info_made, "no basis info")
     ENSURE(.atom.created,  "no atom list")
     S.create(.n_bf,.n_bf)
     .get_overlap_matrix(S)
     Z = ZERO
     do c = 1,.n_atom ! loop over nuclear attraction centres
     do a = 1,.n_atom ! loop over bra
        na  = .atom(a).n_bf
        nc  = .atom(c).n_bf
        nac = na + nc
        Z_c.create(nac,nac)
        ac = [a,c]
        .atom(ac).make_nuclear_matrix(Z_c,nuclei=[2])
        S_inv.create(nac,nac)
        S_a_c.create(nac,nac)
        .AO_subspace_set(S_a_c,S,ac,ac)
        S_inv.to_inverse_of(S_a_c)
        S_a_c.destroy
        S_sub.create(.n_bf,nac)
        .AO_subspace_set(S_sub,S,col_atom=ac)
        S_inv = matmul(S_inv,Z_c)
        fc = .first_basis_fn_for_atom(c)
        lc =  .last_basis_fn_for_atom(c)
        Z(:,fc:lc) = Z(:,fc:lc) + matmul(S_sub,S_inv)
        S_inv.destroy; S_sub.destroy;
        Z_c.destroy
     end
     end
     Z.symmetrize
     S.destroy
   end

   get_core_matrix(H,nuclei)
   ! Get the core hamiltonian matrix. If already in memory, do nothing. Else if
   ! the archive file exists, read it. Otherwise make it.
   ! If the nuclei are given make it regardless, since the stored one is
   ! likely to be different
      H :: REALMAT
      nuclei :: INTVEC, optional
      arch :: ARCHIVE
      write_archive,calc_it :: BIN
      arch.set(.name,"core_matrix")
      calc_it = .scfdata.direct OR present(nuclei)
      write_archive = NOT .scfdata.direct
      if (NOT calc_it) then
        if (arch.exists) then
          arch.read(H)
          calc_it = FALSE
          write_archive = FALSE
        else
          calc_it = TRUE
        end
      end
      if (calc_it) .make_core_matrix(H,nuclei)
      if (write_archive) arch.write(H)
   end

   make_core_matrix(H,nuclei)
   ! Make the core hamiltonian matrix "H".
      H :: REALMAT
      nuclei :: INTVEC, optional
      Z :: REALMAT*
      .make_kinetic_matrix(H)
      Z.create(.n_bf, .n_bf)
      if (present(nuclei)) then
        .make_nuclear_matrix(Z,nuclei)
      else
        .make_nuclear_matrix(Z)
      end
      H = H + Z
      Z.destroy
   end

   get_dipole_matrices(Dx,Dy,Dz)
   ! Set "Di" to the dipole moment integral matrices.
   ! If archives exist, read them; otherwise make them.
      Dx,Dy,Dz :: REALMAT
      x_archive,y_archive,z_archive :: ARCHIVE
      x_archive.set(.name,"dipole_x_matrix")
      y_archive.set(.name,"dipole_y_matrix")
      z_archive.set(.name,"dipole_z_matrix")
      if (x_archive.exists) then
         x_archive.read(Dx); y_archive.read(Dy); z_archive.read(Dz)
      else
         .make_dipole_matrices(Dx,Dy,Dz)
      end
   end

   make_dipole_matrices(Dx,Dy,Dz)
   ! Make "Di", the dipole moment integral matrices.
      Dx,Dy,Dz :: REALMAT
      DDx,DDy,DDz :: REALMAT*
      q,fa,la,fb,lb :: INT
      sh :: SHELL2
      arch :: ARCHIVE
      n_a,n_b :: INT
      ENSURE(.basis_info_made, "no basis info")
      ENSURE(.atom.created,  "no atom list")
      Dx = ZERO; Dy = ZERO; Dz = ZERO
      do q=1,.n_shell_pairs
         .get_shell_pair(sh,q,fa,la,fb,lb)
         n_a = sh.a.n_comp; n_b = sh.b.n_comp
         DDx.create(n_a,n_b); DDy.create(n_a,n_b); DDz.create(n_a,n_b)
         sh.make_dipole_ints(DDx,DDy,DDz, .gauge_origin)
         Dx(fa:la,fb:lb) = Dx(fa:la,fb:lb) + DDx
         Dy(fa:la,fb:lb) = Dy(fa:la,fb:lb) + DDy
         Dz(fa:la,fb:lb) = Dz(fa:la,fb:lb) + DDz
         sh.destroy_ptr_part
         DDz.destroy; DDy.destroy; DDx.destroy
      end
      Dx.symmetric_reflect; Dy.symmetric_reflect; Dz.symmetric_reflect
      arch.set(.name,"dipole_x_matrix"); arch.write(Dx)
      arch.set(.name,"dipole_y_matrix"); arch.write(Dy)
      arch.set(.name,"dipole_z_matrix"); arch.write(Dz)
   end

   electronic_dipole_moment result (res)
   ! Return the electronic dipole moment
      res :: REALVEC(3)
      Dx,Dy,Dz :: REALMAT*
      Dx.create(.n_bf,.n_bf)
      Dy.create(.n_bf,.n_bf)
      Dz.create(.n_bf,.n_bf)
      .get_dipole_matrices(Dx,Dy,Dz)
      res(1) = -.expectation(Dx) ! Minus sign for electron charge
      res(2) = -.expectation(Dy)
      res(3) = -.expectation(Dz)
      Dz.destroy; Dy.destroy; Dx.destroy
   end

   nuclear_dipole_moment result (res)
   ! Return the nuclear dipole moment
      res :: REALVEC(3)
      res = .atom.nuclear_dipole_moment
   end

   get_quadrupole_matrices(Qxx,Qyy,Qzz,Qxy,Qxz,Qyz)
   ! Set "Qij" to the quadrupole moment integral matrices.
   ! If archives exist, read them; otherwise make them.
      Qxx,Qyy,Qzz,Qxy,Qxz,Qyz :: REALMAT
      xx_archive,yy_archive,zz_archive :: ARCHIVE
      xy_archive,xz_archive,yz_archive :: ARCHIVE
      xx_archive.set(.name,"quadrupole_xx_matrix")
      yy_archive.set(.name,"quadrupole_yy_matrix")
      zz_archive.set(.name,"quadrupole_zz_matrix")
      xy_archive.set(.name,"quadrupole_xy_matrix")
      xz_archive.set(.name,"quadrupole_xz_matrix")
      yz_archive.set(.name,"quadrupole_yz_matrix")
      if (xx_archive.exists) then
         xx_archive.read(Qxx); yy_archive.read(Qyy); zz_archive.read(Qzz)
         xy_archive.read(Qxy); xz_archive.read(Qxz); yz_archive.read(Qyz)
      else
         .make_quadrupole_matrices(Qxx,Qyy,Qzz,Qxy,Qxz,Qyz)
      end
   end

   make_quadrupole_matrices(Qxx,Qyy,Qzz,Qxy,Qxz,Qyz)
   ! Make "Qij", the quadrupole moment integral matrices.
      Qxx,Qyy,Qzz,Qxy,Qxz,Qyz :: REALMAT
      QQxx,QQyy,QQzz,QQxy,QQxz,QQyz :: REALMAT*
      q,fa,la,fb,lb :: INT
      sh :: SHELL2
      arch :: ARCHIVE
      n_a,n_b :: INT
      ENSURE(.basis_info_made, "no basis info")
      ENSURE(.atom.created,  "no atom list")
      Qxx = ZERO; Qyy = ZERO; Qzz = ZERO
      Qxy = ZERO; Qxz = ZERO; Qyz = ZERO
      do q=1,.n_shell_pairs
         .get_shell_pair(sh,q,fa,la,fb,lb)
         n_a = sh.a.n_comp; n_b = sh.b.n_comp
         QQxx.create(n_a,n_b); QQyy.create(n_a,n_b); QQzz.create(n_a,n_b)
         QQxy.create(n_a,n_b); QQxz.create(n_a,n_b); QQyz.create(n_a,n_b)
         sh.make_quadrupole_ints(QQxx,QQyy,QQzz,QQxy,QQxz,QQyz, .gauge_origin)
         Qxx(fa:la,fb:lb) = Qxx(fa:la,fb:lb) + QQxx
         Qyy(fa:la,fb:lb) = Qyy(fa:la,fb:lb) + QQyy
         Qzz(fa:la,fb:lb) = Qzz(fa:la,fb:lb) + QQzz
         Qxy(fa:la,fb:lb) = Qxy(fa:la,fb:lb) + QQxy
         Qxz(fa:la,fb:lb) = Qxz(fa:la,fb:lb) + QQxz
         Qyz(fa:la,fb:lb) = Qyz(fa:la,fb:lb) + QQyz
         sh.destroy_ptr_part
         QQyz.destroy; QQxz.destroy; QQxy.destroy
         QQzz.destroy; QQyy.destroy; QQxx.destroy
      end
      Qxx.symmetric_reflect; Qyy.symmetric_reflect; Qzz.symmetric_reflect
      Qxy.symmetric_reflect; Qxz.symmetric_reflect; Qyz.symmetric_reflect
      arch.set(.name,"quadrupole_xx_matrix"); arch.write(Qxx)
      arch.set(.name,"quadrupole_yy_matrix"); arch.write(Qyy)
      arch.set(.name,"quadrupole_zz_matrix"); arch.write(Qzz)
      arch.set(.name,"quadrupole_xy_matrix"); arch.write(Qxy)
      arch.set(.name,"quadrupole_xz_matrix"); arch.write(Qxz)
      arch.set(.name,"quadrupole_yz_matrix"); arch.write(Qyz)
   end

   electronic_quadrupole_moment result (res)
   ! Return the electronic quadrupole moments as a vectors in the
   ! order: xx, yy, zz, xy, xz, yz
      res :: REALVEC(6)
      Qxx,Qyy,Qzz,Qxy,Qxz,Qyz :: REALMAT*
      Qxx.create(.n_bf,.n_bf)
      Qyy.create(.n_bf,.n_bf)
      Qzz.create(.n_bf,.n_bf)
      Qxy.create(.n_bf,.n_bf)
      Qxz.create(.n_bf,.n_bf)
      Qyz.create(.n_bf,.n_bf)
      .get_quadrupole_matrices(Qxx,Qyy,Qzz,Qxy,Qxz,Qyz)
      res(1) = -.expectation(Qxx) ! Minus sign for electron charge
      res(2) = -.expectation(Qyy)
      res(3) = -.expectation(Qzz)
      res(4) = -.expectation(Qxy)
      res(5) = -.expectation(Qxz)
      res(6) = -.expectation(Qyz)
      Qyz.destroy; Qxz.destroy; Qxy.destroy
      Qzz.destroy; Qyy.destroy; Qxx.destroy
   end

   nuclear_quadrupole_moment result (res)
   ! Return the nuclear quadrupole moment
      res :: REALVEC(6)
      res = .atom.nuclear_quadrupole_moment
   end

   get_octupole_matrices(Oxxx,Oyyy,Ozzz,Oxxy,Oxxz,Oyyx,Oyyz,Ozzx,Ozzy,Oxyz)
   ! Set "Oijk" to the quadrupole moment integral matrices.
   ! If archives exist, read them; otherwise make them.
      Oxxx,Oyyy,Ozzz,Oxxy,Oxxz,Oyyx,Oyyz,Ozzx,Ozzy,Oxyz :: REALMAT
      xxx,yyy,zzz,xxy,xxz,yyx,yyz,zzx,zzy,xyz :: ARCHIVE
      xxx.set(.name,"octupole_xxx_matrix")
      yyy.set(.name,"octupole_yyy_matrix")
      zzz.set(.name,"octupole_zzz_matrix")
      xxy.set(.name,"octupole_xxy_matrix")
      xxz.set(.name,"octupole_xxz_matrix")
      yyx.set(.name,"octupole_yyx_matrix")
      yyz.set(.name,"octupole_yyz_matrix")
      zzx.set(.name,"octupole_zzx_matrix")
      zzy.set(.name,"octupole_zzy_matrix")
      xyz.set(.name,"octupole_xyz_matrix")
      if (xxx.exists) then
         xxx.read(Oxxx); yyy.read(Oyyy); zzz.read(Ozzz)
         xxy.read(Oxxy); xxz.read(Oxxz)
         yyx.read(Oyyx); yyz.read(Oyyz)
         zzx.read(Ozzx); zzy.read(Ozzy)
         xyz.read(Oxyz)
      else
         .make_octupole_matrices(Oxxx,Oyyy,Ozzz,Oxxy,Oxxz,Oyyx,Oyyz,Ozzx,Ozzy,Oxyz)
      end
   end

   make_octupole_matrices(Oxxx,Oyyy,Ozzz,Oxxy,Oxxz,Oyyx,Oyyz,Ozzx,Ozzy,Oxyz)
   ! Make "Oijk", the octupole moment integral matrices.
      Oxxx,Oyyy,Ozzz,Oxxy,Oxxz,Oyyx,Oyyz,Ozzx,Ozzy,Oxyz :: REALMAT
      OOxxx,OOyyy,OOzzz,OOxxy,OOxxz,OOyyx,OOyyz,OOzzx,OOzzy,OOxyz :: REALMAT*
      q,fa,la,fb,lb :: INT
      sh :: SHELL2
      arch :: ARCHIVE
      n_a,n_b :: INT
      ENSURE(.basis_info_made, "no basis info")
      ENSURE(.atom.created,  "no atom list")
      Oxxx = ZERO; Oyyy = ZERO; Ozzz = ZERO
      Oxxy = ZERO; Oxxz = ZERO
      Oyyx = ZERO; Oyyz = ZERO
      Ozzx = ZERO; Ozzy = ZERO
      Oxyz = ZERO
      do q = 1,.n_shell_pairs
         .get_shell_pair(sh,q,fa,la,fb,lb)
         n_a = sh.a.n_comp; n_b = sh.b.n_comp
         OOxxx.create(n_a,n_b); OOyyy.create(n_a,n_b); OOzzz.create(n_a,n_b)
         OOxxy.create(n_a,n_b); OOxxz.create(n_a,n_b)
         OOyyx.create(n_a,n_b); OOyyz.create(n_a,n_b)
         OOzzx.create(n_a,n_b); OOzzy.create(n_a,n_b)
         OOxyz.create(n_a,n_b)
         sh.make_octupole_ints(OOxxx,OOyyy,OOzzz,OOxxy,OOxxz,OOyyx,OOyyz,OOzzx,OOzzy,OOxyz,.gauge_origin)
         Oxxx(fa:la,fb:lb) = Oxxx(fa:la,fb:lb) + OOxxx
         Oyyy(fa:la,fb:lb) = Oyyy(fa:la,fb:lb) + OOyyy
         Ozzz(fa:la,fb:lb) = Ozzz(fa:la,fb:lb) + OOzzz
         Oxxy(fa:la,fb:lb) = Oxxy(fa:la,fb:lb) + OOxxy
         Oxxz(fa:la,fb:lb) = Oxxz(fa:la,fb:lb) + OOxxz
         Oyyx(fa:la,fb:lb) = Oyyx(fa:la,fb:lb) + OOyyx
         Oyyz(fa:la,fb:lb) = Oyyz(fa:la,fb:lb) + OOyyz
         Ozzx(fa:la,fb:lb) = Ozzx(fa:la,fb:lb) + OOzzx
         Ozzy(fa:la,fb:lb) = Ozzy(fa:la,fb:lb) + OOzzy
         Oxyz(fa:la,fb:lb) = Oxyz(fa:la,fb:lb) + OOxyz
         sh.destroy_ptr_part
         OOxyz.destroy
         OOzzy.destroy; OOzzx.destroy
         OOyyz.destroy; OOyyx.destroy
         OOxxz.destroy; OOxxy.destroy
         OOzzz.destroy; OOyyy.destroy; OOxxx.destroy
      end
      Oxxx.symmetric_reflect; Oyyy.symmetric_reflect; Ozzz.symmetric_reflect
      Oxxy.symmetric_reflect; Oxxz.symmetric_reflect
      Oyyx.symmetric_reflect; Oyyz.symmetric_reflect
      Ozzx.symmetric_reflect; Ozzy.symmetric_reflect
      Oxyz.symmetric_reflect
      arch.set(.name,"octupole_xxx_matrix"); arch.write(Oxxx)
      arch.set(.name,"octupole_yyy_matrix"); arch.write(Oyyy)
      arch.set(.name,"octupole_zzz_matrix"); arch.write(Ozzz)
      arch.set(.name,"octupole_xxy_matrix"); arch.write(Oxxy)
      arch.set(.name,"octupole_xxz_matrix"); arch.write(Oxxz)
      arch.set(.name,"octupole_yyx_matrix"); arch.write(Oyyx)
      arch.set(.name,"octupole_yyz_matrix"); arch.write(Oyyz)
      arch.set(.name,"octupole_zzx_matrix"); arch.write(Ozzx)
      arch.set(.name,"octupole_zzy_matrix"); arch.write(Ozzy)
      arch.set(.name,"octupole_xyz_matrix"); arch.write(Oxyz)
   end

   electronic_octupole_moment result (res)
   ! Return the electronic octupole moments as a vectors in the
   ! order: xxx, yyy, zzz, xxy, xxz, yyx, yyz, zzx, zzy, xyz
      res :: REALVEC(10)
      Oxxx,Oyyy,Ozzz,Oxxy,Oxxz,Oyyx,Oyyz,Ozzx,Ozzy,Oxyz :: REALMAT*
      Oxxx.create(.n_bf,.n_bf)
      Oyyy.create(.n_bf,.n_bf)
      Ozzz.create(.n_bf,.n_bf)
      Oxxy.create(.n_bf,.n_bf)
      Oxxz.create(.n_bf,.n_bf)
      Oyyx.create(.n_bf,.n_bf)
      Oyyz.create(.n_bf,.n_bf)
      Ozzx.create(.n_bf,.n_bf)
      Ozzy.create(.n_bf,.n_bf)
      Oxyz.create(.n_bf,.n_bf)
      .get_octupole_matrices(Oxxx,Oyyy,Ozzz,Oxxy,Oxxz,Oyyx,Oyyz,Ozzx,Ozzy,Oxyz)
      res(1)  = -.expectation(Oxxx) ! Minus sign for electron charge
      res(2)  = -.expectation(Oyyy)
      res(3)  = -.expectation(Ozzz)
      res(4)  = -.expectation(Oxxy)
      res(5)  = -.expectation(Oxxz)
      res(6)  = -.expectation(Oyyx)
      res(7)  = -.expectation(Oyyz)
      res(8)  = -.expectation(Ozzx)
      res(9)  = -.expectation(Ozzy)
      res(10) = -.expectation(Oxyz)
      Oxyz.destroy
      Ozzy.destroy; Ozzx.destroy
      Oyyz.destroy; Oyyx.destroy
      Oxxz.destroy; Oxxy.destroy
      Ozzz.destroy; Oyyy.destroy; Oxxx.destroy
   end

   nuclear_octupole_moment result (res)
   ! Return the nuclear octupole moment
      res :: REALVEC(10)
      res = .atom.nuclear_octupole_moment
   end

   make_electric_field_matrices(Ex,Ey,Ez,c)
   ! Make "Ei", the electric fields integral matrices evaluated at
   ! position "c".
      Ex,Ey,Ez :: REALMAT
       c :: REALVEC(3)
      EEx,EEy,EEz :: REALMAT*
      q,fa,la,fb,lb :: INT
      sh :: SHELL2
      n_a,n_b :: INT
      ENSURE(.basis_info_made, "no basis info")
      ENSURE(.atom.created,  "no atom list")
      Ex = ZERO; Ey = ZERO; Ez = ZERO
      do q=1,.n_shell_pairs
         .get_shell_pair(sh,q,fa,la,fb,lb)
         n_a = sh.a.n_comp; n_b = sh.b.n_comp
         EEx.create(n_a,n_b); EEy.create(n_a,n_b); EEz.create(n_a,n_b)
         sh.make_E_field_ints(EEx,EEy,EEz,c)
         Ex(fa:la,fb:lb) = Ex(fa:la,fb:lb) + EEx
         Ey(fa:la,fb:lb) = Ey(fa:la,fb:lb) + EEy
         Ez(fa:la,fb:lb) = Ez(fa:la,fb:lb) + EEz
         sh.destroy_ptr_part
         EEz.destroy; EEy.destroy; EEx.destroy
      end
      Ex.symmetric_reflect; Ey.symmetric_reflect; Ez.symmetric_reflect
   end

   electronic_E_field_at_nuclei result (res)
   ! Return the electronic contribution to the electric fields
   ! at the nuclei as a (3 x .n_atom) array
      res :: REALMAT(3,.n_atom)
      Ex,Ey,Ez :: REALMAT*
       a :: INT
      Ex.create(.n_bf,.n_bf)
      Ey.create(.n_bf,.n_bf)
      Ez.create(.n_bf,.n_bf)
      do a = 1,.n_atom
         .make_electric_field_matrices(Ex,Ey,Ez,.atom(a).pos)
         res(1,a) = -.expectation(Ex)
         res(2,a) = -.expectation(Ey)
         res(3,a) = -.expectation(Ez)
      end
      Ez.destroy; Ey.destroy; Ex.destroy
   end

   nuclear_E_field_at_nuclei result (res)
   ! Return the nuclear contribution to the electric fields
   ! at the nuclei as a (3 x .n_atom) array
      res :: REALMAT(3,.n_atom)
      res = .atom.nuclear_E_field_at_nuclei
   end

   make_EFG_matrices(Exx,Eyy,Ezz,Exy,Exz,Eyz,c)
   ! Make "Eij", the electric field gradient (EFG) integral matrices evaluated
   ! at point "c".
      Exx,Eyy,Ezz,Exy,Exz,Eyz :: REALMAT
       c :: REALVEC(3)
      EExx,EEyy,EEzz,EExy,EExz,EEyz :: REALMAT*
      q,fa,la,fb,lb :: INT
      sh :: SHELL2
      n_a,n_b :: INT
   ENSURE(.basis_info_made, "no basis info")
   ENSURE(.atom.created,  "no atom list")
      Exx = ZERO; Eyy = ZERO; Ezz = ZERO
      Exy = ZERO; Exz = ZERO; Eyz = ZERO
      do q=1,.n_shell_pairs
         .get_shell_pair(sh,q,fa,la,fb,lb)
         n_a = sh.a.n_comp; n_b = sh.b.n_comp
         EExx.create(n_a,n_b); EEyy.create(n_a,n_b); EEzz.create(n_a,n_b)
         EExy.create(n_a,n_b); EExz.create(n_a,n_b); EEyz.create(n_a,n_b)
         sh.make_e_gradient_ints(EExx,EEyy,EEzz,EExy,EExz,EEyz,c)
         Exx(fa:la,fb:lb) = Exx(fa:la,fb:lb) + EExx
         Eyy(fa:la,fb:lb) = Eyy(fa:la,fb:lb) + EEyy
         Ezz(fa:la,fb:lb) = Ezz(fa:la,fb:lb) + EEzz
         Exy(fa:la,fb:lb) = Exy(fa:la,fb:lb) + EExy
         Exz(fa:la,fb:lb) = Exz(fa:la,fb:lb) + EExz
         Eyz(fa:la,fb:lb) = Eyz(fa:la,fb:lb) + EEyz
         sh.destroy_ptr_part
         EEyz.destroy; EExz.destroy; EExy.destroy
         EEzz.destroy; EEyy.destroy; EExx.destroy
      end
      Exx.symmetric_reflect; Eyy.symmetric_reflect; Ezz.symmetric_reflect
      Exy.symmetric_reflect; Exz.symmetric_reflect; Eyz.symmetric_reflect
   end

   electronic_EFG_at_nuclei result (res)
   ! Return the electronic contribution to the electric field gradient
   ! (EFG) at the nuclei as a (6 x .n_atom) array. The order of the
   ! electric field gradient elements is: xx, yy, zz, xy, xz, yz
      res :: REALMAT(6,.n_atom)
      Exx,Eyy,Ezz,Exy,Exz,Eyz :: REALMAT*
       a :: INT
      Exx.create(.n_bf,.n_bf)
      Eyy.create(.n_bf,.n_bf)
      Ezz.create(.n_bf,.n_bf)
      Exy.create(.n_bf,.n_bf)
      Exz.create(.n_bf,.n_bf)
      Eyz.create(.n_bf,.n_bf)
      do a = 1,.n_atom
         .make_EFG_matrices(Exx,Eyy,Ezz,Exy,Exz,Eyz,.atom(a).pos)
         res(1,a) = -.expectation(Exx)
         res(2,a) = -.expectation(Eyy)
         res(3,a) = -.expectation(Ezz)
         res(4,a) = -.expectation(Exy)
         res(5,a) = -.expectation(Exz)
         res(6,a) = -.expectation(Eyz)
      end
      Eyz.destroy; Exz.destroy; Exy.destroy
      Ezz.destroy; Eyy.destroy; Exx.destroy
   end

   nuclear_EFG_at_nuclei result (res)
   ! Return the nuclear contribution to the electric fields gradient (EFG)
   ! at the nuclei as a (6 x .n_atom) array
      res :: REALMAT(6,.n_atom)
      res = .atom.nuclear_EFG_at_nuclei
   end

   get_spin_orbit_matrices(SOx,SOy,SOz)
   ! Set "SOx", "SOy", and "SOz" to the one electron spin orbit matrices.
   ! If archives exist, read them; otherwise make them.
      SOx,SOy,SOz :: REALMAT
      SOx_archive,SOy_archive,SOz_archive :: ARCHIVE
      SOx_archive.set(.name,"SOx_matrix")
      SOy_archive.set(.name,"SOy_matrix")
      SOz_archive.set(.name,"SOz_matrix")
      if (SOx_archive.exists AND SOy_archive.exists AND SOz_archive.exists) then
         SOx_archive.read(SOx)
         SOy_archive.read(SOy)
         SOz_archive.read(SOz)
      else
         .make_spin_orbit_matrices(SOx,SOy,SOz)
      end
   end

   make_spin_orbit_matrices(SOx,SOy,SOz)
   ! Calculate the spin orbit matrices "SOx" "SOy" and "SOz"
      SOx,SOy,SOz :: REALMAT
      SOx_c,SOy_c,SOz_c :: REALMAT*
      q,c,fa,la,fb,lb :: INT
       Z :: REAL
      sh :: SHELL2
      arch :: ARCHIVE
      ENSURE(.basis_info_made, "no basis info")
      ENSURE(.atom.created,  "no atom list")
      SOx = ZERO; SOy = ZERO; SOz = ZERO
      do q=1,.n_shell_pairs
         .get_shell_pair(sh,q,fa,la,fb,lb)
         SOx_c.create(sh.a.n_comp,sh.b.n_comp)
         SOy_c.create(sh.a.n_comp,sh.b.n_comp)
         SOz_c.create(sh.a.n_comp,sh.b.n_comp)
         do c = 1,.n_atom
            Z = .atom(c).atomic_number
            sh.make_spin_orbit_ints(SOx_c,SOy_c,SOz_c, .atom(c).pos)
            SOx(fa:la,fb:lb) = SOx(fa:la,fb:lb) + Z*SOx_c
            SOy(fa:la,fb:lb) = SOy(fa:la,fb:lb) + Z*SOy_c
            SOz(fa:la,fb:lb) = SOz(fa:la,fb:lb) + Z*SOz_c
         end
         sh.destroy_ptr_part
         SOz_c.destroy; SOy_c.destroy; SOx_c.destroy
      end
      SOx.antisymmetric_reflect
      SOy.antisymmetric_reflect
      SOz.antisymmetric_reflect
      arch.set(.name,"SOx_matrix"); arch.write(SOx)
      arch.set(.name,"SOy_matrix"); arch.write(SOy)
      arch.set(.name,"SOz_matrix"); arch.write(SOz)
   end

   get_spin_orbit_B_matrices(SOBx,SOBy,SOBz)
   ! Set "SOBi" to the gauge modified (B field) one electron spin orbit
   ! matrices.  If archives exist, read them; otherwise make them.
      SOBx,SOBy,SOBz :: REALMAT
      x_archive,y_archive,z_archive :: ARCHIVE
      x_archive.set(.name,"SOBx_matrix")
      y_archive.set(.name,"SOBy_matrix")
      z_archive.set(.name,"SOBz_matrix")
      if (x_archive.exists) then
         x_archive.read(SOBx); y_archive.read(SOBy); z_archive.read(SOBz)
      else
         .make_spin_orbit_B_matrices(SOBx,SOBy,SOBz)
      end
   end

   make_spin_orbit_B_matrices(SOBx,SOBy,SOBz)
   ! Calculate the gauge modified (B field) spin orbit matrices "SOBx" "SOBy"
   ! and "SOBz"
      SOBx,SOBy,SOBz :: REALMAT
      Qxx,Qxy,Qxz,Qyx,Qyy,Qyz,Qzx,Qzy,Qzz :: REALMAT*
      n_bf :: INT
      arch :: ARCHIVE
   ENSURE(.basis_info_made, "no basis info")
   ENSURE(.atom.created,  "no atom list")
      n_bf = .n_bf
      Qxx.create(n_bf,n_bf); Qxy.create(n_bf,n_bf); Qxz.create(n_bf,n_bf)
      Qyx.create(n_bf,n_bf); Qyy.create(n_bf,n_bf); Qyz.create(n_bf,n_bf)
      Qzx.create(n_bf,n_bf); Qzy.create(n_bf,n_bf); Qzz.create(n_bf,n_bf)
      .get_spin_orbit_Q_matrices(Qxx,Qxy,Qxz,Qyx,Qyy,Qyz,Qzx,Qzy,Qzz)
      SOBx = (Qyy + Qzz)*.B_field(1) - Qxy*.B_field(2) - Qxz*.B_field(3)
      SOBy = (Qxx + Qzz)*.B_field(2) - Qyx*.B_field(1) - Qyz*.B_field(3)
      SOBz = (Qxx + Qyy)*.B_field(3) - Qzx*.B_field(1) - Qzy*.B_field(2)
      Qzz.destroy; Qzy.destroy; Qzx.destroy
      Qyz.destroy; Qyy.destroy; Qyx.destroy
      Qxz.destroy; Qxy.destroy; Qxx.destroy
      SOBx.symmetric_reflect
      SOBy.symmetric_reflect
      SOBz.symmetric_reflect
      arch.set(.name,"SOBx_matrix"); arch.write(SOBx)
      arch.set(.name,"SOBy_matrix"); arch.write(SOBy)
      arch.set(.name,"SOBz_matrix"); arch.write(SOBz)
   end

   get_spin_orbit_Q_matrices(Qxx,Qxy,Qxz,Qyx,Qyy,Qyz,Qzx,Qzy,Qzz)
   ! Set "Qij" the gauge modified (B field) spin orbit quadrupole matrices.
   ! If archives exist, read them; otherwise make them.
      Qxx,Qxy,Qxz,Qyx,Qyy,Qyz,Qzx,Qzy,Qzz :: REALMAT
      xx_archive,xy_archive,xz_archive :: ARCHIVE
      yx_archive,yy_archive,yz_archive :: ARCHIVE
      zx_archive,zy_archive,zz_archive :: ARCHIVE
      xx_archive.set(.name,"SO_Qxx_matrix")
      xy_archive.set(.name,"SO_Qxy_matrix")
      xz_archive.set(.name,"SO_Qxz_matrix")
      yx_archive.set(.name,"SO_Qyx_matrix")
      yy_archive.set(.name,"SO_Qyy_matrix")
      yz_archive.set(.name,"SO_Qyz_matrix")
      zx_archive.set(.name,"SO_Qzx_matrix")
      zy_archive.set(.name,"SO_Qzy_matrix")
      zz_archive.set(.name,"SO_Qzz_matrix")
      if (xx_archive.exists ) then
         xx_archive.read(Qxx); xy_archive.read(Qxy); xz_archive.read(Qxz)
         yx_archive.read(Qyx); yy_archive.read(Qyy); yz_archive.read(Qyz)
         zx_archive.read(Qzx); zy_archive.read(Qzy); zz_archive.read(Qzz)
      else
         .make_spin_orbit_Q_matrices(Qxx,Qxy,Qxz,Qyx,Qyy,Qyz,Qzx,Qzy,Qzz)
      end
   end

   make_spin_orbit_Q_matrices(Qxx,Qxy,Qxz,Qyx,Qyy,Qyz,Qzx,Qzy,Qzz)
   ! Calculate the gauge modified (B field) spin orbit quadrupole matrices
   ! "Qij".
      Qxx,Qxy,Qxz,Qyx,Qyy,Qyz,Qzx,Qzy,Qzz :: REALMAT
      xx,xy,xz,yx,yy,yz,zx,zy,zz :: REALMAT*
      q,c,fa,la,fb,lb :: INT
       Z :: REAL
      sh :: SHELL2
      arch :: ARCHIVE
      n_a,n_b :: INT
   ENSURE(.basis_info_made, "no basis info")
   ENSURE(.atom.created,  "no atom list")
      Qxx = ZERO; Qxy = ZERO; Qxz = ZERO
      Qyx = ZERO; Qyy = ZERO; Qyz = ZERO
      Qzx = ZERO; Qzy = ZERO; Qzz = ZERO
      do q = 1,.n_shell_pairs
         .get_shell_pair(sh,q,fa,la,fb,lb)
         n_a = sh.a.n_comp; n_b = sh.b.n_comp
         xx.create(n_a,n_b); xy.create(n_a,n_b); xz.create(n_a,n_b)
         yx.create(n_a,n_b); yy.create(n_a,n_b); yz.create(n_a,n_b)
         zx.create(n_a,n_b); zy.create(n_a,n_b); zz.create(n_a,n_b)
         do c = 1,.n_atom
            Z = .atom(c).atomic_number
            sh.make_spin_orbit_B_ints(xx,xy,xz,yx,yy,yz,zx,zy,zz, &
                                    .atom(c).pos, .gauge_origin)
            ! minus due to r-c, not c-r in the electric field part
            ! this comment should go in gaussian2?
            Qxx(fa:la,fb:lb) = Qxx(fa:la,fb:lb) - Z*xx
            Qxy(fa:la,fb:lb) = Qxy(fa:la,fb:lb) - Z*xy
            Qxz(fa:la,fb:lb) = Qxz(fa:la,fb:lb) - Z*xz
            Qyx(fa:la,fb:lb) = Qyx(fa:la,fb:lb) - Z*yx
            Qyy(fa:la,fb:lb) = Qyy(fa:la,fb:lb) - Z*yy
            Qyz(fa:la,fb:lb) = Qyz(fa:la,fb:lb) - Z*yz
            Qzx(fa:la,fb:lb) = Qzx(fa:la,fb:lb) - Z*zx
            Qzy(fa:la,fb:lb) = Qzy(fa:la,fb:lb) - Z*zy
            Qzz(fa:la,fb:lb) = Qzz(fa:la,fb:lb) - Z*zz
         end
         sh.destroy_ptr_part
         zz.destroy; zy.destroy; zx.destroy
         yz.destroy; yy.destroy; yx.destroy
         xz.destroy; xy.destroy; xx.destroy
      end
      Qxx.symmetric_reflect; Qxy.symmetric_reflect; Qxz.symmetric_reflect
      Qyx.symmetric_reflect; Qyy.symmetric_reflect; Qyz.symmetric_reflect
      Qzx.symmetric_reflect; Qzy.symmetric_reflect; Qzz.symmetric_reflect
      arch.set(.name,"SO_Qxx_matrix"); arch.write(Qxx)
      arch.set(.name,"SO_Qxy_matrix"); arch.write(Qxy)
      arch.set(.name,"SO_Qxz_matrix"); arch.write(Qxz)
      arch.set(.name,"SO_Qyx_matrix"); arch.write(Qyx)
      arch.set(.name,"SO_Qyy_matrix"); arch.write(Qyy)
      arch.set(.name,"SO_Qyz_matrix"); arch.write(Qyz)
      arch.set(.name,"SO_Qzx_matrix"); arch.write(Qzx)
      arch.set(.name,"SO_Qzy_matrix"); arch.write(Qzy)
      arch.set(.name,"SO_Qzz_matrix"); arch.write(Qzz)
   end

   nuclear_potential(values,pts)
   ! Calculate the nuclear potential "values" of a given set of "pts".
   ! This is usefule for numerical integration of nuclear attraction integrals.
      values :: REALVEC
      pts :: REALMAT
      n_pts,n,i :: INT
      Z_n,r :: REAL
      pos :: REALVEC(3)
      n_pts = size(pts,1)
      values = ZERO
      do n = 1,.n_atom
         Z_n = .atom(n).atomic_number
         pos = .atom(n).pos
         do i = 1,n_pts
            r = pos.distance_to(pts(i,:))
            if (r>tiny(r)) then
              values(i) = values(i) + Z_n / r
            else
              values(i) = values(i) + TEN**6
            end
         end
      end
   end

   ZORA_potential(values,pts)
   ! Calculate the one electron ZORA potential "values" of a given set of "pts".
   ! This is useful for numerical integration.
      values :: REALVEC
      pts :: REALMAT
      fac :: REAL
      .nuclear_potential(values,pts)
      fac    = ONE/(SPEED_OF_LIGHT_AU*SPEED_OF_LIGHT_AU)
      values = ONE/(TWO + fac*values)
   end

   get_1e_ZORA_matrices(T,SOx,SOy,SOz)
   ! Set "SOx", "SOy", and "SOz" to the one electron ZORA spin orbit matrices.
   ! If archives exist, read them; otherwise make them.
      T,SOx,SOy,SOz :: REALMAT
      T_archive,SOx_archive,SOy_archive,SOz_archive :: ARCHIVE
      T_archive.set(.name,"ZORA_kinetic_matrix")
      SOx_archive.set(.name,"ZORA_SOx_matrix")
      SOy_archive.set(.name,"ZORA_SOy_matrix")
      SOz_archive.set(.name,"ZORA_SOz_matrix")
      if (SOx_archive.exists AND SOy_archive.exists AND SOz_archive.exists) then
         T_archive.read(T)
         SOx_archive.read(SOx)
         SOy_archive.read(SOy)
         SOz_archive.read(SOz)
      else
         .make_1e_ZORA_matrices(T,SOx,SOy,SOz)
      end
   end

   make_1e_ZORA_matrices(T,Zx,Zy,Zz)
   ! Calculate the one-electron ZORA spin orbit matrices numerically.
   ! This includes the relativitically modified kinetic energy integrals.
     T, Zx,Zy,Zz :: REALMAT
     ZORA,SO :: REALMAT4*
     q,fa,la,fb,lb,k,l,a,b :: INT
     sh :: SHELL2
     arch :: ARCHIVE
   ENSURE(.basis_info_made, "no basis info")
   ENSURE(.atom.created,  "no atom list")
   ENSURE(.dftgrid.created, "need to specify dftgrid for ZORA")
     ZORA.create(.n_bf,.n_bf,3,3)
     ! Make the lower half of the ZORA spin orbit integrals
     ZORA = ZERO
     do q = 1,.n_shell_pairs
        .get_shell_pair(sh,q,fa,la,fb,lb)
        SO.create(sh.a.n_comp,sh.b.n_comp,3,3)
#ifndef NOGENERIC
        .dftgrid.make_SO_matrix_elements_of(ZORA_potential,self,sh,SO)
#else
        .dftgrid.make_SO_matrix_elements_of(MOL_ZORA_potential,self,sh,SO)
#endif
        ZORA(fa:la,fb:lb,:,:) = ZORA(fa:la,fb:lb,:,:) + SO
        SO.destroy
        sh.destroy_ptr_part
     end
     ! Make the upper half of the ZORA spin orbit integrals
     do k = 1,3
     do l = 1,3
     do a = 1,.n_bf
     do b = 1,a-1
        ZORA(b,a,l,k) = ZORA(a,b,k,l)
     end
     end
     end
     end
     ! Assemble the ZORA contribution to the 1 electron hamiltonian
     ! Scalar kinetic energy contribution
     T = ZORA(:,:,1,1) + ZORA(:,:,2,2) + ZORA(:,:,3,3)
     ! Spin-dependent spin-orbit contribution
     Zx = ZORA(:,:,2,3) - ZORA(:,:,3,2)
     Zy = ZORA(:,:,3,1) - ZORA(:,:,1,3)
     Zz = ZORA(:,:,1,2) - ZORA(:,:,2,1)
     ZORA.destroy
     arch.set(.name,"ZORA_kinetic_matrix"); arch.write(T)
     arch.set(.name,"ZORA_SOx_matrix");     arch.write(Zx)
     arch.set(.name,"ZORA_SOy_matrix");     arch.write(Zy)
     arch.set(.name,"ZORA_SOz_matrix");     arch.write(Zz)
   end

   make_ENA_matrix(Z)
   ! Calculate the one-electron electron nuclear attractio matrix numerically.
      Z :: REALMAT
     ZZ :: REALMAT*
     q,fa,la,fb,lb :: INT
     sh :: SHELL2
     arch :: ARCHIVE
   ENSURE(.basis_info_made, "no basis info")
   ENSURE(.atom.created,  "no atom list")
   ENSURE(.dftgrid.created, "need to specify dftgrid for ZORA")
     Z = ZERO
     do q = 1,.n_shell_pairs
        .get_shell_pair(sh,q,fa,la,fb,lb)
        ZZ.create(sh.a.n_comp,sh.b.n_comp)
#ifndef NOGENERIC
        .dftgrid.make_matrix_elements_of(nuclear_potential,self,sh,ZZ)
#else
        .dftgrid.make_matrix_elements_of(MOL_nuclear_potential,self,sh,ZZ)
#endif
        Z(fa:la,fb:lb) = Z(fa:la,fb:lb) - ZZ
        ZZ.destroy
        sh.destroy_ptr_part
     end
     Z.symmetric_reflect
     arch.set(.name,"ENA_matrix"); arch.write(Z)
   end

   get_L_matrices(Lx,Ly,Lz)
   ! Set "Lx", "Ly", and "Lz" to the angular momentum matrices.
   ! If archives exist, read them; otherwise make them.
      Lx,Ly,Lz :: REALMAT
      Lx_archive,Ly_archive,Lz_archive :: ARCHIVE
      Lx_archive.set(.name,"Lx_matrix")
      Ly_archive.set(.name,"Ly_matrix")
      Lz_archive.set(.name,"Lz_matrix")
      if (Lx_archive.exists AND Ly_archive.exists AND Lz_archive.exists) then
         Lx_archive.read(Lx)
         Ly_archive.read(Ly)
         Lz_archive.read(Lz)
      else
         .make_L_matrices(Lx,Ly,Lz)
      end
   end

   make_L_matrices(Lx,Ly,Lz)
   ! Make the angular momentum matrices  "Lx", "Ly", and "Lz".
      Lx,Ly,Lz :: REALMAT
      q,fa,la,fb,lb :: INT
      sh :: SHELL2
      arch :: ARCHIVE
   ENSURE(.basis_info_made, "no basis info")
   ENSURE(.atom.created,  "no atom list")
      do q=1,.n_shell_pairs
         .get_shell_pair(sh,q,fa,la,fb,lb)
         sh.make_L_ints(Lx(fa:la,fb:lb),Ly(fa:la,fb:lb),Lz(fa:la,fb:lb), .gauge_origin)
         sh.destroy_ptr_part
      end
      Lx.antisymmetric_reflect
      Ly.antisymmetric_reflect
      Lz.antisymmetric_reflect
      arch.set(.name,"Lx_matrix"); arch.write(Lx)
      arch.set(.name,"Ly_matrix"); arch.write(Ly)
      arch.set(.name,"Lz_matrix"); arch.write(Lz)
   end

!*******************************************************************************
!  Restricted DFT
!*******************************************************************************

   add_ex_corr_matrix(K)
   ! Calculate the exchange correlation matrix numerically.
      K :: REALMAT
      if (.scfdata.dft_non_local_exchange OR .scfdata.dft_non_local_correlation) then
         .add_non_local_ex_corr_matrix(K)
      else
         .add_local_ex_corr_matrix(K)
      end
   end

   add_non_local_ex_corr_matrix(K)
   ! Add the exchange and correlation matrices to K.
   ! This routine supports non-local functionals.
     K :: REALMAT, target
     sh1 :: SHELL1
     atomlist2 :: ATOMVEC(2)
     atomlist1 :: ATOMVEC(1)
     pos1,pos2 :: REALVEC(3)
     nabla_a_grid,nabla_b_grid :: REALMAT3*
     pt,np,a_grid,b_grid,non_local :: REALMAT*
     wt,p,local,a_grid_a,b_grid_b :: REALVEC*
     q,fa,la,fb,lb,sa,sb,n_pt,start,step :: INT
     atom1,atom2,i,j,a,b,z,n_comp_a,n_comp_b :: INT
     thresh,KK :: REAL
     ! n :: INT
     ! nabla_phiaphib :: REAL
     ENSURE(.basis_info_made, "no basis info")
     ENSURE(.atom.created,  "no atom list")
     ENSURE(.dftgrid.created, "need to specify dftgrid for ZORA")
     thresh = 1.0e-30

     start = 1 + tonto_parallel.this_proc
     step = tonto_parallel.n_proc
     if (tonto_parallel.do_parallel) then
       K = ZERO
     end

     do q = start,.no_of_atom_pairs,step
       atom1 = (1+int(sqrt(8.0d0*q-7.0d0)))/2
       atom2 = q - atom1*(atom1-1)/2
       if (atom1/=atom2) then
         atomlist2(1) = .atom(atom1)
         atomlist2(2) = .atom(atom2)
         n_pt = .dftgrid.n_pts*2
         wt.create(n_pt)
         pt.create(n_pt,3)
         .dftgrid.make_grid(pt,wt,atomlist2)
       else
         atomlist1(1) = .atom(atom1)
         n_pt = .dftgrid.n_pts
         wt.create(n_pt)
         pt.create(n_pt,3)
         .dftgrid.make_grid(pt,wt,atomlist1)
       end
       pos1 = .atom(atom1).pos
       pos2 = .atom(atom2).pos

       p.create(n_pt)
       np.create(n_pt,3)
       local.create(n_pt)
       non_local.create(n_pt,3)
!       phia_phib.create(n_pt)

       ! Get the densities and their gradients.
       .make_density_grid(p,pt)
       .make_nabla_density_grid(np,pt)
       p = max(thresh,p)

       ! Get the local and nonlocal contributions.
       local=ZERO
       non_local=ZERO
       if (.scfdata.dft_non_local_exchange) then
         .add_r_exchange_matrix(p,local,np,non_local)
       else if (.scfdata.dft_exchange /= "none") then
         .add_r_exchange_matrix(p,local)
       end
       if (.scfdata.dft_non_local_correlation) then
         .add_r_correlation_matrix(p,local,np,non_local)
       else if (.scfdata.dft_correlation /= "none") then
         .add_r_correlation_matrix(p,local)
       end

       ! Multiply by the weights.
       local = wt*local
       forall (i=1:3) non_local(:,i) = wt*non_local(:,i)

       ! Calculate orbital grids, then multiply by the orbital grids and put in
       ! ex-corr matrix.
       do i=.first_shell_for_atom(atom1),.last_shell_for_atom(atom1)
         fa = .first_basis_fn_for_shell(i)
         la = .last_basis_fn_for_shell(i)
         sa = .atom_shell_for_shell(i)
         sh1.set(.atom(atom1).basis.shell(sa),pos1)
         n_comp_a = sh1%n_comp
         nabla_a_grid.create(n_pt,n_comp_a,3)
         a_grid.create(n_pt,n_comp_a)
         sh1.make_nabla_grid(nabla_a_grid,a_grid,pt)
         sh1.nullify_ptr_part

         do j=.first_shell_for_atom(atom2),.last_shell_for_atom(atom2)
           fb = .first_basis_fn_for_shell(j)
           lb = .last_basis_fn_for_shell(j)
           sb = .atom_shell_for_shell(j)
           sh1.set(.atom(atom2).basis.shell(sb),pos2)
           n_comp_b = sh1%n_comp
           b_grid.create(n_pt,n_comp_b)
           nabla_b_grid.create(n_pt,n_comp_b,3)
           sh1.make_nabla_grid(nabla_b_grid,b_grid,pt)
           sh1.nullify_ptr_part

           ! ------------------------------------------------------------
           do a = 1,n_comp_a
             a_grid_a => a_grid(:,a)
             do b = 1,n_comp_b
               b_grid_b => b_grid(:,b)
!               phia_phib = a_grid_a*b_grid_b
!               KK = sum(local(:)*phia_phib(:))
               KK = sum(local*a_grid_a*b_grid_b)
               do z=1,3
!                 do n=1,n_pt
!                   nabla_phiaphib = nabla_a_grid(n,a,z)*b_grid_b(n) + &
!                                    nabla_b_grid(n,b,z)*a_grid_a(n)
!                   KK = KK + non_local(n,z)*nabla_phiaphib
!                 end
                 KK = KK + sum(non_local(:,z)*(nabla_a_grid(:,a,z)*b_grid_b(:)+nabla_b_grid(:,b,z)*a_grid_a(:)))
               end
               K(fa-1+a,fb-1+b) = K(fa-1+a,fb-1+b) + KK
             end
           end
           ! ------------------------------------------------------------

           nabla_b_grid.destroy
           b_grid.destroy
         end
         nabla_a_grid.destroy
         a_grid.destroy
       end
       atomlist1.nullify_ptr_part
       atomlist2.nullify_ptr_part
!       phia_phib.destroy
       local.destroy; non_local.destroy
       np.destroy
       p.destroy
       wt.destroy
       pt.destroy
     end

     K.symmetric_reflect
     tonto_parallel.sum_symmetric_matrices(K)
   end

   add_local_ex_corr_matrix(K)
   ! Add the exchange and correlation matrices to K.
   ! This routine supports local functionals only.
     K :: REALMAT, target
     sh1 :: SHELL1
     atomlist2 :: ATOMVEC(2)
     atomlist1 :: ATOMVEC(1)
     pos1,pos2 :: REALVEC(3)
     pt,a_grid,b_grid :: REALMAT*
     wt,p,local,a_grid_a,b_grid_b :: REALVEC*
     q,fa,la,fb,lb,sa,sb,n_pt,start,step :: INT
     atom1,atom2,i,j,a,b,n_comp_a,n_comp_b :: INT
     thresh :: REAL
     ENSURE(.basis_info_made, "no basis info")
     ENSURE(.atom.created,  "no atom list")
     ENSURE(.dftgrid.created, "need to specify dftgrid for ZORA")
     thresh = 1.0e-30

     start = 1 + tonto_parallel.this_proc
     step = tonto_parallel.n_proc
     if (tonto_parallel.do_parallel) then
       K = ZERO
     end

     do q = start,.no_of_atom_pairs,step
       atom1 = (1+int(sqrt(8.0d0*q-7.0d0)))/2
       atom2 = q - atom1*(atom1-1)/2
       if (atom1/=atom2) then
         atomlist2(1) = .atom(atom1)
         atomlist2(2) = .atom(atom2)
         n_pt = .dftgrid.n_pts*2
         wt.create(n_pt)
         pt.create(n_pt,3)
         .dftgrid.make_grid(pt,wt,atomlist2)
       else
         atomlist1(1) = .atom(atom1)
         n_pt = .dftgrid.n_pts
         wt.create(n_pt)
         pt.create(n_pt,3)
         .dftgrid.make_grid(pt,wt,atomlist1)
       end
       pos1 = .atom(atom1).pos
       pos2 = .atom(atom2).pos

       p.create(n_pt)
       local.create(n_pt)

       ! Get the densities and their gradients.
       .make_density_grid(p,pt)
       p = max(thresh,p)

       ! Get the local and nonlocal contributions.
       local=ZERO
       .add_r_exchange_matrix(p,local)
       .add_r_correlation_matrix(p,local)

       ! Multiply by the weights.
       local = wt*local

       ! Calculate orbital grids, then multiply by the orbital grids and put in
       ! ex-corr matrix.
       do i=.first_shell_for_atom(atom1),.last_shell_for_atom(atom1)
         fa = .first_basis_fn_for_shell(i)
         la = .last_basis_fn_for_shell(i)
         sa = .atom_shell_for_shell(i)
         sh1.set(.atom(atom1).basis.shell(sa),pos1)
         n_comp_a = sh1%n_comp
         a_grid.create(n_pt,n_comp_a)
         sh1.make_grid(a_grid,pt)
         sh1.nullify_ptr_part

         do j=.first_shell_for_atom(atom2),.last_shell_for_atom(atom2)
           fb = .first_basis_fn_for_shell(j)
           lb = .last_basis_fn_for_shell(j)
           sb = .atom_shell_for_shell(j)
           sh1.set(.atom(atom2).basis.shell(sb),pos2)
           n_comp_b = sh1%n_comp
           b_grid.create(n_pt,n_comp_b)
           sh1.make_grid(b_grid,pt)
           sh1.nullify_ptr_part

           ! ------------------------------------------------------------
           do a = 1,n_comp_a
             a_grid_a => a_grid(:,a)
             do b = 1,n_comp_b
               b_grid_b => b_grid(:,b)
               K(fa-1+a,fb-1+b) = K(fa-1+a,fb-1+b) + sum(local*a_grid_a*b_grid_b)
             end
           end
           ! ------------------------------------------------------------

           b_grid.destroy
         end
         a_grid.destroy
       end
       atomlist1.nullify_ptr_part
       atomlist2.nullify_ptr_part
       local.destroy
       p.destroy
       wt.destroy
       pt.destroy
     end

     K.symmetric_reflect
     tonto_parallel.sum_symmetric_matrices(K)
   end

   r_dft_energy_correction result(res)
   ! The total electronic energy can be written as....
   !   E = sum(P*(F+H)) + correction
   ! where
   !   correction = -(sum(P*K)) + Exc
   ! where K is the exchange-correlation contribution to the Fock matrix.
     res :: REAL
     pt,np,non_local :: REALMAT*
     wt,p,local,f,total :: REALVEC*
     THRESH :: REAL
     n_pt :: INT
     ENSURE(.basis_info_made, "no basis info")
     ENSURE(.atom.created,  "no atom list")
     ENSURE(.dftgrid.created, "need to specify dftgrid for ZORA")
     THRESH = TOL(90)
     n_pt = .dftgrid.n_pts*.n_atom
     wt.create(n_pt)
     pt.create(n_pt,3)
     .dftgrid.make_grid(pt,wt,.atom)

     ! Get the densities and their gradients.
     p.create(n_pt)
     np.create(n_pt,3)

     .make_density_grid(p,pt)
     .make_nabla_density_grid(np,pt)

     pt.destroy
     p = max(thresh,p)

     local.create(n_pt)
     non_local.create(n_pt,3)
     local=ZERO
     non_local=ZERO
     if (.scfdata.dft_non_local_exchange) then
       .add_r_exchange_matrix(p,local,np,non_local)
     else if (.scfdata.dft_exchange /= "none") then
       .add_r_exchange_matrix(p,local)
     end
     if (.scfdata.dft_non_local_correlation) then
       .add_r_correlation_matrix(p,local,np,non_local)
     else if (.scfdata.dft_correlation /= "none") then
       .add_r_correlation_matrix(p,local)
     end

     ! This is -1/2 integral v_xc rho dr.
     total.create(n_pt)
     total = local*p
     if (.scfdata.dft_non_local_exchange OR .scfdata.dft_non_local_correlation) then
       total = total + sum(non_local(:,:)*np(:,:),2)
     end
     total = -HALF*total
     non_local.destroy
     local.destroy

     ! Now add Exc
     f.create(n_pt)
     .r_exchange_functional(p,np,f)
     total = total + f
     .r_correlation_functional(p,np,f)
     total = total + f
     f.destroy
     res = sum(wt*total)
     wt.destroy
     total.destroy

     np.destroy
     p.destroy
   end

   r_ex_corr_energy result (res)
   ! Return the exchange-correlation energy
     res :: REAL
     pt,np :: REALMAT*
     wt,p,fx,fc :: REALVEC*
     n_pt :: INT
     THRESH :: REAL
     ENSURE(.basis_info_made, "no basis info")
     ENSURE(.atom.created,  "no atom list")
     ENSURE(.dftgrid.created, "need to specify dftgrid for ZORA")
     THRESH = TOL(90)
     n_pt = .dftgrid.n_pts*.n_atom
     wt.create(n_pt)
     pt.create(n_pt,3)
     .dftgrid.make_grid(pt,wt,.atom)
     .make_restricted_NOs

     ! Get the densities and their gradients.
     p.create(n_pt)
     .make_density_grid(p,pt)

     if (.scfdata.dft_non_local_exchange OR .scfdata.dft_non_local_correlation) then
       np.create(n_pt,3)
       .make_nabla_density_grid(np,pt)
     end

     pt.destroy
     p = max(THRESH,p)
     fx.create(n_pt)
     fc.create(n_pt)

     .r_exchange_functional(p,np,fx)
     .r_correlation_functional(p,np,fc)
     res = sum(wt*(fx+fc))

     fc.destroy
     fx.destroy
     if (.scfdata.dft_non_local_exchange OR .scfdata.dft_non_local_correlation) then
       np.destroy
     end
     p.destroy
     wt.destroy
   end

   r_exchange_functional(p,np,f)
   ! Calculate the exchange functional.
   ! Input is p,np.  Output is f.
   ! np is optional.
   ! (p means density, np means gradient of the density).
   !
   ! NOTE: When adding a new functional, alter the subroutine
   !       scfdata.foo/read_dft_exchange also.
   !
     p :: REALVEC, IN
     f :: REALVEC
     np :: REALMAT, optional, IN
     ex_kind :: STR
     alpha :: REAL
     ex_kind = .scfdata.dft_exchange
     select case (ex_kind)
       case ("none")
         f = ZERO
       case ("slater")
         alpha=2*THIRD
         .dftgrid.r_lda_exchange_functional(p,f,alpha)
       case ("xalpha")
         alpha=0.7
         .dftgrid.r_lda_exchange_functional(p,f,alpha)
       case ("becke88")
         ENSURE(present(np),"program bug!")
         .dftgrid.r_becke88_exchange_functional(p,np,f)
       case ("gill96")
         ENSURE(present(np),"program bug!")
         .dftgrid.r_gill96_exchange_functional(p,np,f)
       case default
         DIE("unknown exchange functional")
     end
   end

   r_correlation_functional(p,np,f)
   ! Calculate the exchange correlation.
   ! Input is p,np.  Output is f.
   ! np are optional.
   ! (p means density, np means gradient of the density).
   !
   ! NOTE: When adding a new functional, alter the subroutine
   !       scfdata.foo/read_dft_correlation also.
   !
     p :: REALVEC, IN
     f :: REALVEC
     np :: REALMAT, optional, IN
     corr_kind :: STR
     corr_kind = .scfdata.dft_correlation
     select case (corr_kind)
       case ("none")
         f = ZERO
       case ("lyp")
         ENSURE(present(np),"program bug!")
         .dftgrid.r_lyp_correlation_functional(p,np,f)
       case default
         DIE("unknown exchange functional")
     end
   end

   add_r_exchange_matrix(p,local,np,non_local)
   ! Get terms necessary to calculate the exchange functional matrix.
   ! Input is p,np.
   ! Output is local,non_local.
   ! np and non_local are optional arguments.
   ! (p means density, np means nabla density).
   !
   ! NOTE: When adding a new functional, alter the subroutine
   !       scfdata.foo/read_dft_exchange also.
   !
     p,local :: REALVEC
     np,non_local :: REALMAT, optional
     l :: REALVEC*
     nl :: REALMAT*
     ex_kind :: STR
     alpha :: REAL
     n_pt :: INT
     ex_kind = .scfdata.dft_exchange
     n_pt = size(p)
     select case (ex_kind)
       case ("none")
       ! Don't add anything.
       case ("slater")
         alpha=2*THIRD
         l.create(n_pt)
         .dftgrid.d_r_lda_exchange_functional(p,l,alpha)
         local = local + l
         l.destroy
       case ("xalpha")
         alpha=0.7
         l.create(n_pt)
         .dftgrid.d_r_lda_exchange_functional(p,l,alpha)
         local = local + l
         l.destroy
       case ("becke88")
         ENSURE(present(np),"program bug!")
         ENSURE(present(non_local),"program bug!")
         l.create(n_pt)
         nl.create(n_pt,3)
         .dftgrid.d_r_b88_exchange_functional(p,np,l,nl)
         local = local + l
         non_local = non_local + nl
         nl.destroy
         l.destroy
       case ("gill96")
         ENSURE(present(np),"program bug!")
         ENSURE(present(non_local),"program bug!")
         l.create(n_pt)
         nl.create(n_pt,3)
         .dftgrid.d_r_gill96_exchange_functional(p,np,l,nl)
         local = local + l
         non_local = non_local + nl
         nl.destroy
         l.destroy
       case default
         DIE("unknown exchange functional")
     end
   end

   add_r_correlation_matrix(p,local,np,non_local)
   ! Get terms necessary to calculate the correlation functional matrix.
   ! Input is p,np.
   ! Output is local,non_local.
   ! np and non_local are optional arguments.
   ! (p means density, np means nabla density).
   !
   ! NOTE: When adding a new functional, alter the subroutine
   !       scfdata.foo/read_dft_correlation also.
   !
     p,local :: REALVEC
     np,non_local :: REALMAT, optional
     l :: REALVEC*
     nl :: REALMAT*
     n_pt :: INT
     corr_kind :: STR
     corr_kind = .scfdata.dft_correlation
     n_pt = size(p)
     select case (corr_kind)
       case ("none")
       ! Don't add anything.
!       case ("vwn")
       case ("lyp")
         ENSURE(present(np),"program bug!")
         ENSURE(present(non_local),"program bug!")
         l.create(n_pt)
         nl.create(n_pt,3)
         .dftgrid.d_r_lyp_correlation_functional(p,np,l,nl)
         local = local + l
         non_local = non_local + nl
         nl.destroy
         l.destroy
       case default
         DIE("unknown correlation functional")
     end
   end

!*******************************************************************************
!  Unrestricted DFT
!*******************************************************************************

   add_ex_corr_matrix(Ka,Kb)
   ! Calculate the exchange correlation matrix numerically.
      Ka,Kb :: REALMAT
      if (.scfdata.dft_non_local_exchange OR .scfdata.dft_non_local_correlation) then
         .add_non_local_ex_corr_matrix(Ka,Kb)
      else
         .add_local_ex_corr_matrix(Ka,Kb)
      end
   end

   add_non_local_ex_corr_matrix(Ka,Kb)
   ! Add the exchange and correlation matrices to Ka and Kb.
   ! This routine supports non-local functionals.
     Ka,Kb :: REALMAT, target
     sh1 :: SHELL1
     atomlist2 :: ATOMVEC(2)
     atomlist1 :: ATOMVEC(1)
     pos1,pos2 :: REALVEC(3)
     nabla_a_grid,nabla_b_grid :: REALMAT3*
     pt,np_a,np_b,a_grid,b_grid,non_local_a,non_local_b :: REALMAT*
     wt,p_a,p_b,local_a,local_b,a_grid_a,b_grid_b,phia_phib :: REALVEC*
     q,fa,la,fb,lb,sa,sb,n_pt,start,step :: INT
     atom1,atom2,i,j,a,b,z,n,n_comp_a,n_comp_b :: INT
     thresh,nabla_phiaphib,KKa_ab,KKb_ab :: REAL
     ENSURE(.basis_info_made, "no basis info")
     ENSURE(.atom.created,  "no atom list")
     ENSURE(.dftgrid.created, "need to specify dftgrid for ZORA")
     thresh = 1.0e-30

     start = 1 + tonto_parallel.this_proc
     step = tonto_parallel.n_proc
     if (tonto_parallel.do_parallel) then
       Ka = ZERO
       Kb = ZERO
     end

     do q = start,.no_of_atom_pairs,step
       atom1 = (1+int(sqrt(8.0d0*q-7.0d0)))/2
       atom2 = q - atom1*(atom1-1)/2
       if (atom1/=atom2) then
         atomlist2(1) = .atom(atom1)
         atomlist2(2) = .atom(atom2)
         n_pt = .dftgrid.n_pts*2
         wt.create(n_pt)
         pt.create(n_pt,3)
         .dftgrid.make_grid(pt,wt,atomlist2)
       else
         atomlist1(1) = .atom(atom1)
         n_pt = .dftgrid.n_pts
         wt.create(n_pt)
         pt.create(n_pt,3)
         .dftgrid.make_grid(pt,wt,atomlist1)
       end
       pos1 = .atom(atom1).pos
       pos2 = .atom(atom2).pos

       p_a.create(n_pt)
       p_b.create(n_pt)
       np_a.create(n_pt,3)
       np_b.create(n_pt,3)
       local_a.create(n_pt)
       local_b.create(n_pt)
       non_local_a.create(n_pt,3)
       non_local_b.create(n_pt,3)
       phia_phib.create(n_pt)

       ! Get the densities and their gradients.
       .make_unrestricted_density_grid(p_a,p_b,pt)
       .make_u_nabla_density_grid(np_a,np_b,pt)
       p_a = max(thresh,p_a)
       p_b = max(thresh,p_b)

       ! Get the local and nonlocal contributions.
       local_a=ZERO
       local_b=ZERO
       non_local_a=ZERO
       non_local_b=ZERO
       if (.scfdata.dft_non_local_exchange) then
         .add_u_exchange_matrix(p_a,p_b,local_a,local_b,np_a,np_b,non_local_a,non_local_b)
       else if (.scfdata.dft_exchange /= "none") then
         .add_u_exchange_matrix(p_a,p_b,local_a,local_b)
       end
       if (.scfdata.dft_non_local_correlation) then
         .add_u_correlation_matrix(p_a,p_b,local_a,local_b,np_a,np_b,non_local_a,non_local_b)
       else if (.scfdata.dft_correlation /= "none") then
         .add_u_correlation_matrix(p_a,p_b,local_a,local_b)
       end

       ! Multiply by the weights.
       local_a = wt*local_a
       local_b = wt*local_b
       forall (i=1:3) non_local_a(:,i) = wt*non_local_a(:,i)
       forall (i=1:3) non_local_b(:,i) = wt*non_local_b(:,i)

       ! Calculate orbital grids, then multiply by the orbital grids and put in
       ! ex-corr matrix.
       do i=.first_shell_for_atom(atom1),.last_shell_for_atom(atom1)
         fa = .first_basis_fn_for_shell(i)
         la = .last_basis_fn_for_shell(i)
         sa = .atom_shell_for_shell(i)
         sh1.set(.atom(atom1).basis.shell(sa),pos1)
         n_comp_a = sh1%n_comp
         nabla_a_grid.create(n_pt,n_comp_a,3)
         a_grid.create(n_pt,n_comp_a)
         sh1.make_nabla_grid(nabla_a_grid,a_grid,pt)
         sh1.nullify_ptr_part

         do j=.first_shell_for_atom(atom2),.last_shell_for_atom(atom2)
           fb = .first_basis_fn_for_shell(j)
           lb = .last_basis_fn_for_shell(j)
           sb = .atom_shell_for_shell(j)
           sh1.set(.atom(atom2).basis.shell(sb),pos2)
           n_comp_b = sh1%n_comp
           b_grid.create(n_pt,n_comp_b)
           nabla_b_grid.create(n_pt,n_comp_b,3)
           sh1.make_nabla_grid(nabla_b_grid,b_grid,pt)
           sh1.nullify_ptr_part

           ! ------------------------------------------------------------
           do a = 1,n_comp_a
             a_grid_a => a_grid(:,a)
             do b = 1,n_comp_b
               b_grid_b => b_grid(:,b)
               phia_phib = a_grid_a*b_grid_b
               KKa_ab = sum(local_a(:)*phia_phib(:))
               KKb_ab = sum(local_b(:)*phia_phib(:))
               do z=1,3
                 do n=1,n_pt
                   nabla_phiaphib = nabla_a_grid(n,a,z)*b_grid_b(n) + &
                                    nabla_b_grid(n,b,z)*a_grid_a(n)
                   KKa_ab = KKa_ab + non_local_a(n,z)*nabla_phiaphib
                   KKb_ab = KKb_ab + non_local_b(n,z)*nabla_phiaphib
                 end
               end
               Ka(fa-1+a,fb-1+b) = Ka(fa-1+a,fb-1+b) + KKa_ab
               Kb(fa-1+a,fb-1+b) = Kb(fa-1+a,fb-1+b) + KKb_ab
             end
           end
           ! ------------------------------------------------------------

           nabla_b_grid.destroy
           b_grid.destroy
         end
         nabla_a_grid.destroy
         a_grid.destroy
       end
       atomlist1.nullify_ptr_part
       atomlist2.nullify_ptr_part
       phia_phib.destroy
       local_b.destroy; non_local_b.destroy
       local_a.destroy; non_local_a.destroy
       np_b.destroy
       np_a.destroy
       p_b.destroy
       p_a.destroy
       wt.destroy
       pt.destroy
     end

     Ka.symmetric_reflect
     Kb.symmetric_reflect
     tonto_parallel.sum_symmetric_matrices(Ka)
     tonto_parallel.sum_symmetric_matrices(Kb)
   end

   add_local_ex_corr_matrix(Ka,Kb)
   ! Add the exchange and correlation matrices to Ka and Kb.
   ! This routine supports only local functionals.
     Ka,Kb :: REALMAT, target
     sh :: SHELL2
     pt,a_grid,b_grid,KKa,KKb :: REALMAT*
     wt,p_a,p_b,local_a,local_b,a_grid_a,b_grid_b,phia_phib :: REALVEC*
     q,fa,la,fb,lb,a,b,n_pt,start,step :: INT
     THRESH :: REAL
     ENSURE(.basis_info_made, "no basis info")
     ENSURE(.atom.created,  "no atom list")
     ENSURE(.dftgrid.created, "need to specify dftgrid for ZORA")
     THRESH = TOL(90)
     n_pt = .dftgrid.n_pts*.n_atom
     wt.create(n_pt)
     pt.create(n_pt,3)
     .dftgrid.make_grid(pt,wt,.atom)

     ! Get the densities and their gradients.
     p_a.create(n_pt)
     p_b.create(n_pt)

     .make_unrestricted_density_grid(p_a,p_b,pt)

     local_a.create(n_pt)
     local_b.create(n_pt)
     p_a = max(THRESH,p_a)
     p_b = max(THRESH,p_b)

     local_a=ZERO
     local_b=ZERO
     if (.scfdata.dft_exchange /= "none") then
       .add_u_exchange_matrix(p_a,p_b,local_a,local_b)
     end
     if (.scfdata.dft_correlation /= "none") then
       .add_u_correlation_matrix(p_a,p_b,local_a,local_b)
     end
     p_b.destroy
     p_a.destroy
     local_a = wt*local_a
     local_b = wt*local_b
     wt.destroy

     phia_phib.create(n_pt)
     start = 1 + tonto_parallel.this_proc
     step = tonto_parallel.n_proc
     if (tonto_parallel.do_parallel) then
       Ka = ZERO
       Kb = ZERO
     end
     do q = start,.n_shell_pairs,step
        .get_shell_pair(sh,q,fa,la,fb,lb)
        a_grid.create(n_pt,sh.a%n_comp)
        b_grid.create(n_pt,sh.b%n_comp)
        KKa => Ka(fa:la,fb:lb)
        KKb => Kb(fa:la,fb:lb)
        sh.a.make_grid(a_grid,pt)
        sh.b.make_grid(b_grid,pt)
        ! ------------------------------------------------------------
        do a = 1,sh.a%n_comp
          a_grid_a => a_grid(:,a)
          do b = 1,sh.b%n_comp
            b_grid_b => b_grid(:,b)
            phia_phib = a_grid_a*b_grid_b
            KKa(a,b) = KKa(a,b) + sum(local_a*phia_phib)
            KKb(a,b) = KKb(a,b) + sum(local_b*phia_phib)
          end
        end
        ! ------------------------------------------------------------
        b_grid.destroy
        a_grid.destroy
        sh.destroy_ptr_part
     end
     tonto_parallel.sum_symmetric_matrices(Ka)
     tonto_parallel.sum_symmetric_matrices(Kb)
     Ka.symmetric_reflect
     Kb.symmetric_reflect

     phia_phib.destroy
     local_b.destroy
     local_a.destroy
     pt.destroy
   end

   u_dft_energy_correction result(res)
   ! The total electronic energy can be written as....
   !   E = 1/2 * sum(Palpha*(Falpha+H) + Pbeta*(Fbeta+H)) + correction
   ! where
   !   correction = -1/2 * (sum(Palpha*Kalpha+Pbeta*Kbeta)) + Exc
   ! where Kalpha and Kbeta are the exchange-correlation contributions to the
   ! Fock matrices.
     res :: REAL
     pt,np_a,np_b,non_local_a,non_local_b :: REALMAT*
     wt,p_a,p_b,local_a,local_b,f,total :: REALVEC*
     THRESH :: REAL
     n_pt :: INT
     ENSURE(.basis_info_made, "no basis info")
     ENSURE(.atom.created,  "no atom list")
     ENSURE(.dftgrid.created, "need to specify dftgrid for ZORA")
     THRESH = TOL(90)
     n_pt = .dftgrid.n_pts*.n_atom
     wt.create(n_pt)
     pt.create(n_pt,3)
     .dftgrid.make_grid(pt,wt,.atom)

     ! Get the densities and their gradients.
     p_a.create(n_pt)
     p_b.create(n_pt)
     np_a.create(n_pt,3)
     np_b.create(n_pt,3)

     .make_unrestricted_density_grid(p_a,p_b,pt)
     .make_u_nabla_density_grid(np_a,np_b,pt)

     pt.destroy
     p_a = max(thresh,p_a)
     p_b = max(thresh,p_b)

     local_a.create(n_pt)
     local_b.create(n_pt)
     non_local_a.create(n_pt,3)
     non_local_b.create(n_pt,3)
     local_a=ZERO
     local_b=ZERO
     non_local_a=ZERO
     non_local_b=ZERO
     if (.scfdata.dft_non_local_exchange) then
       .add_u_exchange_matrix(p_a,p_b,local_a,local_b,np_a,np_b,non_local_a,non_local_b)
     else if (.scfdata.dft_exchange /= "none") then
       .add_u_exchange_matrix(p_a,p_b,local_a,local_b)
     end
     if (.scfdata.dft_non_local_correlation) then
       .add_u_correlation_matrix(p_a,p_b,local_a,local_b,np_a,np_b,non_local_a,non_local_b)
     else if (.scfdata.dft_correlation /= "none") then
       .add_u_correlation_matrix(p_a,p_b,local_a,local_b)
     end

     ! This is -1/2 integral v_xc rho dr.
     total.create(n_pt)
     total = local_a*p_a+local_b*p_b
     if (.scfdata.dft_non_local_exchange OR .scfdata.dft_non_local_correlation) then
       total = total + sum(non_local_b(:,:)*np_b(:,:),2) + sum(non_local_a(:,:)*np_a(:,:),2)
     end
     total = -HALF*total
     non_local_b.destroy
     non_local_a.destroy
     local_b.destroy
     local_a.destroy

     ! Now add Exc
     f.create(n_pt)
     .u_exchange_functional(p_a,p_b,np_a,np_b,f)
     total = total + f
     .u_correlation_functional(p_a,p_b,np_a,np_b,f)
     total = total + f
     f.destroy
     res = sum(wt*total)
     wt.destroy
     total.destroy

     np_b.destroy
     np_a.destroy
     p_b.destroy
     p_a.destroy
   end

   u_ex_corr_energy result (res)
   ! Return the exchange-correlation energy
     res :: REAL
     pt,np_a,np_b :: REALMAT*
     wt,p_a,p_b,fx,fc :: REALVEC*
     n_pt :: INT
     THRESH :: REAL
     ENSURE(.basis_info_made, "no basis info")
     ENSURE(.atom.created,  "no atom list")
     ENSURE(.dftgrid.created, "need to specify dftgrid for ZORA")
     THRESH = TOL(90)
     n_pt = .dftgrid.n_pts*.n_atom
     wt.create(n_pt)
     pt.create(n_pt,3)
     .dftgrid.make_grid(pt,wt,.atom)
     .make_unrestricted_NOs

     ! Get the densities and their gradients.
     p_a.create(n_pt)
     p_b.create(n_pt)
     .make_unrestricted_density_grid(p_a,p_b,pt)

     if (.scfdata.dft_non_local_exchange OR .scfdata.dft_non_local_correlation) then
       np_a.create(n_pt,3)
       np_b.create(n_pt,3)
       .make_u_nabla_density_grid(np_a,np_b,pt)
     end

     pt.destroy
     p_a = max(THRESH,p_a)
     p_b = max(THRESH,p_b)
     fx.create(n_pt)
     fc.create(n_pt)

     .u_exchange_functional(p_a,p_b,np_a,np_b,fx)
     .u_correlation_functional(p_a,p_b,np_a,np_b,fc)
     res = sum(wt*(fx+fc))

     fc.destroy
     fx.destroy
     if (.scfdata.dft_non_local_exchange OR .scfdata.dft_non_local_correlation) then
       np_b.destroy
       np_a.destroy
     end
     p_b.destroy
     p_a.destroy
     wt.destroy
   end

   u_exchange_functional(p_a,p_b,np_a,np_b,f)
   ! Calculate the exchange functional.
   ! Input is p_a,p_b,np_a,np_b.  Output is f.
   ! np_a,np_b are optional.
   ! (p means density, np means gradient of the density).
   !
   ! NOTE: When adding a new functional, alter the subroutine
   !       scfdata.foo/read_dft_exchange also.
   !
     p_a,p_b :: REALVEC, IN
     f :: REALVEC
     np_a,np_b :: REALMAT, optional, IN
     ex_kind :: STR
     alpha :: REAL
     ex_kind = .scfdata.dft_exchange
     select case (ex_kind)
       case ("none")
         f = ZERO
       case ("slater")
         alpha=2*THIRD
         .dftgrid.u_lda_exchange_functional(p_a,p_b,f,alpha)
       case ("xalpha")
         alpha=0.7
         .dftgrid.u_lda_exchange_functional(p_a,p_b,f,alpha)
       case ("becke88")
         ENSURE(present(np_a),"program bug!")
         ENSURE(present(np_b),"program bug!")
         .dftgrid.u_becke88_exchange_functional(p_a,p_b,np_a,np_b,f)
       case ("gill96")
         ENSURE(present(np_a),"program bug!")
         ENSURE(present(np_b),"program bug!")
         .dftgrid.u_gill96_exchange_functional(p_a,p_b,np_a,np_b,f)
       case default
         DIE("unknown exchange functional")
     end
   end

   u_correlation_functional(p_a,p_b,np_a,np_b,f)
   ! Calculate the exchange correlation.
   ! Input is p_a,p_b,np_a,np_b.  Output is f.
   ! np_a,np_b are optional.
   ! (p means density, np means gradient of the density).
   !
   ! NOTE: When adding a new functional, alter the subroutine
   !       scfdata.foo/read_dft_correlation also.
   !
     p_a,p_b :: REALVEC, IN
     f :: REALVEC
     np_a,np_b :: REALMAT, optional, IN
     corr_kind :: STR
     corr_kind = .scfdata.dft_correlation
     select case (corr_kind)
       case ("none")
         f = ZERO
       case ("lyp")
         ENSURE(present(np_a),"program bug!")
         ENSURE(present(np_b),"program bug!")
         .dftgrid.u_lyp_correlation_functional(p_a,p_b,np_a,np_b,f)
       case default
         DIE("unknown exchange functional")
     end
   end

   add_u_exchange_matrix(p_a,p_b,local_a,local_b,np_a,np_b,non_local_a,non_local_b)
   ! Get terms necessary to calculate the exchange functional matrix.
   ! Input is p_a,p_b,np_a,np_b.
   ! Output is local_a,local_b,non_local_a,non_local_b.
   ! np_a, np_b and non_local are optional arguments.
   ! (p means density, np means nabla density, a means alpha, b means beta).
   !
   ! NOTE: When adding a new functional, alter the subroutine
   !       scfdata.foo/read_dft_exchange also.
   !
     p_a,p_b,local_a,local_b :: REALVEC
     np_a,np_b,non_local_a,non_local_b :: REALMAT, optional
     la,lb :: REALVEC*
     nla,nlb :: REALMAT*
     ex_kind :: STR
     alpha :: REAL
     n_pt :: INT
     ex_kind = .scfdata.dft_exchange
     n_pt = size(p_a)
     select case (ex_kind)
       case ("none")
       ! Don't add anything.
       case ("slater")
         alpha=2*THIRD
         la.create(n_pt)
         lb.create(n_pt)
         .dftgrid.d_u_lda_exchange_functional(p_a,p_b,la,lb,alpha)
         local_a = local_a + la
         local_b = local_b + lb
         lb.destroy
         la.destroy
       case ("xalpha")
         alpha=0.7
         la.create(n_pt)
         lb.create(n_pt)
         .dftgrid.d_u_lda_exchange_functional(p_a,p_b,la,lb,alpha)
         local_a = local_a + la
         local_b = local_b + lb
         lb.destroy
         la.destroy
       case ("becke88")
         ENSURE(present(np_a),"program bug!")
         ENSURE(present(np_b),"program bug!")
         ENSURE(present(non_local_a),"program bug!")
         ENSURE(present(non_local_b),"program bug!")
         la.create(n_pt)
         lb.create(n_pt)
         nla.create(n_pt,3)
         nlb.create(n_pt,3)
         .dftgrid.d_u_b88_exchange_functional(p_a,p_b,np_a,np_b,la,lb,nla,nlb)
         local_a = local_a + la
         local_b = local_b + lb
         non_local_a = non_local_a + nla
         non_local_b = non_local_b + nlb
         nlb.destroy
         nla.destroy
         lb.destroy
         la.destroy
       case ("gill96")
         ENSURE(present(np_a),"program bug!")
         ENSURE(present(np_b),"program bug!")
         ENSURE(present(non_local_a),"program bug!")
         ENSURE(present(non_local_b),"program bug!")
         la.create(n_pt)
         lb.create(n_pt)
         nla.create(n_pt,3)
         nlb.create(n_pt,3)
         .dftgrid.d_u_gill96_exchange_functional(p_a,p_b,np_a,np_b,la,lb,nla,nlb)
         local_a = local_a + la
         local_b = local_b + lb
         non_local_a = non_local_a + nla
         non_local_b = non_local_b + nlb
         nlb.destroy
         nla.destroy
         lb.destroy
         la.destroy
       case default
         DIE("unknown exchange functional")
     end
   end

   add_u_correlation_matrix(p_a,p_b,local_a,local_b,np_a,np_b,non_local_a,non_local_b)
   ! Get terms necessary to calculate the correlation functional matrix.
   ! Input is p_a,p_b,np_a,np_b.
   ! Output is local_a,local_b,non_local_a,non_local_b.
   ! np_a, np_b and non_local are optional arguments.
   ! (p means density, np means nabla density, a means alpha, b means beta).
   !
   ! NOTE: When adding a new functional, alter the subroutine
   !       scfdata.foo/read_dft_correlation also.
   !
     p_a,p_b,local_a,local_b :: REALVEC
     np_a,np_b,non_local_a,non_local_b :: REALMAT, optional
     la,lb :: REALVEC*
     nla,nlb :: REALMAT*
     n_pt :: INT
     corr_kind :: STR
     corr_kind = .scfdata.dft_correlation
     n_pt = size(p_a)
     select case (corr_kind)
       case ("none")
       ! Don't add anything.
!       case ("vwn")
       case ("lyp")
         ENSURE(present(np_a),"program bug!")
         ENSURE(present(np_b),"program bug!")
         ENSURE(present(non_local_a),"program bug!")
         ENSURE(present(non_local_b),"program bug!")
         la.create(n_pt)
         lb.create(n_pt)
         nla.create(n_pt,3)
         nlb.create(n_pt,3)
         .dftgrid.d_u_lyp_correlation_functional(p_a,p_b,np_a,np_b,la,lb,nla,nlb)
         local_a = local_a + la
         local_b = local_b + lb
         non_local_a = non_local_a + nla
         non_local_b = non_local_b + nlb
         nlb.destroy
         nla.destroy
         lb.destroy
         la.destroy
       case default
         DIE("unknown correlation functional")
     end
   end

!  **********************
!  Two electron integrals
!  **********************

   get_ERI_integrals
   ! Get the electron repulsion integrals on disk. If the integral
   ! file is already there, do nothing.
     eri_archive,ind_archive :: ARCHIVE
     eri_archive.set(.name,"eri_integrals")
     ind_archive.set(.name,"eri_index")
     if ((NOT eri_archive.exists) OR (NOT ind_archive.exists)) then
        eri_archive.open(for="write-only",buffered=TRUE,type="real")
        ind_archive.open(for="write-only",buffered=TRUE,type="int")
        .make_eri_integrals(eri_archive,ind_archive)
        ind_archive.close
        eri_archive.close
     end
   end

   make_eri_integrals(eri_archive,eri_index)
   ! Calculate the electron repulsion integrals (ERI's) over all basis functions
   ! Outputs to archive "eri_archive".  Note that index coincidence factors are
   ! included.
     eri_archive,eri_index :: ARCHIVE
     sh4 :: SHELL4
     ERI :: REALMAT4*
     q,a,b,c,d,skipped,atom_a,atom_b,atom_c,atom_d :: INT
     factor :: REAL
   ENSURE(.basis_info_made, "no basis info")
   ENSURE(.atom.created,  "no atom list")
     skipped = 0
     if (.scfdata.output) then
       stdout.set_real_style("e")
       stdout.show("Skipping electron repulsion integrals less than ",.scfdata.eri_limit)
       stdout.set_real_style("f")
     end
     if (.scfdata.nddo) then
        do q = 1, .n_shell_quartets
          .get_shell_quartet_indexes(q,a,b,c,d,atom_a,atom_b,atom_c,atom_d)
          if (atom_a==atom_b AND atom_c==atom_d) then
            .get_shell_quartet(sh4,q,a,b,c,d)
          else
            skipped = skipped + 1
            cycle
          end
          if (sh4.skip_ERI) then
            skipped = skipped + 1
            sh4.destroy_ptr_part
            cycle
          end
          ERI.create(sh4.a.n_comp,sh4.b.n_comp,sh4.c.n_comp,sh4.d.n_comp)
          sh4.get_ERI(ERI)
          factor = ONE
          if (a==b) factor = HALF                    ! Coincidence factors
          if (c==d) factor = HALF * factor
          if (a==c AND b==d) factor = HALF * factor
          ERI = factor * ERI
          eri_archive.file.write(ERI)
          eri_index.file.write(q)
          ERI.destroy
          sh4.destroy_ptr_part
        end
     else if (.scfdata.nudo) then
        do q = 1, .n_shell_quartets
          .get_shell_quartet_indexes(q,a,b,c,d,atom_a,atom_b,atom_c,atom_d)
          if (.atom.bonded(atom_a,atom_b) AND .atom.bonded(atom_c,atom_d)) then
            .get_shell_quartet(sh4,q,a,b,c,d)
          else
            skipped = skipped + 1
            cycle
          end
          if (sh4.skip_ERI) then
            skipped = skipped + 1
            sh4.destroy_ptr_part
            cycle
          end
          ERI.create(sh4.a.n_comp,sh4.b.n_comp,sh4.c.n_comp,sh4.d.n_comp)
          sh4.get_ERI(ERI)
          factor = ONE
          if (a==b) factor = HALF                    ! Coincidence factors
          if (c==d) factor = HALF * factor
          if (a==c AND b==d) factor = HALF * factor
          ERI = factor * ERI
          eri_archive.file.write(ERI)
          eri_index.file.write(q)
          ERI.destroy
          sh4.destroy_ptr_part
        end
     else
        do q = 1, .n_shell_quartets
          .get_shell_quartet(sh4,q,a,b,c,d)
          if (sh4.skip_ERI(.scfdata.eri_limit)) then
            skipped = skipped + 1
            sh4.destroy_ptr_part
            cycle
          end
          ERI.create(sh4.a.n_comp,sh4.b.n_comp,sh4.c.n_comp,sh4.d.n_comp)
          sh4.get_ERI(ERI)
          factor=ONE
          if (a==b) factor = HALF                    ! Coincidence factors
          if (c==d) factor = HALF * factor
          if (a==c AND b==d) factor = HALF * factor
          ERI = factor * ERI
          eri_archive.file.write(ERI)
          eri_index.file.write(q)
          ERI.destroy
          sh4.destroy_ptr_part
        end
     end
     if (.scfdata.output) then
       a = .n_shell_quartets
       stdout.text("Skipped "//skipped.to_str.trim//" out of "//a.to_str.trim//" blocks.")
     end
     eri_index.file.write(.n_shell_quartets + 1 )
   end

   get_spin_orbit_integrals
   ! Get the spin orbit integrals on disk. If the integral files are
   ! file is already there, do nothing.
     SOx_archive,SOy_archive,SOz_archive,ind_archive :: ARCHIVE
     SOx_archive.set(.name,"SOx_integrals")
     SOy_archive.set(.name,"SOy_integrals")
     SOz_archive.set(.name,"SOz_integrals")
     ind_archive.set(.name,"SO_indices")
     if (NOT SOx_archive.exists) then
        SOx_archive.open(for="write-only",buffered=TRUE,type="real")
        SOy_archive.open(for="write-only",buffered=TRUE,type="real")
        SOz_archive.open(for="write-only",buffered=TRUE,type="real")
        ind_archive.open(for="write-only",buffered=TRUE,type="int")
        .make_spin_orbit_integrals(SOx_archive,SOy_archive,SOz_archive,ind_archive)
        SOx_archive.close
        SOy_archive.close
        SOz_archive.close
        ind_archive.close
     end
   end

   make_spin_orbit_integrals(SOx_archive,SOy_archive,SOz_archive,ind_archive)
   ! Calculate the spin orbit integrals. Outputs the spin same-orbit integrals
   ! to for each component i to "SOi_archive". The shell quartet index for
   ! these integrals are put in "ind_archive". Note that index coincidence
   ! factors are included.
     SOx_archive,SOy_archive,SOz_archive,ind_archive :: ARCHIVE
     sh4 :: SHELL4
     Sx,Sy,Sz,Ox,Oy,Oz :: REALMAT4*
     q,a,b,c,d,skipped,atom_a,atom_b,atom_c,atom_d,na,nb,nc,nd :: INT
     factor :: REAL
     cutoff :: STR
   ENSURE(.basis_info_made, "no basis info")
   ENSURE(.atom.created,  "no atom list")
     cutoff.from_real(SHELL4_ERI_CUTOFF)
     skipped = 0
     if (.scfdata.output) then
       stdout.text("Skipping electron repulsion integrals less than " // trim(cutoff) // ".")
     end
     do q = 1, .n_shell_quartets
       if (.scfdata.nddo) then
         .get_shell_quartet_indexes(q,a,b,c,d,atom_a,atom_b,atom_c,atom_d)
         if (atom_a==atom_b AND atom_c==atom_d) then
           .get_shell_quartet(sh4,q,a,b,c,d)
         else
           skipped = skipped + 1
           cycle
         end
       else if (.scfdata.nudo) then
         .get_shell_quartet_indexes(q,a,b,c,d,atom_a,atom_b,atom_c,atom_d)
         if (.atom.bonded(atom_a,atom_b) AND .atom.bonded(atom_c,atom_d)) then
           .get_shell_quartet(sh4,q,a,b,c,d)
         else
           skipped = skipped + 1
           cycle
         end
       else
         .get_shell_quartet(sh4,q,a,b,c,d)
       end
       if (sh4.skip_ERI) then
         skipped = skipped + 1
         sh4.destroy_ptr_part
         cycle
       end
       na = sh4.a.n_comp; nb = sh4.b.n_comp
       nc = sh4.c.n_comp; nd = sh4.d.n_comp
       Sx.create(na,nb,nc,nd); Sy.create(na,nb,nc,nd); Sz.create(na,nb,nc,nd)
       Ox.create(na,nb,nc,nd); Oy.create(na,nb,nc,nd); Oz.create(na,nb,nc,nd)
       sh4.make_spin_orbit_ints(Sx,Sy,Sz,Ox,Oy,Oz)
       factor = ONE
       if (a==b) factor = HALF                    ! Coincidence factors
       if (c==d) factor = HALF * factor
       if (a==c AND b==d) factor = HALF * factor
       Sx = factor*Sx; Sy = factor*Sy; Sz = factor*Sz
       Ox = factor*Ox; Oy = factor*Oy; Oz = factor*Oz
       SOx_archive.file.write(Sx); SOx_archive.file.write(Ox)
       SOy_archive.file.write(Sy); SOy_archive.file.write(Oy)
       SOz_archive.file.write(Sz); SOz_archive.file.write(Oz)
       ind_archive.file.write(q)
       Oz.destroy; Oy.destroy; Ox.destroy
       Sz.destroy; Sy.destroy; Sx.destroy
       sh4.destroy_ptr_part
     end
     if (.scfdata.output) then
       a = .n_shell_quartets
       stdout.text("Skipped "//skipped.to_str.trim//" out of "//a.to_str.trim//" blocks.")
     end
     ind_archive.file.write(.n_shell_quartets + 1 )
   end

!   make_r_pie_JK_direct(J,K,P)
!   ! Make the real coulomb matrix "J" and exchange matrix "K" matrix from a
!   ! symmetric density matrix "P" directly, using the projective integral
!   ! expansions (PIE) method. See Mayer, CPL 332, p. 381-388 (2000), eqn (12).
!   ! (c) Dylan Jayatilaka, Budapest September 2002.
!     J,K,P :: REALMAT
!     S,SS,S_nxn,S_inv,ERI,JJ,KK :: REALMAT*
!     XBXD :: REALMAT4*
!     D,Q :: REALMATVEC*
!     DD  :: REALMATMAT*
!     sh4 :: SHELL4
!     a,b,c,d,sa,sb,sc,sd,n,n1,n2,i,j :: INT
!     at_b,at_d,atom_a,atom_b,atom_c,atom_d :: INT
!     fa,la,fb,lb,fc,lc,fd,ld,fsa,lsa,fsc,lsc,ffa,lfa,ffc,lfc :: INT
!     diatom,n_diatom,fs_diatom,ls_diatom,ff_diatom,lf_diatom :: INTVEC(2)
!     S.create(.n_bf,.n_bf)
!     .get_overlap_matrix(S)
!     D1.create(2)
!     D2.create(2,2)
!     nullify(S_inv); nullify(S_nxn); nullify(SS)
!     atom_b = 0; atom_d = 0
!     J = ZERO
!     K = ZERO
!     do sb = 1,.n_shell
!     do sd = 1,.n_shell
!        if (sb==sd) cycle ! diagonal case below ?
!        fb  = .first_basis_fn_for_shell(sb); lb = .last_basis_fn_for_shell(sb)
!        fd  = .first_basis_fn_for_shell(sd); ld = .last_basis_fn_for_shell(sd)
!        at_b = .atom_for_shell(sb)
!        at_d = .atom_for_shell(sd)
!        ! Make the projectors Q(*), only if needed
!        if (at_b/=atom_b OR at_d/=atom_d) then
!           atom_b = at_b; n1 = .atom(atom_b).n_bf
!           atom_d = at_d; n2 = .atom(atom_d).n_bf
!           diatom = [atom_b,atom_d]
!           n_diatom = [n1,n2]
!           n = n1 + n2
!           DD.destroy_ptr_part; D.destroy_ptr_part; Q.destroy_ptr_part
!           Q(1).element.create(.n_bf,n1); Q(2).element.create(.n_bf,n2)
!           S_inv.create(n,n)
!           S_nxn.create(n,n)
!           .AO_subspace_set(S_nxn,S,diatom,diatom)
!           S_inv.to_inverse_of(S_nxn)
!           S_nxn.destroy
!           SS.create(.n_bf,n)
!           .AO_subspace_set(SS,S,col_atom=diatom)
!           Q(1).element = matmul(SS,S_inv(:,   1:n1))
!           Q(2).element = matmul(SS,S_inv(:,n2+1:  ))
!           SS.destroy
!           S_inv.destroy
!           do i = 1,2
!              D(i).element.create(.n_bf,n_diatom(i))
!              D(i).element = matmul(P,Q(i).element)
!           end
!           do i = 1,2
!           do j = 1,2
!              DD(i,j).element.create(n_diatom(i),n_diatom(j))
!              DD(i,j).element = matmul(transpose(Q(i).element),D(j).element)
!           end
!           end
!           do i = 1,2
!              fs_diatom(i) = .first_shell_for_atom(diatom(i))
!              ls_diatom(i) =  .last_shell_for_atom(diatom(i))
!              ff_diatom(i) = .first_basis_fn_for_atom(diatom(i))
!              lf_diatom(i) =  .last_basis_fn_for_atom(diatom(i))
!           end
!        end
!        ! Loop over diatom subspaces on centers A & C
!        do atom_a = 1,2
!        do atom_c = 1,2
!           fsa = fs_diatom(atom_a); lsa = ls_diatom(atom_a)
!           fsc = fs_diatom(atom_c); lsc = ls_diatom(atom_c)
!           ffa = ff_diatom(atom_a); lfa = lf_diatom(atom_a)
!           ffc = ff_diatom(atom_c); lfc = lf_diatom(atom_c)
!           JJ.create(ffa:lfa,fb:lb);   JJ = ZERO
!           KK.create(ffa:lfa,ffc:lfc); KK = ZERO
!           do sa = fsa,lsa
!           do sc = fsc,lsc
!              .get_shell_quartet(sh4,sa,sb,sc,sd) ! B B B D
!              XBXD.create(sh4.a.n_comp,sh4.b.n_comp,sh4.c.n_comp,sh4.d.n_comp)
!              sh4.get_ERI(XBXD)
!              sh4.destroy_ptr_part
!              fa = .first_basis_fn_for_shell(sa); la = .last_basis_fn_for_shell(sa)
!              fc = .first_basis_fn_for_shell(sc); lc = .last_basis_fn_for_shell(sc)
!              JJ = ZERO
!              do a = fa,la
!              do b = fb,lb
!                 ERI => XBXD(a,b,:,:)
!                 JJ(a,b) = JJ(a,b) + ERI.trace_product_with(D1(atom_c).element(fd:ld,ffc:lfc))
!              end
!              end
!              J = J + matmul(Q(atom_a).element,JJ)
!              KK = ZERO
!              do a = fa,la
!              do c = fc,lc
!                 ERI => XBXD(a,:,c,:)
!                 KK(a,c) = KK(a,c) + ERI.trace_product_with(P(fd:ld,fb:lb))
!              end
!              end
!              K = K + matmul(Q(atom_a).element,matmul(KK,transpose(Q(atom_c).element)))
!              do b = fb,lb
!              do d = fd,ld
!                 ERI => XBXD(:,b,:,d)
!                 K(b,d) = K(b,d) + &
!                    ERI.trace_product_with(DD(atom_c,atom_a).element(ffc:lfc,ffa:lfa))
!              end
!              end
!              XBXD.destroy
!           end
!           end
!           KK.destroy
!           JJ.destroy
!        end
!        end
!     end
!     end
!     D2.destroy; D1.destroy
!     S.destroy
!     J.symmetrize
!     K = HALF*K
!   end

!   make_2_center_diatom_ERI_array(v,shell_b,shell_d)
!   ! Calculate the 4 dimensional diatom electron repulsion integral array "v".
!   ! v(a,b,c,d) = [ab|cd] is a restricted set of the two electron integrals,
!   ! with "b" and "d" being the indices of basis functions belonging to shells
!   ! "shell_b" and "shell_d" respectively, while "a" and "c" the indices of
!   ! basis functions belonging to *all* shells on either atom B or D, which are
!   ! the atoms on which shells "shell_b" and "shell_d" are found.
!     v :: REALMAT4
!     shell_b,shell_d :: INT
!     a,aa,c,cc,fa,la,fb,lb,fc,lc,fd,ld :: INT
!     sh :: SHELL2
!     shell_atom :: INTVEC(2)
!     sh4 :: SHELL4
!     ERI :: REALMAT4*
!   ENSURE(.bases_are_all_resolved, "no basis set")
!   ENSURE(v.dim2==.atom(.atom_for_shell(shell_b)).n_bf,"wrong dim 3 for v")
!   ENSURE(v.dim4==.atom(.atom_for_shell(shell_d)).n_bf,"wrong dim 4 for v")
!     sb = shell_b; b = .atom_for_shell(sb)
!     sd = shell_d; d = .atom_for_shell(sd)
!     shell_atom(1:2) = [b,d]
!     fb = .first_shell_for_atom(b)
!     lb =  .last_shell_for_atom(b)
!     fd = .first_shell_for_atom(d)
!     ld =  .last_shell_for_atom(d)
!     v = ZERO
!     do aa = 1,2
!        a = shell_atom(aa)
!        fa = .first_shell_for_atom(a)
!        la =  .last_shell_for_atom(a)
!        do sa = fa,la
!           do cc = 1,2
!              c = shell_atom(cc)
!              fc = .first_shell_for_atom(c)
!              lc =  .last_shell_for_atom(c)
!              do sc = fb,lb
!                 .get_shell_quartet(sh4,sa,sb,sc,sd)
!                 if (sh4.skip_ERI(.scfdata.eri_limit)) then
!                    sh4.destroy_ptr_part
!                    cycle
!                 end
!                 ERI.create(sh4.a.n_comp,sh4.b.n_comp,sh4.c.n_comp,sh4.d.n_comp)
!                 sh4.get_ERI(ERI)
!                 v(fa:la,fb:lb,fc:lc,fd:ld) = ERI
!              end
!           end
!        end
!     end
!   end

!  **************************
!  Crystal structure routines
!  **************************

   make_ft(res,dens,k_pts)
   ! Fourier transform of a density described by AO density matrix dens
   ! evaluated at a series of reciprocal space points k_pts
   ! Size of res is [size(k_pts,1)]
      dens :: REALMAT, target
      k_pts :: REALMAT, IN
      res :: CPXVEC, OUT
      k_max,k,fa,fb,la,lb,q,atom_a,atom_b,start,step :: INT
      sh :: SHELL2
      ft_ab :: CPXMAT3*
      dens_ba :: REALMAT*
      cutoff :: REAL
      ENSURE(.basis_info_made, "no basis info")
      ENSURE(.atom.created,  "no atom list")
      k_max = size(k_pts,1)
      res = ZERO
      cutoff = TOL(10) / .n_shell_pairs
      start = 1 + tonto_parallel.this_proc
      step = tonto_parallel.n_proc
      do q=start,.n_shell_pairs,step
         .get_shell_pair(sh,q,fa,la,fb,lb,atom_a,atom_b)
         if (sh.skip_ft(cutoff)) then
           sh.destroy_ptr_part
           cycle
         end
         ft_ab.create(k_max,sh.a.n_comp,sh.b.n_comp)
         .make_ft_pair(ft_ab,k_pts,sh,atom_a,atom_b)
!         dens_ba => dens(fb:lb,fa:la) ! P^dagger
         dens_ba => dens(fa:la,fb:lb)
         if (fa/=fb) then ! count off-diagonals twice.
           do k = 1,k_max
!              res(k) = res(k) + TWO*ft_ab(k,:,:).trace_of_product(dens_ba)
              res(k) = res(k) + TWO*sum(ft_ab(k,:,:)*dens_ba(:,:))
           end
         else
           do k = 1,k_max
!              res(k) = res(k) + ft_ab(k,:,:).trace_of_product(dens_ba)
              res(k) = res(k) + sum(ft_ab(k,:,:)*dens_ba(:,:))
           end
         end
         ft_ab.destroy
         sh.destroy_ptr_part
      end
      tonto_parallel.sum_vectors(res)
   end

   make_ft(res,dens,k_pts)
   ! Fourier transform of a density described by AO density matrix dens
   ! evaluated at a series of reciprocal space points k_pts
   ! Size of res is [size(k_pts,1)].
      dens :: CPXMAT, target
      k_pts :: REALMAT
      res :: CPXVEC
      k_max,q,k,fa,la,fb,lb,atom_a,atom_b :: INT
      sh :: SHELL2
      ft_ab :: CPXMAT3*
      dens_ba :: CPXMAT*
      cutoff :: REAL
      ENSURE(.basis_info_made, "no basis info")
      ENSURE(.atom.created,  "no atom list")
      k_max = size(k_pts,1)
      res = ZERO
      cutoff = TOL(10) / .n_shell_pairs
      do q = 1,.n_shell_pairs
         .get_shell_pair(sh,q,fa,la,fb,lb,atom_a,atom_b)
         if (sh.skip_ft(cutoff)) then
           sh.destroy_ptr_part
           cycle
         end
         ft_ab.create(k_max,sh.a.n_comp,sh.b.n_comp)
         .make_ft_pair(ft_ab,k_pts,sh,atom_a,atom_b)
         dens_ba => dens(fb:lb,fa:la)
         if (fa/=fb) then ! count off-diagonals twice.
           do k = 1,k_max
              res(k) = res(k) + TWO*ft_ab(k,:,:).trace_of_product(dens_ba)
           end
         else
           do k = 1,k_max
              res(k) = res(k) + ft_ab(k,:,:).trace_of_product(dens_ba)
           end
         end
         ft_ab.destroy
         sh.destroy_ptr_part
      end
   end

   make_ft_deriv_U(res,dens,k_pts)
   ! Fourier transform of a density described by AO density matrix dens
   ! evaluated at a series of reciprocal space points k_pts
   ! Size of res is [k_max,n_atom*6]
     dens :: REALMAT, target
     k_pts :: REALMAT, IN
     res :: CPXMAT, target
     ft_ab2,tmp1,tmp2,tmpa1,tmpa2,tmpa3,tmpa4,tmpa5,tmpa6 :: CPX
     k_max,k,fa,fb,la,lb,q,atom_a,atom_b,basea,baseb :: INT
     delta,g,separation,x,y,z,z2 :: REAL
     diff :: REALVEC(3)
     sh :: SHELL2
     ft_ab :: CPXMAT3*
     dens_ba :: REALMAT*
     cutoff :: REAL
   ENSURE(.basis_info_made, "no basis info")
   ENSURE(.atom.created,  "no atom list")
     k_max = size(k_pts,1)
     res = ZERO
     cutoff = TOL(10) / .n_shell_pairs
     do q = 1, .n_shell_pairs
       .get_shell_pair(sh,q,fa,la,fb,lb,atom_a,atom_b)
       if (sh.skip_ft(cutoff)) then
         sh.destroy_ptr_part
         cycle
       end
       ft_ab.create(k_max,sh.a.n_comp,sh.b.n_comp)
       .make_ft_pair(ft_ab,k_pts,sh,atom_a,atom_b)
       dens_ba => dens(fb:lb,fa:la)
       if (fa/=fb) ft_ab = TWO * ft_ab ! count off-diagonals twice.
       diff = .atom(atom_a).pos-.atom(atom_b).pos
       separation = diff.norm
       g=HALF
       if (separation > 2.5d0) g=QUARTER
       g = g * (-HALF) ! k_pts is 2pi * Bh so formula was divided by 4pi^2.

       basea = (atom_a-1) * 6
       if (atom_a == atom_b) then
         delta = TWO * g
         do k = 1,k_max
           ft_ab2 = ft_ab(k,:,:).trace_of_product(dens_ba) * delta
           x = k_pts(k,1)           ! SBh_x
           y = k_pts(k,2)           ! SBh_y
           z = k_pts(k,3)           ! SBh_z
           tmp1 = ft_ab2 * x
           tmp2 = ft_ab2 * y
           z2 = TWO * z
           res(basea+1,k) = res(basea+1,k) + tmp1 * x
           res(basea+2,k) = res(basea+2,k) + tmp1 * y * TWO
           res(basea+3,k) = res(basea+3,k) + tmp1 * z2
           res(basea+4,k) = res(basea+4,k) + tmp2 * y
           res(basea+5,k) = res(basea+5,k) + tmp2 * z2
           res(basea+6,k) = res(basea+6,k) + ft_ab2 * z * z
         end
       else
         baseb = (atom_b-1) * 6
         do k = 1,k_max
           ft_ab2 = ft_ab(k,:,:).trace_of_product(dens_ba) * g
           x = k_pts(k,1)           ! SBh_x
           y = k_pts(k,2)           ! SBh_y
           z = k_pts(k,3)           ! SBh_z
           tmp1 = ft_ab2 * x
           tmp2 = ft_ab2 * y
           z2 = TWO * z
           tmpa1 = tmp1 * x
           tmpa2 = tmp1 * y * TWO
           tmpa3 = tmp1 * z2
           tmpa4 = tmp2 * y
           tmpa5 = tmp2 * z2
           tmpa6 = ft_ab2 * z * z
           res(basea+1,k) = res(basea+1,k) + tmpa1
           res(basea+2,k) = res(basea+2,k) + tmpa2
           res(basea+3,k) = res(basea+3,k) + tmpa3
           res(basea+4,k) = res(basea+4,k) + tmpa4
           res(basea+5,k) = res(basea+5,k) + tmpa5
           res(basea+6,k) = res(basea+6,k) + tmpa6
           res(baseb+1,k) = res(baseb+1,k) + tmpa1
           res(baseb+2,k) = res(baseb+2,k) + tmpa2
           res(baseb+3,k) = res(baseb+3,k) + tmpa3
           res(baseb+4,k) = res(baseb+4,k) + tmpa4
           res(baseb+5,k) = res(baseb+5,k) + tmpa5
           res(baseb+6,k) = res(baseb+6,k) + tmpa6
         end
       end
       ft_ab.destroy
       sh.destroy_ptr_part
     end
   end

   make_ft_deriv_U(res,dens,k_pts)
   ! Fourier transform of a density described by AO density matrix dens
   ! evaluated at a series of reciprocal space points k_pts
   ! Size of res is [k_max,n_atom*6]
     dens :: CPXMAT, target
     k_pts :: REALMAT, IN
     res :: CPXMAT, target
     ft_ab2,tmp1,tmp2 :: CPX
     k_max,k,fa,fb,la,lb,q,atom_a,atom_b,basea,baseb :: INT
     delta,g,separation,x,y,z :: REAL
     diff :: REALVEC(3)
     sh :: SHELL2
     ft_ab :: CPXMAT3*
     dens_ba :: CPXMAT*
     cutoff :: REAL
   ENSURE(.basis_info_made, "no basis info")
   ENSURE(.atom.created,  "no atom list")
     k_max = size(k_pts,1)
     res = ZERO
     cutoff = TOL(10) / .n_shell_pairs
     do q = 1, .n_shell_pairs
       .get_shell_pair(sh,q,fa,la,fb,lb,atom_a,atom_b)
       if (sh.skip_ft(cutoff)) then
         sh.destroy_ptr_part
         cycle
       end
       ft_ab.create(k_max,sh.a.n_comp,sh.b.n_comp)
       .make_ft_pair(ft_ab,k_pts,sh,atom_a,atom_b)
       dens_ba => dens(fb:lb,fa:la)
       if (fa/=fb) ft_ab = TWO * ft_ab ! count off-diagonals twice.

       diff = .atom(atom_a).pos-.atom(atom_b).pos
       separation = diff.norm
       g=HALF
       if (separation > 2.5d0) g=QUARTER
       g = g * (-HALF) ! k_pts is 2pi * Bh so formula was divided by 4pi^2.

       basea = (atom_a-1) * 6
       if (atom_a == atom_b) then
         delta = TWO * g
         do k = 1,k_max
           ft_ab2 = ft_ab(k,:,:).trace_of_product(dens_ba) * delta
           x = k_pts(k,1)           ! SBh_x
           y = k_pts(k,2)           ! SBh_y
           z = k_pts(k,3)           ! SBh_z
           tmp1 = ft_ab2 * x
           tmp2 = ft_ab2 * y
           res(basea+1,k) = res(basea+1,k) + tmp1 * x
           res(basea+2,k) = res(basea+2,k) + tmp1 * y
           res(basea+3,k) = res(basea+3,k) + tmp1 * z
           res(basea+4,k) = res(basea+4,k) + tmp2 * y
           res(basea+5,k) = res(basea+5,k) + tmp2 * z
           res(basea+6,k) = res(basea+6,k) + ft_ab2 * z * z
         end
       else
         baseb = (atom_b-1) * 6
         do k = 1,k_max
           ft_ab2 = ft_ab(k,:,:).trace_of_product(dens_ba) * g
           x = k_pts(k,1)           ! SBh_x
           y = k_pts(k,2)           ! SBh_y
           z = k_pts(k,3)           ! SBh_z
           tmp1 = ft_ab2 * x
           tmp2 = ft_ab2 * y
           res(basea+1,k) = res(basea+1,k) + tmp1 * x
           res(basea+2,k) = res(basea+2,k) + tmp1 * y
           res(basea+3,k) = res(basea+3,k) + tmp1 * z
           res(basea+4,k) = res(basea+4,k) + tmp2 * y
           res(basea+5,k) = res(basea+5,k) + tmp2 * z
           res(basea+6,k) = res(basea+6,k) + ft_ab2 * z * z
           res(baseb+1,k) = res(baseb+1,k) + tmp1 * x
           res(baseb+2,k) = res(baseb+2,k) + tmp1 * y
           res(baseb+3,k) = res(baseb+3,k) + tmp1 * z
           res(baseb+4,k) = res(baseb+4,k) + tmp2 * y
           res(baseb+5,k) = res(baseb+5,k) + tmp2 * z
           res(baseb+6,k) = res(baseb+6,k) + ft_ab2 * z * z
         end
       end
       ft_ab.destroy
       sh.destroy_ptr_part
     end
   end

   make_ft_pair(ft_ab,k_pts,sh,atom_a,atom_b)
   ! Make_ft for one pair of gaussians.
   ! Includes partitioning and thermal smearing.
      ft_ab :: CPXMAT3
      k_pts :: REALMAT, IN
      sh :: SHELL2, IN
      atom_a,atom_b :: INT, IN
      is_zero :: BIN
       t :: REALMAT3*
       p :: REALMAT*
      k_max :: INT
   ENSURE(.crystal.created,"no crystal data")
      k_max = size(k_pts,1)
      p.create(sh.a.n_cc,sh.b.n_cc)
      .make_partition_factors(p,sh,atom_a,atom_b,is_zero)
      if (NOT is_zero) then
        t.create(k_max,sh.a.n_cc,sh.b.n_cc)
        .thermal_smearing_correction(t,k_pts,atom_a,atom_b,sh)
        sh.make_ft(ft_ab,k_pts,t,p)
        t.destroy
      else
        ft_ab = ZERO
      end
      p.destroy
   end

   make_partition_factors(p,sh,atom_a,atom_b,is_zero)
   ! Make the partitition factors "p" for a particular thermal smearing "model",
   ! for a given "sh" pair with atom centres "atom_a" and "atom_b".
       p :: REALMAT
      sh :: SHELL2, IN
      atom_a,atom_b :: INT, IN
      is_zero :: BIN, OUT, optional
      ra,rb,fa,fb :: REAL
   ENSURE(.crystal.created,"no crystal data")
      ra = .crystal.repetition_factor(atom_a)
      rb = .crystal.repetition_factor(atom_b)
      if (present(is_zero)) then
        if (ra<1 AND rb<1) then
          is_zero = TRUE
          return
        else
          is_zero = FALSE
        end
      end
      if (ra<1) then; fa = ZERO
      else;           fa = ONE/ra
      end
      if (rb<1) then; fb = ZERO
      else;           fb = ONE/rb
      end
      select case (trim(.crystal.partition_model))
         case (" ","none")
            p = ONE
         case ("mulliken")
            p = HALF * (fa + fb)
         case ("gaussian")
            sh.make_gaussian_partition(p,fa,fb)
         case default
            DIE("unknown model, "//trim(.crystal.partition_model))
      end
   end

   thermal_smearing_correction(res,k_pts,a,b,sh)
   ! Makes the thermal smearing correction term.  Note that res
   ! is done over the contraction coefficients.
   ! Dimensions of "res" are [k_max,.a.n_cc,.b.n_cc].
     res :: REALMAT3, OUT
     k_pts :: REALMAT, IN
     a,b :: INT, IN
     sh :: SHELL2, IN
     Ua,Ub,Uab :: REALMAT(3,3)
     S,US :: REALVEC(3)
     k_max,k :: INT
     separation,bondlength,Ta,Tb,g :: REAL
     diff :: REALVEC(3)
     k_max = size(k_pts,1)
     select case (trim(.crystal.thermal_smearing_model))
       case (" ","none")
         res = ONE
       case ("coppens") ! tf=HALF[exp(-(1/2)S(Ua)S)+exp(-(1/2)S(Ub)S)]
         Ua = -HALF * .atom(a).thermal_tensor
         Ub = -HALF * .atom(b).thermal_tensor
         do k = 1,k_max
            S = k_pts(k,:)
            US = matmul(Ua,S)
            Ta = dot_product(S,US)
            US = matmul(Ub,S)
            Tb = dot_product(S,US)
            res(k,:,:) = HALF*(exp(Ta)+exp(Tb))
         end
       case ("stewart") ! tf=exp[-HALF Sg(Ua+Ub)S], g=1/2,1/4]
         bondlength=2.5
         Ua = .atom(a).thermal_tensor
         Ub = .atom(b).thermal_tensor
         Uab = Ua + Ub
         diff = .atom(a).pos-.atom(b).pos
         separation = diff.norm
         g=HALF
         if (separation > bondlength) g=QUARTER
         Uab = -HALF * g * Uab     ! -HALF g (Ua+Ub)
         do k = 1,k_max
            S = k_pts(k,:)
            US = matmul(Uab,S)
            Ta = dot_product(S,US)
            res(k,:,:) = exp(Ta)
         end
       case ("tanaka") ! tf=exp[-HALF S (Ua*alpha + Ub*beta)/gamma S]
         Ua = .atom(a).thermal_tensor
         Ub = .atom(b).thermal_tensor
         sh.make_tanaka_thermal_smearing(res,k_pts,Ua,Ub)
       case default
         DIE("unknown model, "//trim(.crystal.thermal_smearing_model))
     end
   end

   ft_thermally_smear(ft_ab,k_pts,a,b)
   ! Thermally smear the fourier transform integrals "ft_ab" evaluated
   ! on "k_pts" for shell pair (ab) centered on atoms "a" and "b" .
     a,b :: INT
     k_pts :: REALMAT
     ft_ab :: CPXMAT3
     Ua,Ub,Uab :: REALMAT(3,3)
     S,US,diff :: REALVEC(3)
     separation,bondlength,Ta,Tb,g :: REAL
     k,k_max :: INT
     k_max = size(k_pts,1)
     select case (trim(.crystal.thermal_smearing_model))
       case (" ","none")
       case ("coppens") ! tf=HALF[exp(-(1/2)S(Ua)S)+exp(-(1/2)S(Ub)S)]
         Ua = -HALF * .atom(a).thermal_tensor
         Ub = -HALF * .atom(b).thermal_tensor
         do k = 1,k_max
            S = k_pts(k,:)
            US = matmul(Ua,S)
            Ta = dot_product(S,US)
            US = matmul(Ub,S)
            Tb = dot_product(S,US)
            ft_ab(k,:,:) = ft_ab(k,:,:) * HALF*(exp(Ta)+exp(Tb))
         end
       case ("stewart") ! tf=exp[-HALF Sg(Ua+Ub)S], g=1/2,1/4
         bondlength=2.5
         Ua = .atom(a).thermal_tensor
         Ub = .atom(b).thermal_tensor
         Uab = Ua + Ub
         diff = .atom(a).pos-.atom(b).pos
         separation = diff.norm
         g=HALF
         if (separation > bondlength) g=QUARTER
         Uab = -HALF * g * Uab     ! -HALF g (Ua+Ub)
         do k = 1,k_max
            S = k_pts(k,:)
            US = matmul(Uab,S)
            Ta = dot_product(S,US)
            ft_ab(k,:,:) = exp(Ta)*ft_ab(k,:,:)
         end
       case ("tanaka") ! tf=exp[-HALF S (Ua*alpha + Ub*beta)/gamma S]
         DIE("cannot thermally smear at contracted level.")
       case default
         DIE("unknown thermal smearing model, "//trim(.crystal.thermal_smearing_model))
     end
   end

   add_dispersion_correction(ft,k_pts)
   ! Adds the dispersion correction to "ft".
     k_pts :: REALMAT
     ft :: CPXVEC
     disp,phase :: CPX
     pos :: REALVEC(3)
     U,seitz :: REALMAT(3,3)
     Bh,UBh :: REALVEC(3)
     phases :: CPXVEC*
     x,y,z,T :: REAL
     a,symop,n,k,k_max :: INT
     ENSURE(.crystal.created,"no crystal")

     if (.crystal.correct_dispersion) then
       select case (trim(.crystal.thermal_smearing_model))
         case (" ")
           phases.create(size(k_pts))
           do n=1,.crystal.n_fragment_cell_atoms
             a = .crystal.atom_for_fragment_cell_atom(n)
             disp = .atom(a).dispersion_correction(.crystal.wavelength)
             pos = .crystal.unit_cell_geometry(:,n)
             x = pos(1); y = pos(2); z = pos(3)
             ft(:) = ft(:) + disp * exp(cmplx(ZERO,k_pts(:,1)*x + k_pts(:,2)*y + k_pts(:,3)*z,kind=CPX_KIND))
           end
           phases.destroy

         case default ! thermal smearing methods collapse to be the same
                      ! when dealing with one atom.

           k_max = size(k_pts,1)
           do n=1,.crystal.n_fragment_cell_atoms
             a = .crystal.atom_for_fragment_cell_atom(n)
             symop = .crystal.symop_for_unit_cell_atom(n)
             seitz = .crystal.spacegroup.seitz(1:3,1:3,symop)

             U = .atom(a).thermal_tensor
             ! to crystal coordinates
             U.change_basis(.crystal.unitcell.reciprocal_U_matrix)
             ! apply seitz operation
             U.change_basis(transpose(seitz))
             ! to cartesian coordinates
             U.change_basis(.crystal.unitcell.direct_U_matrix)

             disp = .atom(a).dispersion_correction(.crystal.wavelength)
             U = -HALF * U
             pos = .crystal.unit_cell_geometry(:,n)
             x = pos(1); y = pos(2); z = pos(3)

             do k = 1,k_max
               Bh = k_pts(k,:)
               UBh = matmul(U,Bh)
               T = (dot_product(Bh,UBh))
               phase = exp(cmplx(T,Bh(1)*x + Bh(2)*y + Bh(3)*z,kind=CPX_KIND))
               ft(k) = ft(k) + disp * phase
             end
           end
       end
     end
   end

   get_ft_ints
   ! Get the fourier transform of the overlap integrals.
   ! If the archive file exists, read it; otherwise make it.
      arch :: ARCHIVE
      arch.set(.name,"ft_ints")
      if (NOT arch.exists) .make_ft_ints
   end

   make_ft_ints
   ! Make the fourier transform of the overlap integrals on an archive file
      arch :: ARCHIVE
      k_pts :: REALMAT*
      q,fa,la,fb,lb,atom_a,atom_b :: INT
      sh :: SHELL2*
      ft_ab_eq,ft_ab :: CPXMAT3*
   ENSURE(.crystal.created, "no crystal")
      arch.set(.name,"ft_ints")
      arch.open(for="write-only",buffered=TRUE,type="cpx")
      k_pts.create(.crystal.n_unique_SF_k_pts,3)
      .crystal.make_unique_SF_k_pts(k_pts)
      sh.create
      do q = 1,.n_shell_pairs
         .get_shell_pair(sh,q,fa,la,fb,lb,atom_a,atom_b)
         ft_ab_eq.create(size(k_pts,1),sh.a.n_comp,sh.b.n_comp)
         ft_ab.create(.crystal.n_refl,sh.a.n_comp,sh.b.n_comp)
         .make_ft_pair(ft_ab_eq,k_pts,sh,atom_a,atom_b)
         .crystal.sum_ft_ints(ft_ab,ft_ab_eq)
         arch.file.write(ft_ab)
         ft_ab.destroy
         ft_ab_eq.destroy
         sh.destroy_ptr_part
      end
      sh.destroy
      k_pts.destroy
      arch.close
   end

   make_structure_factors
   ! Make the structure factors for this molecule.
      sf_eq,Fc :: CPXVEC*
      k_pts :: REALMAT*
      orb_kind :: STR
      complex :: BIN
      ENSURE(.crystal.created, "no crystal")
      ENSURE(.crystal.reflection_data_exists, "no reflection data")
      ENSURE(.density_matrix.created, "no density matrix")
      Fc.create(.crystal.n_refl)
      k_pts.create(.crystal.n_unique_SF_k_pts,3)
      .crystal.make_unique_SF_k_pts(k_pts)
      sf_eq.create(size(k_pts,1))
      .make_ao_density_matrix
      orb_kind = .density_matrix.spinorbital_kind
      complex = orb_kind.includes("complex")
      if (complex) then
        .make_ft(sf_eq,.density_matrix.restricted_complex,k_pts)
      else
        .make_ft(sf_eq,.density_matrix.restricted,k_pts)
      end
      k_pts.destroy
      .crystal.sum_unique_sf(Fc,sf_eq)
      if (.crystal.correct_dispersion) then
        k_pts.create(.crystal.n_refl,3)
        .crystal.make_k_pts(k_pts)
        .add_dispersion_correction(Fc,k_pts)
        k_pts.destroy
      end
      sf_eq.destroy
      .crystal.set_F_calc(Fc)
      Fc.destroy
      .crystal.make_F_predicted
   end

   make_sz_structure_factors
   ! Make the structure factors for this molecule.
      sf_eq,Fc :: CPXVEC*
      k_pts :: REALMAT*
      arch :: ARCHIVE
      orb_kind :: STR
      complex :: BIN
      ENSURE(.crystal.created, "no crystal")
      ENSURE(.crystal.reflection_data_exists, "no reflection data")
      Fc.create(.crystal.n_refl)
      k_pts.create(.crystal.n_unique_SF_k_pts,3)
      .crystal.make_unique_SF_k_pts(k_pts)
      sf_eq.create(size(k_pts,1))
      .make_ao_sz_density_matrix ! make S_z density matrix
      orb_kind = .density_matrix.spinorbital_kind
      complex = orb_kind.includes("complex")
      if (complex) then; .make_ft(sf_eq,.density_matrix.restricted_complex,k_pts)
      else;              .make_ft(sf_eq,.density_matrix.restricted,k_pts)
      end
      .crystal.sum_unique_sf(Fc,sf_eq)
      .crystal.set_F_calc(Fc)
      ! Now destroy the S_z density matrix
      if (complex) then; .density_matrix.destroy("restricted_complex")
      else;              .density_matrix.destroy("restricted")
      end
      sf_eq.destroy
      k_pts.destroy
      .crystal.make_F_predicted
      arch.set(.name,"sz_structure_factors")
      arch.write(Fc)
      Fc.destroy
   end

   make_PND_scalar_magnetic_sf
   ! Make the PND scalar magnetic structure factors and assign them
   ! To the crystal objects structure factors for analysis
      FM_s, FM_l, FM_r, Fc :: CPXVEC*
      n_refl :: INT
      arch :: ARCHIVE
   ENSURE(.crystal.created, "no crystal")
   ENSURE(.crystal.reflection_data_exists, "no reflection data")
      n_refl = .crystal.n_refl
      Fc.create(n_refl)
      ! Spin contribution
      .make_PND_spin_sf
      FM_s.create(n_refl)
      arch.set(.name,"PND_spin_sf")
      arch.read(FM_s)
      ! Orbital contribution
      .make_PND_nabla_sf
      FM_l.create(n_refl)
      arch.set(.name,"PND_nabla_sf")
      arch.read(FM_l)
      ! Diamagnetic contribution
    ! .make_PND_r_sf
    ! FM_r.create(n_refl)
    ! arch.set(.name,"PND_r_sf")
    ! arch.read(FM_r)
      ! Make F_calc
      Fc = FM_s + FM_l ! + FM_r
      arch.set(.name,"PND_scalar_magnetic_sf")
      arch.write(Fc)
      .crystal.set_F_calc(Fc)
      .crystal.make_F_predicted
      FM_r.destroy
      FM_l.destroy
      FM_s.destroy
      Fc.destroy
   end

   make_PND_spin_sf
   ! Make the PND structure factors
      orb_kind :: STR
   ENSURE(.density_matrix.created, "no density")
      orb_kind = .density_matrix.spinorbital_kind
      select case (orb_kind)
         case ("unrestricted");    .make_u_PND_spin_sf
         case ("general_complex"); .make_gc_PND_spin_sf
         case default
            DIE("not implemented for "//orb_kind.trim)
      end
   end

   make_u_PND_spin_sf
   ! Make the scalar spin magnetic structure factors assuming an applied field
   ! in the z direction, and assuming an unrestricted density matrix exists.
      arch :: ARCHIVE
      fac,ans :: REAL
      d_aa,d_bb :: REALMAT*
      ft_ab :: CPXMAT4*
      FM :: CPXVEC*
      sh :: SHELL2*
      k_max,i,q,fa,la,fb,lb :: INT
   ENSURE(.crystal.created, "no crystal")
   ENSURE(.density_matrix.created, "no density")
   ENSURE(.density_matrix.alpha.created, "no density")
      arch.set(.name,"PND_ft_spin_ints")
      if (NOT arch.exists) .make_PND_ft_spin_ints
      arch.open(for="read-only",type="real")
      k_max = .crystal.n_refl
      FM.create(k_max)
      FM = ZERO
      sh.create
      do q = 1,.n_shell_pairs
         .get_shell_pair(sh,q,fa,la,fb,lb)
         ft_ab.create(k_max,sh.a.n_comp,sh.b.n_comp,3)
         arch.file.read(ft_ab)
         d_aa => .density_matrix.alpha(fb:lb,fa:la)
         d_bb => .density_matrix.beta( fb:lb,fa:la)
         fac = TWO
         if (fa==fb) fac=ONE
         do i = 1,k_max
            ans = ans +    ft_ab(i,:,:,3).trace_of_product(d_aa)
            ans = ans -    ft_ab(i,:,:,3).trace_of_product(d_bb)
            FM(i) = FM(i) + fac*ans
         end
         ft_ab.destroy
         sh.destroy_ptr_part
      end
      sh.destroy
      arch.close
      arch.set(.name,"PND_spin_sf")
      arch.write(FM)
      FM.destroy
   end

   make_gc_PND_spin_sf
   ! Make the scalar spin magnetic structure factors assuming an applied field
   ! in the z direction, and assuming a general complex denisty matrix exists
      arch :: ARCHIVE
      fac,ans :: REAL
      d_aa,d_bb,d_ba :: CPXMAT*
      ft_ab :: CPXMAT4*
      FM :: CPXVEC*
      ci :: CPX
      sh :: SHELL2*
      k_max,i,q,fa,la,fb,lb :: INT
   ENSURE(.crystal.created, "no crystal")
   ENSURE(.density_matrix.created, "no density")
   ENSURE(.density_matrix.general_complex.created, "no density")
      arch.set(.name,"PND_ft_spin_ints")
      if (NOT arch.exists) .make_PND_ft_spin_ints
      arch.open(for="read-only",type="real")
      ci = (ZERO,ONE)
      k_max = .crystal.n_refl
      FM.create(k_max)
      FM = ZERO
      sh.create
      do q = 1,.n_shell_pairs
         .get_shell_pair(sh,q,fa,la,fb,lb)
         ft_ab.create(k_max,sh.a.n_comp,sh.b.n_comp,3)
         arch.file.read(ft_ab)
         d_aa => .density_matrix.general_complex(      fb:      lb,      fa:      la)
         d_bb => .density_matrix.general_complex(.n_bf+fb:.n_bf+lb,.n_bf+fa:.n_bf+la)
         d_ba => .density_matrix.general_complex(.n_bf+fb:.n_bf+lb,      fa:      la)
         fac = TWO
         if (fa==fb) fac=ONE
         do i = 1,k_max
            ans =          ft_ab(i,:,:,1).trace_of_product(d_ba)
            ans = ans - ci*ft_ab(i,:,:,2).trace_of_product(d_ba)
            ans = ans +    ft_ab(i,:,:,3).trace_of_product(d_aa)
            ans = ans -    ft_ab(i,:,:,3).trace_of_product(d_bb)
            FM(i) = FM(i) + fac*ans
         end
         ft_ab.destroy
         sh.destroy_ptr_part
      end
      sh.destroy
      arch.close
      arch.set(.name,"PND_spin_sf")
      arch.write(FM)
      FM.destroy
   end

   get_PND_ft_spin_ints
   ! Get the PND ft spin integrals on disk if they don't already exist
      arch :: ARCHIVE
      arch.set(.name,"PND_ft_spin_ints")
      if (NOT arch.exists) .make_PND_ft_spin_ints
   end

   make_PND_ft_spin_ints
   ! Make the fourier transform of the PND spin integrals on the archive
      arch :: ARCHIVE
      k_pts :: REALMAT*
      sh :: SHELL2*
      ft_ab_eq :: CPXMAT3*
      ft_ab :: CPXMAT4*
      q,fa,la,fb,lb,atom_a,atom_b :: INT
   ENSURE(.crystal.created, "no crystal")
      arch.set(.name,"PND_ft_spin_ints")
      arch.open(for="write-only",type="cpx")
      k_pts.create(.crystal.n_unique_SF_k_pts,3)
      .crystal.make_unique_SF_k_pts(k_pts)
      sh.create
      do q = 1,.n_shell_pairs
         .get_shell_pair(sh,q,fa,la,fb,lb,atom_a,atom_b)
         ft_ab_eq.create(size(k_pts,1),sh.a.n_comp,sh.b.n_comp)
         .make_ft_pair(ft_ab_eq,k_pts,sh,atom_a,atom_b)
         ft_ab.create(.crystal.n_refl,sh.a.n_comp,sh.b.n_comp,3)
         .crystal.sum_PND_spin_ints(ft_ab,ft_ab_eq)
         arch.file.write(ft_ab)
         ft_ab.destroy
         ft_ab_eq.destroy
         sh.destroy_ptr_part
      end
      sh.destroy
      k_pts.destroy
      arch.close
   end

   make_PND_nabla_sf
   ! Make PND nabla structure factors
      orb_kind :: STR
   ENSURE(.density_matrix.created, "no density")
      orb_kind = .density_matrix.spinorbital_kind
      select case (orb_kind)
         case ("general_complex"); .make_gc_PND_nabla_sf
         case default
            DIE("not implemented for "//orb_kind.trim)
      end
   end

   make_gc_PND_nabla_sf
   ! Make the scalar nabla magnetic structure factors assuming an applied field
   ! in the z direction, and assuming a general complex density exists
      arch :: ARCHIVE
      fac :: REAL
      dens :: CPXMAT*
      ft_ab_z :: CPXMAT3*
      FM :: CPXVEC*
      sh :: SHELL2*
      k_max,i,q,fa,la,fb,lb :: INT
   ENSURE(.crystal.created, "no crystal")
   ENSURE(.density_matrix.created, "no density")
   ENSURE(.density_matrix.general_complex.created, "no density")
      arch.set(.name,"PND_ft_nabla_ints")
      if (NOT arch.exists) .make_PND_ft_nabla_ints
      arch.open(for="read-only",type="real")
      k_max = .crystal.n_refl
      FM.create(k_max)
      FM = ZERO
      sh.create
      do q = 1,.n_shell_pairs
         .get_shell_pair(sh,q,fa,la,fb,lb)
         ft_ab_z.create(k_max,sh.a.n_comp,sh.b.n_comp)
         arch.file.read(ft_ab_z)
         dens.create(sh.b.n_comp,sh.a.n_comp)
         dens =        .density_matrix.general_complex(      fb:      lb,      fa:      la)
         dens = dens + .density_matrix.general_complex(.n_bf+fb:.n_bf+lb,.n_bf+fa:.n_bf+la)
         fac = TWO
         if (fa==fb) fac=ONE
         do i = 1,k_max
            FM(i) = FM(i) + fac*ft_ab_z(i,:,:).trace_of_product(dens)
         end
         dens.destroy
         ft_ab_z.destroy
         sh.destroy_ptr_part
      end
      sh.destroy
      arch.close
      arch.set(.name,"PND_nabla_sf")
      arch.write(FM)
      FM.destroy
   end

   get_PND_ft_nabla_ints
   ! Get the PND ft nabla integrals on disk if they don't already exist
      arch :: ARCHIVE
      arch.set(.name,"PND_ft_nabla_ints")
      if (NOT arch.exists) .make_PND_ft_nabla_ints
   end

   make_PND_ft_nabla_ints
   ! Make the fourier transform of the nabla integrals on the archive
      arch :: ARCHIVE
      k_pts :: REALMAT*
      sh :: SHELL2*
      ft_ab_eq :: CPXMAT4*
      ft_ab_z :: CPXMAT3*
      q,fa,la,fb,lb,atom_a,atom_b :: INT
   ENSURE(.crystal.created, "no crystal")
      arch.set(.name,"PND_ft_nabla_ints")
      arch.open(for="write-only",type="cpx")
      k_pts.create(.crystal.n_unique_SF_k_pts,3)
      .crystal.make_unique_SF_k_pts(k_pts)
      sh.create
      do q = 1,.n_shell_pairs
         .get_shell_pair(sh,q,fa,la,fb,lb,atom_a,atom_b)
         ft_ab_eq.create(size(k_pts,1),sh.a.n_comp,sh.b.n_comp,3)
         .make_ft_nabla_pair(ft_ab_eq,k_pts,sh,atom_a,atom_b)
       ! sh.make_ft_nabla(ft_ab_eq,k_pts)
       ! .ft_thermally_smear(ft_ab_eq(:,:,:,1),k_pts,atom_a,atom_b)
       ! .ft_thermally_smear(ft_ab_eq(:,:,:,2),k_pts,atom_a,atom_b)
       ! .ft_thermally_smear(ft_ab_eq(:,:,:,3),k_pts,atom_a,atom_b)
         ft_ab_z.create(.crystal.n_refl,sh.a.n_comp,sh.b.n_comp)
         .crystal.sum_PND_nabla_ints(ft_ab_z,ft_ab_eq)
         arch.file.write(ft_ab_z)
         ft_ab_z.destroy
         ft_ab_eq.destroy
         sh.destroy_ptr_part
      end
      sh.destroy
      k_pts.destroy
      arch.close
   end

   make_ft_nabla_pair(ft_ab,k_pts,sh,atom_a,atom_b)
   ! Make_ft for one pair of gaussians.
   ! Includes partitioning, dispersion and thermal smearing.
      ft_ab :: CPXMAT4
      k_pts :: REALMAT, IN
      sh :: SHELL2, IN
      atom_a,atom_b :: INT, IN
       t :: REALMAT3*
       p :: REALMAT*
      k_max :: INT
   ENSURE(.crystal.created,"no crystal data")
      k_max = size(k_pts,1)
      t.create(k_max,sh.a.n_cc,sh.b.n_cc)
      .thermal_smearing_correction(t,k_pts,atom_a,atom_b,sh)
      p.create(sh.a.n_cc,sh.b.n_cc)
      .make_partition_factors(p,sh,atom_a,atom_b)
      sh.make_ft_nabla(ft_ab,k_pts,t,p)
      p.destroy
      t.destroy
   end

   make_PND_r_sf
   ! Make the scalar dipole magnetic structure factors assuming an applied field
   ! in the z direction
      arch :: ARCHIVE
      fac,ans :: REAL
      d_aa,d_bb :: CPXMAT*
      ft_ab :: CPXMAT4*
      FM :: CPXVEC*
      sh :: SHELL2*
      k_max,i,q,fa,la,fb,lb :: INT
   ENSURE(.crystal.created, "no crystal")
      arch.set(.name,"PND_ft_r_ints")
      if (NOT arch.exists) .make_PND_ft_r_ints
      arch.open(for="read-only",type="real")
      k_max = .crystal.n_refl
      FM.create(k_max)
      FM = ZERO
      sh.create
      do q = 1,.n_shell_pairs
         .get_shell_pair(sh,q,fa,la,fb,lb)
         ft_ab.create(k_max,sh.a.n_comp,sh.b.n_comp,3)
         arch.file.read(ft_ab)
         d_aa => .density_matrix.general_complex(      fb:      lb,      fa:      la)
         d_bb => .density_matrix.general_complex(.n_bf+fb:.n_bf+lb,.n_bf+fa:.n_bf+la)
         fac = TWO
         if (fa==fb) fac=ONE
         do i = 1,k_max
            ans =       fac*ft_ab(i,:,:,3).trace_of_product(d_aa)
            ans = ans + fac*ft_ab(i,:,:,3).trace_of_product(d_bb)
            FM(i) = FM(i) + ans
         end
         ft_ab.destroy
         sh.destroy_ptr_part
      end
      sh.destroy
      arch.close
      arch.set(.name,"PND_r_sf")
      arch.write(FM)
      FM.destroy
   end

   get_PND_ft_r_ints
   ! Get the PND ft r integrals on disk if they don't already exist
      arch :: ARCHIVE
      arch.set(.name,"PND_ft_r_ints")
      if (NOT arch.exists) .make_PND_ft_r_ints
   end

   make_PND_ft_r_ints
   ! Make the fourier transform of the dipole "r" integrals on the archive
      arch :: ARCHIVE
      k_pts :: REALMAT*
      sh :: SHELL2*
      ft_ab_eq, ft_ab :: CPXMAT4*
      q,fa,la,fb,lb,atom_a,atom_b,n_refl :: INT
   ENSURE(.crystal.created, "no crystal")
   ENSURE(.crystal.reflection_data_exists, "no structure factor data")
      n_refl = .crystal.n_refl
      arch.set(.name,"PND_ft_r_ints")
      arch.open(for="write-only",type="cpx")
      k_pts.create(.crystal.n_unique_SF_k_pts,3)
      .crystal.make_unique_SF_k_pts(k_pts)
      sh.create
      do q = 1,.n_shell_pairs
         .get_shell_pair(sh,q,fa,la,fb,lb,atom_a,atom_b)
         ft_ab_eq.create(size(k_pts,1),sh.a.n_comp,sh.b.n_comp,3)
         sh.make_ft_r(ft_ab_eq,k_pts)
         .ft_thermally_smear(ft_ab_eq(:,:,:,1),k_pts,atom_a,atom_b)
         .ft_thermally_smear(ft_ab_eq(:,:,:,2),k_pts,atom_a,atom_b)
         .ft_thermally_smear(ft_ab_eq(:,:,:,3),k_pts,atom_a,atom_b)
         ft_ab.create(n_refl,sh.a.n_comp,sh.b.n_comp,3)
         .crystal.sum_ft_r_ints(ft_ab,ft_ab_eq,.B_field)
         arch.file.write(ft_ab)
         ft_ab.destroy
         ft_ab_eq.destroy
         sh.destroy_ptr_part
      end
      sh.destroy
      k_pts.destroy
      arch.close
   end

   make_PND_fit_ints(ints,lambda)
   ! Make the PND constraint integrals on the archive
      ints :: CPXMAT, target
      lambda :: REAL
      spin_archive,nabla_archive :: ARCHIVE
      Fc,F_exp,F_sigma :: REALVEC*
      ints_aa,ints_bb,ints_ba :: CPXMAT*
      nabla_z :: CPXMAT3*
      spin :: CPXMAT4*
      sh :: SHELL2*
      ci :: CPX
      fac,fac1 :: REAL
      i,q,fa,la,fb,lb,n_bf,n_refl :: INT
      .get_PND_ft_spin_ints
      .get_PND_ft_nabla_ints
      .get_PND_ft_r_ints
      spin_archive.set(.name,"PND_ft_spin_ints")
      nabla_archive.set(.name,"PND_ft_nabla_ints")
    ! r_archive.set(.name,"PND_ft_r_ints")
      spin_archive.open(for="read-only",type="real")
      nabla_archive.open(for="read-only",type="real")
    ! r_archive.open(for="read-only",type="real")
      ci = (ZERO,ONE)
      n_bf   =  .n_bf
      n_refl =  .crystal.n_refl
      Fc.create(n_refl)
      F_exp.create(n_refl)
      F_sigma.create(n_refl)
      Fc = abs(.crystal.F_calc)
      F_exp  = .crystal.F_exp
      F_sigma  = .crystal.F_sigma
      ints = ZERO
      sh.create
      fac1 = TWO*lambda/n_refl
      do q = 1,.n_shell_pairs
         .get_shell_pair(sh,q,fa,la,fb,lb)
         spin.create(n_refl,sh.a.n_comp,sh.b.n_comp,3)
         spin_archive.file.read(spin)
         ints_aa => ints(     fa:     la,     fb:     lb)
         ints_bb => ints(n_bf+fa:n_bf+la,n_bf+fb:n_bf+lb)
         ints_ba => ints(n_bf+fa:n_bf+la,     fb:     lb)
         do i = 1,n_refl
            fac = fac1*(Fc(i) - F_exp(i))/(F_sigma(i)*F_sigma(i))
            ints_ba = ints_ba +    fac*spin(i,:,:,1)
            ints_ba = ints_ba + ci*fac*spin(i,:,:,2)
            ints_aa = ints_aa +    fac*spin(i,:,:,3)
            ints_bb = ints_bb -    fac*spin(i,:,:,3)
         end
         spin.destroy
         nabla_z.create(n_refl,sh.a.n_comp,sh.b.n_comp)
         nabla_archive.file.read(nabla_z)
         do i = 1,n_refl
            fac = fac1*(Fc(i) - F_exp(i))/(F_sigma(i)*F_sigma(i))
            ints_aa = ints_aa + fac*nabla_z(i,:,:)
            ints_bb = ints_bb + fac*nabla_z(i,:,:)
         end
         nabla_z.destroy
       ! r.create(n_refl,sh.a.n_comp,sh.b.n_comp,3)
       ! r_archive.file.read(r)
       ! do i = 1,n_refl
       !    fac = fac1*(Fc(i) - F_exp(i))/(F_sigma(i)*F_sigma(i)*)
       !    ints_aa = ints_aa + fac*r(i,:,:,3)
       !    ints_bb = ints_bb + fac*r(i,:,:,3)
       ! end
       ! r.destroy
         sh.destroy_ptr_part
      end
      sh.destroy
      ints.make_hermitian
    ! r_archive.close
      nabla_archive.close
      spin_archive.close
      F_sigma.destroy
      F_exp.destroy
      Fc.destroy
   end

!  ****************
!  Symmetry methods
!  ****************

   symmetrise(mat,orb_kind)
   ! Symmetrise an opmatrix matrix "mat" of spinorbital_kind "orb_kind" (if
   ! specified)
      mat :: OPMATRIX
      orb_kind :: STR, optional
      itemkind :: STR
      itemkind = mat.spinorbital_kind
      if (present(orb_kind)) itemkind = orb_kind
      select case (itemkind)
         case ("restricted");           .symmetrise_r(mat.restricted)
         case ("unrestricted");         .symmetrise_r(mat.alpha)
                                        .symmetrise_r(mat.beta)
         case ("general");              .symmetrise_r(mat.general.alpha_alpha)
                                        .symmetrise_r(mat.general.beta_beta)
                                        .symmetrise_r(mat.general.alpha_beta)
                                        .symmetrise_r(mat.general.beta_alpha)
         case ("restricted_complex");   .symmetrise_c(mat.restricted_complex)
         case ("unrestricted_complex"); .symmetrise_c(mat.alpha_complex)
                                        .symmetrise_c(mat.beta_complex)
         case ("general_complex");      .symmetrise_c(mat.general_complex.alpha_alpha)
                                        .symmetrise_c(mat.general_complex.beta_beta)
                                        .symmetrise_c(mat.general_complex.alpha_beta)
                                        .symmetrise_c(mat.general_complex.beta_alpha)
         case default;   DIE("unknown kind, "//trim(orb_kind))
      end
   end

   symmetrise_r(mat)
   ! Symmetrise a real restricted basis kind matrix
      mat :: REALMAT
      sym,w,tra,trb :: REALMAT*
      sh :: SHELL*
      n,a,b,i,j,na,nb :: INT
      fa,fb,fi,fj,la,lb,li,lj :: INT
      first,last :: INTVEC*
      image :: INTMAT*
   ENSURE(.basis_info_made, "no basis info")
   ENSURE(.atom.created,"no atom list")
   ENSURE(mat.is_square,"non-square matrix")
   ENSURE(mat.dim1==.n_bf,"incorrectly dimensioned matrix")
      first => .first_basis_fn_for_shell
      last  => .last_basis_fn_for_shell
      image.create(.n_shell, .pointgroup.order)
      .make_image_of_shell(image)
      sym.create(.n_bf,.n_bf)
      sym = ZERO
      sh.create
      do n = 1,.pointgroup.order
         do a = 1,.n_shell
            .get_shell(sh,a); na = sh.n_comp; la = sh.l; sh.destroy_ptr_part
            tra => .pointgroup.xyz_matrix(n,la)
            i = image(a,n)
            fa = first(a);  la = last(a); fi = first(i);  li = last(i)
            do b = 1,.n_shell
               .get_shell(sh,b); nb = sh.n_comp; lb = sh.l; sh.destroy_ptr_part
               trb => .pointgroup.xyz_matrix(n,lb)
               j = image(b,n)
               fb = first(b);  lb = last(b); fj = first(j);  lj = last(j)
               w.create(na,nb)
               w = matmul(tra, mat(fa:la,fb:lb) )
               sym(fi:li,fj:lj) = sym(fi:li,fj:lj) + matmul(w,transpose(trb))
               w.destroy
               trb.destroy
            end
            tra.destroy
         end
      end
      sh.destroy
      mat = sym/.pointgroup.order
      sym.destroy
      image.destroy
   end

   symmetrise_c(mat)
   ! Symmetrise a complex restricted basis kind matrix
      mat :: CPXMAT
      sym,w :: CPXMAT*
      tra,trb :: REALMAT*
      sh :: SHELL*
      n,a,b,i,j,na,nb :: INT
      fa,fb,fi,fj,la,lb,li,lj :: INT
      first,last :: INTVEC*
      image :: INTMAT*
   ENSURE(.basis_info_made, "no basis info")
   ENSURE(.atom.created,"no atom list")
   ENSURE(mat.is_square,"non-square matrix")
   ENSURE(mat.dim1==.n_bf,"incorrectly dimensioned matrix")
      first => .first_basis_fn_for_shell
      last  => .last_basis_fn_for_shell
      image.create(.n_shell, .pointgroup.order)
      .make_image_of_shell(image)
      sym.create(.n_bf,.n_bf)
      sym = ZERO
      sh.create
      do n = 1,.pointgroup.order
         do a = 1,.n_shell
            .get_shell(sh,a); na = sh.n_comp; la = sh.l; sh.destroy_ptr_part
            tra => .pointgroup.xyz_matrix(n,la)
            i = image(a,n)
            fa = first(a);  la = last(a); fi = first(i);  li = last(i)
            do b = 1,.n_shell
               .get_shell(sh,b); nb = sh.n_comp; lb = sh.l; sh.destroy_ptr_part
               trb => .pointgroup.xyz_matrix(n,lb)
               j = image(b,n)
               fb = first(b);  lb = last(b); fj = first(j);  lj = last(j)
               w.create(na,nb)
               w = matmul(tra,mat(fa:la,fb:lb))
               sym(fi:li,fj:lj) = sym(fi:li,fj:lj) + matmul(w,transpose(trb))
               w.destroy
               trb.destroy
            end
            tra.destroy
         end
      end
      sh.destroy
      mat = sym/.pointgroup.order
      sym.destroy
      image.destroy
   end

   make_image_of_shell(res)
   ! Return an array "res(a,n)" which is the image of shell "a" under pointgroup
   ! operation "n"
   ! Size of "res" is [.n_shell,.pointgroup.order]
      res :: INTMAT, OUT
      new_pos :: REALVEC(3)
      n,a,aa,as,new_atom,fs :: INT
   ENSURE(res.dim1==.n_shell, "dimension of matrix incorrect")
   ENSURE(res.dim2==.pointgroup.order, "dimension of matrix incorrect")
      do n = 1,.pointgroup.order
         do a = 1,.n_shell
            aa = .atom_for_shell(a)
            as = .atom_shell_for_shell(a)
            new_pos = matmul(.pointgroup.mat(:,:,n), .atom(aa).pos)
            new_atom = .atom_index_from_pos(new_pos)
            fs = .first_shell_for_atom(new_atom)
            res(a,n) = fs+as-1
         end
      end
   end

!  ************
!  I/O routines
!  ************

   read_name
   ! Read in the name of the molecule. This must always be
   ! the first keyword inputted.
      stdin.read(.name)
   end

   read_multiplicity
   ! Read in the spin multiplicity
      stdin.read(.mult)
   ENSURE(.mult/=0,"cannot have zero multiplicity")
   end

   read_charge
   ! Read in the total molecular charge
      stdin.read(.charge)
   end

   read_E_field
   ! Read in the applied electric E field
      stdin.read(.E_field)
   end

   read_gauge_origin
   ! Read in the gauge origin vector for an applied external magnetic field
      stdin.read(.gauge_origin)
      .delete_gauge_integrals
   end

   read_B_field
   ! Read in the applied magnetic B field
      stdin.read(.B_field)
   end

   read_optimise_thermals
   ! Read in whether to optimise thermal tensor parameters
      stdin.read(.optimise_thermals)
   end

   delete_gauge_integrals
   ! Delete all integral files which depend on the gauge origin.
   ! This is required whenever the gauge origin is changed.
      arch :: ARCHIVE
      arch.set(.name,"Lx_matrix"); arch.delete
      arch.set(.name,"Ly_matrix"); arch.delete
      arch.set(.name,"Lz_matrix"); arch.delete
   end

   read_plotgrid ::: leaky
   ! Read in the plot grid data
      .grid.destroy
      .grid.create(.atom)
      .grid.read_keywords
   end

   read_isosurface ::: leaky
   ! Read in the isosurface data. NOTE: the isosurface has its own plotgrid,
   ! different from that used in normal density plots.
      .isosurface.destroy
      .isosurface.create(.atom)
      !!!!!!!!!!!!!!!!!!!!!!!!!
      .isosurface.read_keywords
      !!!!!!!!!!!!!!!!!!!!!!!!!
   end

   read_CX_surface ::: leaky
   ! Read in special crystalexplorer isosurface data. NOTE: the isosurface has
   ! its own plotgrid, different from that used in normal density plots.
      fragment_atom :: ATOMVEC*
      ENSURE(.cluster.created,"no cluster data, use cluster= keyword")
      ENSURE(.cluster.asymmetric_cell_atom.created,"no cluster asymmetric cell atoms")
      ENSURE(.cluster.crystal.created,"no cluster crystal")
      ENSURE(.atom.created,"no atom list")
      .isosurface.destroy
      .isosurface.create(.atom)
      fragment_atom.create(.cluster.n_fragment_atoms)
      .cluster.make_fragment_atom(fragment_atom)
      .isosurface.grid.set_defaults(fragment_atom) ! Make Hirshfeld for fragment
      .isosurface.kind = "stockholder_density"
      !!!!!!!!!!!!!!!!!!!!!!!!!
      .isosurface.read_keywords
      !!!!!!!!!!!!!!!!!!!!!!!!!
      if (.coppensbasis.created AND .isosurface.use_interpolator) &
         .atom.make_coppens_interpolators
      if (.slaterbasis.created AND .isosurface.use_interpolator) &
         .atom.make_slater_interpolators
   end

   read_dftgrid ::: leaky
   ! Read in the DFT grid data
      if (.dftgrid.destroyed) .dftgrid.create
      .dftgrid.read_keywords
      .dftgrid.archive.set_root_name(.name)
   end

   read_crystal ::: leaky
   ! Read in the crystal data
      WARN_IF(.crystal.created,"crystal data already defined!")
      if (.crystal.destroyed) .crystal.create
      .crystal.read_keywords
      .crystal.update
      if (associated(.atom)) then
         .resolve_axis_system
         .crystal.make_reduced_group_data(.atom)
      end
   end

   read_pointgroup ::: leaky
   ! Read in the pointgroup data
      if (.pointgroup.destroyed) .pointgroup.create
      .pointgroup.read_keywords
   end

   read_scfdata ::: leaky
   ! Read in the scf data
      if (.scfdata.destroyed) .scfdata.create
      .scfdata.read_keywords
      if (.scfdata.using_diis) then
      .scfdata.diis.set_archive_root_name(.name)
      end
   end

   read_robydata ::: leaky
   ! Read in the Roby data. NOTE: this keyword must appear after a basis set
   ! has been defined
      S :: REALMAT*
      ENSURE(.basis_info_made, "no basis info")
      ENSURE(.atom.created,"no atom list")
      if (.roby.created) then
         .roby.destroy
      end
      S.create(.n_bf,.n_bf)
      .get_overlap_matrix(S)
      .roby.create(self,S)
      .roby.read_keywords
   end

   read_atoms ::: leaky
   ! Read in the atom list information
      WARN_IF(.atom.created,"atom list already defined!")
    ! if (.atom.created) then
    !    .atom.nullify_bases
    !    .atom.destroy
    ! end
      .atom.read_list_keywords
      .set_atom_info
      .resolve_basis_info
      if (associated(.crystal)) then
         .resolve_axis_system
         .crystal.make_reduced_group_data(.atom)
      end
   end

   read_basis_set_kind
   ! Read in a suffix string representing the basis type to be used
   ! for the atoms.
      stdin.read(.basis_set_kind)
      .resolve_basis_info
   end

   read_basis_sets ::: leaky
   ! Read in a list of atomic basis sets for the molecule
      WARN_IF(.basis.created,"basis sets already defined!")
      .basis.read_list_keywords
      .resolve_basis_info
   end

   read_slaterbasis_sets ::: leaky
   ! Read in a list of atomic Coppens basis sets for the molecule
      WARN_IF(.slaterbasis.created,"slaterbasis sets already defined!")
      .slaterbasis.read_list_keywords
      .resolve_basis_info
   end

   read_coppensbasis_sets ::: leaky
   ! Read in a list of atomic Coppens basis sets for the molecule
      WARN_IF(.coppensbasis.created,"coppensbasis sets already defined!")
      .coppensbasis.read_list_keywords
      .resolve_basis_info
   end

   read_atom_groups ::: leaky
   ! Read in the .atom_group array
      n,n_group,i,length,line,item :: INT
      atoms,chg :: INTVEC*
      range :: INTVEC(2)
      word :: STR
      ENSURE(.atom.created,"no atom list")
      ENSURE(stdin.next_item=="{","Expecting open bracket symbol: {")
      ENSURE(.atom_group.destroyed,"groups already defined")
      ENSURE(NOT .atom.groups_defined,"groups already defined")
      stdin.read(word)
      line = stdin.line_number
      item = stdin.next_line_item
      n = 0
      do                             ! Loop over keywords
         nullify(atoms)
         stdin.read(word)
         word.to_lower_case
         select case (word)
            case("}             "); exit
            case("atom_group=   "); stdin.read_intvec_ptr(atoms); n = n+1
            case("atom_range   ="); stdin.read_intvec(range);     n = n+1
            case("group_charges="); stdin.read_intvec_ptr(chg);   n = n+1
            case default;           UNKNOWN(word)
         end
         if (atoms.created) atoms.destroy
         if (chg.created)   chg.destroy
      end
      !
      stdin.move_to_line(line)
      stdin.move_to_line_item(item)
      n_group = n
      .atom_group.create(n)
      n = 0
      do                             ! Loop over keywords
         stdin.read(word)
         word.to_lower_case
         select case (word)
            case("}");               exit
            case("atom_group=")
               n = n+1
               stdin.read_intvec_ptr(.atom_group(n).element)
               ENSURE(all(.atom_group(n).element>0),       "non-positive atom indices")
               ENSURE(all(.atom_group(n).element<=.n_atom),"index too large")
            case("atom_range=")
               n = n+1
               stdin.read_intvec(range)
               length = range(2) - range(1) + 1
               ENSURE(length>=1,"non-positive atom group range!")
               .atom_group(n).element.create(length)
               .atom_group(n).element = [ (i, i=range(1),range(2)) ]
            case("group_charges=")
               stdin.read_intvec_ptr(.group_charges)
               ENSURE(size(.group_charges)==n_group,"wrong size, group_charges")
         end
      end
      .put_atom_groups
   end

   read_group_charges
   ! Read in the .group_charges array
      ENSURE(.group_charges.destroyed,"charges already exist")
      stdin.read_intvec_ptr(.group_charges)
      if (.atom_group.created) then
        ENSURE(size(.group_charges)==size(.atom_group),"wrong size, group_charges")
      end
   end

   make_atom_groups ::: leaky
   ! Make the .atom_group array from the .atom(:).group information
      n_group,m_group,a,g,n,i :: INT
      group_indices :: INTVEC*
      ENSURE(.atom.groups_defined,"no group info supplied in atoms=")
      ENSURE(.atom_group.destroyed,"atom_group already defined")
      group_indices.create(.n_atom)
      group_indices = .atom(:).group
      n_group = group_indices.no_of_unique_elements
      if (NOT n_group == 1) then
        m_group = maxval(group_indices)
        .atom_group.create(n_group)
        g = 0
        do a = 1,m_group
           n = count(group_indices==a)
           if (n==0) cycle
           g = g + 1
           .atom_group(g).element.create(n)
           .atom_group(g).element = pack( [ (i, i=1,.n_atom) ], group_indices==a)
        end
        if (.group_charges.created) &
        ENSURE(size(.group_charges)==size(.atom_group),"wrong size, atom_groups")
        .put_atom_groups
      end
      group_indices.destroy
   end

   read_archive ::: leaky
   ! Read the archive called "name". Must also specify a basis "orb_kind", e.g.
   ! "restricted".  For use with TONTO generated archives.
      name,orb_kind :: STR
      arch :: ARCHIVE
   ENSURE(stdin.n_line_items==3, "must specify an archive and a kind")
   ENSURE(.n_bf>0, "need to already know the number of basis functions")
      stdin.read(name)
      stdin.read(orb_kind)
      stdout.text("reading archive : " // trim(name))
      arch.set(.name,name,genre=orb_kind)
      select case (name)
         case ("molecular_orbitals")
           if (.molecular_orbitals.destroyed) .molecular_orbitals.create(.n_bf)
           arch.read(.molecular_orbitals)
         case ("density_matrix    ")
           if (.density_matrix.destroyed) .density_matrix.create(.n_bf)
           arch.read(.density_matrix)
         case ("MP2_density_matrix")
           if (.density_matrix.destroyed) .density_matrix.create(.n_bf)
           arch.read(.density_matrix)
         case ("MP3_density_matrix")
           if (.density_matrix.destroyed) .density_matrix.create(.n_bf)
           arch.read(.density_matrix)
         case ("fock_matrix       ")
           if (.fock_matrix.destroyed) .fock_matrix.create(.n_bf)
           arch.read(.fock_matrix)
         case ("orbital_energies  ")
           if (.orbital_energies.destroyed) .orbital_energies.create(.n_bf)
           arch.read(.orbital_energies)
         case ("natural_orbitals  ")
           if (.natural_orbitals.destroyed) .natural_orbitals.create(.n_bf)
           arch.read(.natural_orbitals)
         case ("occupation_numbers")
           if (.occupation_numbers.destroyed) .occupation_numbers.create(.n_bf)
           arch.read(.occupation_numbers)
         case ("covalent_orbitals ")
           if (.natural_orbitals.destroyed) .natural_orbitals.create(.n_bf)
           arch.read(.natural_orbitals)
         case ("ionic_orbitals    ")
           if (.natural_orbitals.destroyed) .natural_orbitals.create(.n_bf)
           arch.read(.natural_orbitals)
         case default;                UNKNOWN(name)
      end
      arch.close
   end

   read_ascii_archive ::: leaky
   ! Read the archive called "name". Must also specify a basis "orb_kind", e.g.
   ! "restricted".
   ! If required, the input order may be specified as "by_row" (default) or
   ! "by_column".
      name,orb_kind,order :: STR
      arch :: ARCHIVE
   ENSURE(stdin.buffer.n_items==3, "must specify an archive and a kind")
   ENSURE(.n_bf>0, "need to already know the number of basis functions")
      stdin.read(name)
      stdin.read(orb_kind)
      order = "by_row"
      if (NOT stdin.buffer_exhausted) stdin.read(order)
      arch.set(.name,name,genre=orb_kind,format="ascii")
      select case (name)
         case ("molecular_orbitals")
           if (.molecular_orbitals.destroyed) .molecular_orbitals.create(.n_bf)
           arch.read(.molecular_orbitals,order=order)
         case ("density_matrix    ")
           if (.density_matrix.destroyed) .density_matrix.create(.n_bf)
           arch.read(.density_matrix,order=order)
         case ("MP2_density_matrix")
           if (.density_matrix.destroyed) .density_matrix.create(.n_bf)
           arch.read(.density_matrix,order=order)
         case ("MP3_density_matrix")
           if (.density_matrix.destroyed) .density_matrix.create(.n_bf)
           arch.read(.density_matrix,order=order)
         case ("orbital_energies  ")
           if (.orbital_energies.destroyed) .orbital_energies.create(.n_bf)
           arch.read(.orbital_energies)
         case ("natural_orbitals  ")
           if (.natural_orbitals.destroyed) .natural_orbitals.create(.n_bf)
           arch.read(.natural_orbitals,order=order)
         case ("occupation_numbers")
           if (.occupation_numbers.destroyed) .occupation_numbers.create(.n_bf)
           arch.read(.occupation_numbers)
         case ("covalent_orbitals ")
           if (.natural_orbitals.destroyed) .natural_orbitals.create(.n_bf)
           arch.read(.natural_orbitals,order=order)
         case ("ionic_orbitals    ")
           if (.natural_orbitals.destroyed) .natural_orbitals.create(.n_bf)
           arch.read(.natural_orbitals,order=order)
         case ("fock_matrix       ")
           if (.fock_matrix.destroyed) .fock_matrix.create(.n_bf)
           arch.read(.fock_matrix,order=order)
         case default;                UNKNOWN(name)
      end
      arch.close
   end

   read_g94_checkpoint_file ::: leaky
   ! Read a g94 checkpoint file (after fchk conversion to ASCII) into TONTO
      name :: STR
      chkfile :: TEXTFILE*
      shell_l, nps, shell_to_atom, e_atom :: INTVEC*
      tmp_nps, tmp_sta, tmp_shells :: INTVEC*
      tmp_pe, tmp_cc :: REALVEC*
      pe, cc, extra_cc, temp_vec :: REALVEC*
      temp_mat :: REALMAT*
      temp_spin, temp_total, D :: OPMATRIX*
      basis1 :: BASIS*
      c, t, a, s, u, m1, m2, i,n_basis :: INT
      n_shell, n_comp, n_cc, nps_c :: INT
      same :: BIN
      arch :: ARCHIVE
      if (.basis.created) .basis.destroy
      if (.atom.created)  .atom.destroy
      name = trim(.name) // achar(46) // "FChk"        ! name.FChk or
      if (NOT stdin.buffer_exhausted) stdin.read(name) ! specified on stdin
      .scfdata.create

      ! Read in basic stuff.
      chkfile.create(name)
      chkfile.open(for="read")
      chkfile.read_line
      chkfile.look_for("Number of atoms")
      chkfile.move_to_line_item(5); chkfile.read(.n_atom)
      chkfile.look_for("Charge")
      chkfile.move_to_line_item(3); chkfile.read(.charge)
      chkfile.look_for("Multiplicity")
      chkfile.move_to_line_item(3); chkfile.read(.mult)
      chkfile.look_for("Number of electrons")
      chkfile.move_to_line_item(5); chkfile.read(.n_e)
      chkfile.look_for("Number of alpha electrons")
      chkfile.move_to_line_item(6); chkfile.read(.n_a)
      chkfile.look_for("Number of beta electrons")
      chkfile.move_to_line_item(6); chkfile.read(.n_b)
      chkfile.look_for("Number of basis functions")
      chkfile.move_to_line_item(6); chkfile.read(.n_bf)
      chkfile.look_for("Number of contracted shells")
      chkfile.move_to_line_item(6); chkfile.read(.n_shell)
      chkfile.look_for("Number of primitive shells")
      chkfile.move_to_line_item(6); chkfile.read(.n_prim)
      chkfile.look_for("Total Energy")
      chkfile.move_to_line_item(4)
      chkfile.read_real(.scfdata.energy )
      chkfile.look_for("Atomic numbers"); chkfile.read_line
      .atom.create(.n_atom)
      do a = 1, .n_atom
         chkfile.read(.atom(a).atomic_number )
         .atom(a).label = trim(.atom(a).chemical_symbol) // trim(a.to_str)
      end
      chkfile.look_for("Current cartesian coordinates")
      chkfile.read_line
      do a = 1, .n_atom
         chkfile.read(.atom(a).pos)
      end

      ! Shell info.
      chkfile.look_for("Shell types"); chkfile.read_line
      tmp_shells.create(.n_shell); tmp_nps.create(.n_shell)
      tmp_sta.create(.n_shell); tmp_pe.create(.n_prim)
      tmp_cc.create(.n_prim)
      chkfile.read(tmp_shells)
      chkfile.look_for("Number of primitives per shell")
      chkfile.read_line; chkfile.read(tmp_nps)
      chkfile.look_for("Shell to atom map"); chkfile.read_line
      chkfile.read(tmp_sta)
      chkfile.look_for("Primitive exponents"); chkfile.read_line
      chkfile.read(tmp_pe)
      chkfile.look_for("Contraction coefficients"); chkfile.read_line
      chkfile.read(tmp_cc)
      e_atom.create(.n_atom); e_atom = ZERO
      extra_cc.create(.n_prim)
      if (any(tmp_shells == (-1) )) then
        do a = 1, .n_shell
           if (tmp_shells(a) == (-1)) then
              e_atom(tmp_sta(a)) = e_atom(tmp_sta(a)) + 1
              .n_prim = .n_prim + tmp_nps(a)
           end
        end
        chkfile.look_for("P(S=P)"); chkfile.read_line
        chkfile.read(extra_cc)
      end
      s = .n_shell + sum(e_atom)
      shell_l.create(s); nps.create(s)
      pe.create(.n_prim); cc.create(.n_prim)
      shell_to_atom.create(s)
      a = 0
      m1 = 1; m2 = 1
      do c = 1, .n_shell
        a = a + 1
        nps_c = tmp_nps(c)
        if (tmp_shells(c) == (-1)) then
           shell_l(a) = 0
           nps(a) = nps_c
           shell_to_atom(a) = tmp_sta(c)
           pe(m1:m1+nps_c-1) = tmp_pe(m2:m2+nps_c-1)
           cc(m1:m1+nps_c-1) = tmp_cc(m2:m2+nps_c-1)
           a = a+1; m1=m1+nps_c
           shell_l(a) = 1
           nps(a) = nps_c
           shell_to_atom(a) = tmp_sta(c)
           pe(m1:m1+nps_c-1) = tmp_pe(m2:m2+nps_c-1)
           cc(m1:m1+nps_c-1) = extra_cc(m2:m2+nps_c-1)
        else
           pe(m1:m1+nps_c-1) = tmp_pe(m2:m2+nps_c-1)
           cc(m1:m1+nps_c-1) = tmp_cc(m2:m2+nps_c-1)
         ! shell_l(a) = tmp_shells(c)
           shell_l(a) = abs(tmp_shells(c)) ! WARNING: sometimes this can be -2
           nps(a) = nps_c
           shell_to_atom(a) = tmp_sta(c)
        end
        m1 = m1 + nps_c; m2 = m2 + nps_c
      end
      extra_cc.destroy
      tmp_shells.destroy; tmp_sta.destroy
      tmp_nps.destroy; tmp_pe.destroy; tmp_cc.destroy
      .n_shell = s
      c = 0      ! for recording number of primitives read
      t = 0      ! for recording number of shells read
      n_basis = 0
      .basis.create(n_basis)
      do a = 1, .n_atom
         basis1.create
         basis1.label = trim(.atom(a).label) // "_g94_basis"
         n_shell = count(shell_to_atom==a)
         basis1.n_shell = n_shell
         basis1.shell.create(n_shell)
         basis1.shell.nullify_ptr_part
         do s = 1, n_shell
            n_comp = shell_l(t+s).n_comp
            n_cc = nps(t+s)
            basis1.shell(s).l = shell_l(t+s)
            basis1.shell(s).n_comp = n_comp
            basis1.shell(s).n_cc = n_cc
            basis1.shell(s).ex.create(n_cc )
            basis1.shell(s).cc.create(n_cc )
            basis1.shell(s).ex = pe(c+1 : c+n_cc )
            basis1.shell(s).cc = cc(c+1 : c+n_cc )
            c = c + n_cc
         end
         basis1.n_bf = basis1.no_of_basis_functions
         basis1.n_prim = basis1.no_of_primitives
       ! basis1.unnormalise
         t = t + n_shell
         same = FALSE
         do i = 1,n_basis
            if (.basis(i).same_as(basis1)) then
               same = TRUE
               exit
            end
         end
         .atom(a).basis.create
         if (same) then
            .atom(a).basis.label = .basis(i).label
         else
            .atom(a).basis.label =  basis1.label
            n_basis = n_basis + 1
            .basis.expand(n_basis)
            .basis(n_basis).copy(basis1)
         end
         basis1.destroy
      end
      pe.destroy; cc.destroy
      shell_to_atom.destroy; nps.destroy; e_atom.destroy
      shell_l.destroy
      m1 = .n_bf
      .set_atom_info
      .resolve_basis_info
      ENSURE(m1==.n_bf,"No. of basis functions inconsistent with basis set, did you use 6d/10f?")

      ! Read in orbital energies.
      temp_vec.create(.n_bf)
      chkfile.look_for("Alpha Orbital Energies")
      chkfile.read_line; chkfile.read(temp_vec)
      if (chkfile.next_str == "Beta") then
         u = 1
         .scfdata.kind = "uhf"
         .orbital_energies.create(.n_bf, "beta")
         chkfile.read_line; chkfile.read(.orbital_energies.beta)
         .orbital_energies.alpha => temp_vec
         nullify(temp_vec)
      else
         u = 0
         .scfdata.kind = "rhf"
         .orbital_energies.create(.n_bf)
         .orbital_energies.restricted => temp_vec
         nullify(temp_vec)
      end

      ! Read in molecular orbitals.
      temp_mat.create(.n_bf, .n_bf)
      chkfile.look_for("Alpha MO"); chkfile.read_line
      chkfile.read(temp_mat)
      temp_mat.to_transpose
      if (chkfile.next_str == "Beta") then
         .molecular_orbitals.create(.n_bf, "beta")
         chkfile.read_line; chkfile.read(.molecular_orbitals.beta)
         .molecular_orbitals.beta.to_transpose
         .molecular_orbitals.alpha => temp_mat
         nullify(temp_vec)
         .swap_g94_orbital_order(.molecular_orbitals.alpha,"row")
         .swap_g94_orbital_order(.molecular_orbitals.beta, "row")
      else
         .molecular_orbitals.create(.n_bf)
         .molecular_orbitals.restricted => temp_mat
         nullify(temp_vec)
         .swap_g94_orbital_order(.molecular_orbitals.restricted,"row")
      end

      ! Read in density matrix.
      if (u==0) then
         .density_matrix.create(.n_bf, "restricted")
         .density_matrix.triangle.create(.density_matrix.l_compress("restricted"))
         chkfile.look_for("Total SCF Density"); chkfile.read_line
         chkfile.read(.density_matrix.triangle)
         .density_matrix.uncompress
         .swap_g94_orbital_order(.density_matrix.restricted,"row")
         .swap_g94_orbital_order(.density_matrix.restricted,"column")
      else
         temp_total.create(.n_bf, "restricted")
         temp_spin.create(.n_bf, "restricted")
         temp_total.triangle.create(temp_total.l_compress("restricted"))
         chkfile.look_for("Total SCF Density"); chkfile.read_line
         chkfile.read(temp_total.triangle)
         temp_total.uncompress
         temp_spin.triangle.create(temp_spin.l_compress("restricted"))
         chkfile.look_for("Spin SCF Density"); chkfile.read_line
         chkfile.read(temp_spin.triangle)
         temp_spin.uncompress
         .density_matrix.create(.n_bf, "alpha")
         .density_matrix.create("beta")
         .density_matrix.beta = (temp_total.restricted - temp_spin.restricted)/2
         .density_matrix.alpha = (temp_spin.restricted + temp_total.restricted)/2
         temp_spin.destroy
         temp_total.destroy
         .swap_g94_orbital_order(.density_matrix.alpha,"row")
         .swap_g94_orbital_order(.density_matrix.alpha,"column")
         .swap_g94_orbital_order(.density_matrix.beta, "row")
         .swap_g94_orbital_order(.density_matrix.beta, "column")
      end

      ! Extract MP2 density matrix to file.  UHF untested
      if (chkfile.has_string("MP2 Density")) then
        if (u==0) then
           D.create(.n_bf, "restricted")
           D.triangle.create(D.l_compress("restricted"))
           chkfile.look_for("Total MP2 Density"); chkfile.read_line
           chkfile.read(D.triangle)
           D.uncompress
           .swap_g94_orbital_order(D.restricted,"row")
           .swap_g94_orbital_order(D.restricted,"column")
           arch.set(.name,"MP2_density_matrix")
           arch.write(D)
           D.destroy
        else
           temp_total.create(.n_bf, "restricted")
           temp_spin.create(.n_bf, "restricted")
           temp_total.triangle.create(temp_total.l_compress("restricted"))
           chkfile.look_for("Total MP2 Density"); chkfile.read_line
           chkfile.read(temp_total.triangle)
           temp_total.uncompress
           temp_spin.triangle.create(temp_spin.l_compress("restricted"))
           chkfile.look_for("Spin MP2 Density"); chkfile.read_line
           chkfile.read(temp_spin.triangle)
           temp_spin.uncompress
           D.create(.n_bf, "alpha")
           D.create("beta")
           D.beta = (temp_total.restricted - temp_spin.restricted)/2
           D.alpha = (temp_spin.restricted + temp_total.restricted)/2
           temp_spin.destroy
           temp_total.destroy
           .swap_g94_orbital_order(D.alpha,"row")
           .swap_g94_orbital_order(D.alpha,"column")
           .swap_g94_orbital_order(D.beta, "row")
           .swap_g94_orbital_order(D.beta, "column")
           arch.set(.name,"MP2_density_matrix")
           arch.write(D)
           D.destroy
        end
      end

      ! Extract MP3 density matrix to file.  UHF untested
      if (chkfile.has_string("MP3 Density")) then
        if (u==0) then
           D.create(.n_bf, "restricted")
           D.triangle.create(D.l_compress("restricted"))
           chkfile.look_for("Total MP3 Density"); chkfile.read_line
           chkfile.read(D.triangle)
           D.uncompress
           .swap_g94_orbital_order(D.restricted,"row")
           .swap_g94_orbital_order(D.restricted,"column")
           arch.set(.name,"MP3_density_matrix")
           arch.write(D)
           D.destroy
        else
           temp_total.create(.n_bf, "restricted")
           temp_spin.create(.n_bf, "restricted")
           temp_total.triangle.create(temp_total.l_compress("restricted"))
           chkfile.look_for("Total MP3 Density"); chkfile.read_line
           chkfile.read(temp_total.triangle)
           temp_total.uncompress
           temp_spin.triangle.create(temp_spin.l_compress("restricted"))
           chkfile.look_for("Spin MP3 Density"); chkfile.read_line
           chkfile.read(temp_spin.triangle)
           temp_spin.uncompress
           D.create(.n_bf, "alpha")
           D.create("beta")
           D.beta = (temp_total.restricted - temp_spin.restricted)/2
           D.alpha = (temp_spin.restricted + temp_total.restricted)/2
           temp_spin.destroy
           temp_total.destroy
           .swap_g94_orbital_order(D.alpha,"row")
           .swap_g94_orbital_order(D.alpha,"column")
           .swap_g94_orbital_order(D.beta, "row")
           .swap_g94_orbital_order(D.beta, "column")
           arch.set(.name,"MP3_density_matrix")
           arch.write(D)
           D.destroy
        end
      end

      chkfile.close; chkfile.destroy

      ! Save data in archive files
      arch.set(.name,"density_matrix")
      arch.write(.density_matrix)
      arch.set(.name,"molecular_orbitals")
      arch.write(.molecular_orbitals)
      arch.set(.name,"orbital_energies")
      arch.write(.orbital_energies)

      if (associated(.crystal)) then
         .resolve_axis_system
         .crystal.make_reduced_group_data(.atom)
      end
   end

   swap_g94_orbital_order(X,swap)
   ! Swap the order of f orbitals on matrix "X" after reading a g94 checkpoint
   ! file, for "swap" equal to "row" or "1", or "coloumn" or "2".
       X :: REALMAT
      swap :: STR(*)
      n,f,l :: INT
      ff :: INTVEC(10) = (/ 1, 2, 3, 5, 6, 4, 9, 7, 8,10 /)
      select case (swap)
         case("row","1")
            do n = 1,.n_shell
               f = .first_basis_fn_for_shell(n)
               l = .last_basis_fn_for_shell(n)
   ENSURE((l-f)<=9,"cannot yet convert order for g shells")
               if ((l-f)==9) then ! f functions
                  X(f:l,:) = X(f-1+ff,:)
               end
            end
         case("column","2")
            do n = 1,.n_shell
               f = .first_basis_fn_for_shell(n)
               l = .last_basis_fn_for_shell(n)
   ENSURE((l-f)<=9,"cannot yet convert order for g shells")
               if ((l-f)==9) then ! f functions
                  X(:,f:l) = X(:,f-1+ff)
               end
            end
         case default
            DIE("unknown swap kind, "//trim(swap))
      end
   end

   write_wfn_file ::: leaky
   ! writes a .wfn file for input to morphy98
      name :: STR
      wfnfile :: TEXTFILE*
      lvec :: INTVEC*
      evec :: REALVEC*
      dmatrix, cc :: REALMAT*
      sh :: SHELL*
      i, j, pcount, n_orbitals, a, l, atomn, shelln :: INT
!      title_format :: STR, parameter = "(A80)"
      n_vars_format :: STR, parameter = "(A8, 10X, I5, 15X, I5, 15X, I5, 17X)"
      atom_format :: STR, parameter = "(A5, I3, '    (CENTRE', 1I3, ') ', 3F12.8, '          ', F5.1)"
      c_assignment_format :: STR, parameter = "('CENTRE ASSIGNMENTS  ', 20I3)"
      t_assignment_format :: STR, parameter = "('TYPE ASSIGNMENTS    ', 20I3)"
      exponent_format :: STR, parameter = "('EXPONENTS ', 5D14.7)"
      mol_title_format :: STR, parameter = "(1A4, I3, 1A30, F12.8, 1A15, F12.8)"
      coefficient_format :: STR, parameter = "(5D16.8)"
      e_v_format :: STR, parameter = "(' THE HF ENERGY = ', F20.12, ' THE VIRIAL(-V/T)=', F13.8)"
   ENSURE(.occupation_numbers.created("restricted"), "No occupation numbers")
   ENSURE(.orbital_energies.created("restricted"), "No orbital energies")
   ENSURE(.molecular_orbitals.created("restricted"), "No orbitals")
      name = .name
      if (NOT stdin.buffer_exhausted) stdin.read(name)
      wfnfile.create(name)
      wfnfile.open(for="write")
      if (mod(.n_e, 2) == 0) then
         n_orbitals = .n_e / 2
      else
         n_orbitals = (.n_e + 1) / 2
      end
      write(unit = wfnfile.unit, fmt = '(a)') trim(name) // " computed by TONTO"
      write(unit = wfnfile.unit, fmt = n_vars_format) "GAUSSIAN", n_orbitals, .n_prim, .n_atom
      write(unit = wfnfile.unit, fmt = atom_format) (.atom(i).label, i, i, &
         .atom(i).pos, real(.atom(i).atomic_number,kind=REAL_KIND) , i = 1, .n_atom)
      write(unit = wfnfile.unit, fmt = c_assignment_format) ((j, i = 1, .atom(j).n_prim ), j = 1, .n_atom )
      pcount = 1
      lvec.create(.n_prim)
      evec.create(.n_prim)
      do a = 1, .n_shell
        atomn  = .atom_for_shell(a)
        shelln = .atom_shell_for_shell(a)
        sh => .atom(atomn).basis.shell(shelln)
        l = sh.l.n_comp_sum - sh.n_comp
        do j = 1, sh.n_cc
          if (sh.l == 3) then
            lvec(pcount  ) = l + 1
            lvec(pcount+1) = l + 2
            lvec(pcount+2) = l + 3
            lvec(pcount+3) = l + 4
            lvec(pcount+4) = l + 5
            lvec(pcount+5) = l + 7
            lvec(pcount+6) = l + 6
            lvec(pcount+7) = l + 8
            lvec(pcount+8) = l + 9
            lvec(pcount+9) = l + 10
            do i = 1, sh.n_comp
              evec(pcount) = sh.ex(j)
              pcount = pcount + 1
            end
          else
            do i = 1, sh.n_comp
              evec(pcount) = sh.ex(j)
              lvec(pcount) = l + i
              pcount = pcount + 1
            end
          end
        end
      end
      write(unit = wfnfile.unit, fmt = t_assignment_format) lvec
      write(unit = wfnfile.unit, fmt = exponent_format) evec
      lvec.destroy
      evec.destroy
      dmatrix.create(.n_prim, .n_bf)
      dmatrix = ZERO
      cc.create(.n_prim, .n_bf);    .make_contraction_matrix(cc)

      dmatrix.to_product_of(cc,.molecular_orbitals.restricted)
      do i = 1, n_orbitals
         write(unit = wfnfile.unit, fmt = mol_title_format) &
            "MO  ", i, &
            "OCC NO = ", .occupation_numbers.restricted(i), &
            " ORB. ENERGY = ", .orbital_energies.restricted(i)
         write(unit = wfnfile.unit, fmt = coefficient_format) dmatrix(:, i)
      end
      write(unit = wfnfile.unit, fmt = "(1A8)") "END DATA"
      write(unit = wfnfile.unit, fmt = e_v_format) .scfdata.energy, 2.0D00
      cc.destroy
      dmatrix.destroy
      wfnfile.close
      wfnfile.destroy
   end

   write_archive
   ! Write the archive called "name". The kind is defined by the object to be
   ! written.
      name :: STR
      arch :: ARCHIVE
      stdin.read(name)
      arch.set(.name,name)
      select case (name)
         case ("molecular_orbitals"); arch.write(.molecular_orbitals)
         case ("density_matrix    "); arch.write(.density_matrix)
         case ("natural_orbitals  "); arch.write(.natural_orbitals)
         case ("occupation_numbers"); arch.write(.occupation_numbers)
         case ("fock_matrix       "); arch.write(.fock_matrix)
         case ("orbital_energies  "); arch.write(.orbital_energies)
         case default;    UNKNOWN(name)
      end
      arch.close
   end

   write_ascii_archive
   ! Write the archive called "name". The kind is defined by the object to be
   ! written. If required, the output order may be specified as
   ! "by_row" (default) or "by_column".
      name,order :: STR
      arch :: ARCHIVE
      stdin.read(name)
      order = "by_row"
      if (NOT stdin.buffer_exhausted) stdin.read(order)
      arch.set(.name,name,format="ascii")
      select case (name)
         case ("molecular_orbitals"); arch.write(.molecular_orbitals,order=order)
         case ("density_matrix    "); arch.write(.density_matrix,order=order)
         case ("natural_orbitals  "); arch.write(.natural_orbitals,order=order)
         case ("occupation_numbers"); arch.write(.occupation_numbers,order=order)
         case ("fock_matrix       "); arch.write(.fock_matrix,order=order)
         case ("orbital_energies  "); arch.write(.orbital_energies,order=order)
         case default;     UNKNOWN(name)
      end
      arch.close
   end

!  **************
!  Output methods
!  **************

   put
   ! Put all the available molecule information on file "out"
     stdout.flush
     stdout.text("Molecule information:")
     stdout.flush
     stdout.show("Name                   =",.name)
     stdout.show("Charge                 =",.charge)
     stdout.show("Multiplicity           =",.mult)
     stdout.show("Applied E Field        =",.E_field(1),.E_field(2),.E_field(3))
     stdout.show("Applied B Field        =",.B_field(1),.B_field(2),.B_field(3))
     stdout.show("B field Gauge origin   =",.gauge_origin)
     if (.atom.created)        .put_atoms
     if (.atom_group.created)  .put_atom_groups
     if (.pointgroup.created)  .put_pointgroup
     if (.crystal.created)     .put_crystal
     if (.cluster.created)     .put_cluster
!    if (.grid.created)        .put_grid
     if (.dftgrid.created)     .put_dftgrid
   end

   put_atoms
   ! Output the atom coordinate and basis set information
   ENSURE(.atom.created,"no atom list")
      stdout.flush
      stdout.text("Molecule atom information:")
      stdout.flush
      stdout.show("Chemical Formula       =",trim(.chemical_formula))
      stdout.show("No of atoms            =",.n_atom)
      stdout.show("No of electrons        =",.n_e)
      stdout.show("No of alpha electrons  =",.n_a)
      stdout.show("No of beta  electrons  =",.n_b)
      .atom.put_coord_info
      if (.basis.created)        .put_bases
      if (.coppensbasis.created) .put_coppensbases
      if (.slaterbasis.created)  .put_slaterbases
      if (.crystal.created)      .put_atom_thermal_tensors
   end

   put_all_bonds
   ! Put all the bond length info out
      .atom.put_coord_info(all=TRUE)
   end

   put_bases
   ! Output the molecule basis set information, if the bases are all resolved.
   ENSURE(.atom.created,"no atom list")
   ENSURE(.basis.created,"no basis set list")
      if (NOT .atom.bases_are_resolved) return
      stdout.flush
      stdout.text("Molecule atom basis set information:")
      stdout.flush
      stdout.show("No. of basis sets      =",.n_basis)
      stdout.show("No. of shells          =",.n_shell)
      stdout.show("No. of shell pairs     =",.n_shell_pairs)
      stdout.show("No. of basis functions =",.n_bf)
      stdout.show("No. of primitives      =",.n_prim)
      .basis.renormalise
      .basis.put
      .basis.unnormalise
   end

   put_slaterbases
   ! Output the molecule slaterbasis set information, if the bases are all
   ! resolved.
   ENSURE(.atom.created,"no atom list")
   ENSURE(.slaterbasis.created,"no basis set list")
      if (NOT .atom.slaterbases_are_resolved) return
      stdout.flush
      stdout.text("Molecule atom slaterbasis set information:")
      stdout.flush
      stdout.show("No. of basis sets =",.slaterbasis.dim)
      .slaterbasis.put
   end

   put_coppensbases
   ! Output the molecule coppensbasis set information, if the bases are all
   ! resolved.
   ENSURE(.atom.created,"no atom list")
   ENSURE(.coppensbasis.created,"no basis set list")
      if (NOT .atom.coppensbases_are_resolved) return
      stdout.flush
      stdout.text("Molecule atom coppensbasis set information:")
      stdout.flush
      stdout.show("No. of basis sets =",.coppensbasis.dim)
      stdout.show("Maximum N value   =",.coppensbasis.maximum_basis_n_value)
      stdout.show("No. of orbitals   =",.coppensbasis.no_of_orbitals)
      stdout.show("No. of primitives =",.coppensbasis.no_of_primitives)
      .coppensbasis.put
   end

   put_atom_thermal_tensors
   ! Output the thermal tensors if they exist.
     thermal_smearing_model :: STR
   ENSURE(.crystal.created,"no crystal info")
   ENSURE(.atom.created,"no atom info")
     thermal_smearing_model = .crystal.thermal_smearing_model
     if (thermal_smearing_model==" ") then
       stdout.flush
       stdout.put("No thermal smearing.")
       stdout.flush
     else
       stdout.flush
       stdout.put("Thermal tensor information:")
       stdout.flush
       stdout.show("Thermal smearing model = ", trim(thermal_smearing_model))
       stdout.flush
   ENSURE(.atom.created,"no atom list data")
       .atom.put_thermal_tensors
     end
   end

   put_atom_groups
   ! Out out the .atom_group info array
      n,i :: INT
   ENSURE(.atom_group.created,"no atom group information")
      stdout.save
      stdout.set_int_width(3)
      stdout.set_n_fields(25)
      stdout.set_use_labels(FALSE)
      stdout.text(" ")
      stdout.text("Atom group information")
      stdout.text(" ")
      stdout.show("n_groups =",size(.atom_group))
      do n = 1,size(.atom_group)
         stdout.put_text("group "// trim(n.to_str) //"  =")
         do i = 1,size(.atom_group(n).element)
            stdout.put(.atom_group(n).element(i))
         end
         stdout.flush
      end
      if (.group_charges.created) then
         stdout.put_text("group charges =")
         do i = 1,size(.group_charges)
            stdout.put(.group_charges(i))
         end
      end
      stdout.unsave
   end

   put_pointgroup
   ! Output the current pointgroup
      .pointgroup.put
   end

   put_plotgrid
   ! Output the current grid.
   ENSURE(.grid.created,"no plot grid to output")
     .grid.put
   end

   put_dftgrid
   ! Output the current DFT grid.
   ENSURE(.dftgrid.created,"no DFT grid to output")
     .dftgrid.put
   end

   put_crystal
   ! Output the current crystal
      if (.atom.created) then; .crystal.put(.atom)
      else;                    .crystal.put
      end
   end

   put_cluster
   ! Put out the cluster information
   ENSURE(.cluster.created,"no cluster data")
      .cluster.put
   end

   put_crystal_reflection_data
   ! Output the current crystal
      .crystal.put_reflection_data
   end

   put_molecular_orbitals
   ! Output the current associated molecular orbitals
      stdout.flush
      stdout.text("Molecular orbitals:")
      stdout.put(.molecular_orbitals)
   end

   put_mos_and_energies
   ! Output the current associated molecular orbitals and their energies
      stdout.flush
      stdout.text("Molecular orbital energies:")
      stdout.put(.orbital_energies, format="column")
      stdout.flush
      stdout.text("Molecular orbitals:")
      stdout.put(.molecular_orbitals)
   end

   put_natural_orbitals
   ! Output the current associated molecular orbitals
      stdout.flush
      stdout.text("Natural orbital occupations:")
      stdout.put(.occupation_numbers, format="column")
      stdout.flush
      stdout.text("Natural orbitals:")
      stdout.put(.natural_orbitals)
   end

   put_density_matrix
   ! Output the current associated density matrix
   ENSURE(.density_matrix.created,"no density matrix")
      stdout.flush
      stdout.text("Density matrix:")
      stdout.put(.density_matrix)
   end

   put_fock_matrix
   ! Output the current associated fock matrix
   ENSURE(.fock_matrix.created,"no fock matrix")
      stdout.flush
      stdout.text("Fock matrix:")
      stdout.put(.fock_matrix)
   end

   put_PND_sf
   ! Output the magnetic structure factors
      .crystal.put_PND_sf(.name)
   end

   put_current_time(timer)
   ! Output the current time
      timer :: TIME
      stdout.text(timer.current_time)
   end

   put_time_taken(timer)
   ! Output the time taken as given by the "timer" object
      timer :: TIME
      stdout.text(timer.time_taken)
   end

   put_total_time
   ! Output the total time
      stdout.text(std_time.time_taken)
   end

   put_vrml
   ! Output a VRML file for the coordinate geometry
     out :: TEXTFILE*
     ENSURE(.atom.created,"no atom list!")
     out.create(trim(.name)//achar(46)//"wrl")
     out.open(for="write")
     stdout.text("Generating VRML molecule")
     out.text("#VRML V2.0 utf8")
     out.text("NavigationInfo { type " // achar(34) // "EXAMINE" // achar(34) // " }")
     out.text("Viewpoint { ")
     out.text("position 0 0 10")
     out.text("fieldOfView 1")
     out.text("orientation 0 0 1 0")
     out.text('description "camera z"')
     out.text("}")
     out.text("DirectionalLight {")
     out.text("  color 1 1 1")
     out.text("  direction 1 0 0")
     out.text("  intensity 0.4")
     out.text("}")
     .atom.put_vrml(out)
     if (.isosurface.created) .isosurface.put_vrml(out)
     stdout.text("done VRML molecule")
   end

   put_1e_properties
   ! Put all the available one elctron properties
   ENSURE(.density_matrix.created,"no density")
   ENSURE(.atom.created,"no atoms")
   ENSURE(.basis.created,"no basis sets specified")
      .put_dipole
      .put_quadrupole
      .put_octupole
      .put_E_field_at_nuclei
      .put_EFG_at_nuclei
   end

   put_dipole
   ! Put out the dipole to stdout
      electronic,nuclear,total :: REALVEC(3)
      axis :: STRVEC(3)
      i :: INT
      axis = [ "x", "y", "z" ]
      electronic = .electronic_dipole_moment
      nuclear    = .nuclear_dipole_moment
      total      = electronic + nuclear
      stdout.flush
      stdout.text("Dipole moments:")
      stdout.flush
      stdout.dash(int_fields=1,real_fields=6)
      stdout.tab(int_fields=1)
      stdout.put("Electronic")
      stdout.put("Nuclear")
      stdout.put("Total")
      stdout.put("Electronic")
      stdout.put("Nuclear")
      stdout.put("Total")
      stdout.flush
      stdout.put("Component",int_width=TRUE)
      stdout.put("/au")
      stdout.put("/au")
      stdout.put("/au")
      stdout.put("/Debye")
      stdout.put("/Debye")
      stdout.put("/Debye")
      stdout.flush
      stdout.dash(int_fields=1,real_fields=6)
      do i = 1,3
         stdout.put(axis(i),int_width=TRUE)
         stdout.put(electronic(i))
         stdout.put(nuclear(i))
         stdout.put(total(i))
         stdout.put(electronic(i).to_units("debye"))
         stdout.put(nuclear(i).to_units("debye"))
         stdout.put(total(i).to_units("debye"))
         stdout.flush
      end
      stdout.dash(int_fields=1,real_fields=6)
   end

   put_quadrupole
   ! Put out the quadrupole to stdout
      electronic,nuclear,total :: REALVEC(6)
      axis :: STRVEC(6)
      i :: INT
      axis = [ "xx","yy","zz","xy","xz","yz" ]
      electronic = .electronic_quadrupole_moment
      nuclear    = .nuclear_quadrupole_moment
      total      = electronic + nuclear
      stdout.flush
      stdout.text("Quadrupole moments:")
      stdout.flush
      stdout.dash(int_fields=1,real_fields=6)
      stdout.tab(int_fields=1)
      stdout.put("Electronic")
      stdout.put("Nuclear")
      stdout.put("Total")
      stdout.put("Electronic")
      stdout.put("Nuclear")
      stdout.put("Total")
      stdout.flush
      stdout.put("Component",int_width=TRUE)
      stdout.put("/au")
      stdout.put("/au")
      stdout.put("/au")
      stdout.put("/Debye-A")
      stdout.put("/Debye-A")
      stdout.put("/Debye-A")
      stdout.flush
      stdout.dash(int_fields=1,real_fields=6)
      do i = 1,6
         stdout.put(axis(i),int_width=TRUE)
         stdout.put(electronic(i))
         stdout.put(nuclear(i))
         stdout.put(total(i))
         stdout.put(electronic(i).to_units("debye-angstrom"))
         stdout.put(nuclear(i).to_units("debye-angstrom"))
         stdout.put(total(i).to_units("debye-angstrom"))
         stdout.flush
      end
      stdout.dash(int_fields=1,real_fields=6)
   end

   put_octupole
   ! Put out the octupole to stdout
      electronic,nuclear,total :: REALVEC(10)
      axis :: STRVEC(10)
      i :: INT
      axis = [ "xxx","yyy","zzz","xxy","xxz","yyx","yyz","zzx","zzy","xyz" ]
      electronic = .electronic_octupole_moment
      nuclear    = .nuclear_octupole_moment
      total      = electronic + nuclear
      stdout.flush
      stdout.text("Octupole moments:")
      stdout.flush
      stdout.dash(int_fields=1,real_fields=6)
      stdout.tab(int_fields=1)
      stdout.put("Electronic")
      stdout.put("Nuclear")
      stdout.put("Total")
      stdout.put("Electronic")
      stdout.put("Nuclear")
      stdout.put("Total")
      stdout.flush
      stdout.put("Component",int_width=TRUE)
      stdout.put("/au")
      stdout.put("/au")
      stdout.put("/au")
      stdout.put("/Debye-A2")
      stdout.put("/Debye-A2")
      stdout.put("/Debye-A2")
      stdout.flush
      stdout.dash(int_fields=1,real_fields=6)
      do i = 1,10
         stdout.put(axis(i),int_width=TRUE)
         stdout.put(electronic(i))
         stdout.put(nuclear(i))
         stdout.put(total(i))
         stdout.put(electronic(i).to_units("debye-angstrom^2"))
         stdout.put(nuclear(i).to_units("debye-angstrom^2"))
         stdout.put(total(i).to_units("debye-angstrom^2"))
         stdout.flush
      end
      stdout.dash(int_fields=1,real_fields=6)
   end

   put_E_field_at_nuclei
   ! Put out the electric field at every nuclear position
      electronic,nuclear,total :: REALMAT*
      axis :: STRVEC(3)
      symbol :: STRVEC*
      a,i :: INT
      axis = [ "x", "y", "z" ]
      symbol => .numbered_chemical_symbols
      electronic.create(3,.n_atom)
      nuclear.create(3,.n_atom)
      total.create(3,.n_atom)
      electronic = .electronic_E_field_at_nuclei
      nuclear    = .nuclear_E_field_at_nuclei
      total      = electronic + nuclear
      stdout.flush
      stdout.text("Electric fields at nuclei:")
      stdout.flush
      stdout.dash(int_fields=1,real_fields=4)
      stdout.tab(real_fields=1,int_fields=1)
      stdout.put("Electronic")
      stdout.put("Nuclear")
      stdout.put("Total")
      stdout.flush
      stdout.put("Atom")
      stdout.put("E_i",int_width=TRUE)
      stdout.put("/au")
      stdout.put("/au")
      stdout.put("/au")
      stdout.flush
      stdout.dash(int_fields=1,real_fields=4)
      do a = 1,.n_atom
      do i = 1,3
         if (i==1) then; stdout.put(symbol(a))
         else;           stdout.tab(real_fields=1)
         end
         stdout.put(axis(i),int_width=TRUE)
         stdout.put(electronic(i,a))
         stdout.put(nuclear(i,a))
         stdout.put(total(i,a))
         stdout.flush
      end
      end
      stdout.dash(int_fields=1,real_fields=4)
      total.destroy
      nuclear.destroy
      electronic.destroy
      symbol.destroy
   end

   put_EFG_at_nuclei
   ! Put out the electric field gradient at every nuclear position
      electronic,nuclear,total :: REALMAT*
      axis :: STRVEC(6)
      symbol :: STRVEC*
      a,i :: INT
      axis = [ "xx","yy","zz","xy","xz","yz" ]
      symbol => .numbered_chemical_symbols
      electronic.create(6,.n_atom)
      nuclear.create(6,.n_atom)
      total.create(6,.n_atom)
      electronic = .electronic_EFG_at_nuclei
      nuclear    = .nuclear_EFG_at_nuclei
      total      = electronic + nuclear
      stdout.flush
      stdout.text("Electric field gradient at nuclei:")
      stdout.flush
      stdout.dash(int_fields=1,real_fields=4)
      stdout.tab(real_fields=1,int_fields=1)
      stdout.put("Electronic")
      stdout.put("Nuclear")
      stdout.put("Total")
      stdout.flush
      stdout.put("Atom")
      stdout.put("E_ij",int_width=TRUE)
      stdout.put("/au")
      stdout.put("/au")
      stdout.put("/au")
      stdout.flush
      stdout.dash(int_fields=1,real_fields=4)
      do a = 1,.n_atom
      do i = 1,6
         if (i==1) then; stdout.put(symbol(a))
         else;           stdout.tab(real_fields=1)
         end
         stdout.put(axis(i),int_width=TRUE)
         stdout.put(electronic(i,a))
         stdout.put(nuclear(i,a))
         stdout.put(total(i,a))
         stdout.flush
      end
      end
      stdout.dash(int_fields=1,real_fields=4)
      total.destroy
      nuclear.destroy
      electronic.destroy
      symbol.destroy
   end

   numbered_chemical_symbols result (res) ::: leaky
   ! Return a list of numbered chemical symbols
      res :: STRVEC*
   ENSURE(.atom.created,"no atom list")
      res.create(.atom.dim)
      res = .atom(:).numbered_chemical_symbols
   end

!  ***********
!  SCF methods
!  ***********

   set_scf_defaults ::: leaky
   ! Set up scf defaults for molecule
      if (.scfdata.destroyed) then
        .scfdata.create
      else
        .scfdata.set_defaults
      end
      if (.mult==1) .scfdata.kind = "rhf"
      if (.mult/=1) .scfdata.kind = "uhf"
      .scfdata.using_fock_diis = TRUE
      .scfdata.using_MO_diis = TRUE
      .scfdata.direct = FALSE
      .scfdata.diis.set_archive_root_name(.name)
   end

   make_molecule_from_atom(n,mol) ::: leaky
   ! Make a fully fledged molecule "mol" from a single atom "n" in self
   ! The new molecule is ready for an SCF calculation.
       n :: INT
      mol :: MOL
   ENSURE(n<=.n_atom,"atom number n too big")
      mol.nullify_ptr_part
      mol.atom.create(1)
      mol.atom = .atom(n)   ! WARNING: dont destroy ptr parts of mol.atom !
      mol.atom(1).group = 0 ! does not belong to a group
      mol.atom(1).pos = (/ZERO,ZERO,ZERO/)
      mol.set_defaults
      mol.name = trim(.atom(n).chemical_name)
      mol.basis => .basis ! WARNING: dont destroy basis of mol !
      mol.slaterbasis => .slaterbasis 
      mol.coppensbasis => .coppensbasis 
      mol.set_basis_info
      mol.set_scf_defaults
   end

   make_molecule_from_atom_group(n,mol) ::: leaky
   ! Make a fully fledged molecule "mol" from group "n" of atoms
   ! specified in .atom_group(n).element(:), ready fro an SCF calculation.
      n :: INT
      mol :: MOL
      ENSURE(.atom_group.created,"no atom_group info")
      ENSURE(n<=size(.atom_group),"group number n too big")
      mol.nullify_ptr_part
      mol.atom.create(size(.atom_group(n).element))
      mol.atom = .atom(.atom_group(n).element) ! WARNING: dont destroy ptr parts of mol.atom !
      mol.set_defaults
      if (.group_charges.created) mol.charge = .group_charges(n)
      mol.mult = mol.default_multiplicity
      mol.set_atom_info
      mol.name  =  trim(.name) // "_group_" // trim(n.to_str)
      mol.basis => .basis ! WARNING: dont destroy basis of mol !
      mol.slaterbasis => .slaterbasis 
      mol.coppensbasis => .coppensbasis 
      mol.set_basis_info
      mol.set_scf_defaults
   end

!  ************
!  SCF routines
!  ************

   scf ::: recursive, leaky
   ! Do an SCF calculation. The following :
   !   .molecular_orbitals, .orbital_energies, .density_matrix
   ! are produced as results.
   ENSURE(.scfdata.created,"no scfdata provided")
     select case (.scfdata.kind)
       case ("xray_rhf","xray_rks","xray_rdft","xray_udft")
         .constrained_scf
       case default;
         .usual_scf
     end
   end

   usual_scf ::: recursive, leaky
   ! Do an SCF calculation. The following :
   !   .molecular_orbitals, .orbital_energies, .density_matrix
   ! are produced as results.
     scf_kind :: STR
     ENSURE(.basis_info_made, "no basis info")
     ENSURE(.atom.created,  "no atom list")
     scf_kind = .scfdata.kind
     if (scf_kind == "dft" AND .dftgrid.destroyed) then
       .dftgrid.create
       .dftgrid.set_defaults
     end
     .get_initial_guess
     .make_fock_matrix
     .initialise_scfdata
     .initialise_scfdata_error
!     .set_scfdata_dft_energy_correction
     .put_scf_results
     do
       if (.scfdata.scf_done) exit
       .extrapolate_fock_matrix
       .update_molecular_orbitals
       .schmidt_orthonormalise_MOs
       .make_scf_density_matrix
       .make_fock_matrix
       .update_scfdata
       .update_scfdata_error
!       .set_scfdata_dft_energy_correction
       .put_scf_results
     end
     .archive_scf_results
     .cleanup_scf
   end

   make_integration_grid
   ! Makes an integration grid for numerical integration.
   ! Note that the routine "dftgrid.make_grid" archives the grid.
     pt :: REALMAT*
     wt :: REALVEC*
     n_pts :: INT
     n_pts = .dftgrid.n_pts*.n_atom
     pt.create(n_pts,3)
     wt.create(n_pts)
     .dftgrid.make_grid(pt,wt,.atom)
     pt.destroy
     wt.destroy
   end

   make_grid_densities
   ! Make various "time-consuming" grid densities and archive them.
   ! Densities made in this routine:
   ! 1. density  (= rho)
   ! 2. grad of density (= nabla_rho)
     pt, nabla_rho :: REALMAT*
     wt, rho :: REALVEC*
     n_pts :: INT
     old_NOs :: BIN
     archive :: ARCHIVE
     old_NOs = FALSE
     if (.natural_orbitals.created) old_NOs = .natural_orbitals.any_created
     if (NOT old_NOs) .make_natural_orbitals
     n_pts = .dftgrid.n_pts*.n_atom
     pt.create(n_pts,3)
     wt.create(n_pts)
     rho.create(n_pts)
     nabla_rho.create(n_pts,3)
     .dftgrid.make_grid(pt,wt,.atom)
     .make_density_grid(rho,pt)
     .make_nabla_density_grid(nabla_rho,pt)
     archive.set(.name, "DENSITY_grid")
     archive.write(rho)
     archive.set(.name, "NABLA_DENSITY_grid")
     archive.write(nabla_rho)
     pt.destroy
     wt.destroy
     rho.destroy
     nabla_rho.destroy
      if (NOT old_NOs) .natural_orbitals.destroy_ptr_part
   end

   put_scf_results
   ! Put out the SCF results
     if (.scfdata.iteration==0 AND .scfdata.lambda_iteration==0) then
        .scfdata.put_banner
        if (.scfdata.fitting) .crystal.put_correction_data
     end
     .scfdata.put_results
   end

   initialise_scfdata
   ! Initialise the scf data, including iteration counters
     E_nuc,E_HF,E_K,dft_energy_correction :: REAL
     E_nuc = .nuclear_energy
     E_HF  = .scf_energy
     E_K   = .kinetic_energy
     if (.scfdata.kind.includes("dft")) then
       dft_energy_correction = .dft_energy_correction
       .scfdata.reset(nuclear_energy=E_nuc,energy=E_HF,kinetic_energy=E_K, &
                dft_energy_correction=dft_energy_correction,crystal=.crystal)
     else
       .scfdata.reset(nuclear_energy=E_nuc,energy=E_HF,kinetic_energy=E_K, &
                dft_energy_correction=ZERO,crystal=.crystal)
     end
   end

   update_scfdata
   ! Update the scf iteration count, scf energy and property data. The energy
   ! differences are used to test for convergence in the SCF procedure.
     E_HF,E_K,dft_energy_correction :: REAL
     E_HF = .scf_energy
     E_K  = .kinetic_energy
     if (.scfdata.kind.includes("dft")) then
       dft_energy_correction = .dft_energy_correction
       .scfdata.update(energy=E_HF,kinetic_energy=E_K, &
                dft_energy_correction=dft_energy_correction,crystal=.crystal)
     else
       .scfdata.update(energy=E_HF,kinetic_energy=E_K, &
                dft_energy_correction=ZERO,crystal=.crystal)
     end
   end

!   set_scfdata_dft_energy_correction
!   ! Set the scfdata dft energy correction to the SCF energy.  It is not an
!   ! error to call this routine without the scf being for dft.
!     dft_energy_correction :: REAL
!     if (.scfdata.kind.includes("dft")) then
!       dft_energy_correction = .dft_energy_correction
!       .scfdata.set(dft_energy_correction=dft_energy_correction)
!     end
!   end

   initialise_scfdata_error
   ! Reset the scfdata gradient of the SCF energy with respect to orbital
   ! rotations, otherwise known as the "diis error". This is used to check for
   ! SCF convergence.
     diis_error :: REAL
     .make_diis_error(diis_error)
     .scfdata.set_diis_error(diis_error)
   end

   update_scfdata_error
   ! Update the scfdata gradient of the SCF energy with respect to orbital
   ! rotations, otherwise known as the "diis error". This is used to check for
   ! SCF convergence.
     diis_error :: REAL
     .make_diis_error(diis_error)
     .scfdata.set_diis_error(diis_error)
   end

!  ********************************
!  Orbital update/cleaning routines
!  ********************************

   schmidt_orthonormalise_MOs
   ! Schmidt orthonormalise the ".molecular_orbitals" and archive
      .schmidt_orthonormalise(.molecular_orbitals)
      .archive_molecular_orbitals
   end

   schmidt_orthonormalise(MO,scale)
   ! Schmidt orthonormalise the molecular orbitals, "MO"
      MO :: OPMATRIX
      scale :: REAL, optional
       S :: REALMAT*
      S.create(.n_bf,.n_bf)
      .get_overlap_matrix(S)
      MO.schmidt_orthonormalise(S,scale)
      S.destroy
   end

   symmetrically_orthonormalise(MO)
   ! Symmetrically orthonormalise the molecular orbitals, "MO"
      MO :: OPMATRIX
       S :: REALMAT*
      S.create(.n_bf,.n_bf)
      .get_overlap_matrix(S)
      MO.symmetrically_orthonormalise(S)
      S.destroy
   end

   update_molecular_orbitals
   ! Solve for the molecular orbitals.  Requires a set of old molecular
   ! orbitals.
     if (.scfdata.using_MO_gradient_update) then; .MO_gradient_update
     else;                                        .MO_eigen_update
     end
   end

   MO_eigen_update
   ! Solve for the molecular orbitals.  Requires a set of old molecular
   ! orbitals.
   ! The new molecular orbitals "cU" are found from the old MOs "c" by solving :
   ! (c^T F c)U = c^T S c U E ... where U is an orthogonal matrix, F fock
   ! matrix.
     orb_kind :: STR
     e :: REALVEC*
     MO,F :: REALMAT*
     MOc,Fc :: CPXMAT*
     ENSURE(.molecular_orbitals.created,"no old MO's")
     ENSURE(.molecular_orbitals.any_created,"no old MO's")
!     .archive_molecular_orbitals(archive_name="old_molecular_orbitals")
     orb_kind = .scfdata.kind
     select case (orb_kind)
        case ("rhf","rdft","restricted_hartree_fock", &
              "rohf","restricted_open_shell_hartree_fock", &
              "xray_rhf","xray_rks","xray_rdft", &
              "noninteracting-group-rhf")
           e   => .orbital_energies.restricted
           MO  => .molecular_orbitals.restricted
           F   => .fock_matrix.restricted
           .MO_r_eigen_update(e,MO,F)
        case ("uhf","udft","xray_udft","unrestricted_hartree_fock")
           e   => .orbital_energies.alpha
           MO  => .molecular_orbitals.alpha
           F   => .fock_matrix.alpha
           .MO_r_eigen_update(e,MO,F)
           e   => .orbital_energies.beta
           MO  => .molecular_orbitals.beta
           F   => .fock_matrix.beta
           .MO_r_eigen_update(e,MO,F)
        case ("gchf","cghf","general_complex_hartree_fock")
           e   => .orbital_energies.general
           MOc => .molecular_orbitals.general_complex
           Fc  => .fock_matrix.general_complex
           .MO_gc_eigen_update(e,MOc,Fc)
     end
     .archive_molecular_orbitals
   end

   MO_r_eigen_update(MO_energies,MO,F)
   ! Solve for the new molecular orbital energies "MO_energies" and the new
   ! molecular orbitals "MO", given an initial old set (in "MO") and a fock
   ! matrix "F".  The new molecular orbitals "MO*U" are found from the old MOs
   ! "MO" by solving : (c^T F c)U = c^T S c U E ...... where U is an orthogonal
   ! matrix.
     MO_energies :: REALVEC
     MO,F :: REALMAT
     G,U,X,S :: REALMAT*
      i :: INT

     G.create(.n_bf,.n_bf)
     G = F
 !    G.change_basis(MO)

     X.create(.n_bf,.n_bf)
     S.create(.n_bf,.n_bf)
     .get_overlap_matrix(S)
     X.to_inverse_sqrt(S)
     S.destroy

     G.change_basis(X)

     ! Level shifting
     if (.scfdata.apply_level_shifting) then
       do i = .n_a + 1, .n_bf
         G(i,i) = .scfdata.level_shift + G(i,i)
       end
     end

     U.create(.n_bf,.n_bf)
     G.solve_eigenproblem(MO_energies,U)
 !    G.to_product_of(MO,U)
     G.to_product_of(X,U)
     MO = G
     U.destroy
     X.destroy
     G.destroy
   end

   MO_gc_eigen_update(MO_energies,MO,F)
   ! Solve for the new molecular orbital energies "MO_energies" and the new
   ! molecular orbitals "MO", given an initial old set (in "MO") and a fock
   ! matrix "F".
   ! The new molecular orbitals "MO*U" are found from the old MOs "MO" by
   ! solving (c^T F c)U = c^T S c U E ...... where U is an orthogonal matrix.
     MO_energies :: REALVEC
     MO,F :: CPXMAT
     G,U :: CPXMAT*
      i :: INT
     G.create(2*.n_bf,2*.n_bf)
     U.create(2*.n_bf,2*.n_bf)
     G = F
     G.change_basis(MO)
     ! Level shifting
     if (.scfdata.apply_level_shifting) then
       do i = .n_e + 1, 2*.n_bf
         G(i,i) = .scfdata.level_shift + G(i,i)
       end
     end
     G.solve_eigenproblem(MO_energies,U)
     G.to_product_of(MO,U)
     MO = G
     U.destroy
     G.destroy
   end

   MO_gradient_update
   ! Update the molecular orbitals using the gradient. Requires a set of old
   ! molecular orbitals. The new molecular orbitals "c" are found by
   ! incrementing a little along the gradient: (FDS - SDFDS)c and then
   ! reorthogonalising c.  NOTE: the normal Fock matrix DIIS update is turned
   ! off if this routine executes.
     orb_kind :: STR
     g,h,MO,F,P :: REALMAT*
     f1,f2,scale :: REAL
     step :: REAL = ONE
   ENSURE(.scfdata.using_MO_gradient_update,"not allowed")
   ENSURE(.fock_matrix.created,"no fock_matrix")
   ENSURE(.fock_matrix.any_created,"no fock_matrix")
   ENSURE(.density_matrix.created,"no density_matrix")
   ENSURE(.density_matrix.any_created,"no density_matrix")
   ENSURE(.molecular_orbitals.created,"no MO's")
   ENSURE(.molecular_orbitals.any_created,"no MO's")
!     .archive_molecular_orbitals(archive_name="old_molecular_orbitals")
     orb_kind = .scfdata.kind
     select case (orb_kind)
        case ("rhf","restricted_hartree_fock", &
              "rohf","restricted_open_shell_hartree_fock", &
              "xray_rhf","xray_rks","xray_rdft", &
              "noninteracting-group-rhf")
           g.create(.n_bf,.n_bf)
           F  => .fock_matrix.restricted
           P  => .density_matrix.restricted
           MO => .molecular_orbitals.restricted
           .make_MO_r_gradient(g,F,P,MO)
           f1 = g.trace_product_with(transpose(g))
           MO = MO - (TOL(2)/sqrt(f1))*g
           .schmidt_orthonormalise(.molecular_orbitals,scale)
           scale = ONE/scale
           .make_scf_density_matrix
           .make_fock_matrix
           h.create(.n_bf,.n_bf)
           .make_MO_r_gradient(h,F,P,MO)
           h = (scale*h-g)/TOL(2)
           f2 = h.trace_product_with(transpose(h))
           h.destroy
           step = f1/f2
           step = min(.scfdata.max_update_stepsize,step)
           write(*,*) "f1 = ",f1
           write(*,*) "f2 = ",f2
           write(*,*) "s  = ",step
           MO = MO - (step + TOL(2)/sqrt(f1))*g
       !   if (.scfdata.apply_MO_diis) .scfdata.diis.extrapolate(MO(:,1:.n_a),g(:,1:.n_a))
       !   if (NOT .scfdata.diis_used) then ! only do this the first time
       !      if (.scfdata.difference>ZERO) step = 0.70d0*step
       !      if (.scfdata.difference<ZERO) step = 1.10d0*step
       !      MO = MO - step*(.scfdata.MO_gradient_stepsize)*g
       !   end
           g.destroy
        case default
           DIE("SCF kind "//trim(orb_kind)//" not implemented")
     end
     .scfdata.set_diis_error(f1)
     .archive_molecular_orbitals
   end

   make_MO_r_gradient(g,F,P,c)
   ! Make the real gradient "g" of the moleculard orbitals,
   ! g = (FPS - (1/2)SPFPS)c
      g,F,P,c :: REALMAT
      S,W :: REALMAT*
      S.create(.n_bf,.n_bf); .get_overlap_matrix(S)
      W.create(.n_bf,.n_bf)
      W.to_product_of(P,S)
      S.to_product_of(F,W)
      g =       S ! = FPS
      W = -HALF*W ! = -PS ... 1/2 is for double occupancy in P
      S.plus_product_of(W,g,transpose_a=TRUE)
      W.destroy
      g.to_product_of(S,c)
      S.destroy
   end

! **************************
! Energy evaluation routines
! **************************

   put_scf_energy
   ! Output the scf energy.
     stdout.show("The SCF energy is ", .scf_energy)
     stdout.show("The kinetic energy is ", .kinetic_energy)
     if (.scfdata.kind.includes("dft")) then
       stdout.show("The DFT energy is ", .scf_energy+.dft_energy_correction)
     end
   end

   kinetic_energy result (res)
   ! Evaluates the SCF kinetic energy as a trace of ".density_matrix" with the
   ! ".kinetic matrix".
     res :: REAL
     scf_kind :: STR
     H :: REALMAT*
     HH :: CPXMAT*
   ENSURE(.density_matrix.created,    "no density matrix")
   ENSURE(.density_matrix.any_created,"no density matrix")
     scf_kind = .scfdata.kind
     select case (scf_kind)
        case ("rhf","rdft","restricted_hartree_fock","xray_rhf","xray_rks", &
              "xray_rdft","noninteracting-group-rhf")
           H.create(.n_bf,.n_bf); .get_kinetic_matrix(H)
           res = .density_matrix.restricted.trace_of_product(H)
           H.destroy
        case ("uhf","udft","xray_udft","unrestricted_hartree_fock","rohf", &
              "restricted_open_shell_hartree_fock")
           H.create(.n_bf,.n_bf); .get_kinetic_matrix(H)
           res = .density_matrix.alpha.trace_of_product(H)
           res = .density_matrix.beta.trace_of_product(H) + res
           H.destroy
        case ("cghf","gchf","general_complex_hartree_fock")
           HH.create(2*.n_bf,2*.n_bf); HH=ZERO
           H.create(.n_bf,.n_bf)
           .get_kinetic_matrix(H)
           HH.alpha_alpha_set_to(H)
           HH.beta_beta_set_to(H)
           H.destroy
           res = .density_matrix.general_complex.trace_of_product(HH)
           HH.destroy
        case default; DIE("unknown scf kind, "//trim(scf_kind))
     end
   end

   dft_energy_correction result (res)
   ! Evaluates the total Kohn-Sham energy (including nuclear).
     res :: REAL
     orb_kind :: STR
     orb_kind = .density_matrix.spinorbital_kind
     select case (orb_kind)
       case ("unrestricted")
         res = .u_dft_energy_correction
       case ("restricted")
         !res = .ex_corr_energy_term
         res = .r_dft_energy_correction
     end
   end

   scf_energy result (res)
   ! Evaluates the total SCF energy (including nuclear) as a trace of
   ! ".density_matrix" with the ".fock matrix".
     res :: REAL
   ENSURE(.density_matrix.created,    "no density matrix")
   ENSURE(.density_matrix.any_created,"no density matrix")
   ENSURE(.fock_matrix.created,    "no fock matrix")
   ENSURE(.fock_matrix.any_created,"no fock matrix")
     res = .scf_energy(.density_matrix,.fock_matrix)
   end

   scf_energy(P) result (res)
   ! Evaluates the total SCF energy (including nuclear) as a trace of
   ! "P" with the fock matrix ".fock_matrix".
     P :: OPMATRIX
     res :: REAL
   ENSURE(.fock_matrix.created,    "no fock matrix")
   ENSURE(.fock_matrix.any_created,"no fock matrix")
     res = .scf_energy(P,.fock_matrix)
   end

   scf_energy(P,F) result (res)
   ! Evaluates the total SCF energy (including nuclear) as a trace of
   ! "P" with the fock matrix "F".
     P,F :: OPMATRIX
     res :: REAL
     g :: INT
     scf_kind :: STR
     ENSURE(.scfdata.created, "no scf data")
     scf_kind = .scfdata.kind
     select case (scf_kind)
        case ("noninteracting-group-rhf")
           res = .scf_electronic_energy(P,F)
           do g = 1,size(.atom_group)
              res = res + .atom(.atom_group(g).element).nuclear_energy
           end
        case default
           res = .scf_electronic_energy(P,F) + .nuclear_energy
     end
   end

   scf_electronic_energy(P,core) result (res)
   ! Evaluates the SCF electronic energy as a trace of density "P" with
   ! ".fock_matrix". If "core" is present and FALSE, the core contribution
   ! is not added.
     P :: OPMATRIX
     core :: BIN, optional
     res :: REAL
     ENSURE(.fock_matrix.created,    "no fock matrix")
     ENSURE(.fock_matrix.any_created,"no fock matrix")
     res = .scf_electronic_energy(P,.fock_matrix,core)
   end

   scf_electronic_energy(P,F,core) result (res)
   ! Evaluates the SCF electronic energy as a trace of density "P" with
   ! fock matrix "F". If "core" is present and FALSE, the core contribution
   ! is not added.
     P,F :: OPMATRIX
     core :: BIN, optional
     res :: REAL
     add_core :: BIN
     scf_kind :: STR
     Fr :: REALMAT*
     Fc :: CPXMAT*
     scf_kind = .scfdata.kind
     add_core = TRUE
     if (present(core)) add_core = core
     select case (scf_kind)
        case ("rhf","restricted_hartree_fock", &
              "xray_rdft","rdft", &
              "xray_rhf","xray_rks", &
              "noninteracting-group-rhf")
           Fr.create(.n_bf,.n_bf)
           Fr = F.restricted
           if (add_core) .add_core_hamiltonian(Fr)
           res = HALF * P.restricted.trace_of_product(Fr)
           Fr.destroy
!        case ("xray_rdft","rdft")
!           Fr.create(.n_bf,.n_bf)
!           Fr = F.restricted
!           if (add_core) .add_core_hamiltonian(Fr)
!           res = HALF * P.restricted.trace_of_product(Fr)
!           res = res + .ex_corr_energy_term
!           Fr.destroy
        case ("uhf","unrestricted_hartree_fock", &
              "xray_udft","udft", &
              "rohf","restricted_open_shell_hartree_fock", &
              "pnd_uhf")
           Fr.create(.n_bf,.n_bf);
           Fr = F.alpha
           if (add_core) .add_core_hamiltonian(Fr)
           res = HALF * P.alpha.trace_of_product(Fr)
           Fr = F.beta
           if (add_core) .add_core_hamiltonian(Fr)
           res = HALF * P.beta.trace_of_product(Fr) + res
           Fr.destroy
!        case ("udft","xray_udft")
!           Fr.create(.n_bf,.n_bf);
!           Fr = F.alpha
!           if (add_core) .add_core_hamiltonian(Fr)
!           res = HALF * P.alpha.trace_of_product(Fr)
!           Fr = F.beta
!           if (add_core) .add_core_hamiltonian(Fr)
!           res = HALF * P.beta.trace_of_product(Fr) + res
!           Fr.destroy
!           res = res + .u_dft_energy_correction(P)
        case ("cghf","gchf","general_complex_hartree_fock","complex_general_hartree_fock")
           Fc.create(2*.n_bf,2*.n_bf);
           Fc = F.general_complex
           if (add_core) .add_core_hamiltonian(Fc)
           res = HALF * P.general_complex.trace_of_product(Fc)
           Fc.destroy
        case default; DIE("unknown scf kind, "//trim(scf_kind))
     end
   end

   scf_electronic_energy(P,nuclei) result (res)
   ! Evaluates the SCF electronic energy as a trace of "D" with the
   ! ".fock_matrix".  "nuclei" lists the nuclei to be used for obtaining n->e
   ! attractions.
     P :: OPMATRIX, target
     nuclei :: INTVEC
     res :: REAL
     add_core :: BIN
     scf_kind :: STR
     F :: REALMAT*
     FF :: CPXMAT*
     scf_kind = .scfdata.kind
     ENSURE(.fock_matrix.created,    "no fock matrix")
     ENSURE(.fock_matrix.any_created,"no fock matrix")
     ENSURE(.density_matrix.created,    "no density matrix")
     ENSURE(.density_matrix.any_created,"no density matrix")
     add_core = TRUE
     select case (scf_kind)
        case ("rhf","restricted_hartree_fock", &
              "xray_rhf","xray_rks", &
              "xray_rdft","rdft", &
              "noninteracting-group-rhf")
           F.create(.n_bf,.n_bf)
           F = .fock_matrix.restricted
           .add_core_hamiltonian(F,nuclei)
           res = HALF * P.restricted.trace_of_product(F)
           F.destroy
!        case ("xray_rdft","rdft")
!           F.create(.n_bf,.n_bf)
!           F = .fock_matrix.restricted
!           .add_core_hamiltonian(F,nuclei)
!           res = HALF * P.restricted.trace_of_product(F)
!           res = res + .ex_corr_energy_term
!           F.destroy
        case ("uhf","udft","xray_udft","unrestricted_hartree_fock", &
              "rohf","restricted_open_shell_hartree_fock", &
              "pnd_uhf")
           F.create(.n_bf,.n_bf);
           F = .fock_matrix.alpha
           .add_core_hamiltonian(F,nuclei)
           res = HALF * P.alpha.trace_of_product(F)
           F = .fock_matrix.beta
           .add_core_hamiltonian(F,nuclei)
           res = HALF * P.beta.trace_of_product(F) + res
           F.destroy
        case ("cghf","gchf","general_complex_hartree_fock","complex_general_hartree_fock")
           FF.create(2*.n_bf,2*.n_bf);
           FF = .fock_matrix.general_complex
           .add_core_hamiltonian(FF,nuclei)
           res = HALF * P.general_complex.trace_of_product(FF)
           FF.destroy
        case default; DIE("unknown scf kind, "//trim(scf_kind))
     end
   end

   expectation(X) result (res)
   ! Evaluates the expectation value of the matrix of the operator X
   ! with the current density matrix
     X :: REALMAT
     res :: REAL
     orb_kind :: STR
   ENSURE(X.is_square,"X operator matrix is not square")
     orb_kind = .density_matrix.spinorbital_kind
     select case (orb_kind)
        case ("restricted")
           ENSURE(X.dim1==.n_bf,"wrong size, X")
           res = .density_matrix.restricted.trace_of_product(X)
        case ("unrestricted")
           ENSURE(X.dim1==.n_bf,"wrong size, X")
           res = .density_matrix.alpha.trace_of_product(X)
           res = .density_matrix.beta.trace_of_product(X) + res
        case ("general_complex")
           ENSURE(X.dim1==2*.n_bf,"wrong size, X")
           res = .density_matrix.general_complex.trace_of_product(X)
        case default
           DIE("unimplemented kind, "//trim(orb_kind))
     end
   end

! ******************
! Archiving routines
! ******************

   archive_scf_results
   ! Save the SCF results in various archives on disk
      .archive_density_matrix
      .archive_molecular_orbitals
      .archive_orbital_energies
      .archive_fock_matrix
   end

   archive_density_matrix(archive_name)
   ! Save the density matrix in an archive on disk
     archive_name :: STR(*), optional
     name :: STR
     archive :: ARCHIVE
     name = "density_matrix"
     if (present(archive_name)) name = archive_name
     archive.set(.name,name)
     archive.write(.density_matrix)
     if (.scfdata.created) then
     if (.scfdata.kind.includes("xray_")) then
        archive.set(.name,trim(name)//",lambda="//trim(.scfdata.lambda.to_str("f5.3")))
        archive.write(.density_matrix)
     end
     end
   end

   archive_molecular_orbitals(archive_name)
   ! Save the molecular orbitals and energies in an archive on disk
     archive_name :: STR(*), optional
     name :: STR
     archive :: ARCHIVE
     name = "molecular_orbitals"
     if (present(archive_name)) name = archive_name
     archive.set(.name,name)
     archive.write(.molecular_orbitals)
     if (.scfdata.created) then
     if (.scfdata.kind.includes("xray_")) then
        archive.set(.name,trim(name)//",lambda="//trim(.scfdata.lambda.to_str("f5.3")))
        archive.write(.molecular_orbitals)
     end
     end
   end

   archive_orbital_energies(archive_name)
   ! Save the orbitals energies in an archive on disk
     archive_name :: STR(*), optional
     name :: STR
     archive :: ARCHIVE
     name = "orbital_energies"
     if (present(archive_name)) name = archive_name
     archive.set(.name,name)
     archive.write(.orbital_energies)
   end

   archive_fock_matrix(archive_name)
   ! Save the fock matrix in an archive on disk
     archive_name :: STR(*), optional
     name :: STR
     archive :: ARCHIVE
     name = "fock_matrix"
     if (present(archive_name)) name = archive_name
     archive.set(.name,name)
     archive.write(.fock_matrix)
   end

   archive_natural_orbitals(archive_name)
   ! Save the natural_orbitals in an archive on disk
     archive_name :: STR(*), optional
     name :: STR
     archive :: ARCHIVE
   ENSURE(.natural_orbitals.created,"no natural orbitals")
     name = "natural_orbitals"
     if (present(archive_name)) name = archive_name
     archive.set(.name,name)
     archive.write(.natural_orbitals)
   end

   archive_occupation_numbers(archive_name)
   ! Save the natural occupation numbers in an archive on disk
     archive_name :: STR(*), optional
     name :: STR
     archive :: ARCHIVE
   ENSURE(.occupation_numbers.created,"no natural occupation numbers")
     name = "occupation_numbers"
     if (present(archive_name)) name = archive_name
     archive.set(.name,name)
     archive.write(.occupation_numbers)
   end

   get_scf_results ::: leaky
   ! Get the SCF results in from archives. Do not get the density matrix,
   ! because it can/should be generated from the orbitals, depending on the kind
   ! of SCF.
     a_kind :: STR
     a_kind = .scfdata.molecular_orbital_kind
     .unarchive_molecular_orbitals(genre=a_kind)
     a_kind = .scfdata.orbital_energies_kind
     .unarchive_orbital_energies(genre=a_kind)
   end

   unarchive_density_matrix(archive_name,genre) ::: leaky
   ! Recover the density matrix from an archive on disk
     archive_name,genre :: STR(*), optional
     name,a_kind :: STR
     archive :: ARCHIVE
     name = "density_matrix"
     if (present(archive_name)) name = archive_name
     if (present(genre)) then; a_kind = genre
     else;                            a_kind = .density_matrix.spinorbital_kind
     end
     archive.set(.name,name,genre=a_kind)
     archive.read(.density_matrix)
   end

   unarchive_molecular_orbitals(archive_name,genre) ::: leaky
   ! Save the molecular orbitals and energies in an archive on disk
     archive_name,genre :: STR(*), optional
     name,a_kind :: STR
     archive :: ARCHIVE
     name = "molecular_orbitals"
     if (present(archive_name)) name = archive_name
     if (present(genre)) then; a_kind = genre
     else;                            a_kind = .molecular_orbitals.spinorbital_kind
     end
     archive.set(.name,name,a_kind)
     archive.read(.molecular_orbitals)
   end

   unarchive_orbital_energies(archive_name,genre) ::: leaky
   ! Save the orbitals energies in an archive on disk
     archive_name,genre :: STR(*), optional
     name,a_kind :: STR
     archive :: ARCHIVE
     name = "orbital_energies"
     if (present(archive_name)) name = archive_name
     if (present(genre)) then; a_kind = genre
     else;                            a_kind = .orbital_energies.spinorbital_kind
     end
     archive.set(.name,name,a_kind)
     archive.read(.orbital_energies)
   end

   unarchive_fock_matrix(archive_name,genre) ::: leaky
   ! Save the fock matrix in an archive on disk
     archive_name,genre :: STR(*), optional
     name,a_kind :: STR
     archive :: ARCHIVE
     name = "fock_matrix"
     if (present(archive_name)) name = archive_name
     if (present(genre)) then; a_kind = genre
     else;                            a_kind = .fock_matrix.spinorbital_kind
     end
     archive.set(.name,name,a_kind)
     archive.read(.fock_matrix)
   end

   unarchive_natural_orbitals(archive_name,genre) ::: leaky
   ! Recover the natural orbitals from an archive on disk
     archive_name,genre :: STR(*), optional
     name,a_kind :: STR
     archive :: ARCHIVE
     name = "natural_orbitals"
     if (present(archive_name)) name = archive_name
     if (present(genre))          then; a_kind = genre
     else if (.natural_orbitals.created) then; a_kind = .natural_orbitals.spinorbital_kind
     else; DIE("unknown archive kind")
     end
     archive.set(.name,name,a_kind)
     archive.read(.natural_orbitals)
   end

   unarchive_occupation_numbers(archive_name,genre) ::: leaky
   ! Recover the natural orbital occupation numbers from an archive on disk
     archive_name,genre :: STR(*), optional
     name,a_kind :: STR
     archive :: ARCHIVE
     name = "occupation_numbers"
     if (present(archive_name)) name = archive_name
     if (present(genre)) then; a_kind = genre
     else;                            a_kind = .occupation_numbers.spinorbital_kind
     end
     archive.set(.name,name,a_kind)
     archive.read(.occupation_numbers)
   end

   archive_exists(archive_name,genre) result (res)
   ! Return TRUE if the fock matrix exists
     archive_name,genre :: STR(*)
     res :: BIN
     archive :: ARCHIVE
     archive.set(.name,archive_name,genre)
     res = archive.exists
   end

   archive_doesnt_exist(archive_name,genre) result (res)
   ! Return TRUE if the fock matrix exists
     archive_name,genre :: STR(*)
     res :: BIN
     archive :: ARCHIVE
     archive.set(.name,archive_name,genre)
     res = NOT archive.exists
   end

! ********************
! SCF cleanup routines
! ********************

   cleanup_scf
   ! Clean up the SCF files produced. NOTE: Does not delete integral files
     .scfdata.cleanup_diis
     .delete_old_scf_archives
   end

   destroy_scf_results ::: leaky
   ! Destroy the SCF results in memory
     .density_matrix.destroy
     .density_matrix.create(.n_bf)
     .molecular_orbitals.destroy
     .molecular_orbitals.create(.n_bf)
     .orbital_energies.destroy
     .orbital_energies.create(.n_bf)
   end

   delete_scf_archives
   ! Delete any matrices stored on disk.
      archive :: ARCHIVE
      archive.set(.name,"density_matrix");     archive.delete_all_genres
      archive.set(.name,"molecular_orbitals"); archive.delete_all_genres
      archive.set(.name,"orbital_energies");   archive.delete_all_genres
      archive.set(.name,"fock_matrix");        archive.delete_all_genres
      archive.set(.name,"constraint_matrix");  archive.delete_all_genres
      .delete_old_scf_archives
   end

   delete_scf_density_archive
   ! Delete the SCF density matrix archives
      archive :: ARCHIVE
      archive.set(.name,"molecular_orbitals"); archive.delete_all_genres
      archive.set(.name,"orbital_energies");   archive.delete_all_genres
   end

   delete_scf_MO_archive
   ! Delete the SCF MO archives
      archive :: ARCHIVE
      archive.set(.name,"molecular_orbitals"); archive.delete_all_genres
      archive.set(.name,"orbital_energies");   archive.delete_all_genres
   end

   delete_scf_fock_archive
   ! Delete the SCF fock matrix archives
      archive :: ARCHIVE
      archive.set(.name,"fock_matrix");        archive.delete_all_genres
   end

   delete_old_scf_archives
   ! Delete any matrices stored on disk.
      archive :: ARCHIVE
      archive.set(.name,"old_density_matrix");     archive.delete_all_genres
      archive.set(.name,"old_molecular_orbitals"); archive.delete_all_genres
      archive.set(.name,"old_orbital_energies");   archive.delete_all_genres
   end

   delete_scf_integrals
   ! Delete all integral files. This is required whenever the geometry is
   ! changed.
      archive :: ARCHIVE
      archive.set(.name,"overlap_matrix"); archive.delete_all_genres
      archive.set(.name,"kinetic_matrix"); archive.delete_all_genres
      archive.set(.name,"nuclear_matrix"); archive.delete_all_genres
      archive.set(.name,"core_matrix");    archive.delete_all_genres
      archive.set(.name,"fock_matrix");    archive.delete_all_genres
      archive.set(.name,"eri_integrals");  archive.delete_all_genres
      archive.set(.name,"eri_index");      archive.delete_all_genres
      archive.set(.name,"ft_ints");        archive.delete_all_genres
   end

! *************************
! Canonicalisation routines
! *************************

   canonicalize_MOs
   ! Generate the Fock matrix from the molecular orbitals and diagonalise it
   ! on the occupied-occupied block to get the canonical molecular orbitals.
     scf_kind :: STR
     ENSURE(.molecular_orbitals.created,"need old MOs!")
     ENSURE(.orbital_energies.created,"need old energies")
     .make_scf_density_matrix
     .make_fock_matrix
     scf_kind = .scfdata.kind
     select case (scf_kind)
        case ("rhf","dft","restricted_hartree_fock", &
              "rohf","restricted_open_shell_hartree_fock", &
              "xray_rhf","xray_rks","xray_rdft", &
              "noninteracting-group-rhf")
           .orbital_energies.destroy
           .orbital_energies.create(.n_bf,"restricted")
           .canonicalize_r_MO(.orbital_energies.restricted, &
                              .molecular_orbitals.restricted, &
                              .fock_matrix.restricted)
           stdout.flush
           stdout.text("Canonicalized molecular orbital energies:")
           stdout.put(.orbital_energies.restricted(1:.n_e/2), format="column")
        case default; DIE("unknown scf kind, "//trim(scf_kind))
     end
   end

   canonicalize_r_MO(MO_energies,MO,F)
   ! Digaonalise the Fock matrix "F" in the occupied-occupied block of the
   ! molecular orbitals "MO", and reset the occupied "MO_energies".
     MO_energies :: REALVEC
     MO,F :: REALMAT
     G,U,MO_old :: REALMAT*
     n :: INT
     n = .n_e/2
     G.create(n,n)
     U.create(n,n)
     MO_old.create(.n_bf,n)
     MO_old = MO(:,1:n)
     F.change_basis(G,MO_old)
     MO_energies = ZERO
     G.solve_eigenproblem(MO_energies,U)
     MO(:,1:n).to_product_of(MO_old,U)
     MO_old.destroy
     U.destroy
     G.destroy
   end

! ******************************
! Initial orbital guess routines
! ******************************

   get_initial_guess ::: leaky
   ! Get the initial guess for the ".density_matrix" and ".molecular_orbitals"
   ! If .scfdata.initial_mos is set, it overides .initial_density.
      initial_mos :: STR
      initial_mos = .scfdata.initial_mos
      if (initial_mos/=" ") then; .get_initial_MOs
      else;                       .get_initial_density
      end
   end

   get_initial_MOs ::: leaky
   ! Get the initial guess for the .molecular_orbitals
   ! Convert the .molecular_orbitals, if neccesary.
      initial_mos :: STR
      initial_mos = .scfdata.initial_mos
      select case (initial_mos)
         case("restricted          ") ; .read_old_MOs_guess
         case("unrestricted        ") ; .read_old_MOs_guess
         case("general             ") ; .read_old_MOs_guess
         case("restricted_complex  ") ; .read_old_MOs_guess
         case("complex_unrestricted") ; .read_old_MOs_guess
         case("unrestricted_complex") ; .read_old_MOs_guess
         case("general_complex     ") ; .read_old_MOs_guess
         case("complex_general     ") ; .read_old_MOs_guess
         case default;   UNKNOWN(initial_mos)
      end
   end

   read_old_MOs_guess ::: leaky
   ! Get the initial guess for the .molecular_orbitals by reading an old archive
   ! of .molecular_orbitals, and then make the SCF density matrix as well.
   ! Convert the .molecular_orbitals, if neccesary.
      arch :: ARCHIVE
      arch.set(.name,"molecular_orbitals",genre=.scfdata.initial_mos)
      arch.read(.molecular_orbitals)
      .molecular_orbitals.convert_to(.scfdata.molecular_orbital_kind,.n_a,.n_b, &
                                     .scfdata.quantization_axis)
      .make_scf_density_matrix
      .orbital_energies.create(opveckind=.scfdata.orbital_energies_kind)
   end

   make_atom_MOs_guess ::: leaky
   ! Get the initial guess for the .molecular_orbitals by getting the highest
   ! occupied restricted natural orbitals from the sum of atomic densities guess
   ! for the density matrix. Convert these .molecular_orbitals, if neccesary.
   ! Also make the SCF .density_matrix from these .molecular_orbitals.
      orb_kind :: STR
      arch :: ARCHIVE
      .get_atom_density
      if (.density_matrix.spinorbital_kind/="restricted") then
         arch.set(.name,"atom_density_matrix", genre="restricted")
         .density_matrix.destroy("restricted")
         arch.read(.density_matrix)
      end
      .make_natural_orbitals
      .put_natural_orbitals
      .assign_MOs_to_NOs
      orb_kind = .scfdata.molecular_orbital_kind
      .molecular_orbitals.convert_to(orb_kind,.n_a,.n_b,.scfdata.quantization_axis)
      .make_scf_density_matrix
      .orbital_energies.create(opveckind=.scfdata.orbital_energies_kind)
   end

   get_initial_density ::: leaky
   ! Get the initial guess for the ".density_matrix"
      initial_density :: STR
      initial_density = .scfdata.initial_density
      select case (initial_density)
         case("core                ") ; .make_core_guess
         case("fock                ") ; .make_fock_guess
         case("atom                ") ; .make_atom_guess
         case("group               ") ; .make_group_guess
         case("restricted          ") ; .make_density_guess
         case("unrestricted        ") ; .make_density_guess
         case("general             ") ; .make_density_guess
         case("restricted_complex  ") ; .make_density_guess
         case("complex_unrestricted") ; .make_density_guess
         case("unrestricted_complex") ; .make_density_guess
         case("general_complex     ") ; .make_density_guess
         case("complex_general     ") ; .make_density_guess
         case default;  DIE("unknown density, "//trim(initial_density))
      end
   end

   make_density_guess ::: leaky
   ! Read an old .density_matrix of type "initial_guess" and use it to
   ! make initial .molecular_orbitals to start an scf calculation.
   ! Convert the .density_matrix, if neccesary.
      initial_density :: STR
      arch :: ARCHIVE
      initial_density = .scfdata.initial_density
      arch.set(.name,"density_matrix")
      arch.read(.density_matrix,genre=initial_density)
      .density_matrix.convert_to(newkind = .scfdata.spinorbital_kind)
      .make_fock_matrix  ! Make a fock matrix
      .make_fock_guess   ! Get a reasonable set of starting MO's
   end

   make_core_guess ::: leaky
   ! Do a core scf for the ".density_matrix", ".molecular_orbitals" and
   ! ".orbital_energies"
     orb_kind :: STR
     .destroy_scf_results
     .orbital_energies.destroy("restricted")
     .orbital_energies.create("restricted")
     .molecular_orbitals.destroy("restricted")
     .molecular_orbitals.create("restricted")
     .make_r_core_guess(.orbital_energies.restricted,.molecular_orbitals.restricted)
     orb_kind = .scfdata.orbital_energies_kind
     .orbital_energies.convert_to(orb_kind)
     orb_kind = .scfdata.molecular_orbital_kind
     .molecular_orbitals.convert_to(orb_kind,.n_a,.n_b,.scfdata.quantization_axis)
     .make_scf_density_matrix
     .make_fock_matrix  ! Make a fock matrix (only to get MO's)
     .make_fock_guess   ! Get a reasonable set of starting MO's
   end

   make_r_core_guess(MO_energies,MO)
   ! Do a real core scf for the molecular orbital energies  "MO_energies"
   ! and the molecular_orbitals "MO"
     MO_energies :: REALVEC
     MO :: REALMAT
     S,R,H :: REALMAT* DEFAULT_NULL
     !  H~ = S^-1/2 H S^-1/2
     !  c  = S^-1/2 c~
     S.create(.n_bf,.n_bf); .get_overlap_matrix(S)
     R.create(.n_bf,.n_bf); R.to_inverse_sqrt(S)
     H.create(.n_bf,.n_bf); .get_core_matrix(H)
     S.to_product_of(R,H)
     H.to_product_of(S,R)
     H.solve_eigenproblem(MO_energies,MO)
     H.to_product_of(R,MO)
     MO = H
     H.destroy
     R.destroy
     S.destroy
   end

   make_atom_guess ::: leaky
   ! Make a ".density matrix" and fock matrix from the sum of atomic densities.
   ! Then get initial orbitals from this fock matrix, and make the density
   ! corresponding to these initial orbitals.
      ENSURE(.scfdata.kind/="rohf","atom guess not available for ROHF")
      .get_atom_density
      .make_fock_matrix       ! Make a fock matrix (only to get MO's)
      .make_fock_guess        ! Get a reasonable set of starting MO's
   end

   get_atom_density ::: leaky
   ! Reads ".density_matrix" from the archive, otherwise makes it and
   ! writes to the arch.
     arch :: ARCHIVE
     write_archive,calc_it :: BIN
     calc_it = .scfdata.direct
     write_archive = NOT .scfdata.direct
     if (NOT calc_it) then
       arch.set(.name,"atom_density_matrix", genre="restricted")
       if (arch.exists) then
         .density_matrix.destroy
         .density_matrix.create(.n_bf,"restricted")
         arch.read(.density_matrix)
         calc_it = FALSE
         write_archive = FALSE
       else
         calc_it = TRUE
       end
     end
     if (calc_it) then
       .make_atom_density
     end
     .density_matrix.convert_to(.scfdata.spinorbital_kind,factor=HALF)
     if (write_archive) arch.write(.density_matrix, genre="restricted")
   end

   make_atom_density ::: leaky
   ! Make a ".density matrix" from the sum of atomic densities
   ! if output is present and FALSE the density matrix is not archived
     k,l,kl,a,b,start,step :: INT
     mol :: MOL*
     old_do_parallel :: BIN
     first,last :: INTVEC*
     atom_kind :: INTVECVEC*
     .density_matrix.destroy
     .density_matrix.create(.n_bf,"restricted")
     .density_matrix.restricted = ZERO
     .atom.make_atom_basis_fn_limits(first,last)
     .atom.make_atom_kind_list(atom_kind)

     start = 1 + tonto_parallel.this_proc
     step = tonto_parallel.n_proc
     old_do_parallel = tonto_parallel.do_parallel
     tonto_parallel.do_parallel = FALSE

     do k=start,size(atom_kind),step ! Do an SCF for every different kind of atom
       mol.create
       l = atom_kind(k).element(1)
       .make_molecule_from_atom(l,mol)
       if (mol.no_of_electrons >= 1) then
         mol.scfdata.convergence = 0.0001
         mol.scfdata.output = FALSE
         mol.scfdata.using_fock_diis = FALSE
         mol.scfdata.using_MO_diis = FALSE
         mol.scfdata.using_rough_convergence = FALSE
         mol.scfdata.direct = TRUE
         mol.scf
         mol.make_ao_density_matrix
         mol.pointgroup.create("oh")
         mol.symmetrise(mol.density_matrix)
         do l = 1,size(atom_kind(k).element) ! Copy this atom density to every
           kl = atom_kind(k).element(l)      ! atom of this kind
           a = first(kl); b = last(kl)
          .density_matrix.restricted(a:b,a:b) = &
          .density_matrix.restricted(a:b,a:b) &
          + mol.density_matrix.restricted
         end
       end
       mol.atom.nullify_ptr_part ! do not destroy these
       nullify(mol.basis)        ! do not destroy this
       nullify(mol.slaterbasis)  ! do not destroy this
       nullify(mol.coppensbasis) ! do not destroy this
       mol.delete_scf_integrals
       mol.delete_scf_archives
       mol.destroy
     end

     tonto_parallel.do_parallel = old_do_parallel
     tonto_parallel.sum_symmetric_matrices(.density_matrix.restricted)

     atom_kind.destroy
     last.destroy
     first.destroy
   end

   make_group_guess ::: leaky
   ! Make a ".density matrix" and fock matrix from the sum of noninteracting
   ! atom_group densities. Then get initial orbitals from this fock matrix,
   ! and make the density corresponding to these initial orbitals.
      ENSURE(.scfdata.kind/="rohf","atom guess not available for ROHF")
      .get_group_density
      .make_fock_matrix       ! Make a fock matrix (only to get MO's)
      .make_fock_guess        ! Get a reasonable set of starting MO's
   end

   get_group_density ::: leaky
   ! Reads ".density_matrix" from the archive, otherwise makes it and
   ! writes to the arch.
     arch :: ARCHIVE
     arch.set(.name,"group_density_matrix", genre="restricted")
     if (arch.exists) then
        .density_matrix.destroy
        .density_matrix.create(.n_bf,"restricted")
        arch.read(.density_matrix)
     else
        .make_group_density
     end
     .density_matrix.convert_to(.scfdata.spinorbital_kind,factor=HALF)
   end

   make_group_density(MOs,output) ::: leaky
   ! Make a ".density matrix" from the sum of atom_group densities.
   ! If "MOs" is present and true, make ".molecular_orbitals" which
   ! are the columns of orbitals from each group and also make the
   ! ".occupation_numbers" vector set to 2 for the occupied group MO's.
   ! If output is present and FALSE the density matrix is not archived
     MOs :: BIN, OPTIONAL
     output :: BIN, OPTIONAL
     do_output,do_MOs :: BIN
     g,n_g,a,b,aa,bb,faa,laa,fbb,lbb,fa,la,fb,lb, ms,mf, no :: INT
     mol :: MOL*
     arch :: ARCHIVE
   ENSURE(.atom_group.created,"no atom_group info")
     do_output=TRUE
     if (present(output)) do_output=output
     do_MOs=FALSE
     if (present(MOs)) do_MOs=MOs
     .density_matrix.destroy
     .density_matrix.create(.n_bf,"restricted")
     .density_matrix.restricted = ZERO
     if (do_MOs) then
     .molecular_orbitals.destroy
     .molecular_orbitals.create(.n_bf,"restricted")
     .molecular_orbitals.restricted = ZERO
     .occupation_numbers.destroy
     .occupation_numbers.create(.n_bf,"restricted")
     .occupation_numbers.restricted = ZERO
     end
     n_g = size(.atom_group)
     .atom_group_energy.create(n_g)
     .atom_group_energy = ZERO
     mf = 0
     do g = 1,n_g ! Do an SCF for every atom group
       mol.create
       .make_molecule_from_atom_group(g,mol)
       if (mol.no_of_electrons >= 1) then
         mol.scfdata.convergence = 0.0001
         mol.scfdata.output = TRUE
         mol.scfdata.direct = TRUE
         if (size(.atom_group(g).element)>1) &
         mol.scfdata.initial_density = "atom"
         mol.scf
         .atom_group_energy(g) = mol.scfdata.energy
         mol.make_ao_density_matrix
         do a = 1,size(.atom_group(g).element) ! Copy this atom density
         do b = 1,size(.atom_group(g).element)
            aa  = .atom_group(g).element(a)
            bb  = .atom_group(g).element(b)
            faa = .first_basis_fn_for_atom(aa)
            fbb = .first_basis_fn_for_atom(bb)
            laa = .last_basis_fn_for_atom(aa)
            lbb = .last_basis_fn_for_atom(bb)
            fa  = mol.first_basis_fn_for_atom(a)
            fb  = mol.first_basis_fn_for_atom(b)
            la  = mol.last_basis_fn_for_atom(a)
            lb  = mol.last_basis_fn_for_atom(b)
            .density_matrix.restricted(faa:laa,fbb:lbb) = &
            .density_matrix.restricted(faa:laa,fbb:lbb) &
            + mol.density_matrix.restricted(fa:la,fb:lb)
         end
         end
         if (do_MOs) then
         ms = mf + 1
         mf = mf + mol.n_bf
         do a = 1,size(.atom_group(g).element)
            aa  = .atom_group(g).element(a)
            faa = .first_basis_fn_for_atom(aa)
            laa = .last_basis_fn_for_atom(aa)
            fa  = mol.first_basis_fn_for_atom(a)
            la  = mol.last_basis_fn_for_atom(a)
            .molecular_orbitals.restricted(faa:laa,ms:mf) = &
            .molecular_orbitals.restricted(faa:laa,ms:mf) &
            + mol.molecular_orbitals.restricted(fa:la,:)
         end
         no = mol.n_e/2
         .occupation_numbers.restricted(ms:ms+no-1) = TWO
         end
       end
       mol.atom.nullify_ptr_part ! do not destroy these
       nullify(mol.basis)        ! do not destroy this
       nullify(mol.slaterbasis)  ! do not destroy this
       nullify(mol.coppensbasis) ! do not destroy this
       mol.delete_scf_integrals
     ! mol.delete_scf_archives   ! keep group density matrices, etc ...
       mol.delete_old_scf_archives
       mol.destroy
     end
     if (do_output) then
       arch.set(.name,"group_density_matrix", genre="restricted")
       arch.write(.density_matrix, genre="restricted")
     end
     if (do_output AND do_MOs) then
       arch.set(.name,"group_molecular_orbitals", genre="restricted")
       arch.write(.molecular_orbitals, genre="restricted")
     end
   end

   make_group_energies(g,E_SCF,E_T,E_Z,E_C,E_K,fac)
   ! Assuming group densities exist (see make_group_density), then for group
   ! number "g" make the group SCF energy "E_SCF", the group kinetic energy
   ! "E_T", the group nuclear attraction energy "E_Z", the group coulomb energy
   ! "E_C", and the group exchange energy "E_K". If "fac" is present, multiply
   ! all the energy values by this factor.
     g :: INT
     E_SCF,E_T,E_Z,E_C,E_K :: REAL
     fac :: REAL, optional
     mol :: MOL*
     archive :: ARCHIVE
     P,T,Z,C,K :: REALMAT*
   ENSURE(.atom_group.created,"no atom_group info")
     mol.create
     .make_molecule_from_atom_group(g,mol)
     E_SCF = ZERO
     E_T = ZERO
     E_Z = ZERO
     E_C = ZERO
     E_K = ZERO
     if (mol.no_of_electrons >= 1) then
        archive.set(.name,"density_matrix","restricted")
        P.create(mol.n_bf,mol.n_bf)
        archive.read(P)
        E_SCF = .atom_group_energy(g)
        T.create(mol.n_bf,mol.n_bf)
        mol.get_kinetic_matrix(T)
        E_T = T.trace_product_with(P)
        T.destroy
        Z.create(mol.n_bf,mol.n_bf)
        mol.get_nuclear_matrix(Z)
        E_Z = Z.trace_product_with(P)
        mol.make_nuclear_matrix(Z)
        Z.destroy
        !
        C.create(mol.n_bf,mol.n_bf)
        K.create(mol.n_bf,mol.n_bf)
        mol.make_r_JK_nosym(C,K,P)
        E_C = HALF*C.trace_product_with(P)
        E_K = -QUARTER*K.trace_product_with(P)
        K.destroy
        C.destroy
        P.destroy
     end
     mol.atom.nullify_ptr_part ! do not destroy these
     nullify(mol.basis)        ! do not destroy this
     nullify(mol.slaterbasis)  ! do not destroy this
     nullify(mol.coppensbasis) ! do not destroy this
     mol.delete_scf_integrals
   ! mol.delete_scf_archives   ! keep group density matrices, etc ...
     mol.delete_old_scf_archives
     mol.destroy
     if (present(fac)) then
        E_SCF = fac*E_SCF
        E_T   = fac*E_T
        E_Z   = fac*E_Z
        E_C   = fac*E_C
        E_K   = fac*E_K
     end
   end

   make_fock_guess ::: leaky
   ! From an initial .fock_matrix make the .molecular_orbitals, and
   ! .orbital_energies.  Then make the .density_matrix from these orbitals.
   ! Destroy .fock_matrix afterwards
     orb_kind :: STR
     e :: REALVEC*
     MO,F :: REALMAT*
     MOc,Fc :: CPXMAT*
     orb_kind = .scfdata.spinorbital_kind
   ENSURE(.fock_matrix.created(orb_kind),"need an initial fock matrix")
     .destroy_scf_results
     orb_kind = .scfdata.kind
     select case (orb_kind)
     !  F~ = S^-1/2 F S^-1/2
     !  c  = S^-1/2 c~
        case ("rhf","rdft","restricted_hartree_fock", &
              "rohf","restricted_open_shell_hartree_fock", &
              "xray_rhf","xray_rks","xray_rdft", &
              "noninteracting-group-rhf")
           .orbital_energies.destroy("restricted")
           .orbital_energies.create("restricted")
           .molecular_orbitals.destroy("restricted")
           .molecular_orbitals.create("restricted")
           e  => .orbital_energies.restricted
           MO => .molecular_orbitals.restricted
           F  => .fock_matrix.restricted
           .make_r_fock_guess(e,MO,F)
        case ("uhf","udft","xray_udft","unrestricted_hartree_fock")
           .orbital_energies.destroy("unrestricted")
           .orbital_energies.create("unrestricted")
           .molecular_orbitals.destroy("unrestricted")
           .molecular_orbitals.create("unrestricted")
           e  => .orbital_energies.alpha
           MO => .molecular_orbitals.alpha
           F  => .fock_matrix.alpha
           .make_r_fock_guess(e,MO,F)
           e  => .orbital_energies.beta
           MO => .molecular_orbitals.beta
           F  => .fock_matrix.beta
           .make_r_fock_guess(e,MO,F)
        case ("cghf","gchf","general_complex_hartree_fock","complex_general_hartree_fock")
           .orbital_energies.destroy("general")
           .orbital_energies.create("general")
           .molecular_orbitals.destroy("general_complex")
           .molecular_orbitals.create("general_complex")
           e   => .orbital_energies.general
           MOc => .molecular_orbitals.general_complex
           Fc  => .fock_matrix.general_complex
           .make_gc_fock_guess(e,MOc,Fc)
        case default;  DIE("unknown kind, "//trim(orb_kind))
     end
     orb_kind = .scfdata.spinorbital_kind
     .fock_matrix.destroy(orb_kind)
     .make_scf_density_matrix
   end

   make_r_fock_guess(MO_energies,MO,fock_matrix)
   ! Make/guess the orbital energies "MO_energies" and orbitals "MO" from
   ! a given real restricted "fock_matrix".
     MO_energies :: REALVEC
     MO, fock_matrix :: REALMAT
     S,R,H :: REALMAT*
     !  F~ = S^-1/2 F S^-1/2
     !  c  = S^-1/2 c~
     S.create(.n_bf,.n_bf); .get_overlap_matrix(S)
     R.create(.n_bf,.n_bf); R.to_inverse_sqrt(S)
     H.create(.n_bf,.n_bf); H = fock_matrix
     S.to_product_of(R,H)
     H.to_product_of(S,R)
     H.solve_eigenproblem(MO_energies,MO)
     H.to_product_of(R,MO)
     MO = H
     H.destroy
     R.destroy
     S.destroy
   end

   make_gc_fock_guess(MO_energies,MO,fock_matrix)
   ! Make/guess the orbital energies "MO_energies" and orbitals "MO" from
   ! a given complex general "fock_matrix".
     MO_energies :: REALVEC
     MO, fock_matrix :: CPXMAT
     S,R :: REALMAT*
     H,W :: CPXMAT*
     !  F~ = S^-1/2 F S^-1/2
     !  c  = S^-1/2 c~
     S.create(.n_bf,.n_bf)
     R.create(.n_bf,.n_bf)
     .get_overlap_matrix(R)
     S.to_inverse_sqrt(R)
     R.destroy
     R.create(2*.n_bf,2*.n_bf); R=ZERO
     R.alpha_alpha_set_to(S)
     R.beta_beta_set_to(S)
     S.destroy
     H.create(2*.n_bf,2*.n_bf); H = fock_matrix
     W.create(2*.n_bf,2*.n_bf)
     W = matmul(R,H)
     H = matmul(W,R)
     W.destroy
     H.solve_eigenproblem(MO_energies,MO)
     H = matmul(R,MO)
     MO = H
     H.destroy
     R.destroy
   end

! **************************
! DIIS/Orbital extrapolation
! **************************

!   extrapolate_molecular_orbitals
!!  Extrapolate the moleculeat orbitals
!!   Extrapolate the molecular orbitals using Camp-King or other technique
!!    if (.scfdata.apply_camp_king) .camp_king(E_HF,E_K)
!!   if (.scfdata.apply_dynamic_damping) .dynamic_damp(E_HF,E_K)
!!  end

   make_diis_error(length)
   ! Make the SCF "error" vector from the current fock_matrix and
   ! density_matrix, and return the error length.  Useful for reporting the
   ! error length.
      length :: REAL
      error :: OPMATRIX*
      scf_kind :: STR
      err,F,P :: CPXMAT*
      tri :: INT
      scf_kind = .scfdata.kind
      tri = .n_bf.triangle
      select case (scf_kind)
         case ("rhf","rdft","restricted_hartree_fock", &
               "xray_rhf","xray_rks","xray_rdft", &
               "noninteracting-group-rhf")
            error.create(.n_bf,"restricted")
            .make_r_diis_error(error.restricted,.fock_matrix.restricted,.density_matrix.restricted)
            error.compress
            length = sqrt(dot_product(error.triangle,error.triangle)) / tri
            error.destroy
         case ("rohf","restricted_open_shell_hartree_fock")
            error.create(.n_bf,"restricted")
            .make_r_diis_error(error.restricted,.fock_matrix.restricted,.density_matrix.alpha)
            error.compress
            length = sqrt(dot_product(error.triangle,error.triangle)) / tri
            error.destroy
         case ("uhf","udft","xray_udft","unrestricted_hartree_fock", &
               "pnd_uhf")
            error.create(.n_bf,"unrestricted")
            .make_r_diis_error(error.alpha,.fock_matrix.alpha,.density_matrix.alpha)
           .make_r_diis_error(error.beta, .fock_matrix.beta, .density_matrix.beta)
            error.compress
            length = sqrt(dot_product(error.triangle,error.triangle)) / tri
            error.destroy
         case ("gchf","cghf","complex_general_hartree_fock","general_complex_hartree_fock")
            error.create(.n_bf,"general_complex")
            err => error.general_complex
            F   => .fock_matrix.general_complex
            P   => .density_matrix.general_complex
            .make_gc_diis_error(err,F,P)
            error.compress
            length = sqrt(dot_product(error.square,error.square)) / tri
            error.destroy
         case default;  DIE("unknown kind, "//trim(scf_kind))
      end
   end

   extrapolate_fock_matrix
   ! Extrapolate the fock matrix, currently only using DIIS.
     error :: OPMATRIX*
     scf_kind :: STR
     Fr,Pr :: REALMAT*
     Fc,Pc :: CPXMAT*
     err_len :: REAL
     tri :: INT
     if (NOT .scfdata.apply_fock_diis) return
     scf_kind = .scfdata.kind
     tri = .n_bf.triangle
     select case (scf_kind)
       case ("rhf","rdft","restricted_hartree_fock", &
             "xray_rhf","xray_rks","xray_rdft", &
             "noninteracting-group-rhf")
          error.create(.n_bf,"restricted")
          Fr  => .fock_matrix.restricted
          Pr  => .density_matrix.restricted
          .make_r_diis_error(error.restricted,Fr,Pr)
          error.compress
          err_len = error.triangle.norm/tri
          .fock_matrix.compress
          .scfdata.diis.extrapolate(.fock_matrix.triangle,error.triangle)
          error.destroy
       case ("rohf","restricted_open_shell_hartree_fock")
          error.create(.n_bf,"restricted")
          Fr  => .fock_matrix.restricted
          Pr  => .density_matrix.alpha ! ??? really ???
          .make_r_diis_error(error.restricted,Fr,Pr)
          error.compress
          err_len = error.triangle.norm/tri
          .fock_matrix.compress("restricted")
          .scfdata.diis.extrapolate(.fock_matrix.triangle,error.triangle)
          error.destroy
       case ("uhf","udft","xray_udft","unrestricted_hartree_fock", &
             "pnd_uhf")
          error.create(.n_bf,"unrestricted")
          Fr  => .fock_matrix.alpha
          Pr  => .density_matrix.alpha
          .make_r_diis_error(error.alpha,Fr,Pr)
          Fr  => .fock_matrix.beta
          Pr  => .density_matrix.beta
          .make_r_diis_error(error.beta, Fr,Pr)
          error.compress
          err_len = error.triangle.norm/tri
          .fock_matrix.compress
          .scfdata.diis.extrapolate(.fock_matrix.triangle,error.triangle)
          error.destroy
       case ("gchf","cghf","complex_general_hartree_fock","general_complex_hartree_fock")
          error.create(.n_bf,"general_complex")
          Fc  => .fock_matrix.general_complex
          Pc  => .density_matrix.general_complex
          .make_gc_diis_error(error.general_complex,Fc,Pc)
          error.compress
          err_len = error.square.norm/tri
          .fock_matrix.compress
          .scfdata.diis.extrapolate(.fock_matrix.square,error.square)
          error.destroy
       case default;          DIE("unknown SCF kind, "//trim(scf_kind))
     end
     .scfdata.set_diis_error(err_len)
     .fock_matrix.uncompress
     error.destroy
   end

   make_r_diis_error(error,F,P)
   ! Make the real DIIS error matrix, error = FPS - SPF
      error,F,P :: REALMAT
      S,W :: REALMAT*
      W.create(.n_bf, .n_bf)
      S.create(.n_bf, .n_bf); .get_overlap_matrix(S)
      W.to_product_of(P,S)
      S.destroy
      error.to_product_of(F,W)
      W.destroy
      error.antisymmetric_fold
      error.antisymmetric_reflect
   end

   make_gc_diis_error(error,F,P)
   ! Make the complex general DIIS error matrix, error = FPS - SPF
      error,F,P :: CPXMAT
       R :: REALMAT*
      S,W :: CPXMAT*
      W.create(2*.n_bf, 2*.n_bf)
      S.create(2*.n_bf,2*.n_bf); S=ZERO
      R.create(.n_bf,.n_bf)
      .get_overlap_matrix(R)
      S.alpha_alpha_set_to(R)
      S.beta_beta_set_to(R)
      R.destroy
      W.to_product_of(P,S)
      S.destroy
      error.to_product_of(F,W)
      W.destroy
      error.antihermitian_fold
      error.make_antihermitian
   end

!*********************
! Fock matrix routines
!*********************

   get_fock_matrix ::: leaky
   ! Get the Fock matrix.
   ! If the archive file exists, read it. Otherwise make it.
      archive :: ARCHIVE
      orb_kind :: STR
      ENSURE(.scfdata.created,"no scfdata")
      orb_kind = .scfdata.spinorbital_kind
      archive.set(.name,"fock_matrix",orb_kind)
      if (archive.exists) then; archive.read(.fock_matrix)
      else;                     .make_fock_matrix
      end
   end

   make_fock_matrix(core,r12) ::: leaky
   ! If r12  is present and FALSE, the r12 part is not computed.
   ! NOTE: The computed fock matrix is immediately archived to disk.
     core,r12 :: BIN, optional
     dP,dF :: OPMATRIX*
     orb_kind :: STR
     do_delta_build,kind_ok :: BIN
     ENSURE(.scfdata.created,"no scfdata")
     ENSURE(.density_matrix.created,"no density matrix")
     ENSURE(.density_matrix.any_created,"no density matrix")
     kind_ok = .density_matrix.spinorbital_kind==.scfdata.spinorbital_kind
     ENSURE(kind_ok,"incompatible density")
     ! Determine whether to use a delta fock matrix build
     orb_kind = .density_matrix.spinorbital_kind
     do_delta_build = .scfdata.do_delta_build &
                      AND .old_fock_matrix.created(orb_kind) &
                      AND .old_density_matrix.created(orb_kind)
     if (do_delta_build) then
        dP.create_copy(.density_matrix)
        dP.minus(.old_density_matrix)
        dF.create(.n_bf)
        .make_fock_matrix(dP,dF,core=FALSE,r12=r12)
        .fock_matrix.destroy
        .fock_matrix.create_copy(.old_fock_matrix)
        .fock_matrix.plus(dF)
        dF.destroy
        dP.destroy
        .old_fock_matrix.destroy
        .old_fock_matrix.create_copy(.fock_matrix)
     else
        .make_fock_matrix(.density_matrix,.fock_matrix,core,r12)
     end
   end

   make_fock_matrix(P,F,core,r12) ::: leaky
   ! For the quicker ERI method.
   ! If r12  is present and FALSE, the r12 part is not computed
     P,F :: OPMATRIX*
     core,r12 :: BIN, optional
     scf_kind,scf_sokind :: STR
     direct :: BIN
     ENSURE(.scfdata.created,"no scfdata")
     ENSURE(P.created,"no density matrix")
     ENSURE(P.any_created,"no density matrix")
     scf_sokind = .scfdata.spinorbital_kind ! otherwise ENSURE line too long.
     ENSURE(P.spinorbital_kind==scf_sokind,"incompatible density")
     scf_kind = .scfdata.kind
     direct = .scfdata.direct
     if (NOT direct) .get_ERI_integrals
     select case (scf_kind)
        case ("rhf","restricted_hartree_fock","xray_rhf")
           .make_r_fock(P,F,direct,core,r12)
       case ("rdft","xray_rdft")
          .make_r_dft_fock(P,F,direct,core,r12)
       case ("udft","xray_udft")
          .make_u_dft_fock(P,F,direct,core,r12)
        case ("noninteracting-group-rhf")
           .make_r_group_fock(P,F,direct,core,r12)
        case ("xray_rks")
 !          F.destroy("restricted")
 !          F.create("restricted")
           if (present(core)) then
              if (core) then; .get_kinetic_matrix(F.restricted)
              else;           F.restricted = ZERO
              end
           else
                              .get_kinetic_matrix(F.restricted)
           end
        case ("rohf","restricted_open_shell_hartree_fock")
           .make_ro_fock(P,F,direct,core,r12)
        case ("uhf","unrestricted_hartree_fock")
           .make_u_fock(P,F,direct,core,r12)
        case ("gchf","cghf", &
              "general_complex_hartree_fock","complex_general_hartree_fock")
           .make_gc_fock(P,F,direct,core,r12)
           .add_gc_so_fock(P,F)
        case default;  DIE("unknown SCF kind, "//trim(scf_kind))
     end
   end

   add_core_hamiltonian(F,nuclei)
   ! Add the core hamiltonain to "F"
   ! if "nuclei" is present then the core_matrix is calculated using
   ! only the nuclei specified
      F :: REALMAT
      nuclei :: INTVEC, optional
      H :: REALMAT*
      H.create(.n_bf, .n_bf)
      .get_core_matrix(H,nuclei)
      F = F + H
      H.destroy
   end

   add_core_hamiltonian(F,nuclei)
   ! Add the core hamiltonain to a general complex "F"
      F :: CPXMAT
      nuclei :: INTVEC, optional
      HH :: CPXMAT*
      H,S,T,xx,yy,zz,xy,xz,yz,Lx,Ly,Lz :: REALMAT*
      BB :: REALMAT(3,3)
      k,l :: INT
      fac :: REAL
      I :: CPX
      HH.create(2*.n_bf, 2*.n_bf); HH = ZERO
      H.create(.n_bf, .n_bf)
      .get_core_matrix(H,nuclei)
      HH.alpha_alpha_plus(H)
      HH.beta_beta_plus(H)
      H.destroy
      I = (ZERO,ONE)
      if (.scfdata.using_1e_sl_term) then
            Lx.create(.n_bf,.n_bf)
            Ly.create(.n_bf,.n_bf)
            Lz.create(.n_bf,.n_bf)
            .get_spin_orbit_matrices(Lx,Ly,Lz)
            fac = G_FACTOR/(EIGHT*SPEED_OF_LIGHT_AU**2)
            fac = fac * .scfdata.sl_1e_factor
            HH.beta_alpha_plus(Lx,factor=-fac*I)
            HH.beta_alpha_plus(Ly,factor=fac)
            HH.alpha_alpha_plus(Lz,factor=-fac*I)
            HH.beta_beta_plus(Lz,factor=fac*I)
            Lz.destroy; Ly.destroy; Lx.destroy
      else if (.scfdata.using_1e_zora_term) then
            T.create(.n_bf,.n_bf)
            Lx.create(.n_bf,.n_bf)
            Ly.create(.n_bf,.n_bf)
            Lz.create(.n_bf,.n_bf)
            .get_1e_ZORA_matrices(T,Lx,Ly,Lz)
            HH.alpha_alpha_plus(T)
            HH.beta_beta_plus(T)
            .get_kinetic_matrix(T) ! remove normal kinetic energy
            HH.alpha_alpha_plus(T,factor=-ONE)
            HH.beta_beta_plus(T,factor=-ONE)
            fac = G_FACTOR/TWO
            fac = fac * .scfdata.sl_1e_factor
            HH.beta_alpha_plus(Lx,factor=-fac*I)
            HH.beta_alpha_plus(Ly,factor=fac)
            HH.alpha_alpha_plus(Lz,factor=-fac*I)
            HH.beta_beta_plus(Lz,factor=fac*I)
            T.destroy
            Lz.destroy; Ly.destroy; Lx.destroy
      end
      if (NOT .B_field.is_zero) then
         if (.scfdata.using_bs_term) then
            S.create(.n_bf,.n_bf)
            .get_overlap_matrix(S)
            fac = G_FACTOR/FOUR
            HH.alpha_alpha_plus(S,factor=fac*.B_field(3))
            HH.beta_beta_plus(S,factor=-fac*.B_field(3))
            HH.beta_alpha_plus(S,factor=fac*.B_field(1))
            HH.beta_alpha_plus(S,factor=fac*.B_field(2)*I)
            S.destroy
         end
         if (.scfdata.using_bs_t_term) then
            T.create(.n_bf,.n_bf)
            .get_kinetic_matrix(T)
            fac = -G_FACTOR/(FOUR*SPEED_OF_LIGHT_AU**2)
            HH.alpha_alpha_plus(T,factor=fac*.B_field(3))
            HH.beta_beta_plus(T,factor=-fac*.B_field(3))
            HH.beta_alpha_plus(T,factor=fac*.B_field(1))
            HH.beta_alpha_plus(T,factor=fac*.B_field(2)*I)
            T.destroy
         end
         if (.scfdata.using_bl_term) then
            Lx.create(.n_bf,.n_bf)
            Ly.create(.n_bf,.n_bf)
            Lz.create(.n_bf,.n_bf)
            .get_L_matrices(Lx,Ly,Lz)
            Lx = Lx*.B_field(1) + Ly*.B_field(2) + Lz*.B_field(3)
            fac = HALF
            HH.alpha_alpha_plus(Lx,factor=fac*I)
            HH.beta_beta_plus(Lx,factor=fac*I)
            Lz.destroy; Ly.destroy; Lx.destroy
         end
         if (.scfdata.using_aa_term) then
           xx.create(.n_bf,.n_bf); yy.create(.n_bf,.n_bf); zz.create(.n_bf,.n_bf)
           xy.create(.n_bf,.n_bf); xz.create(.n_bf,.n_bf); yz.create(.n_bf,.n_bf)
           .get_quadrupole_matrices(xx,yy,zz,xy,xz,yz)
           fac = ONE/EIGHT
           do k = 1,3
              BB(k,k) = fac*(sum(.B_field*.B_field) - .B_field(k)*.B_field(k))
           end
           do k = 1,3
           do l = k+1,3
              BB(k,l) = -TWO*fac*.B_field(k)*.B_field(l)
           end
           end
           xx =      BB(1,1)*xx; xx = xx + BB(2,2)*yy; xx = xx + BB(3,3)*zz
           xx = xx + BB(1,2)*xy; xx = xx + BB(1,3)*xz; xx = xx + BB(2,3)*yz
           HH.alpha_alpha_plus(xx)
           HH.beta_beta_plus(xx)
           yz.destroy; xz.destroy; xy.destroy
           zz.destroy; yy.destroy; xx.destroy
         end
         if (.scfdata.using_1e_srxa_term) then
            Lx.create(.n_bf,.n_bf)
            Ly.create(.n_bf,.n_bf)
            Lz.create(.n_bf,.n_bf)
            .get_spin_orbit_B_matrices(Lx,Ly,Lz)
            fac = G_FACTOR/(TWO*EIGHT*(SPEED_OF_LIGHT_AU)**2)
            HH.beta_alpha_plus(Lx,factor=fac)
            HH.beta_alpha_plus(Ly,factor=fac*I)
            HH.alpha_alpha_plus(Lz,factor=fac)
            HH.beta_beta_plus(Lz,factor=-fac)
            Lz.destroy; Ly.destroy; Lx.destroy
         end
      end
      HH.make_hermitian
      F = HH + F
      HH.destroy
   end

   make_r_fock(P,F,direct,core,r12) ::: leaky
   ! Make a new restricted Fock matrix "F" from the density matrix "P".
   ! If present and TRUE , "direct" means calculate integrals on the fly
   ! If present and FALSE, "core" removes the core matrix contribution
   ! If present and FALSE, "r12"  removes the two electron contribution
     direct,core,r12 :: BIN, optional
     P,F :: OPMATRIX*
     J,K :: REALMAT*
     do_direct,add_core,add_r12 :: BIN
     ENSURE(P.created,"no density matrix")
     ENSURE(F.created,"no fock matrix")
     ENSURE(F.n_bf==.n_bf, "Fock matrix dimensions wrong")
     ENSURE(P.n_bf==.n_bf, "Density matrix dimensions wrong")
     ENSURE(P.restricted.created, "no density matrix")
     F.destroy("restricted")
     F.create("restricted")
     do_direct= FALSE
     add_core = TRUE
     add_r12  = TRUE
     if (present(direct)) do_direct = direct
     if (present(core))   add_core = core
     if (present(r12))    add_r12  = r12
     if (add_r12) then
        J.create(.n_bf,.n_bf)
        K.create(.n_bf,.n_bf)
        if (do_direct) then; .make_r_JK_direct(J,K,P.restricted)
        else;                .make_r_JK_disk(J,K,P.restricted)
        end
        F.restricted = J - HALF*K
        K.destroy
        J.destroy
     else
        F.restricted = ZERO
     end
     if (add_core) .add_core_hamiltonian(F.restricted)
   end

   make_r_dft_fock(P,F,direct,core,r12) ::: leaky
   ! Make a new restricted Fock matrix "F" from the density matrix "P".
   ! If present and TRUE , "direct" means calculate integrals on the fly
   ! If present and FALSE, "core" removes the core matrix contribution
   ! If present and FALSE, "r12"  removes the two electron contribution
     direct,core,r12 :: BIN, optional
     P,F :: OPMATRIX*
     J,K :: REALMAT*
     do_direct,add_core,add_r12 :: BIN
     ENSURE(P.created,"no density matrix")
     ENSURE(F.created,"no fock matrix")
     ENSURE(F.n_bf==.n_bf, "Fock matrix dimensions wrong")
     ENSURE(P.n_bf==.n_bf, "Density matrix dimensions wrong")
     ENSURE(P.restricted.created, "no density matrix")
     F.destroy("restricted")
     F.create("restricted")
     do_direct= FALSE
     add_core = TRUE
     add_r12  = TRUE
     if (present(direct)) do_direct = direct
     if (present(core))   add_core = core
     if (present(r12))    add_r12  = r12
     if (add_r12) then
        J.create(.n_bf,.n_bf)
        K.create(.n_bf,.n_bf)
        if (do_direct) then; .make_r_J_direct(J,P.restricted)
        else;                .make_r_J_disk(J,P.restricted)
        end
        K=ZERO
        if (.molecular_orbitals.destroyed OR .molecular_orbitals.all_destroyed) then
          .make_natural_orbitals
        else
          .assign_natural_orbitals
        end
        .add_ex_corr_matrix(K)
        K.symmetric_reflect
        F.restricted = J + K
        K.destroy
        J.destroy
     else
        F.restricted = ZERO
     end
     if (add_core) .add_core_hamiltonian(F.restricted)
   end

   make_u_dft_fock(P,F,direct,core,r12) ::: leaky
   ! Make a new restricted Fock matrix "F" from the density matrix "P".
   ! If present and TRUE , "direct" means calculate integrals on the fly
   ! If present and FALSE, "core" removes the core matrix contribution
   ! If present and FALSE, "r12"  removes the two electron contribution
     direct,core,r12 :: BIN, optional
     P,F :: OPMATRIX*
     J,Ka,Kb,Pab :: REALMAT*
     do_direct,add_core,add_r12 :: BIN
     ENSURE(P.created,"no density matrix")
     ENSURE(F.created,"no fock matrix")
     ENSURE(F.n_bf==.n_bf, "Fock matrix dimensions wrong")
     ENSURE(P.n_bf==.n_bf, "Density matrix dimensions wrong")
     ENSURE(P.alpha.created, "no density matrix")
     ENSURE(P.beta.created, "no density matrix")
     F.destroy("alpha")
     F.create("alpha")
     F.destroy("beta")
     F.create("beta")
     do_direct= FALSE
     add_core = TRUE
     add_r12  = TRUE
     if (present(direct)) do_direct = direct
     if (present(core))   add_core = core
     if (present(r12))    add_r12  = r12
     if (add_r12) then
        J.create(.n_bf,.n_bf)
        Ka.create(.n_bf,.n_bf)
        Kb.create(.n_bf,.n_bf)
        Pab.create(.n_bf,.n_bf)
        Pab  = P.alpha + P.beta
        .make_r_J_direct(J,Pab)
        Pab.destroy
        Ka=ZERO
        Kb=ZERO
        if (.molecular_orbitals.destroyed OR .molecular_orbitals.all_destroyed) then
          .make_natural_orbitals
        else
          .assign_natural_orbitals
        end
        .add_ex_corr_matrix(Ka,Kb)
        F.alpha = J + Ka
        F.beta = J + Kb
        Kb.destroy
        Ka.destroy
        J.destroy
     else
        F.alpha = ZERO
        F.beta  = ZERO
     end
     if (add_core) .add_core_hamiltonian(F.alpha)
     if (add_core) .add_core_hamiltonian(F.beta)
   end

   make_r_group_fock(P,F,direct,core,r12) ::: leaky
   ! Make a new restricted Fock matrix "F" from the density matrix "P".
   ! If present and TRUE , "direct" means calculate integrals on the fly
   ! If present and FALSE, "core" removes the core matrix contribution
   ! If present and FALSE, "r12"  removes the two electron contribution
     direct,core,r12 :: BIN, optional
     P,F :: OPMATRIX*
     J,K :: REALMAT*
     do_direct,add_core,add_r12 :: BIN
   ENSURE(.atom_group.created,"no atom_group info")
   ENSURE(P.created,"no density matrix")
   ENSURE(F.created,"no fock matrix")
   ENSURE(F.n_bf == .n_bf, "Fock matrix dimensions wrong")
   ENSURE(P.n_bf == .n_bf, "Density matrix dimensions wrong")
   ENSURE(P.restricted.created, "no density matrix")
     F.destroy("restricted")
     F.create("restricted")
     do_direct= FALSE
     add_core = TRUE
     add_r12  = TRUE
     if (present(direct)) do_direct = direct
     if (present(core))   add_core = core
     if (present(r12))    add_r12  = r12
     do_direct = TRUE
     if (add_r12) then
        J.create(.n_bf,.n_bf)
        K.create(.n_bf,.n_bf)
        if (do_direct) .make_r_group_JK(J,K,P.restricted)
        F.restricted = J - HALF*K
        K.destroy
        J.destroy
     else
        F.restricted = ZERO
     end
     if (add_core) .add_core_hamiltonian(F.restricted)
   end

   make_u_fock(P,F,direct,core,r12) ::: leaky
   ! Make a new unrestricted Fock matrix.
   ! If present and TRUE , "direct" means calculate integrals on the fly
   ! If present and FALSE, "core" removes the core matrix contribution
   ! If present and FALSE, "r12"  removes the two electron contribution
     P,F :: OPMATRIX*
     direct,core,r12 :: BIN, optional
     J,Ka,Kb,Pab :: REALMAT*
     do_direct,add_core,add_r12 :: BIN
   ENSURE(P.created,"no density matrix")
   ENSURE(F.created,"no fock matrix")
   ENSURE(P.alpha.created,"no density matrix")
   ENSURE(P.beta.created, "no density matrix")
   ENSURE(F.n_bf==.n_bf, "Fock matrix dimensions wrong")
   ENSURE(P.n_bf==.n_bf, "Density matrix dimensions wrong")
     F.destroy("unrestricted")
     F.create("unrestricted")
     do_direct= FALSE
     add_core = TRUE
     add_r12  = TRUE
     if (present(direct)) do_direct = direct
     if (present(core))   add_core = core
     if (present(r12))    add_r12  = r12
     if (add_r12) then
        J.create(.n_bf,.n_bf)
        Ka.create(.n_bf,.n_bf)
        Kb.create(.n_bf,.n_bf)
        Pab.create(.n_bf,.n_bf)
        Pab  = P.alpha + P.beta
        if (do_direct) then; .make_u_JK_direct(J,Ka,Kb,Pab,P.alpha,P.beta)
        else;                .make_u_JK_disk(J,Ka,Kb,Pab,P.alpha,P.beta)
        end
        Pab.destroy
        F.alpha = J - Ka
        F.beta = J - Kb
        Kb.destroy
        Ka.destroy
        J.destroy
     else
        F.alpha = ZERO
        F.beta  = ZERO
     end
     if (add_core) .add_core_hamiltonian(F.alpha)
     if (add_core) .add_core_hamiltonian(F.beta)
   end

   make_ro_fock(P,F,direct,core,r12) ::: leaky
   ! Make a new restricted open shell Fock matrix.
   ! If present and TRUE , "direct" means calculate integrals on the fly
   ! If present and FALSE, "core" removes the core matrix contribution
   ! If present and FALSE, "r12"  removes the two electron contribution
     F,P :: OPMATRIX*
     direct,core,r12 :: BIN, optional
     Fr,Fa,Fb,S,W :: REALMAT*
   ENSURE(.molecular_orbitals.restricted.created,"no orbitals")
     F.destroy("restricted")
     F.create("restricted")
     .make_u_fock(P,F,direct,core,r12)
     Fr => F.restricted
     Fa.create(.n_bf,.n_bf); Fa = F.alpha
     Fb.create(.n_bf,.n_bf); Fb = F.beta
     Fa.change_basis(.molecular_orbitals.restricted)
     Fb.change_basis(.molecular_orbitals.restricted)
     Fr = HALF*(Fa+Fb)
     Fr(.n_b+1:.n_a,     1:.n_b) = Fb(.n_b+1:.n_a,     1:.n_b)
     Fr(     1:.n_b,.n_b+1:.n_a) = Fb(     1:.n_b,.n_b+1:.n_a)
     Fr(.n_a+1:    ,.n_b+1:.n_a) = Fa(.n_a+1:    ,.n_b+1:.n_a)
     Fr(.n_b+1:.n_a,.n_a+1:    ) = Fa(.n_b+1:.n_a,.n_a+1:    )
     S => Fb; .get_overlap_matrix(S)
     W => Fa; W.to_product_of(.molecular_orbitals.restricted,S,transpose_a=TRUE)
     Fr.change_basis(W) ! change to AO basis
     Fb.destroy
     Fa.destroy
   end

   make_gc_fock(P,F,direct,core,r12) ::: leaky
   ! Make a new complex general Fock matrix.
   ! If present and TRUE , "direct" means calculate integrals on the fly
   ! If present and FALSE, "core" removes the core matrix contribution
   ! If present and FALSE, "r12"  removes the two electron contribution
     direct,core,r12 :: BIN, optional
     P,F :: OPMATRIX*
     Ka,Kb,Kba,Pa,Pb,Pba,Fgc :: CPXMAT*
     J, Pab :: REALMAT*
     do_direct,add_core,add_r12 :: BIN
   ENSURE(P.created,"no density matrix")
   ENSURE(F.created,"no fock matrix")
   ENSURE(P.general_complex.created, "no density matrix")
   ENSURE(F.n_bf==.n_bf, "Fock matrix dimensions wrong")
   ENSURE(P.n_bf==.n_bf, "Density matrix dimensions wrong")
     F.destroy("general_complex")
     F.create("general_complex")
     do_direct= FALSE
     add_core = TRUE
     add_r12  = TRUE
     if (present(direct)) do_direct = direct
     if (present(core)) add_core = core
     if (present(r12))  add_r12  = r12
     Fgc => F.general_complex
     if (add_r12) then
        J.create(.n_bf,.n_bf)
        Ka.create(.n_bf,.n_bf)
        Kb.create(.n_bf,.n_bf)
        Kba.create(.n_bf,.n_bf)
        Pa.create(.n_bf,.n_bf);  P.general_complex.alpha_alpha_put_to(Pa)
        Pb.create(.n_bf,.n_bf);  P.general_complex.beta_beta_put_to(Pb)
        Pba.create(.n_bf,.n_bf); P.general_complex.beta_alpha_put_to(Pba)
        Pab.create(.n_bf,.n_bf)
        Pab  = Pa + Pb
        if (do_direct) then; .make_gc_JK_direct(J,Ka,Kb,Kba,Pab,Pa,Pb,Pba)
        else;                .make_gc_JK_disk(J,Ka,Kb,Kba,Pab,Pa,Pb,Pba)
        end
        Pab.destroy
        Pba.destroy
        Pb.destroy
        Pa.destroy
        Ka = J - Ka; Fgc.alpha_alpha_set_to(Ka)
        Kb = J - Kb; Fgc.beta_beta_set_to(Kb)
        Kba = -Kba;  Fgc.beta_alpha_set_to(Kba)
        Kba.destroy
        Kb.destroy
        Ka.destroy
        J.destroy
     else
        Fgc = ZERO
     end
     Fgc.make_hermitian
     if (add_core) .add_core_hamiltonian(Fgc)
   end

   add_gc_so_fock(P,F,direct) ::: leaky
   ! Make the general complex two electron spin orbit contribution to the Fock
   ! matrix.
     P,F :: OPMATRIX*
     direct :: BIN, optional
     JS,KS,JO,KO :: CPXMAT5*
     Pgc :: CPXMAT4*
     Faa,Fbb,Fba :: CPXMAT*
     I :: CPX
     fac :: REAL
     a,b,x,y,z :: INT
     do_direct :: BIN
   ENSURE(P.created,"no density matrix")
   ENSURE(F.created,"no fock matrix")
   ENSURE(P.general_complex.created, "no density matrix")
   ENSURE(F.general_complex.created, "no fock matrix")
   ENSURE(F.n_bf==.n_bf, "Fock matrix dimensions wrong")
   ENSURE(P.n_bf==.n_bf, "Density matrix dimensions wrong")
     do_direct= FALSE
     if (present(direct)) do_direct = direct
     if (.scfdata.using_2e_sl_term) then
       .get_spin_orbit_integrals
       Faa.create(.n_bf,.n_bf)
       Fbb.create(.n_bf,.n_bf)
       Fba.create(.n_bf,.n_bf)
       JS.create(.n_bf,.n_bf,2,2,3); KS.create(.n_bf,.n_bf,2,2,3)
       JO.create(.n_bf,.n_bf,2,2,3); KO.create(.n_bf,.n_bf,2,2,3)
       Pgc.create(.n_bf,.n_bf,2,2)
       P.general_complex.alpha_alpha_put_to(Pgc(:,:,1,1))
       P.general_complex.beta_alpha_put_to(Pgc(:,:,2,1))
       P.general_complex.alpha_beta_put_to(Pgc(:,:,1,2))
       P.general_complex.beta_beta_put_to(Pgc(:,:,2,2))
       if (do_direct) then
       .make_gc_so_JK_direct(JS,KS,JO,KO,Pgc)
       else
       .make_gc_so_JK_disk(JS(:,:,:,:,1),KS(:,:,:,:,1),JO(:,:,:,:,1),KO(:,:,:,:,1),Pgc,"x")
       .make_gc_so_JK_disk(JS(:,:,:,:,2),KS(:,:,:,:,2),JO(:,:,:,:,2),KO(:,:,:,:,2),Pgc,"y")
       .make_gc_so_JK_disk(JS(:,:,:,:,3),KS(:,:,:,:,3),JO(:,:,:,:,3),KO(:,:,:,:,3),Pgc,"z")
       end
       Pgc.destroy
       I = (ZERO,ONE)
       a = 1; b = 2; x = 1; y = 2; z = 3
       Faa =  THREE*JO(:,:,a,a,z) +       JO(:,:,b,b,z) + THREE*JS(:,:,a,a,z) -   JS(:,:,b,b,z) &
           +    TWO*JS(:,:,a,b,x) +   TWO*JS(:,:,b,a,x) +       JO(:,:,a,b,x) +   JO(:,:,b,a,x) &
           +  I*TWO*JS(:,:,a,b,y) - I*TWO*JS(:,:,b,a,y) +     I*JO(:,:,a,b,y) - I*JO(:,:,b,a,y) &
           -    TWO*KO(:,:,b,a,x) -       KO(:,:,a,b,x) -   TWO*KS(:,:,a,b,x) -   KS(:,:,b,a,x) &
           +  I*TWO*KO(:,:,b,a,y) -     I*KO(:,:,a,b,y) - I*TWO*KS(:,:,a,b,y) + I*KS(:,:,b,a,y) &
           -  THREE*KO(:,:,a,a,z) - THREE*KS(:,:,a,a,z)
       Fbb = -THREE*JO(:,:,b,b,z) -       JO(:,:,a,a,z) - THREE*JS(:,:,b,b,z) +   JS(:,:,a,a,z) &
           +    TWO*JS(:,:,a,b,x) +   TWO*JS(:,:,b,a,x) +       JO(:,:,a,b,x) +   JO(:,:,b,a,x) &
           +  I*TWO*JS(:,:,a,b,y) - I*TWO*JS(:,:,b,a,y) +     I*JO(:,:,a,b,y) - I*JO(:,:,b,a,y) &
           -    TWO*KO(:,:,a,b,x) -       KO(:,:,b,a,x) -   TWO*KS(:,:,b,a,x) -   KS(:,:,a,b,x) &
           -  I*TWO*KO(:,:,a,b,y) + I*KO(:,:,b,a,y)     + I*TWO*KS(:,:,b,a,y) - I*KS(:,:,a,b,y) &
           +  THREE*KO(:,:,b,b,z) + THREE*KS(:,:,b,b,z)
       Fba =    TWO*JO(:,:,a,a,x) +   TWO*JO(:,:,b,b,x) +       JS(:,:,a,a,x) +   JS(:,:,b,b,x) &
           +  I*TWO*JO(:,:,a,a,y) + I*TWO*JO(:,:,b,b,y) +     I*JS(:,:,a,a,y) + I*JS(:,:,b,b,y) &
           -    TWO*KO(:,:,a,a,x) -       KO(:,:,b,b,x) -   TWO*KS(:,:,b,b,x) -   KS(:,:,a,a,x) &
           -  I*TWO*KO(:,:,a,a,y) -     I*KO(:,:,b,b,y) - I*TWO*KS(:,:,b,b,y) - I*KS(:,:,a,a,y) &
           +        KO(:,:,b,a,z) -       KS(:,:,b,a,z)
       KO.destroy; JO.destroy; KS.destroy; JS.destroy

       fac = G_FACTOR/(EIGHT*SPEED_OF_LIGHT_AU**2)
       fac = fac * .scfdata.sl_2e_factor
       F.general_complex.alpha_alpha_plus(Faa,factor=I*fac)
       F.general_complex.beta_beta_plus(Fbb,factor=I*fac)
       F.general_complex.beta_alpha_plus(Fba,factor=I*fac)
       Fbb = conjg(transpose(Fba))
       F.general_complex.alpha_beta_plus(Fbb,factor=-I*fac)
       Fba.destroy; Fbb.destroy; Faa.destroy
     end
   end

!**********************
! J & K matrix routines
!**********************

   in_same_atom_group(atom_a,atom_b,group) result (res)
   ! Return TRUE if the atoms are all in the same atom_group
   ! If present, "group" is set to the common group index.
     atom_a,atom_b :: INT
     group :: INT, optional
     res :: BIN
     n,n_group :: INT
   ENSURE(.atom_group.created,"no atom group information")
     n_group = size(.atom_group)
     res = TRUE
     do n = 1,n_group
        if (any(atom_a==.atom_group(n).element)) then
          if (NOT any(atom_b==.atom_group(n).element)) res = FALSE
          exit
        end
     end
     if (present(group)) then
        if (res) then; group = n
        else;          group = 0
        end
     end
   end

   in_same_atom_group(atom_a,atom_b,atom_c,atom_d) result (res)
   ! Return TRUE if the atoms are all in the same atom_group
     atom_a,atom_b,atom_c,atom_d :: INT
     res :: BIN
     n,n_group :: INT
   ENSURE(.atom_group.created,"no atom group information")
     n_group = size(.atom_group)
     res = TRUE
     do n = 1,n_group
        if (any(atom_a==.atom_group(n).element)) then
          if (NOT any(atom_b==.atom_group(n).element)) res = FALSE
          if (NOT any(atom_c==.atom_group(n).element)) res = FALSE
          if (NOT any(atom_d==.atom_group(n).element)) res = FALSE
          exit
        end
     end
   end

   schwarz_inequality_test(cutoff,ab,cd,a,b,c,d,P_max,I_max) result(skip)
   ! Return "skip", a logical variable which is TRUE if the maximum contribution
   ! to the restricted Fock matrix (based on the schwarz inequality test) from a
   ! shell of ERI integrals (ab|cd) with shell pair indices "ab" and "cd" is
   ! smaller than a preset "cutoff". "P_max" is the maximum density matrix
   ! elements for each shell pair "ab", and "I_max(ab)" is maximum value of the
   ! square root of the integral (ab|ab) for the shell pair with index "ab".
     skip :: BIN
     cutoff :: REAL
     ab,cd, a,b,c,d :: INT
     P_max,I_max :: REALVEC
     Pmax :: REAL
     ac,ad,bc,bd,k,l,m,n :: INT
     k = max(b,c); l = min(b,c)
     m = max(b,d); n = min(b,d)
     ac = ((a-1)*a)/2 + c          ! ab|cd < sqrt(ab|ab) * sqrt(cd|cd) test.
     ad = ac - c + d
     bc = ((k-1)*k)/2 + l
     bd = ((m-1)*m)/2 + n
     Pmax = max(P_max(ab),P_max(cd),P_max(ac),P_max(ad),P_max(bc),P_max(bd))
     if (Pmax < TOL(20)) then
       skip = TRUE
     else
        if (Pmax*I_max(ab)*I_max(cd) > cutoff) then; skip = FALSE
        else;                                        skip = TRUE
        end
     end
   end

   make_max_density_elements(P_max,P)
   ! Make "P_max", the maximum of the (a,b) density elements of "P" over each
   ! shell pair, for use in the schwarz test.
     P_max :: REALVEC
     P :: REALMAT
     ab,fa,fb,la,lb,aa,bb, a,b :: INT
     Pmax :: REAL
   ENSURE(size(P_max)==.n_shell_pairs,"wrong size, P_max")
   ENSURE(P.is_square,"wrong shape, P")
   ENSURE(P.dim1==.n_bf,"wrong size, P")
     ! Store the largest integral for each shell pair ab|ab
     do ab = 1, .n_shell_pairs
       .get_shell_pair_indices(ab,aa,bb,fa,la,fb,lb)
       Pmax = ZERO
       do a = fa,la
       do b = fb,lb
          Pmax = max(abs(P(a,b)),Pmax)
       end
       end
       P_max(ab) = Pmax
     end
   end

   make_max_abab_integrals(I_max)
   ! Make "I_max", the square root of the maximum of the (ab|ab) ERI integrals.
     I_max :: REALVEC
     ab,fa,fb,la,lb,sa,sb,na,nb, a,b :: INT
     sh4 :: SHELL4
     Iabab :: REALMAT4*
     Imax :: REAL
   ENSURE(size(I_max)==.n_shell_pairs,"wrong size, I_max")
     ! Store the largest integral for each shell pair ab|ab
     do ab = 1, .n_shell_pairs
       .get_shell_pair_indices(ab,sa,sb,fa,la,fb,lb)
       na = la-fa+1
       nb = lb-fb+1
       .set_shell_quartet_ab(sh4,sa,sb)  ! Set (ab|ab) shell
       .set_shell_quartet_cd(sh4,sa,sb)
       Iabab.create(na,nb,na,nb)
       sh4.get_ERI(Iabab)
       sh4.destroy_ptr_part
       Imax = ZERO
       do a=1,na
       do b=1,nb
          Imax = max(abs(Iabab(a,b,a,b)),Imax)
       end
       end
       I_max(ab) = sqrt(Imax)
       Iabab.destroy
     end
   end

   make_max_abab_so_integrals(I_max)
   ! Make "I_max", the square root of the maximum of the all (ab|ab) spin orbit
   ! integrals.
     I_max :: REALVEC
     ab,fa,fb,la,lb,sa,sb,na,nb, a,b :: INT
     sh4 :: SHELL4
     S,O :: REALMAT5*
     Imax :: REAL
   ENSURE(size(I_max)==.n_shell_pairs,"wrong size, I_max")
     ! Store the largest integral for each shell pair ab|ab
     do ab = 1, .n_shell_pairs           ! Store the largest integral for each
       .get_shell_pair_indices(ab,sa,sb,fa,la,fb,lb)
       na = la-fa+1
       nb = lb-fb+1
       .set_shell_quartet_ab(sh4,sa,sb)
       .set_shell_quartet_cd(sh4,sa,sb)
       S.create(na,nb,na,nb,3)
       O.create(na,nb,na,nb,3)
       sh4.make_spin_orbit_ints(S,O)
       sh4.destroy_ptr_part
       Imax = ZERO
       do a=1,na
       do b=1,nb
          Imax = max(abs(S(a,b,a,b,1)),abs(S(a,b,a,b,2)),abs(S(a,b,a,b,3)), &
                     abs(O(a,b,a,b,1)),abs(O(a,b,a,b,2)),abs(O(a,b,a,b,3)),Imax)
       end
       end
       I_max(ab) = sqrt(Imax)
       O.destroy
       S.destroy
     end
   end

   make_r_JK_direct(J,K,P)
   ! Make the real coulomb matrix "J" and exchange matrix "K" matrix from a
   ! symmetric density matrix "P" directly.
     J,K,P :: REALMAT
     max_I,max_P :: REALVEC*
     !sh4 :: SHELL4
     sh4q :: SHELL1QUARTET
     ab,cd,aa,bb,cc,dd :: INT
     fa,fb,fc,fd,la,lb,lc,ld,start,step :: INT
     factor,cutoff,P_max,IP_max :: REAL
     skip :: BIN
     J = ZERO
     K = ZERO
     cutoff = .scfdata.eri_cutoff
     max_I.create(.n_shell_pairs)
     max_P.create(.n_shell_pairs)
     .make_max_abab_integrals(max_I)
     .make_max_density_elements(max_P,P)
     P_max = maxval(max_P)
     IP_max = maxval(max_I) * P_max
     start = 1 + tonto_parallel.this_proc
     step = tonto_parallel.n_proc
     do ab=start,.n_shell_pairs,step
       if (max_I(ab)*IP_max < cutoff)  cycle   ! Rough version of Schwarz test, but quick.
       .get_shell_pair_indices(ab,aa,bb,fa,la,fb,lb) ! a & b shell indices.
       .set_precomp_shell_quartet_ab(sh4q,aa,bb)
       !.set_shell_quartet_ab(sh4,aa,bb)
       do cd = 1,ab
         if (max_I(ab)*max_I(cd)*P_max < cutoff)  cycle ! Rough version of Schwarz test, but quick.
         .get_shell_pair_indices(cd,cc,dd,fc,lc,fd,ld)  ! c & d shell indices.
                                        ! ab|cd < sqrt(ab|ab) * sqrt(cd|cd) test.
         skip = .schwarz_inequality_test(cutoff,ab,cd,aa,bb,cc,dd,max_P,max_I)
         if (skip) cycle

         .set_precomp_shell_quartet_cd(sh4q,cc,dd)
         !.set_shell_quartet_cd(sh4,cc,dd)
         if (aa==bb) then                   ! Evaluate the integrals'
           factor = HALF                    ! coincidence factors
         else
           factor = ONE
         end
         if (cc==dd) factor = HALF * factor
         if (aa==cc AND bb==dd) factor = HALF * factor
         sh4q.make_r_JK(J,K,P,factor,fa,la,fb,lb,fc,lc,fd,ld)
         sh4q.destroy_cd
         !sh4.make_r_JK(J,K,P,factor,fa,la,fb,lb,fc,lc,fd,ld)
         !sh4.destroy_cd
       end
       !sh4.destroy_ab
       sh4q.destroy_ab
     end
     max_P.destroy
     max_I.destroy
     .weight_diagonal_blocks(J,TWO)
     .blockwise_symmetric_fold(K)
     J = TWO*J
     tonto_parallel.sum_symmetric_matrices(J)
     tonto_parallel.sum_symmetric_matrices(K)
     J.symmetric_reflect
     K.symmetric_reflect
   end

   make_r_JK_disk(J,K,P)
   ! Make the real coulomb matrix "J" and exchange matrix "K" matrix from a
   ! symmetric density matrix "P" from disk integral archive "eri_integrals"
     J,K,P :: REALMAT
     eri_archive,ind_archive :: ARCHIVE
     I :: REALMAT4*
     q,a,b,c,d,fa,la,fb,lb,fc,lc,fd,ld,n_quartets :: INT
     I_abcd,P_dc,P_db,P_cb :: REAL
     eri_archive.set(.name,"eri_integrals")
     ind_archive.set(.name,"eri_index")
     ENSURE(.basis_info_made, "no basis info")
     ENSURE(.atom.created,  "no atom list")
     ENSURE(eri_archive.exists, "no integral file")
     ENSURE(ind_archive.exists, "no integral index file")
     eri_archive.open(for="read-only",buffered=TRUE,type="real")
     ind_archive.open(for="read-only",buffered=TRUE,type="int")
     J = ZERO
     K = ZERO
     n_quartets = .n_shell_quartets
     do
       ind_archive.file.read(q)
       if (q > n_quartets) exit
       .get_shell_quartet_indices(q,fa,la,fb,lb,fc,lc,fd,ld)
       I.create(fa,la,fb,lb,fc,lc,fd,ld)
       eri_archive.file.read(I)
       do d = fd,ld
         do c = fc,lc
           P_dc = P(d,c)
           do b = fb,lb
             P_db = P(d,b)
             P_cb = P(c,b)
             do a = fa,la
                I_abcd = I(a,b,c,d)
                J(a,b) = J(a,b) + I_abcd*P_dc
                J(c,d) = J(c,d) + I_abcd*P(b,a)
                K(a,c) = K(a,c) + I_abcd*P_db
                K(a,d) = K(a,d) + I_abcd*P_cb
                K(b,c) = K(b,c) + I_abcd*P(d,a)
                K(b,d) = K(b,d) + I_abcd*P(c,a)
             end
           end
         end
       end
       I.destroy
     end
     ind_archive.close
     eri_archive.close
     .weight_diagonal_blocks(J,TWO)
     .blockwise_symmetric_fold(K)
     J.symmetric_reflect
     K.symmetric_reflect
     J = TWO*J
   end

   make_r_J_disk(J,P)
   ! Make the real coulomb matrix "J" from a
   ! symmetric density matrix "P" from disk integral archive "eri_integrals"
     J,P :: REALMAT
     eri_archive,ind_archive :: ARCHIVE
     I :: REALMAT4*
     q,a,b,c,d,fa,la,fb,lb,fc,lc,fd,ld,n_quartets :: INT
     I_abcd,P_dc,P_db,P_cb :: REAL
   ENSURE(.basis_info_made, "no basis info")
   ENSURE(.atom.created,  "no atom list")
     eri_archive.set(.name,"eri_integrals")
     ind_archive.set(.name,"eri_index")
   ENSURE(eri_archive.exists, "no integral file")
   ENSURE(ind_archive.exists, "no integral index file")
     eri_archive.open(for="read-only",buffered=TRUE,type="real")
     ind_archive.open(for="read-only",buffered=TRUE,type="int")
     J = ZERO
     n_quartets = .n_shell_quartets
     do
       ind_archive.file.read(q)
       if (q > n_quartets) exit
       .get_shell_quartet_indices(q,fa,la,fb,lb,fc,lc,fd,ld)
       I.create(fa,la,fb,lb,fc,lc,fd,ld)
       eri_archive.file.read(I)
       do d = fd,ld
         do c = fc,lc
           P_dc = P(d,c)
           do b = fb,lb
             P_db = P(d,b)
             P_cb = P(c,b)
             do a = fa,la
                I_abcd = I(a,b,c,d)
                J(a,b) = J(a,b) + I_abcd*P_dc
                J(c,d) = J(c,d) + I_abcd*P(b,a)
             end
           end
         end
       end
       I.destroy
     end
     ind_archive.close
     eri_archive.close
     .weight_diagonal_blocks(J,TWO)
     J.symmetric_reflect
     J = TWO*J
   end

   make_r_group_JK(J,K,P)
   ! Make the real coulomb matrix "J" and exchange matrix "K" matrix from the
   ! density matrix "P" only for basis functions which occur in the same
   ! atom_group.
     J,K,P :: REALMAT
     max_I,max_P :: REALVEC*
     sh4 :: SHELL4
     ab,cd, aa,bb,cc,dd :: INT
     fa,fb,fc,fd,la,lb,lc,ld :: INT
     atom_a,atom_b,atom_c,atom_d :: INT
     factor,cutoff,P_max,IP_max :: REAL
     skip :: BIN
     J = ZERO
     K = ZERO
     cutoff = .scfdata.eri_cutoff
     max_I.create(.n_shell_pairs)
     max_P.create(.n_shell_pairs)
     .make_max_abab_integrals(max_I)
     .make_max_density_elements(max_P,P)
     P_max = maxval(max_P)
     IP_max = maxval(max_I) * P_max
     do ab = 1, .n_shell_pairs
       if (max_I(ab)*IP_max < cutoff)  cycle   ! Rough version of Schwarz test, but quick.
       .get_shell_pair_indices(ab,aa,bb,fa,la,fb,lb,atom_a,atom_b)    ! a & b shell indices.
       .set_shell_quartet_ab(sh4,aa,bb)
       do cd = 1,ab
         if (max_I(ab)*max_I(cd)*P_max < cutoff)  cycle ! Rough version of Schwarz test, but quick.
         .get_shell_pair_indices(cd,cc,dd,fc,lc,fd,ld,atom_c,atom_d)  ! c & d shell indices.
         if (NOT .in_same_atom_group(atom_a,atom_b,atom_c,atom_d)) cycle
                                        ! ab|cd < sqrt(ab|ab) * sqrt(cd|cd) test.
         skip = .schwarz_inequality_test(cutoff,ab,cd,aa,bb,cc,dd,max_P,max_I)
         if (skip) cycle
                                              ! calculate ab|cd
         .set_shell_quartet_cd(sh4,cc,dd)
         factor = ONE                         ! Evaluate the integrals'
         if (aa==bb) factor = HALF          ! coincidence factors
         if (cc==dd) factor = HALF * factor
         if (aa==cc AND bb==dd) factor = HALF * factor
         sh4.make_r_JK(J,K,P,factor,fa,la,fb,lb,fc,lc,fd,ld)
         sh4.destroy_cd
       end
       sh4.destroy_ab
     end
     max_P.destroy
     max_I.destroy
     .weight_diagonal_blocks(J,TWO)
     .blockwise_symmetric_fold(K)
     J.symmetric_reflect
     K.symmetric_reflect
     J = TWO*J
   end

   make_r_JK_nosym(J,K,P)
   ! Make the real coulomb matrix "J" and exchange matrix "K" matrix from the
   ! density matrix "P" which has no permutational symmetry.
     J,K,P :: REALMAT
     I :: REALMAT4*
     max_I,max_P :: REALVEC*
     sh4 :: SHELL4
     ab,cd,i_a,i_b,i_c,i_d :: INT
     a,b,c,d,fa,fb,fc,fd,la,lb,lc,ld :: INT
     I_abcd,factor,cutoff :: REAL
     skip :: BIN
     J = ZERO
     K = ZERO
     cutoff = SCFDATA_ERI_LIMIT
     max_I.create(.n_shell_pairs)
     max_P.create(.n_shell_pairs)
     .make_max_abab_integrals(max_I)
     .make_max_density_elements(max_P,P)
     do ab = 1, .n_shell_pairs
       .get_shell_pair_indices(ab,i_a,i_b)    ! a & b shell indices.
       fa = .first_basis_fn_for_shell(i_a)
       fb = .first_basis_fn_for_shell(i_b)
       la = .last_basis_fn_for_shell(i_a)
       lb = .last_basis_fn_for_shell(i_b)
       .set_shell_quartet_ab(sh4,i_a,i_b)
       do cd = 1,ab
         .get_shell_pair_indices(cd,i_c,i_d)  ! c & d shell indices.
         fc = .first_basis_fn_for_shell(i_c)
         fd = .first_basis_fn_for_shell(i_d)
         lc = .last_basis_fn_for_shell(i_c)
         ld = .last_basis_fn_for_shell(i_d)
                                        ! ab|cd < sqrt(ab|ab) * sqrt(cd|cd) test.
         skip = .schwarz_inequality_test(cutoff,ab,cd,i_a,i_b,i_c,i_d,max_P,max_I)
         if (skip) cycle
                                              ! calculate ab|cd
         .set_shell_quartet_cd(sh4,i_c,i_d)
         factor = ONE                         ! Evaluate the integrals'
         if (i_a==i_b) factor = HALF          ! coincidence factors
         if (i_c==i_d) factor = HALF * factor
         if (i_a==i_c AND i_b==i_d) factor = HALF * factor
         I.create(fa,la,fb,lb,fc,lc,fd,ld)
         sh4.get_ERI(I)
           do d = fd,ld
           do c = fc,lc
           do b = fb,lb
           do a = fa,la
            I_abcd = factor * I(a,b,c,d)
            J(a,b) = J(a,b) + I_abcd*P(d,c) ! These are symmetric
            J(a,b) = J(a,b) + I_abcd*P(c,d)
            J(b,a) = J(b,a) + I_abcd*P(d,c)
            J(b,a) = J(b,a) + I_abcd*P(c,d)
            J(c,d) = J(c,d) + I_abcd*P(b,a)
            J(c,d) = J(c,d) + I_abcd*P(a,b)
            J(d,c) = J(d,c) + I_abcd*P(b,a)
            J(d,c) = J(d,c) + I_abcd*P(a,b)
            K(a,d) = K(a,d) + I_abcd*P(b,c) ! These are asymmetric
            K(a,c) = K(a,c) + I_abcd*P(b,d)
            K(b,c) = K(b,c) + I_abcd*P(a,d)
            K(b,d) = K(b,d) + I_abcd*P(a,c)
            K(d,a) = K(d,a) + I_abcd*P(c,b)
            K(c,a) = K(c,a) + I_abcd*P(d,b)
            K(c,b) = K(c,b) + I_abcd*P(d,a)
            K(d,b) = K(d,b) + I_abcd*P(c,a)
           end
           end
           end
           end
         I.destroy
         sh4.destroy_cd
       end
       sh4.destroy_ab
     end
     max_P.destroy
     max_I.destroy
   end

   make_r_J_direct(J,P)
   ! Make the real coulomb matrix "J" from a symmetric density matrix "P"
   ! directly.
     J,P :: REALMAT
     max_I,max_P :: REALVEC*
     sh4 :: SHELL4
     ab,cd,aa,bb,cc,dd :: INT
     fa,fb,fc,fd,la,lb,lc,ld,start,step :: INT
     factor,cutoff,P_max,IP_max :: REAL
     skip :: BIN
     J = ZERO
     cutoff = .scfdata.eri_cutoff
     max_I.create(.n_shell_pairs)
     max_P.create(.n_shell_pairs)
     .make_max_abab_integrals(max_I)
     .make_max_density_elements(max_P,P)
     P_max = maxval(max_P)
     IP_max = maxval(max_I) * P_max
     start = 1 + tonto_parallel.this_proc
     step = tonto_parallel.n_proc
     do ab = start, .n_shell_pairs, step
       if (max_I(ab)*IP_max < cutoff)  cycle   ! Rough version of Schwarz test, but quick.
       .get_shell_pair_indices(ab,aa,bb,fa,la,fb,lb) ! a & b shell indices.
       .set_shell_quartet_ab(sh4,aa,bb)
       do cd = 1,ab
         if (max_I(ab)*max_I(cd)*P_max < cutoff)  cycle ! Rough version of Schwarz test, but quick.
         .get_shell_pair_indices(cd,cc,dd,fc,lc,fd,ld)  ! c & d shell indices.
                                        ! ab|cd < sqrt(ab|ab) * sqrt(cd|cd) test.
         skip = .schwarz_inequality_test(cutoff,ab,cd,aa,bb,cc,dd,max_P,max_I)
         if (skip) cycle

         .set_shell_quartet_cd(sh4,cc,dd)
         if (aa==bb) then                   ! Evaluate the integrals'
           factor = HALF                    ! coincidence factors
         else
           factor = ONE
         end
         if (cc==dd) factor = HALF * factor
         if (aa==cc AND bb==dd) factor = HALF * factor
         sh4.make_r_J(J,P,factor,fa,la,fb,lb,fc,lc,fd,ld)
         sh4.destroy_cd
       end
       sh4.destroy_ab
     end
     max_P.destroy
     max_I.destroy
     .weight_diagonal_blocks(J,TWO)
     tonto_parallel.sum_symmetric_matrices(J)
     J.symmetric_reflect
     J = TWO*J
   end

   make_u_JK_direct(J,Ka,Kb,P,Pa,Pb)
   ! Make the real coulomb matrices "J" and exchange matrices "Ka" and "Kb"
   ! matrix from a symmetric density matrices "P", "Pa", and "Pb" directly.
     J,Ka,Kb,P,Pa,Pb :: REALMAT,target
     I :: REALMAT4*
     max_P,max_I :: REALVEC*
     sh4 :: SHELL4
!     sh4q :: SHELL1QUARTET
     ab,cd, aa,bb,cc,dd :: INT
     a,b,c,d,fa,fb,fc,fd,la,lb,lc,ld :: INT
     I_abcd,factor,Pa_db,Pa_cb,Pb_db,Pb_cb,cutoff :: REAL
     P_dc,Jcd,Ka_bc,Ka_bd,Kb_bc,Kb_bd :: REAL
     skip :: BIN
     J  = ZERO
     Ka = ZERO
     Kb = ZERO
     cutoff = .scfdata.eri_cutoff
     max_P.create(.n_shell_pairs)
     .make_max_density_elements(max_P,P)
     max_I.create(.n_shell_pairs )            ! Store the largest integral for each
     .make_max_abab_integrals(max_I)          ! shell pair ab|ab
     do ab = 1, .n_shell_pairs
       .get_shell_pair_indices(ab,aa,bb,fa,la,fb,lb)   ! a & b shell indices.
!       .set_precomp_shell_quartet_ab(sh4q,aa,bb)
       .set_shell_quartet_ab(sh4,aa,bb)
       do cd = 1,ab
         .get_shell_pair_indices(cd,cc,dd,fc,lc,fd,ld) ! c & d shell indices.
                                              ! ab|cd < sqrt(ab|ab) * sqrt(cd|cd) test.
         skip = .schwarz_inequality_test(cutoff,ab,cd,aa,bb,cc,dd,max_P,max_I)
         if (skip) cycle
                                              ! calculate ab|cd
         .set_shell_quartet_cd(sh4,cc,dd)
!         .set_precomp_shell_quartet_cd(sh4q,cc,dd)
         factor = ONE                         ! Evaluate the integrals'
         if (aa==bb) factor = HALF            ! coincidence factors
         if (cc==dd) factor = HALF * factor
         if (aa==cc AND bb==dd) factor = HALF * factor
         I.create(fa,la,fb,lb,fc,lc,fd,ld)
         sh4.get_ERI(I)
!         sh4q.get_ERI(I)
         do d = fd,ld
           do c = fc,lc
             P_dc = P(d,c)
             Jcd = ZERO
             do b = fb,lb
               Pa_db = Pa(d,b)
               Pb_db = Pb(d,b)
               Pa_cb = Pa(c,b)
               Pb_cb = Pb(c,b)
               Ka_bc = ZERO
               Kb_bc = ZERO
               Ka_bd = ZERO
               Kb_bd = ZERO
               do a = fa,la
                 I_abcd  = factor  * I(a,b,c,d)
                 J(a,b)  = J(a,b)  + I_abcd*P_dc
                 Jcd     = Jcd     + I_abcd*P(b,a)
                 Ka(a,c) = Ka(a,c) + I_abcd*Pa_db
                 Ka(a,d) = Ka(a,d) + I_abcd*Pa_cb
                 Ka_bc   = Ka_bc   + I_abcd*Pa(d,a)
                 Ka_bd   = Ka_bd   + I_abcd*Pa(c,a)
                 Kb(a,c) = Kb(a,c) + I_abcd*Pb_db
                 Kb(a,d) = Kb(a,d) + I_abcd*Pb_cb
                 Kb_bc   = Kb_bc   + I_abcd*Pb(d,a)
                 Kb_bd   = Kb_bd   + I_abcd*Pb(c,a)
               end
               Ka(b,c) = Ka(b,c) + Ka_bc
               Ka(b,d) = Ka(b,d) + Ka_bd
               Kb(b,c) = Kb(b,c) + Kb_bc
               Kb(b,d) = Kb(b,d) + Kb_bd
             end
             J(c,d) = J(c,d) + Jcd
           end
         end
         I.destroy
         sh4.destroy_cd
!         sh4q.destroy_cd
       end
       sh4.destroy_ab
!       sh4q.destroy_ab
     end
     max_I.destroy
     max_P.destroy
     .weight_diagonal_blocks(J,TWO)
     .blockwise_symmetric_fold(Ka)
     .blockwise_symmetric_fold(Kb)
     J.symmetric_reflect
     Ka.symmetric_reflect
     Kb.symmetric_reflect
     J = TWO*J
   end

   make_u_JK_disk(J,Ka,Kb,P,Pa,Pb)
   ! Make the real coulomb matrices "J" and exchange matrices "Ka" and "Kb"
   ! matrix from a symmetric density matrices "P", "Pa", and "Pb" directly.
     J,Ka,Kb,P,Pa,Pb :: REALMAT
     eri_archive,ind_archive :: ARCHIVE*
     I :: REALMAT4*
     q,n_quartets,a,b,c,d,fa,fb,fc,fd,la,lb,lc,ld :: INT
     I_abcd,P_dc,Pa_db,Pa_cb,Pb_db,Pb_cb :: REAL
     eri_archive.create(.name,"eri_integrals")
     ind_archive.create(.name,"eri_index")
   ENSURE(.basis_info_made, "no basis info")
   ENSURE(.atom.created,  "no atom list")
   ENSURE(eri_archive.exists, "no integral file")
   ENSURE(ind_archive.exists, "no integral index file")
     eri_archive.open(for="read-only",buffered=TRUE,type="real")
     ind_archive.open(for="read-only",buffered=TRUE,type="int")
     J  = ZERO
     Ka = ZERO
     Kb = ZERO
     n_quartets = .n_shell_quartets
     do
       ind_archive.file.read(q)
       if (q > n_quartets) exit
       .get_shell_quartet_indices(q,fa,la,fb,lb,fc,lc,fd,ld)
       I.create(fa,la,fb,lb,fc,lc,fd,ld)
       eri_archive.file.read(I)
       do d = fd,ld
         do c = fc,lc
           P_dc = P(d,c)
           do b = fb,lb
             Pa_db = Pa(d,b)
             Pb_db = Pb(d,b)
             Pa_cb = Pa(c,b)
             Pb_cb = Pb(c,b)
             do a = fa,la
                I_abcd = I(a,b,c,d)
                J(a,b) = J(a,b) + I_abcd*P_dc
                J(c,d) = J(c,d) + I_abcd*P(b,a)
                Ka(a,c) = Ka(a,c) + I_abcd*Pa_db
                Ka(a,d) = Ka(a,d) + I_abcd*Pa_cb
                Ka(b,c) = Ka(b,c) + I_abcd*Pa(d,a)
                Ka(b,d) = Ka(b,d) + I_abcd*Pa(c,a)
                Kb(a,c) = Kb(a,c) + I_abcd*Pb_db
                Kb(a,d) = Kb(a,d) + I_abcd*Pb_cb
                Kb(b,c) = Kb(b,c) + I_abcd*Pb(d,a)
                Kb(b,d) = Kb(b,d) + I_abcd*Pb(c,a)
             end
           end
         end
       end
       I.destroy
     end
     ind_archive.destroy
     eri_archive.destroy
     .weight_diagonal_blocks(J,TWO)
     .blockwise_symmetric_fold(Ka)
     .blockwise_symmetric_fold(Kb)
     J.symmetric_reflect
     Ka.symmetric_reflect
     Kb.symmetric_reflect
     J = TWO*J
   end

   make_gc_JK_direct(J,Ka,Kb,Kba,P,Pa,Pb,Pba)
   ! Make the general complex matrices "J" and exchange matrices
   ! "Ka", "Kb" and "Kba" from a density matrices "P", "Pa", "Pb" and "Pba"
   ! directly from the integrals.
     J,P :: REALMAT
     Ka,Kb,Kba,Pa,Pb,Pba :: CPXMAT
      I :: REALMAT4*
     abs_P :: REALMAT*
     max_I,max_P :: REALVEC*
     sh4 :: SHELL4
     ab,cd,aa,bb,cc,dd :: INT
     a,b,c,d,fa,fb,fc,fd,la,lb,lc,ld :: INT
     I_abcd,factor,cutoff :: REAL
     skip :: BIN
     J   = ZERO
     Ka  = ZERO
     Kb  = ZERO
     Kba = ZERO
     cutoff = .scfdata.eri_cutoff
     abs_P.create(.n_bf,.n_bf)
     abs_P = max(abs(P),abs(Pa),abs(Pb),abs(Pb))
     max_P.create(.n_shell_pairs)
     .make_max_density_elements(max_P,abs_P)
     max_I.create(.n_shell_pairs)             ! Store the largest integral for each
     .make_max_abab_integrals(max_I)          ! shell pair ab|ab
     do ab = 1,.n_shell_pairs
       .get_shell_pair_indices(ab,aa,bb,fa,la,fb,lb)
       .set_shell_quartet_ab(sh4,aa,bb)
       do cd = 1,ab
         .get_shell_pair_indices(cd,cc,dd,fc,lc,fd,ld)
                                              ! ab|cd < sqrt(ab|ab) * sqrt(cd|cd) test.
         skip = .schwarz_inequality_test(cutoff,ab,cd,aa,bb,cc,dd,max_P,max_I)
         if (skip) cycle
                                              ! calculate ab|cd
         .set_shell_quartet_cd(sh4,cc,dd)
         I.create(fa,la,fb,lb,fc,lc,fd,ld)
         sh4.get_ERI(I)
         factor = ONE                             ! Evaluate the integrals
         if (aa==bb) factor = HALF                ! Coincidence factors
         if (cc==dd) factor = HALF * factor
         if (aa==cc AND bb==dd) factor = HALF * factor
         I = factor * I
         do d = fd,ld
         do c = fc,lc
         do b = fb,lb
         do a = fa,la
            I_abcd = I(a,b,c,d)
            J(a,b)   = J(a,b)   + I_abcd*P(d,c)   ! These are symmetric
            J(c,d)   = J(c,d)   + I_abcd*P(b,a)
            Ka(a,d)  = Ka(a,d)  + I_abcd*Pa(b,c)  ! These are symmetric
            Ka(a,c)  = Ka(a,c)  + I_abcd*Pa(b,d)  ! but must be folded
            Ka(b,c)  = Ka(b,c)  + I_abcd*Pa(a,d)
            Ka(b,d)  = Ka(b,d)  + I_abcd*Pa(a,c)
            Kb(a,d)  = Kb(a,d)  + I_abcd*Pb(b,c)  ! These are symmetric
            Kb(a,c)  = Kb(a,c)  + I_abcd*Pb(b,d)  ! but must be folded
            Kb(b,c)  = Kb(b,c)  + I_abcd*Pb(a,d)
            Kb(b,d)  = Kb(b,d)  + I_abcd*Pb(a,c)
            Kba(a,d) = Kba(a,d) + I_abcd*Pba(b,c) ! These are asymmetric
            Kba(a,c) = Kba(a,c) + I_abcd*Pba(b,d)
            Kba(b,c) = Kba(b,c) + I_abcd*Pba(a,d)
            Kba(b,d) = Kba(b,d) + I_abcd*Pba(a,c)
            Kba(d,a) = Kba(d,a) + I_abcd*Pba(c,b)
            Kba(c,a) = Kba(c,a) + I_abcd*Pba(d,b)
            Kba(c,b) = Kba(c,b) + I_abcd*Pba(d,a)
            Kba(d,b) = Kba(d,b) + I_abcd*Pba(c,a)
         end
         end
         end
         end
         I.destroy
         sh4.destroy_cd
       end
       sh4.destroy_ab
     end
     max_I.destroy
     max_P.destroy
     abs_P.destroy
     .weight_diagonal_blocks(J,TWO)
     .blockwise_hermitian_fold(Ka)
     .blockwise_hermitian_fold(Kb)
     J.symmetric_reflect
     Ka.make_hermitian
     Kb.make_hermitian
     J = TWO*J
   end

   make_gc_JK_disk(J,Ka,Kb,Kba,P,Pa,Pb,Pba)
   ! Make the real coulomb matrices "J" and exchange matrices "Ka" and "Kb"
   ! matrix from a symmetric density matrices "P", "Pa", and "Pb" directly.
     J,P :: REALMAT
     Ka,Kb,Kba,Pa,Pb,Pba :: CPXMAT
     eri_archive,ind_archive :: ARCHIVE*
     I :: REALMAT4*
     q,n_quartets,a,b,c,d,fa,fb,fc,fd,la,lb,lc,ld :: INT
     I_abcd :: REAL
     eri_archive.create(.name,"eri_integrals")
     ind_archive.create(.name,"eri_index")
   ENSURE(.basis_info_made, "no basis info")
   ENSURE(.atom.created,  "no atom list")
   ENSURE(eri_archive.exists, "no integral file")
   ENSURE(ind_archive.exists, "no integral index file")
     eri_archive.open(for="read-only",buffered=TRUE,type="real")
     ind_archive.open(for="read-only",buffered=TRUE,type="int")
     J   = ZERO
     Ka  = ZERO
     Kb  = ZERO
     Kba = ZERO
     n_quartets = .n_shell_quartets
     do
       ind_archive.file.read(q)
       if (q > n_quartets) exit
       .get_shell_quartet_indices(q,fa,la,fb,lb,fc,lc,fd,ld)
     ! I.create(fa,la,fb,lb,fc,lc,fd,ld)
       allocate(I(fa:la,fb:lb,fc:lc,fd:ld))
       eri_archive.file.read(I)
       do d = fd,ld
       do c = fc,lc
       do b = fb,lb
       do a = fa,la
           I_abcd = I(a,b,c,d)
           J(a,b)   = J(a,b)   + I_abcd*P(d,c)   ! These are symmetric
           J(c,d)   = J(c,d)   + I_abcd*P(b,a)
           Ka(a,d)  = Ka(a,d)  + I_abcd*Pa(b,c)  ! These are symmetric but must be folded
           Ka(a,c)  = Ka(a,c)  + I_abcd*Pa(b,d)
           Ka(b,c)  = Ka(b,c)  + I_abcd*Pa(a,d)
           Ka(b,d)  = Ka(b,d)  + I_abcd*Pa(a,c)
           Kb(a,d)  = Kb(a,d)  + I_abcd*Pb(b,c)  ! These are symmetric but must be folded
           Kb(a,c)  = Kb(a,c)  + I_abcd*Pb(b,d)
           Kb(b,c)  = Kb(b,c)  + I_abcd*Pb(a,d)
           Kb(b,d)  = Kb(b,d)  + I_abcd*Pb(a,c)
           Kba(a,d) = Kba(a,d) + I_abcd*Pba(b,c) ! These are asymmetric
           Kba(a,c) = Kba(a,c) + I_abcd*Pba(b,d)
           Kba(b,c) = Kba(b,c) + I_abcd*Pba(a,d)
           Kba(b,d) = Kba(b,d) + I_abcd*Pba(a,c)
           Kba(d,a) = Kba(d,a) + I_abcd*Pba(c,b)
           Kba(c,a) = Kba(c,a) + I_abcd*Pba(d,b)
           Kba(c,b) = Kba(c,b) + I_abcd*Pba(d,a)
           Kba(d,b) = Kba(d,b) + I_abcd*Pba(c,a)
       end
       end
       end
       end
     ! I.destroy
       deallocate(I)
     end
     ind_archive.destroy
     eri_archive.destroy
     .weight_diagonal_blocks(J,TWO)
     .blockwise_hermitian_fold(Ka)
     .blockwise_hermitian_fold(Kb)
     J.symmetric_reflect
     Ka.make_hermitian
     Kb.make_hermitian
     J = TWO*J
   end

   make_gc_so_JK_direct(JS,KS,JO,KO,P)
   ! Make the general complex spin orbit Classical and Exchange matrices.
   ! Make them directly from integrals on the fly.
     JS,KS,JO,KO :: CPXMAT5
     P :: CPXMAT4
     S,O :: REALMAT5*
     ab,cd,aa,bb,cc,dd :: INT
     a,b,c,d,k,fa,fb,fc,fd,la,lb,lc,ld,m,n :: INT
     S_abcd,O_abcd,factor :: REAL
     sh4 :: SHELL4*
   ENSURE(.basis_info_made, "no basis info")
   ENSURE(.atom.created,  "no atom list")
     JS = ZERO; KS = ZERO; JO = ZERO; KO = ZERO
     sh4.create
     do ab = 1,.n_shell_pairs
       .get_shell_pair_indices(ab,aa,bb,fa,la,fb,lb)
       do cd = 1,ab
         .get_shell_pair_indices(cd,cc,dd,fc,lc,fd,ld)
         .get_shell_quartet(sh4,aa,bb,cc,dd)
         if (sh4.skip_ERI) then ! ??????
           sh4.destroy_ptr_part
           cycle
         end
         allocate(S(fa:la,fb:lb,fc:lc,fd:ld,3))
         allocate(O(fa:la,fb:lb,fc:lc,fd:ld,3))
         sh4.make_spin_orbit_ints(S,O)
         factor = ONE                                   ! Evaluate the integrals
         if (aa==bb) factor = HALF                      ! Coincidence factors
         if (cc==dd) factor = HALF * factor
         if (aa==cc AND bb==dd) factor = HALF * factor
         S = factor * S
         O = factor * O
         do k = 1,3
         do a = fa,la
         do b = fb,lb
         do c = fc,lc
         do d = fd,ld
            S_abcd = S(a,b,c,d,k)
            O_abcd = O(a,b,c,d,k)
            do m = 1,2
            do n = 1,2
               !
               JS(a,b, m,n,k) = JS(a,b, m,n,k) + S_abcd*P(d,c, m,n)
               JS(a,b, m,n,k) = JS(a,b, m,n,k) + S_abcd*P(c,d, m,n)
               JS(b,a, m,n,k) = JS(b,a, m,n,k) - S_abcd*P(d,c, m,n)
               JS(b,a, m,n,k) = JS(b,a, m,n,k) - S_abcd*P(c,d, m,n)
               JS(c,d, m,n,k) = JS(c,d, m,n,k) + O_abcd*P(b,a, m,n)
               JS(c,d, m,n,k) = JS(c,d, m,n,k) + O_abcd*P(a,b, m,n)
               JS(d,c, m,n,k) = JS(d,c, m,n,k) - O_abcd*P(b,a, m,n)
               JS(d,c, m,n,k) = JS(d,c, m,n,k) - O_abcd*P(a,b, m,n)
               !
               JO(a,b, m,n,k) = JO(a,b, m,n,k) + O_abcd*P(d,c, m,n)
               JO(a,b, m,n,k) = JO(a,b, m,n,k) - O_abcd*P(c,d, m,n)
               JO(b,a, m,n,k) = JO(b,a, m,n,k) + O_abcd*P(d,c, m,n)
               JO(b,a, m,n,k) = JO(b,a, m,n,k) - O_abcd*P(c,d, m,n)
               JO(c,d, m,n,k) = JO(c,d, m,n,k) + S_abcd*P(b,a, m,n)
               JO(c,d, m,n,k) = JO(c,d, m,n,k) - S_abcd*P(a,b, m,n)
               JO(d,c, m,n,k) = JO(d,c, m,n,k) + S_abcd*P(b,a, m,n)
               JO(d,c, m,n,k) = JO(d,c, m,n,k) - S_abcd*P(a,b, m,n)
               !
               KS(a,d, m,n,k) = KS(a,d, m,n,k) + S_abcd*P(b,c, m,n)
               KS(a,c, m,n,k) = KS(a,c, m,n,k) + S_abcd*P(b,d, m,n)
               KS(b,d, m,n,k) = KS(b,d, m,n,k) - S_abcd*P(a,c, m,n)
               KS(b,c, m,n,k) = KS(b,c, m,n,k) - S_abcd*P(a,d, m,n)
               KS(c,b, m,n,k) = KS(c,b, m,n,k) + O_abcd*P(d,a, m,n)
               KS(c,a, m,n,k) = KS(c,a, m,n,k) + O_abcd*P(d,b, m,n)
               KS(d,b, m,n,k) = KS(d,b, m,n,k) - O_abcd*P(c,a, m,n)
               KS(d,a, m,n,k) = KS(d,a, m,n,k) - O_abcd*P(c,b, m,n)
               !
               KO(a,d, m,n,k) = KO(a,d, m,n,k) + O_abcd*P(b,c, m,n)
               KO(a,c, m,n,k) = KO(a,c, m,n,k) - O_abcd*P(b,d, m,n)
               KO(b,d, m,n,k) = KO(b,d, m,n,k) + O_abcd*P(a,c, m,n)
               KO(b,c, m,n,k) = KO(b,c, m,n,k) - O_abcd*P(a,d, m,n)
               KO(c,b, m,n,k) = KO(c,b, m,n,k) + S_abcd*P(d,a, m,n)
               KO(c,a, m,n,k) = KO(c,a, m,n,k) - S_abcd*P(d,b, m,n)
               KO(d,b, m,n,k) = KO(d,b, m,n,k) + S_abcd*P(c,a, m,n)
               KO(d,a, m,n,k) = KO(d,a, m,n,k) - S_abcd*P(c,b, m,n)
            end
            end
         end
         end
         end
         end
         end
         deallocate(O)
         deallocate(S)
         sh4.destroy_ptr_part
       end
     end
     sh4.destroy
   end

   make_gc_so_JK_disk(JS,KS,JO,KO,P,component)
   ! Make the general complex spin orbit Classical and Exchange matrices
   ! for a particular "component", either "x", "y" or "z".
     JS,KS,JO,KO,P :: CPXMAT4
     component :: STR(1)
     SO_archive,ind_archive :: ARCHIVE
     S,O :: REALMAT4*
     q,n_quartets :: INT
     a,b,c,d,fa,fb,fc,fd,la,lb,lc,ld,m,n :: INT
     S_abcd,O_abcd :: REAL
   ENSURE(.basis_info_made, "no basis info")
   ENSURE(.atom.created,  "no atom list")
     SO_archive.set(.name,"SO"//component//"_integrals")
     ind_archive.set(.name,"SO_indices")
   ENSURE(SO_archive.exists,  "no spin orbit integral file!")
   ENSURE(ind_archive.exists, "no spin orbit integral index file")
     SO_archive.open(for="read-only",buffered=TRUE,type="real")
     ind_archive.open(for="read-only",buffered=TRUE,type="int")
     JS = ZERO; KS = ZERO; JO = ZERO; KO = ZERO
     n_quartets = .n_shell_quartets
     do
        ind_archive.file.read(q)
        if (q > n_quartets) exit
        .get_shell_quartet_indices(q,fa,la,fb,lb,fc,lc,fd,ld)
        S.create(fa,la,fb,lb,fc,lc,fd,ld)
        O.create(fa,la,fb,lb,fc,lc,fd,ld)
        SO_archive.file.read(S)
        SO_archive.file.read(O)
        do a = fa,la
        do b = fb,lb
        do c = fc,lc
        do d = fd,ld
           S_abcd = S(a,b,c,d)
           O_abcd = O(a,b,c,d)
           do m = 1,2
           do n = 1,2
              !
              JS(a,b, m,n) = JS(a,b, m,n) + S_abcd*P(d,c, m,n)
              JS(a,b, m,n) = JS(a,b, m,n) + S_abcd*P(c,d, m,n)
              JS(b,a, m,n) = JS(b,a, m,n) - S_abcd*P(d,c, m,n)
              JS(b,a, m,n) = JS(b,a, m,n) - S_abcd*P(c,d, m,n)
              JS(c,d, m,n) = JS(c,d, m,n) + O_abcd*P(b,a, m,n)
              JS(c,d, m,n) = JS(c,d, m,n) + O_abcd*P(a,b, m,n)
              JS(d,c, m,n) = JS(d,c, m,n) - O_abcd*P(b,a, m,n)
              JS(d,c, m,n) = JS(d,c, m,n) - O_abcd*P(a,b, m,n)
              !
              JO(a,b, m,n) = JO(a,b, m,n) + O_abcd*P(d,c, m,n)
              JO(a,b, m,n) = JO(a,b, m,n) - O_abcd*P(c,d, m,n)
              JO(b,a, m,n) = JO(b,a, m,n) + O_abcd*P(d,c, m,n)
              JO(b,a, m,n) = JO(b,a, m,n) - O_abcd*P(c,d, m,n)
              JO(c,d, m,n) = JO(c,d, m,n) + S_abcd*P(b,a, m,n)
              JO(c,d, m,n) = JO(c,d, m,n) - S_abcd*P(a,b, m,n)
              JO(d,c, m,n) = JO(d,c, m,n) + S_abcd*P(b,a, m,n)
              JO(d,c, m,n) = JO(d,c, m,n) - S_abcd*P(a,b, m,n)
              !
              KS(a,d, m,n) = KS(a,d, m,n) + S_abcd*P(b,c, m,n)
              KS(a,c, m,n) = KS(a,c, m,n) + S_abcd*P(b,d, m,n)
              KS(b,d, m,n) = KS(b,d, m,n) - S_abcd*P(a,c, m,n)
              KS(b,c, m,n) = KS(b,c, m,n) - S_abcd*P(a,d, m,n)
              KS(c,b, m,n) = KS(c,b, m,n) + O_abcd*P(d,a, m,n)
              KS(c,a, m,n) = KS(c,a, m,n) + O_abcd*P(d,b, m,n)
              KS(d,b, m,n) = KS(d,b, m,n) - O_abcd*P(c,a, m,n)
              KS(d,a, m,n) = KS(d,a, m,n) - O_abcd*P(c,b, m,n)
              !
              KO(a,d, m,n) = KO(a,d, m,n) + O_abcd*P(b,c, m,n)
              KO(a,c, m,n) = KO(a,c, m,n) - O_abcd*P(b,d, m,n)
              KO(b,d, m,n) = KO(b,d, m,n) + O_abcd*P(a,c, m,n)
              KO(b,c, m,n) = KO(b,c, m,n) - O_abcd*P(a,d, m,n)
              KO(c,b, m,n) = KO(c,b, m,n) + S_abcd*P(d,a, m,n)
              KO(c,a, m,n) = KO(c,a, m,n) - S_abcd*P(d,b, m,n)
              KO(d,b, m,n) = KO(d,b, m,n) + S_abcd*P(c,a, m,n)
              KO(d,a, m,n) = KO(d,a, m,n) - S_abcd*P(c,b, m,n)
           end
           end
        end
        end
        end
        end
        O.destroy; S.destroy
     end
     SO_archive.close
     ind_archive.close
   end

   weight_diagonal_blocks(X,fac) ::: pure
   ! Weight the diagonal blocks of matrix "X" by "fac"
      self :: IN
      X :: REALMAT, INOUT
      fac :: REAL, IN
      n,f,l :: INT
      do n = 1,.n_shell
         f = .first_basis_fn_for_shell(n)
         l = .last_basis_fn_for_shell(n)
         X(f:l,f:l) = fac*X(f:l,f:l)
      end
   end

   weight_diagonal_blocks(X,fac) ::: pure
   ! Weight the diagonal blocks of matrix "X" by "fac"
      self :: IN
      X :: CPXMAT, INOUT
      fac :: REAL, IN
      n,f,l :: INT
      do n = 1,.n_shell
         f = .first_basis_fn_for_shell(n)
         l = .last_basis_fn_for_shell(n)
         X(f:l,f:l) = fac*X(f:l,f:l)
      end
   end

   set_diagonal_blocks(X,fac) ::: pure
   ! Set the diagonal blocks of matrix "X" to "fac"
      self :: IN
      X :: REALMAT, INOUT
      fac :: REAL, IN
      n,f,l :: INT
      do n = 1,.n_shell
         f = .first_basis_fn_for_shell(n)
         l = .last_basis_fn_for_shell(n)
         X(f:l,f:l) = fac
      end
   end

   blockwise_symmetric_fold(X)
   ! Symmetrically fold the matrix "X" blockwise
      X :: REALMAT
      a,fa,la,b,fb,lb :: INT
      do a = 1,.n_shell
      do b = 1,a
         fa = .first_basis_fn_for_shell(a)
         la = .last_basis_fn_for_shell(a)
         fb = .first_basis_fn_for_shell(b)
         lb = .last_basis_fn_for_shell(b)
         X(fa:la,fb:lb) = X(fa:la,fb:lb) + transpose(X(fb:lb,fa:la))
      end
      end
   end

   blockwise_hermitian_fold(X)
   ! Hermitian fold the matrix "X" blockwise
      X :: CPXMAT
      a,fa,la,b,fb,lb :: INT
      do a = 1,.n_shell
      do b = 1,a
         fa = .first_basis_fn_for_shell(a)
         la = .last_basis_fn_for_shell(a)
         fb = .first_basis_fn_for_shell(b)
         lb = .last_basis_fn_for_shell(b)
         X(fa:la,fb:lb) = X(fa:la,fb:lb) + transpose(conjg(X(fb:lb,fa:la)))
      end
      end
   end

!  *******************
!  Pairwise SCF energy
!  *******************

   put_scf_energy_in_mo_pairs
   ! Analyse the SCF energy into MO pairs
      Di :: OPMATRIX*
      core_energy :: REALVEC*
      pair_energy :: REALMAT*
      i,j :: INT
      energy :: REAL
      direct :: BIN
      core_energy.create(.n_a)
      pair_energy.create(.n_a,.n_a)
      core_energy = ZERO
      pair_energy = ZERO
      Di.create(.n_bf)
      direct = .scfdata.direct
      .scfdata.direct = TRUE
      do i = 1,.n_a
         .make_scf_density_matrix(i)
         Di.set_to(.density_matrix)
         .make_fock_matrix(.density_matrix,.fock_matrix,core=TRUE,r12=FALSE)
         core_energy(i) = .scf_electronic_energy(Di,core=TRUE)
         do j = 1,i
            .make_scf_density_matrix(j)
            .make_fock_matrix(.density_matrix,.fock_matrix,core=FALSE,r12=TRUE)
            if (i==j) then ! fac = ONE
              pair_energy(i,j) = .scf_electronic_energy(Di,core=FALSE)
            else           ! fac = TWO
              pair_energy(i,j) = TWO*.scf_electronic_energy(Di,core=FALSE)
            end
         end
      end
      Di.destroy
      .scfdata.direct = direct
      stdout.flush
      stdout.text("SCF MO pair energy decomposition:",flush=1)
      energy = sum(core_energy)+sum(transfer(pair_energy,(/ONE/)))+.nuclear_energy
      stdout.show("SCF energy =",energy)
      stdout.text("Core energies:",flush=1)
      stdout.flush
      stdout.dash(int_fields=1,real_fields=1)
      stdout.put("MO_i",int_width=TRUE)
      stdout.put("Core energy")
      stdout.flush
      stdout.dash(int_fields=1,real_fields=1)
      do i = 1,.n_a
         stdout.put(i)
         stdout.put(core_energy(i),flush=1)
      end
      stdout.dash(int_fields=1,real_fields=1)
      stdout.flush
      stdout.text("Orbital pair energies:",flush=1)
      stdout.dash(int_fields=2,real_fields=1)
      stdout.put("MO_i",int_width=TRUE)
      stdout.put("MO_j",int_width=TRUE)
      stdout.put("Pair energy",flush=1)
      stdout.dash(int_fields=2,real_fields=1)
      do i = 1,.n_a
      do j = 1,i
         stdout.put(i)
         stdout.put(j)
         stdout.put(pair_energy(i,j),flush=1)
      end
      end
      stdout.dash(int_fields=2,real_fields=1)
      stdout.flush
   end

!  ************************
!  SCF Energy decomposition
!  ************************

   put_AO_energy_partition
   ! Put out the AO energy partition
      Y :: REALMAT*
      Y.create(.n_bf,.n_bf)
      Y.to_unit_matrix
      .put_energy_partition(Y)
      Y.destroy
   end

   put_SAO_energy_partition
   ! Put out the symmetric AO energy partition
      S,Smh :: REALMAT*
      S.create(.n_bf,.n_bf); .get_overlap_matrix(S)
      Smh.create(.n_bf,.n_bf); Smh.to_inverse_sqrt(S)
      .put_energy_partition(Smh)
      Smh.destroy
      S.destroy
   end

   put_MO_energy_partition
   ! Put out the MO energy partition. NOTE: the MO's must be ordered
   ! contiguously, first group 1 then group 2 MO's, AND the atoms in each group
   ! must be contiguous in the .atom list, first group 1 then group 2. This is
   ! because the atom_group_AO_subspace_set routine is used, and by abuse of its
   ! function with the above cobstraints, it will do the right thing and copy
   ! quadrants.
   ENSURE(.molecular_orbitals.created,"no MO's")
   ENSURE(.molecular_orbitals.restricted.created,"no restricted MO's")
      .put_energy_partition(.molecular_orbitals.restricted)
   end

   put_energy_partition(Y)
   ! Put out the energy decomposition specified in the .atom_group array.
   ! The inverse of matrix "Y" is used to back transform the density matrix
   ! (which is taken from disk). The back transformed density matrix is then
   ! partitioned, and transformed back in order to evaluate the interaction
   ! energies between the partitioned systems.
      Y :: REALMAT
      X, T,Z,ZZ,C,K,P,PP,W,E_T,E_Z, EE :: REALMAT*
      E_ZZ :: REALMAT3*
      E_C,E_K :: REALMAT4*
      n_group,g,h,i,j :: INT
      fac :: REAL
      unit :: STR
      arch :: ARCHIVE
      kinetic_energy,nuclear_attraction,nuclear_repulsion :: REAL
      coulomb_repulsion,net_coulomb,bicentric_exchange :: REAL
      exchange_attraction,total_interaction :: REAL
   ENSURE(.atom_group.created,"no atom group information")
   ENSURE(size(.atom_group)==2,"must have only 2 groups")
   ENSURE(Y.dim1==.n_bf,"incorrect size for Y array")
      arch.set(.name,"density_matrix,restricted")
   ENSURE(arch.exists,"no density matrix")
      P.create(.n_bf,.n_bf)
      PP.create(.n_bf,.n_bf)
      arch.read(P)
      W.create(.n_bf,.n_bf)
      T.create(.n_bf,.n_bf); .get_kinetic_matrix(T)
      Z.create(.n_bf,.n_bf); .get_nuclear_matrix(Z)
      X.create(.n_bf,.n_bf); X.to_inverse_of(Y)
      n_group = size(.atom_group)
      E_T.create(n_group,n_group); E_T = ZERO
      E_Z.create(n_group,n_group); E_Z = ZERO
      E_C.create(n_group,n_group,n_group,n_group); E_C = ZERO
      E_K.create(n_group,n_group,n_group,n_group); E_K = ZERO
      E_ZZ.create(n_group,n_group,n_group); E_ZZ = ZERO
      ZZ.create(.n_bf,.n_bf)
      PP = P
      PP.back_transform(X)
      X.destroy
         do i = 1,n_group
         do j = 1,i
            W = ZERO
            .atom_group_AO_subspace_set(W,PP,i,j)
            if (i/=j) &
            .atom_group_AO_subspace_set(W,PP,j,i)
            W.back_transform(Y)
            E_T(i,j) = T.trace_product_with(W)
            E_Z(i,j) = Z.trace_product_with(W)
            do g = 1,n_group
               .make_nuclear_matrix(ZZ,.atom_group(g).element)
               E_ZZ(i,j,g) = ZZ.trace_product_with(W)
            end
         end
         end
      ZZ.destroy
      C.create(.n_bf,.n_bf)
      K.create(.n_bf,.n_bf)
      do g = 1,n_group
      do h = 1,g
         W = ZERO
         .atom_group_AO_subspace_set(W,PP,g,h)
         if (g/=h) &
         .atom_group_AO_subspace_set(W,PP,h,g)
         W.back_transform(Y)
         .make_r_JK_nosym(C,K,W)
         do i = 1,n_group
         do j = 1,i
            W = ZERO
            .atom_group_AO_subspace_set(W,PP,i,j)
            if (i/=j) &
            .atom_group_AO_subspace_set(W,PP,j,i)
            W.back_transform(Y)
            E_C(i,j,g,h) =  C.trace_product_with(W)
            E_K(i,j,g,h) = -K.trace_product_with(W)
         end
         end
      end
      end
      K.destroy
      C.destroy
      E_C = HALF*E_C
      E_K = HALF*HALF*E_K
      EE.create(n_group,n_group)
      !
      stdout.text(" ")
      fac = sum(E_T+E_Z) + sum(E_C+E_K)
      stdout.show("SCF electronic energy =",fac)
      stdout.show("SCF energy            =",fac+.nuclear_energy)
      stdout.show("Kinetic energy        =",sum(E_T))
      !
      unit = "kcal/mol"
      fac = unit.conversion_factor
      E_T = fac*E_T
      E_Z = fac*E_Z
      E_C = fac*E_C
      E_K = fac*E_K
      E_ZZ = fac*E_ZZ
      stdout.text(" ")
      stdout.text("Energy decomposition in kcal/mol ...")
      stdout.text(" ")
      stdout.text("Kinetic interaction terms")
      stdout.put(E_T)
      stdout.text(" ")
      stdout.text("Nuclear attraction interaction terms")
      stdout.put(E_Z)
      stdout.text(" ")
      stdout.text("Nuclear attraction interaction terms ONLY for group 1 nuclei")
      stdout.put(E_ZZ(:,:,1))
      stdout.text(" ")
      stdout.text("Nuclear attraction interaction terms ONLY for group 2 nuclei")
      stdout.put(E_ZZ(:,:,2))
      EE(1,1) = fac*.atom(.atom_group(1).element).nuclear_energy
      EE(2,2) = fac*.atom(.atom_group(2).element).nuclear_energy
      nuclear_repulsion = fac*.nuclear_energy - EE(1,1) - EE(2,2)
      EE(2,1) = nuclear_repulsion
      EE(1,2) = ZERO
      stdout.text(" ")
      stdout.text("Nuclear nuclear repulsion")
      stdout.put(EE)
      EE(1,1) = E_C(1,1,1,1)
      EE(2,1) = E_C(2,2,1,1)
      EE(1,2) = E_C(1,1,2,2)
      EE(2,2) = E_C(2,2,2,2)
      stdout.text(" ")
      stdout.text("Diagonal Coulomb repulsion interaction terms")
      stdout.put(EE)
      EE(1,1) = E_C(1,2,1,1)
      EE(2,1) = E_C(2,1,1,1)
      EE(1,2) = E_C(1,2,2,2)
      EE(2,2) = E_C(2,1,2,2)
      stdout.text(" ")
      stdout.text("Semi diagonal Coulomb repulsion interaction terms")
      stdout.put(EE)
      EE(1,1) = E_C(1,2,1,2)
      EE(2,1) = E_C(2,1,1,2)
      EE(1,2) = E_C(1,2,2,1)
      EE(2,2) = E_C(2,1,2,1)
      stdout.text(" ")
      stdout.text("Off diagonal Coulomb repulsion interaction terms")
      stdout.put(EE)
      stdout.text(" ")
      stdout.text("All Coulomb repulsion interaction terms")
      stdout.put(E_C)
      EE(1,1) = E_K(1,1,1,1)
      EE(2,1) = E_K(2,2,1,1)
      EE(1,2) = E_K(1,1,2,2)
      EE(2,2) = E_K(2,2,2,2)
      stdout.text(" ")
      stdout.text("Diagonal exchange interaction terms")
      stdout.put(EE)
      EE(1,1) = E_K(1,2,1,1)
      EE(2,1) = E_K(2,1,1,1)
      EE(1,2) = E_K(1,2,2,2)
      EE(2,2) = E_K(2,1,2,2)
      stdout.text(" ")
      stdout.text("Semi diagonal exchange interaction terms")
      stdout.put(EE)
      EE(1,1) = E_K(1,2,1,2)
      EE(2,1) = E_K(2,1,1,2)
      EE(1,2) = E_K(1,2,2,1)
      EE(2,2) = E_K(2,1,2,1)
      stdout.text(" ")
      stdout.text("Off diagonal exchange interaction terms")
      stdout.put(EE)
      stdout.text(" ")
      stdout.text("All exchange interaction terms")
      stdout.put(E_K)

      kinetic_energy = E_T(2,1)
      nuclear_attraction = sum(E_Z) - E_ZZ(1,1,1) - E_ZZ(2,2,2)
      coulomb_repulsion = sum(E_C) - E_C(1,1,1,1) - E_C(2,2,2,2)
      net_coulomb = nuclear_attraction + nuclear_repulsion + coulomb_repulsion
      bicentric_exchange = E_K(1,1,2,2) + E_K(2,2,1,1)
      exchange_attraction = sum(E_K) - E_K(1,1,1,1) - E_K(2,2,2,2)
      total_interaction = kinetic_energy + net_coulomb + exchange_attraction
      stdout.text(" ")
      stdout.text("Interaction energies for "//trim(.name)//":")
      stdout.text(" ")
      stdout.show("Kinetic energy     =",kinetic_energy)
      stdout.show("Exchange energy    =",exchange_attraction)
      stdout.show("Kinetic + Exhange  =",kinetic_energy+exchange_attraction)
      stdout.show("Bicentric Exchange =",bicentric_exchange)
      stdout.show("Net Coulomb energy =",net_coulomb)
      stdout.show("Total int. energy  =",total_interaction)

      kinetic_energy = E_T(1,1)
      exchange_attraction = E_K(1,1,1,1)
      net_coulomb = E_ZZ(1,1,1) + fac*.atom(.atom_group(1).element).nuclear_energy + E_C(1,1,1,1)
      total_interaction = kinetic_energy + net_coulomb + exchange_attraction
      stdout.text(" ")
      stdout.text("Monomer 1 energies:")
      stdout.text(" ")
      stdout.show("Kinetic energy 1   =",kinetic_energy)
      stdout.show("Exchange energy 1  =",exchange_attraction)
      stdout.show("Kinetic+Exhange 1  =",kinetic_energy+exchange_attraction)
      stdout.show("Net Coulomb 1      =",net_coulomb)
      stdout.show("Total 1            =",total_interaction)

      kinetic_energy = E_T(2,2)
      exchange_attraction = E_K(2,2,2,2)
      net_coulomb = E_ZZ(2,2,2) + fac*.atom(.atom_group(2).element).nuclear_energy + E_C(2,2,2,2)
      total_interaction = kinetic_energy + net_coulomb + exchange_attraction
      stdout.text(" ")
      stdout.text("Monomer 2 energies:")
      stdout.text(" ")
      stdout.show("Kinetic energy 2   =",kinetic_energy)
      stdout.show("Exchange energy 2  =",exchange_attraction)
      stdout.show("Kinetic+Exhange 2  =",kinetic_energy+exchange_attraction)
      stdout.show("Net Coulomb 2      =",net_coulomb)
      stdout.show("Total 2            =",total_interaction)

      EE.destroy
      E_ZZ.destroy
      E_K.destroy
      E_C.destroy
      E_Z.destroy
      E_T.destroy
      Z.destroy
      T.destroy
      W.destroy
      PP.destroy
      P.destroy
   end

!   put_roby_energy_partition
!   ! Put out the energy decomposition specified in the .atom_group array.
!   ! The inverse of matrix "Y" is used to back transform the density matrix
!   ! (which is taken from disk). The back transformed density matrix is then
!   ! partitioned, and transformed back in order to evaluate the interaction
!   ! energies between the partitioned systems.
!      unit :: STR
!      arch :: ARCHIVE
!      E_T,E_T_A,E_T_B, E_Z,E_Z_A,E_Z_B :: REAL
!      E_C,E_C_A,E_C_B, E_K,E_K_A,E_K_B, E_N,E_N_A,E_N_B :: REAL
!      kinetic_energy,nuclear_attraction,nuclear_repulsion :: REAL
!      coulomb_repulsion,net_coulomb :: REAL
!      exchange_attraction,total_interaction :: REAL
!      energy, promotion_energy, fac :: REAL
!      P,P_A,P_B,MO,OM,Q,T,Z,C,K :: REALMAT*
!      n,f,l :: INT
!      ENSURE(.atom_group.created,"no atom group information")
!      ENSURE(size(.atom_group)==2,"must have only 2 groups")
!      arch.set(.name,"density_matrix,restricted")
!      ENSURE(arch.exists,"no density matrix")
!      P.create(.n_bf,.n_bf)
!      arch.read(P) ! Read the density from disk
!      !
!      .make_group_density(MOs=TRUE)
!  ! stdout.text(" ")
!  ! stdout.text("WARING, no symorthonormilsation")
!      .symorthonormalise_occupied_MOs
!      !
!      P_A.create(.n_bf,.n_bf)
!      P_B.create(.n_bf,.n_bf)
!      MO.create(.n_bf,.n_bf)
!      OM.create(.n_bf,.n_bf)
!      Q.create(.n_bf,.n_bf)
!      MO = .molecular_orbitals.restricted
!      OM.to_inverse_of(MO)
!      P.back_transform(Q,OM)
!      n = .occupation_numbers.restricted(1:).index_of_first_zero_value - 1
!    stdout.text(" ")
!    stdout.show("n = ",n)
!      P_A = ZERO
!      P_A(1:n,1:n) = Q(1:n,1:n)
!    stdout.text("P_A :")
!    stdout.put(P_A)
!      P_A.back_transform(MO)
!      f = .occupation_numbers.restricted(n+1:).index_of_first_nonzero_value
!      f = n + f
!      l = .occupation_numbers.restricted(f:).index_of_first_zero_value - 1
!      l = f + l - 1
!    stdout.show("f = ",f)
!    stdout.show("l = ",l)
!      P_B = ZERO
!      P_B(f:l,f:l) = Q(f:l,f:l)
!    stdout.text("P_B :")
!    stdout.put(P_B)
!      P_B.back_transform(MO)
!    stdout.text("Q :")
!    stdout.put(Q)
!      Q.destroy
!      OM.destroy
!      MO.destroy
!      !
!      unit = "kcal/mol"
!      fac = unit.conversion_factor
!      !
!      T.create(.n_bf,.n_bf)
!      .get_kinetic_matrix(T)
!      E_T   = T.trace_product_with(P)*fac
!      E_T_A = T.trace_product_with(P_A)*fac
!      E_T_B = T.trace_product_with(P_B)*fac
!      T.destroy
!      !
!      Z.create(.n_bf,.n_bf)
!      .get_nuclear_matrix(Z)
!      E_Z   = Z.trace_product_with(P)*fac
!      .make_nuclear_matrix(Z,.atom_group(1).element)
!      E_Z_A = Z.trace_product_with(P_A)*fac
!      .make_nuclear_matrix(Z,.atom_group(2).element)
!      E_Z_B = Z.trace_product_with(P_B)*fac
!      Z.destroy
!      !
!      C.create(.n_bf,.n_bf)
!      K.create(.n_bf,.n_bf)
!      .make_r_JK_nosym(C,K,P)
!      E_C   = HALF*C.trace_product_with(P)*fac
!      E_K   = -QUARTER*K.trace_product_with(P)*fac
!      .make_r_JK_nosym(C,K,P_A)
!      E_C_A = HALF*C.trace_product_with(P_A)*fac
!      E_K_A = -QUARTER*K.trace_product_with(P_A)*fac
!      .make_r_JK_nosym(C,K,P_B)
!      E_C_B = HALF*C.trace_product_with(P_B)*fac
!      E_K_B = -QUARTER*K.trace_product_with(P_B)*fac
!      K.destroy
!      C.destroy
!      P_B.destroy
!      P_A.destroy
!      P.destroy
!      !
!      E_N   = .nuclear_energy*fac
!      E_N_A = .atom(.atom_group(1).element).nuclear_energy*fac
!      E_N_B = .atom(.atom_group(2).element).nuclear_energy*fac
!      stdout.text(" ")
!      !
!      energy              = E_T + E_Z + E_C + E_K
!      kinetic_energy      = E_T - E_T_A - E_T_B
!      nuclear_attraction  = E_Z - E_Z_A - E_Z_B
!      nuclear_repulsion   = E_N - E_N_A - E_N_B
!      coulomb_repulsion   = E_C - E_C_A - E_C_B
!      net_coulomb         = nuclear_attraction + nuclear_repulsion + coulomb_repulsion
!      exchange_attraction = E_K - E_K_A - E_K_B
!      total_interaction   = kinetic_energy + net_coulomb + exchange_attraction
!      !
!      stdout.text(" ")
!      stdout.show("SCF electronic energy =",(energy/fac))
!      stdout.show("SCF energy            =",(energy/fac)+.nuclear_energy)
!      stdout.show("Kinetic energy        =",(E_T/fac))
!      stdout.text(" ")
!      stdout.text("Roby energy decomposition in kcal/mol ...")
!      stdout.text(" ")
!      stdout.text("Interaction energies for "//trim(.name)//":")
!      stdout.text(" ")
!      stdout.show("Energy             =",energy)
!      stdout.show("Kinetic energy     =",kinetic_energy)
!      stdout.show("Exchange energy    =",exchange_attraction)
!      stdout.show("Kinetic + Exhange  =",kinetic_energy+exchange_attraction)
!      stdout.show("Net Coulomb energy =",net_coulomb)
!      stdout.show("Total int. energy  =",total_interaction)
!      !
!      kinetic_energy      = E_T_A
!      exchange_attraction = E_K_A
!      net_coulomb         = E_Z_A + E_N_A + E_C_A
!      total_interaction   = kinetic_energy + net_coulomb + exchange_attraction
!      promotion_energy    = total_interaction - .atom_group_energy(1)*fac
!      stdout.text(" ")
!      stdout.text("Monomer 1 energies:")
!      stdout.text(" ")
!      stdout.show("Kinetic energy 1   =",kinetic_energy)
!      stdout.show("Exchange energy 1  =",exchange_attraction)
!      stdout.show("Kinetic+Exhange 1  =",kinetic_energy+exchange_attraction)
!      stdout.show("Net Coulomb 1      =",net_coulomb)
!      stdout.show("Total 1            =",total_interaction)
!      stdout.show("Promotion 1        =",promotion_energy)
!      !
!      kinetic_energy      = E_T_B
!      exchange_attraction = E_K_B
!      net_coulomb         = E_Z_B + E_N_B + E_C_B
!      total_interaction   = kinetic_energy + net_coulomb + exchange_attraction
!      promotion_energy    = total_interaction - .atom_group_energy(2)*fac
!      stdout.text(" ")
!      stdout.text("Monomer 2 energies:")
!      stdout.text(" ")
!      stdout.show("Kinetic energy 2   =",kinetic_energy)
!      stdout.show("Exchange energy 2  =",exchange_attraction)
!      stdout.show("Kinetic+Exhange 2  =",kinetic_energy+exchange_attraction)
!      stdout.show("Net Coulomb 2      =",net_coulomb)
!      stdout.show("Total 2            =",total_interaction)
!      stdout.show("Promotion 2        =",promotion_energy)
!   end

   put_roby_smo_energy_partition
   ! Put out the roby energy decomposition specified in the .atom_group array
   ! based on symmetrically orthonormalised monomer molecular (SOMMO) fragments.
   ! A supermolecue density matrix must exist on disk.
      .put_roby_energy_partition(symorthonormalise=TRUE)
   end

   put_roby_mmo_energy_partition
   ! Put out the roby energy decomposition specified in the .atom_group array
   ! based on monomer molecular (MMO) fragments.  A supermolecue density matrix
   ! must exist on disk.
      .put_roby_energy_partition(symorthonormalise=FALSE)
   end

   put_roby_energy_partition(symorthonormalise)
   ! Calculate and put out the roby energy decomposition specified in the
   ! .atom_group array.  If "symorthonormalise" is TRUE, then the occupied
   ! monomer molecular orbitals are symmetrically orthonormalised in morder to
   ! define the fragments. The density matrix defining the supermolecule is read
   ! in from the disk, so an SCF calculation or a "make_promol_density_matrix"
   ! calculation must be done before this routine is called.
      symorthonormalise :: BIN
      unit :: STR
      arch :: ARCHIVE
      E_T,E_T_A,E_T_B, E_Z,E_Z_A,E_Z_B :: REAL
      E0_A,E0_B, E0_T_A,E0_T_B, E0_Z_A,E0_Z_B :: REAL
      E_C,E_C_A,E_C_B, E_K,E_K_A,E_K_B, E_N,E_N_A,E_N_B :: REAL
      E0_C_A,E0_C_B, E0_K_A,E0_K_B :: REAL
      E_kin,E_att,E_rep,E_coul,E_net_coul,E_ex,E_int,E_prom,energy, fac :: REAL
      P,P_A,P_B,MO,OM,Q,T,Z,C,K :: REALMAT*
      n,f,l :: INT
   ENSURE(.atom_group.created,"no atom group information")
   ENSURE(size(.atom_group)==2,"must have only 2 groups")
      arch.set(.name,"density_matrix,restricted")
   ENSURE(arch.exists,"no density matrix")
      unit = "kcal/mol"
      fac = unit.conversion_factor
      !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      P.create(.n_bf,.n_bf)
      arch.read(P)                   ! *** Read the density from disk
      .make_group_density(MOs=TRUE)  ! *** Make the monomer molecular orbitals
      .make_group_energies(1,E0_A,E0_T_A,E0_Z_A,E0_C_A,E0_K_A,fac)
      .make_group_energies(2,E0_B,E0_T_B,E0_Z_B,E0_C_B,E0_K_B,fac)
      !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      if (symorthonormalise) then
         stdout.text(" ")
         stdout.text("performing symorthonormalisation")
         .symorthonormalise_occupied_MOs
      else
         stdout.text(" ")
         stdout.text("WARNING: no symorthonormalisation")
      end
      P_A.create(.n_bf,.n_bf)
      P_B.create(.n_bf,.n_bf)
      MO.create(.n_bf,.n_bf)
      OM.create(.n_bf,.n_bf)
      Q.create(.n_bf,.n_bf)
      MO = .molecular_orbitals.restricted
      OM.to_inverse_of(MO)
      P.back_transform(Q,OM)
      n = .occupation_numbers.restricted(1:).index_of_first_zero_value - 1
    stdout.text(" ")
    stdout.show("n = ",n)
      P_A = ZERO
      P_A(1:n,1:n) = Q(1:n,1:n)
    stdout.text("P_A :")
    stdout.put(P_A)
      P_A.back_transform(MO)
      f = .occupation_numbers.restricted(n+1:).index_of_first_nonzero_value
      f = n + f
      l = .occupation_numbers.restricted(f:).index_of_first_zero_value - 1
      l = f + l - 1
    stdout.show("f = ",f)
    stdout.show("l = ",l)
      P_B = ZERO
      P_B(f:l,f:l) = Q(f:l,f:l)
    stdout.text("P_B :")
    stdout.put(P_B)
      P_B.back_transform(MO)
    stdout.text("Q :")
    stdout.put(Q)
      Q.destroy
      OM.destroy
      MO.destroy
      !
      T.create(.n_bf,.n_bf)
      .get_kinetic_matrix(T)
      E_T   = T.trace_product_with(P)*fac
      E_T_A = T.trace_product_with(P_A)*fac
      E_T_B = T.trace_product_with(P_B)*fac
      T.destroy
      !
      Z.create(.n_bf,.n_bf)
      .get_nuclear_matrix(Z)
      E_Z   = Z.trace_product_with(P)*fac
      .make_nuclear_matrix(Z,.atom_group(1).element)
      E_Z_A = Z.trace_product_with(P_A)*fac
      .make_nuclear_matrix(Z,.atom_group(2).element)
      E_Z_B = Z.trace_product_with(P_B)*fac
      Z.destroy
      !
      C.create(.n_bf,.n_bf)
      K.create(.n_bf,.n_bf)
      .make_r_JK_nosym(C,K,P)
      E_C   = HALF*C.trace_product_with(P)*fac
      E_K   = -QUARTER*K.trace_product_with(P)*fac
      .make_r_JK_nosym(C,K,P_A)
      E_C_A = HALF*C.trace_product_with(P_A)*fac
      E_K_A = -QUARTER*K.trace_product_with(P_A)*fac
      .make_r_JK_nosym(C,K,P_B)
      E_C_B = HALF*C.trace_product_with(P_B)*fac
      E_K_B = -QUARTER*K.trace_product_with(P_B)*fac
      K.destroy
      C.destroy
      P_B.destroy
      P_A.destroy
      P.destroy
      !
      E_N   = .nuclear_energy*fac
      E_N_A = .atom(.atom_group(1).element).nuclear_energy*fac
      E_N_B = .atom(.atom_group(2).element).nuclear_energy*fac
      stdout.text(" ")
      !
      stdout.text(" ")
      stdout.text("Supermolecule energies:")
      stdout.text(" ")
      energy     = E_T + E_Z + E_C + E_K
      stdout.show("SCF electronic energy =",(energy/fac))
      stdout.show("... in kcal/mol       =",energy)
      stdout.show("SCF energy            =",(energy/fac)+.nuclear_energy)
      stdout.show("... in kcal/mol       =",energy+fac*.nuclear_energy)
      stdout.show("Kinetic energy        =",(E_T/fac))
      stdout.show("... in kcal/mol       =",(E_T/fac))
      stdout.text(" ")
      stdout.text("Roby interaction energy decomposition (kcal/mol):")
      E_kin      = E_T - E_T_A - E_T_B
      E_ex       = E_K - E_K_A - E_K_B
      E_att      = E_Z - E_Z_A - E_Z_B
      E_rep      = E_N - E_N_A - E_N_B
      E_coul     = E_C - E_C_A - E_C_B
      E_net_coul = E_att + E_rep + E_coul
      E_int      = E_kin + E_net_coul + E_ex
      .put_roby_energy_parts(E_kin,E_ex,E_coul,E_att,E_rep,E_int)
      !
      stdout.text(" ")
      stdout.text("Interacting Monomer 1 energies (kcal/mol):")
      stdout.text(" ")
      E_int      = E_T_A + (E_Z_A + E_N_A + E_C_A) + E_K_A
      E_prom     = E_T_A + (E_Z_A + E_N_A + E_C_A) - .atom_group_energy(1)*fac
      .put_roby_energy_parts(E_T_A,E_K_A,E_C_A,E_Z_A,E_N_A,E_int,E_prom)
      !
      stdout.text(" ")
      stdout.text("Isolated Monomer 1 energies (kcal/mol):")
      stdout.text(" ")
      stdout.show("Monomer 1 energy   =",.atom_group_energy(1))
      stdout.show("... in k/cal mol   =",.atom_group_energy(1)*fac)
      stdout.text(" ")
      .put_roby_energy_parts(E0_T_A,E0_K_A,E0_C_A,E0_Z_A,E_N_A)
      !
      stdout.text(" ")
      stdout.text("Changes in monomer 1 energy contributions (kcal/mol):")
      E_kin      = E_T_A - E0_T_A
      E_ex       = E_K_A - E0_K_A
      E_coul     = E_C_A - E0_C_A
      E_att      = E_Z_A - E0_Z_A            ! nuclear attraction
      E_rep      = ZERO                      ! change in nuclear repulsion is zero
      E_net_coul = E_att + E_rep + E_coul
      E_prom     = E_kin + E_net_coul + E_ex
      .put_roby_energy_parts(E_kin,E_ex,E_coul,E_att,E_rep,E_prom=E_prom)
      !
      stdout.text(" ")
      stdout.text("Interacting Monomer 2 energies (kcal/mol):")
      stdout.text(" ")
      E_int      = E_T_B + (E_Z_B + E_N_B + E_C_B) + E_K_B
      E_prom     = E_T_B + (E_Z_B + E_N_B + E_C_B) - .atom_group_energy(2)*fac
      .put_roby_energy_parts(E_T_B,E_K_B,E_C_B,E_Z_B,E_N_B,E_int,E_prom)
      !
      stdout.text(" ")
      stdout.text("Isolated Monomer 2 energies (kcal/mol):")
      stdout.text(" ")
      stdout.show("Monomer 2 energy   =",.atom_group_energy(2))
      stdout.show("... in k/cal mol   =",.atom_group_energy(2)*fac)
      stdout.text(" ")
      .put_roby_energy_parts(E0_T_B,E0_K_B,E0_C_B,E0_Z_B,E_N_B)
      !
      stdout.text(" ")
      stdout.text("Changes in monomer 2 energy contributions (kcal/mol):")
      E_kin      = E_T_B - E0_T_B
      E_ex       = E_K_B - E0_K_B
      E_coul     = E_C_B - E0_C_B
      E_att      = E_Z_B - E0_Z_B            ! nuclear attraction
      E_rep      = ZERO                      ! change in nuclear repulsion is zero
      E_net_coul = E_att + E_rep + E_coul
      E_prom     = E_kin + E_net_coul + E_ex
      .put_roby_energy_parts(E_kin,E_ex,E_coul,E_att,E_rep,E_prom=E_prom)
   end

   put_roby_energy_parts(E_T,E_K,E_C,E_Z,E_N,E_int,E_prom) ::: private
   ! Put of the Roby energy parts
      E_T,E_K,E_C,E_Z,E_N :: REAL
      E_int,E_prom :: REAL, optional
      stdout.text(" ")
      stdout.show("Kinetic energy       =",E_T)
      stdout.show("Exchange energy      =",E_K)
      stdout.show("Kinetic + Exhange    =",E_T+E_K)
      stdout.show("Nuclear attraction   =",E_Z)
      stdout.show("Nuclear repulsion    =",E_N)
      stdout.show("Electronic repulsion =",E_C)
      stdout.show("Net coulomb energy   =",E_Z+E_N+E_C)
      if (present(E_int)) &
      stdout.show("Total int. energy    =",E_int)
      if (present(E_prom)) &
      stdout.show("Promotion energy     =",E_prom)
   end

   atom_group_AO_subspace_set(P,Q,row_group,col_group)
   ! Set P=Q only for the block whose rows correspond to basis functions
   ! on the atoms in the atom group "row_group" and whose columns are
   ! on the atoms in the atom group "col_group", as given in the
   ! .atom_group array vector.
     P,Q :: REALMAT
     row_group,col_group :: INT
     i_a,i_b,a,b,fa,fb,la,lb :: INT
   ENSURE(P.dim1==.n_bf,"wrong size for P")
   ENSURE(P.dim2==.n_bf,"wrong size for P")
   ENSURE(Q.dim1==.n_bf,"wrong size for Q")
   ENSURE(Q.dim2==.n_bf,"wrong size for Q")
   ENSURE(.atom_group.created,"no atom group information")
   ENSURE(row_group<=size(.atom_group),"no such row group")
   ENSURE(col_group<=size(.atom_group),"no such column group")
   ENSURE(row_group>0,"row group index must be positive")
   ENSURE(col_group>0,"column group index must be positive")
     do i_a = 1,size(.atom_group(row_group).element)
     do i_b = 1,size(.atom_group(col_group).element)
       a = .atom_group(row_group).element(i_a)
       b = .atom_group(col_group).element(i_b)
       fa = .first_basis_fn_for_atom(a)
       fb = .first_basis_fn_for_atom(b)
       la = .last_basis_fn_for_atom(a)
       lb = .last_basis_fn_for_atom(b)
       P(fa:la,fb:lb) = Q(fa:la,fb:lb)
     end
     end
   end

   AO_subspace_set(A,B,row_atom,col_atom) ::: private
   ! Set "A" equal to the AO subspace blocks of "B" specified by the atom
   ! indices in "row_atom" and "col_atom". If either is missing, then copy
   ! the entire row or col, i.e.  A(small) = B(row_atom,col_atom)
      A,B :: REALMAT
      row_atom,col_atom :: INTVEC, optional
      n_row_atoms,n_col_atoms, a1,a2 :: INT
      i,b_i,f_i,l_i,n_i, j,b_j,f_j,l_j,n_j :: INT
   ENSURE(B.dim1==.n_bf,"B has wrong shape")
   ENSURE(B.dim2==.n_bf,"B has wrong shape")
      if (present(row_atom) AND present(col_atom)) then
         n_row_atoms = size(row_atom)
         n_col_atoms = size(col_atom)
         a1 = .atom(row_atom).n_bf
         a2 = .atom(col_atom).n_bf
         ENSURE(A.dim1==a1,"A has wrong shape")
         ENSURE(A.dim2==a2,"A has wrong shape")
         b_i = 0
         do i = 1,n_row_atoms
            f_i = .first_basis_fn_for_atom(row_atom(i))
            l_i = .last_basis_fn_for_atom( row_atom(i))
            n_i = .atom(row_atom(i)).n_bf
            b_j = 0
            do j = 1,n_col_atoms
               f_j = .first_basis_fn_for_atom(col_atom(j))
               l_j = .last_basis_fn_for_atom( col_atom(j))
               n_j = .atom(col_atom(j)).n_bf
               A(b_i+1:b_i+n_i,b_j+1:b_j+n_j) = B(f_i:l_i,f_j:l_j)
               b_j = b_j + n_j
            end
            b_i = b_i + n_i
         end
      else if (present(row_atom)) then
         n_row_atoms = size(row_atom)
         a1 = .atom(row_atom).n_bf
         a2 = .n_bf
         ENSURE(A.dim1==a1,"A has wrong shape")
         ENSURE(A.dim2==a2,"A has wrong shape")
         b_i = 0
         do i = 1,n_row_atoms
            f_i = .first_basis_fn_for_atom(row_atom(i));
            l_i = .last_basis_fn_for_atom( row_atom(i))
            n_i = .atom(row_atom(i)).n_bf
            A(b_i+1:b_i+n_i,:) = B(f_i:l_i,:)
            b_i = b_i + n_i
         end
      else if (present(col_atom)) then
         n_col_atoms = size(col_atom)
         a1 = .n_bf
         a2 = .atom(col_atom).n_bf
         ENSURE(A.dim1==a1,"A has wrong shape")
         ENSURE(A.dim2==a2,"A has wrong shape")
         b_j = 0
         do j = 1,n_col_atoms
            f_j = .first_basis_fn_for_atom(col_atom(j));
            l_j = .last_basis_fn_for_atom( col_atom(j))
            n_j = .atom(col_atom(j)).n_bf
            A(:,b_j+1:b_j+n_j) = B(:,f_j:l_j)
            b_j = b_j + n_j
         end
      end
   end

   AO_subspace_zero(B,row_atom,col_atom) ::: private
   ! Zero out the AO subspace blocks of "B" specified by the atom
   ! indices in "row_atom" and "col_atom". If either is missing, then zero
   ! the entire row or col, i.e.  B(row_atom,col_atom) = 0
      B :: REALMAT
      row_atom,col_atom :: INTVEC, optional
      n_row_atoms,n_col_atoms,a1,a2 :: INT
      i,b_i,f_i,l_i,n_i, j,b_j,f_j,l_j,n_j :: INT
   ENSURE(B.dim1==.n_bf,"B has wrong shape")
   ENSURE(B.dim2==.n_bf,"B has wrong shape")
      if (present(row_atom) AND present(col_atom)) then
         n_row_atoms = size(row_atom)
         n_col_atoms = size(col_atom)
         a1 = .atom(row_atom).n_bf
         a2 = .atom(col_atom).n_bf
         b_i = 0
         do i = 1,n_row_atoms
            f_i = .first_basis_fn_for_atom(row_atom(i))
            l_i = .last_basis_fn_for_atom( row_atom(i))
            n_i = .atom(row_atom(i)).n_bf
            b_j = 0
            do j = 1,n_col_atoms
               f_j = .first_basis_fn_for_atom(col_atom(j))
               l_j = .last_basis_fn_for_atom( col_atom(j))
               n_j = .atom(col_atom(j)).n_bf
               B(f_i:l_i,f_j:l_j) = ZERO
               b_j = b_j + n_j
            end
            b_i = b_i + n_i
         end
      else if (present(row_atom)) then
         n_row_atoms = size(row_atom)
         a1 = .atom(row_atom).n_bf
         a2 = .n_bf
         b_i = 0
         do i = 1,n_row_atoms
            f_i = .first_basis_fn_for_atom(row_atom(i));
            l_i = .last_basis_fn_for_atom( row_atom(i))
            n_i = .atom(row_atom(i)).n_bf
            B(f_i:l_i,:) = ZERO
            b_i = b_i + n_i
         end
      else if (present(col_atom)) then
         n_col_atoms = size(col_atom)
         a1 = .n_bf
         a2 = .atom(col_atom).n_bf
         b_j = 0
         do j = 1,n_col_atoms
            f_j = .first_basis_fn_for_atom(col_atom(j));
            l_j = .last_basis_fn_for_atom( col_atom(j))
            n_j = .atom(col_atom(j)).n_bf
            B(:,f_j:l_j) = ZERO
            b_j = b_j + n_j
         end
      end
   end

   AO_subspace_put(B,A,row_atom,col_atom) ::: private
   ! Set the AO subspace blocks of "A" specified by the atom indices in
   ! "row_atom" and "col_atom" equal to "B". If either is missing then copy
   ! the entire row or column, i.e.  A(row_atom,col_atom) = A() + B(small)
   ! WARNING **** This adds into A, and uncopied blocks are NOT set to zero.
      A,B :: REALMAT
      row_atom,col_atom :: INTVEC, optional
      n_row_atoms,n_col_atoms,b1,b2 :: INT
      i,b_i,f_i,l_i,n_i, j,b_j,f_j,l_j,n_j :: INT
   ENSURE(A.dim1==.n_bf,"A has wrong shape")
   ENSURE(A.dim2==.n_bf,"A has wrong shape")
      if (present(row_atom) AND present(col_atom)) then
         n_row_atoms = size(row_atom)
         n_col_atoms = size(col_atom)
         b1 = .atom(row_atom).n_bf
         b2 = .atom(col_atom).n_bf
         ENSURE(B.dim1==b1,"B has wrong shape")
         ENSURE(B.dim2==b2,"B has wrong shape")
         b_i = 0
         do i = 1,n_row_atoms
            f_i = .first_basis_fn_for_atom(row_atom(i))
            l_i = .last_basis_fn_for_atom( row_atom(i))
            n_i = .atom(row_atom(i)).n_bf
            b_j = 0
            do j = 1,n_col_atoms
               f_j = .first_basis_fn_for_atom(col_atom(j))
               l_j = .last_basis_fn_for_atom( col_atom(j))
               n_j = .atom(col_atom(j)).n_bf
               A(f_i:l_i,f_j:l_j) = A(f_i:l_i,f_j:l_j) + B(b_i+1:b_i+n_i,b_j+1:b_j+n_j)
               b_j = b_j + n_j
            end
            b_i = b_i + n_i
         end
      else if (present(row_atom)) then
         n_row_atoms = size(row_atom)
         b1 = .atom(row_atom).n_bf
         b2 = .n_bf
         ENSURE(B.dim1==b1,"B has wrong shape")
         ENSURE(B.dim2==b2,"B has wrong shape")
         b_i = 0
         do i = 1,n_row_atoms
            f_i = .first_basis_fn_for_atom(row_atom(i));
            l_i = .last_basis_fn_for_atom( row_atom(i))
            n_i = .atom(row_atom(i)).n_bf
            A(f_i:l_i,:) = A(f_i:l_i,:) + B(b_i+1:b_i+n_i,:)
            b_i = b_i + n_i
         end
      else if (present(col_atom)) then
         n_col_atoms = size(col_atom)
         b1 = .atom(col_atom).n_bf
         b2 = .n_bf
         ENSURE(B.dim1==b1,"B has wrong shape")
         ENSURE(B.dim2==b2,"B has wrong shape")
         b_j = 0
         do j = 1,n_col_atoms
            f_j = .first_basis_fn_for_atom(col_atom(j));
            l_j = .last_basis_fn_for_atom( col_atom(j))
            n_j = .atom(col_atom(j)).n_bf
            A(:,f_j:l_j) = A(:,f_j:l_j) + B(:,b_j+1:b_j+n_j)
            b_j = b_j + n_j
         end
      end
   end

!  ******************
!  Constraint methods
!  ******************

   constrained_scf ::: leaky
   ! Do a constrained SCF calculation.
   ! The following objects are produced as results:
   !   .molecular_orbitals, .orbital_energies, .density_matrix
     scf_kind :: STR
     archive :: ARCHIVE
     ENSURE(.basis_info_made, "no basis info")
     ENSURE(.atom.created,  "no atom list")
     scf_kind = .scfdata.kind
     if (scf_kind == "dft" AND .dftgrid.destroyed) then
       .dftgrid.create
       .dftgrid.set_defaults
     end
     .scfdata.using_rough_convergence = FALSE
     .get_initial_guess
     .make_fock_matrix
     .make_constraint_data
     .initialise_scfdata
     .add_constraint
     .initialise_scfdata_error
     .scfdata.diis.cleanup
     do
       .put_scf_results        ! Banner and 0th iteration results
       do
         .extrapolate_fock_matrix
         .update_molecular_orbitals
         .schmidt_orthonormalise_MOs
         .make_scf_density_matrix
         .make_fock_matrix
         .make_constraint_data
         .save_constraint_for_diis
         .update_scfdata
         .add_constraint
         .update_scfdata_error
         .put_scf_results
         if (.scfdata.scf_done) exit
       end
       .scfdata.update_lambda
       if (.scfdata.exceeded_lambda_max) exit

       .reset_constraint_stuff
       .update_scfdata_error
     end
     .scfdata.diis.cleanup
     .cleanup_scf
     .crystal.put_reflection_data
     archive.set(.name,"constraint_matrix"); archive.delete_all_genres
   end

   make_constraint_data
   ! Make the predicted constraint data, e.g. X-ray structure factors or
   ! PND structure factors, or whatever data are to be used in the constrained
   ! wavefunction procedure
      scf_kind :: STR
      ENSURE(.scfdata.created,"no scfdata")
      scf_kind = .scfdata.kind
      select case (scf_kind)
         case ("xray_rdft"); .make_structure_factors
         case ("xray_udft"); .make_structure_factors
         case ("xray_rhf");  .make_structure_factors
         case ("xray_uhf");  .make_structure_factors
         case ("pnd_uhf");   .make_sz_structure_factors
         case default
            DIE("unknown wavefunction fitting kind, "//scf_kind.trim)
      end
   end

   add_constraint
   ! Make the constraint matrix for wavefunction fitting and add it to the fock
   ! matrix to obtain the effective fock matrix.
     scf_kind :: STR
     C :: REALMAT*
     C_tri :: REALVEC*
     arch :: ARCHIVE
     ENSURE(.scfdata.created,"no scf data")
     ENSURE(.fock_matrix.created,"no fock matrix")
     ENSURE(.fock_matrix.any_created,"no fock matrix")
     C.create(.n_bf,.n_bf)
     .make_constraint(C)
     ! Now add in the contribution
     scf_kind = .scfdata.kind
     select case (scf_kind)
        case("xray_rdft","xray_rhf")
           .fock_matrix.restricted.plus_scaled(C,.scfdata.lambda)
        case("xray_uhf","xray_udft")
           .fock_matrix.alpha.plus_scaled(C,.scfdata.lambda)
           .fock_matrix.beta.plus_scaled(C,.scfdata.lambda)
        case("pnd_uhf")
           .fock_matrix.alpha.plus_scaled(C,.scfdata.lambda)
           .fock_matrix.alpha.minus_scaled(C,.scfdata.lambda)
        case default
           DIE("Not a contrained wavefunction type, "//trim(scf_kind))
     end
     C_tri.create(C.tri_size)
     C.compress_to_triangle(C_tri)
     arch.set(.name,"constraint_matrix")
     arch.write(C_tri)
     C_tri.destroy
     C.destroy
   end

   make_constraint(C)
   ! Make the constraint matrix "C" for wavefunction fitting.
     C :: REALMAT, INOUT
     k_pts :: REALMAT*
     ft_ab_eq,ft_ab :: CPXMAT3*
     Fc,fac_times_alpha,Fconjg :: CPXVEC*
     Fm,Fexp,Fsig,alpha :: REALVEC*
     sh :: SHELL2
     fac,cutoff :: REAL
     q,fa,la,fb,lb,i,j,n_refl,n_unique,atom_a,atom_b :: INT
     ENSURE(.scfdata.spinorbital_kind=="restricted","can only do restricted calculations")
     ENSURE(.crystal.created,  "no crystal info")
     ENSURE(.crystal.reflection_data_exists, "no reflection data")
     ENSURE(.basis_info_made, "no basis info")
     ENSURE(.atom.created,  "no atom list")
     n_unique = .crystal.n_unique_SF_k_pts
     n_refl = .crystal.n_refl
     fac = TWO/max(n_refl - .crystal.n_param,1)
     fac_times_alpha.create(n_refl)
     Fc.create(n_refl);    Fc = .crystal.F_calc
     alpha.create(n_refl)
     alpha = .crystal.extinction_correction
     Fexp.create(n_refl);  Fexp = .crystal.F_exp
     Fsig.create(n_refl);  Fsig = .crystal.F_sigma
     Fm.create(n_refl);    Fm = max(abs(Fc),TOL(10))
     fac_times_alpha = fac * alpha * (alpha * Fm - Fexp) / (Fsig * Fsig * Fm)
 !   fac_times_alpha = fac * alpha * (alpha - Fexp/Fm) / (Fsig * Fsig)
     Fm.destroy
     Fsig.destroy
     Fexp.destroy
     alpha.destroy
     Fconjg.create(n_refl)
     Fconjg=conjg(Fc(:))
     k_pts.create(n_unique,3)
     .crystal.make_unique_SF_k_pts(k_pts)
     cutoff = TOL(10) / .n_shell_pairs
     do q=1, .n_shell_pairs
       .get_shell_pair(sh,q,fa,la,fb,lb,atom_a,atom_b)
       if (sh.skip_ft(cutoff)) then
         C(fa:la,fb:lb) = ZERO
         sh.destroy_ptr_part
         cycle
       end
       ft_ab.create([1,n_refl],[fa,la],[fb,lb])
       ft_ab_eq.create(n_unique,sh.a.n_comp,sh.b.n_comp)
       .make_ft_pair(ft_ab_eq,k_pts,sh,atom_a,atom_b)
       .crystal.sum_ft_ints(ft_ab,ft_ab_eq)
       ft_ab_eq.destroy
       do i = fa,la
         do j = fb,min(lb,i)
 !         C(i,j) = sum(fac_times_alpha(:) * real(ft_ab(:,i,j) * Fconjg(:)))
           C(i,j) = sum(fac_times_alpha(:) &
                            * (real(ft_ab(:,i,j)) * real(Fconjg(:)) &
                            -  aimag(ft_ab(:,i,j)) * aimag(Fconjg(:))))
           ! real(a*b) = real(a)*real(b)-aimag(a)*aimag(b)

         end
       end
       ft_ab.destroy
       sh.destroy_ptr_part
     end
     C.symmetric_reflect
     Fconjg.destroy
     k_pts.destroy
     Fc.destroy
     fac_times_alpha.destroy
   end

   save_constraint_for_diis
   ! ?
     arch :: ARCHIVE
     C_tri :: REALVEC*
     if (NOT .scfdata.apply_fock_diis) return

     ! Read in the matrix from disk
     arch.set(.name,"constraint_matrix")
     C_tri.create(.n_bf.triangle)
     arch.read(C_tri)
     arch.close
     arch.delete

     ! Save the constraint matrix to disk with a different name
     .scfdata.diis.save_item(C_tri,"constraint",.scfdata.diis.new)
     C_tri.destroy

     ! Save the density matrix to disk with a different name
     .scfdata.diis.save_item(.density_matrix,"density",.scfdata.diis.new)
   end

   reset_constraint_stuff
   ! ?
     arch :: ARCHIVE
     i :: INT
     error,density :: OPMATRIX*
     F_tri,C_tri :: REALVEC*
     F,C :: REALMAT*
     scf_kind :: STR
     if (NOT .scfdata.apply_fock_diis) return

     C_tri.create(.n_bf.triangle)
     F.create(.n_bf,.n_bf)

     F_tri.create(.n_bf.triangle)
     density.create(.n_bf,"restricted")
     error.create(.n_bf,"restricted")

     do i=1,.scfdata.diis.dimension-1
       ! Read in the constraint
       .scfdata.diis.get_item(C_tri,"constraint",i)
       ! Read in the Fock
       .scfdata.diis.get_parameter_item(i,F_tri)
       ! Read in the density matrix
       .scfdata.diis.get_item(density,"density",i)

       ! Scale the Fock matrix to the new lambda
       F_tri = F_tri + .scfdata.lambda_step*C_tri

       F.uncompress_from_triangle(F_tri)

       .make_r_diis_error(error.restricted,F,density.restricted)
       error.compress
       .scfdata.diis.save_pair(F_tri,error.triangle,i)
       error.uncompress
     end
     .scfdata.diis.remake_diis_matrix(.n_bf.triangle)
     error.destroy
     density.destroy
     F_tri.destroy
     .unarchive_density_matrix

     ! Just to save effort on memory reallocation.
     C => F; nullify(F)

     ! The current Fock matrix is for the old lambda, so let's make it for the
     ! new lambda.
     arch.set(.name,"constraint_matrix")
     arch.read(C_tri)
     C.uncompress_from_triangle(C_tri)
     scf_kind = .scfdata.kind
     select case (scf_kind)
        case("xray_rdft","xray_rhf")
           .fock_matrix.restricted.plus_scaled(C,.scfdata.lambda_step)
        case("xray_uhf","xray_udft")
           .fock_matrix.alpha.plus_scaled(C,.scfdata.lambda_step)
           .fock_matrix.beta.plus_scaled(C,.scfdata.lambda_step)
        case("pnd_uhf")
           .fock_matrix.alpha.plus_scaled(C,.scfdata.lambda_step)
           .fock_matrix.alpha.minus_scaled(C,.scfdata.lambda_step)
        case default
           DIE("Not a contrained wavefunction type, "//trim(scf_kind))
     end

     C.destroy
     C_tri.destroy
   end

!*******************************************************************************
!                               Plotting methods
!*******************************************************************************

   plot ::: leaky
   ! Do one of the many kinds of plot calculations
     word :: STR
     ENSURE(.grid.created, "no grid")
     .grid.put
     word = .grid.kind
     word.to_lower_case
     select case (word)
        case("crystal_error_map  "); .make_crystal_error_map
        case("current_density    "); .make_j_density_grid
        case("difference_density "); .make_difference_density_grid
        case("electric_potential "); .make_electric_potential_grid
        case("electron_density   "); .make_electron_density_grid
        case("elf                "); .make_ELF_grid
        case("fermi_mobility     "); .make_fermi_mobility_grid
        case("hirshfeld_density  "); .make_stockholder_grid
        case("j_density          "); .make_j_density_grid
        case("jd_density         "); .make_jd_density_grid
        case("jp_density         "); .make_jp_density_grid
        case("laplacian_density  "); .make_laplacian_density_grid
        case("div_jp_density     "); .make_div_jp_density_grid
        case("orbital_density    "); .make_orbital_density_grid
        case("orbital            "); .make_orbital_grid
        case("qq_plot            "); .crystal.put_qq_plot(.name)
        case("solenoidal_jp      "); .make_solenoidal_jp_grid
        case("spin_density       "); .make_spin_density_grid
        case("stockholder_density"); .make_stockholder_grid
        case("true_fermi_mobility"); .make_true_fermi_mobility_grid
        case("tsirelson_elf      "); .make_Tsirelson_ELF_grid
        case("grad_rho_on_rho    "); .make_grad_rho_on_rho_grid
        case default;                UNKNOWN(word)
     end
   end

   bounding_cube_width result(width)
   ! Return "width", the width of a cube in which the molecule nicely sits.
   ! Suitable for generating plot widths.
      width :: REAL
      width = .atom.bounding_cube_width
   end

   make_electron_density_grid
   ! Work out the density on ".grid" using ".natural orbitals" and the
   ! ".occupation_numbers" vector. A Gnuplot ascii file is generated.
      arch :: ARCHIVE
      density_grid :: REALVEC*
      pt :: REALMAT*
      ENSURE(.grid.created, "no grid")
      density_grid.create(.grid.n_pt)
      pt.create(.grid.n_pt,3); .grid.make_points(pt)
      .make_density_grid(density_grid,pt)
      arch.set(.name,"electron_density_grid",format="ascii")
      arch.write_gnuplot(density_grid, .grid.n_x, .grid.n_y, .grid.n_z)
      pt.destroy
      density_grid.destroy
   end

   make_difference_density_grid
   ! Make a Gnuplot ascii file containing the difference density grid.
     arch :: ARCHIVE
     old_dens,old_nos :: OPMATRIX*
     old_occ :: OPVECTOR*
     density_grid,atom_density_grid :: REALVEC*
     pt :: REALMAT*
     orb_kind :: STR
     ENSURE(.grid.created, "no grid")
     ENSURE(.natural_orbitals.created,"no natural orbitals")
     ENSURE(.occupation_numbers.created,"no natural orbitals")

     density_grid.create(.grid.n_pt)
     pt.create(.grid.n_pt,3); .grid.make_points(pt)
     orb_kind = .scfdata.molecular_orbital_kind

     ! Get density grid for the molecule
     .make_density_grid(density_grid,pt)

     ! Backup the data for the molecule
     old_dens => .density_matrix
     old_nos => .natural_orbitals
     old_occ => .occupation_numbers
     nullify(.density_matrix)
     nullify(.natural_orbitals)
     nullify(.occupation_numbers)

     ! Get density grid for the promolecule
     .make_atom_density
     .make_natural_orbitals
     atom_density_grid.create(.grid.n_pt)
     .make_density_grid(atom_density_grid,pt)
     density_grid = density_grid - atom_density_grid
     atom_density_grid.destroy

     ! Restore the data for the molecule
     .density_matrix.destroy
     .natural_orbitals.destroy
     .occupation_numbers.destroy
     .density_matrix => old_dens
     .natural_orbitals => old_nos
     .occupation_numbers => old_occ

     arch.set(.name,"difference_density_grid",format="ascii")
     arch.write_gnuplot(density_grid, .grid.n_x, .grid.n_y, .grid.n_z)
     pt.destroy
     density_grid.destroy
   end

   make_spin_density_grid
   ! Work out the spin density on ".grid" using ".natural orbitals" and the
   ! ".occupation_numbers" vector. A Gnuplot ascii file is generated.
      arch :: ARCHIVE
      pt :: REALMAT*
      density_grid :: REALVEC*
   ENSURE(.grid.created, "no grid")
      .make_ao_sz_density_matrix
      density_grid.create(.grid.n_pt)
      pt.create(.grid.n_pt,3); .grid.make_points(pt)
      .make_density_grid(density_grid,pt)
      arch.set(.name,"spin_density_grid",format="ascii")
      arch.write_gnuplot(density_grid, .grid.n_x, .grid.n_y, .grid.n_z)
      pt.destroy
      density_grid.destroy
   end

   make_density_grid(density_grid,pt)
   ! Work out the electron "density_grid" on "pt" using ".natural orbitals" and
   ! the ".occupation_numbers" vector.
      density_grid :: REALVEC
      pt :: REALMAT
   ENSURE(.natural_orbitals.created, "no natural orbitals")
   ENSURE(.natural_orbitals.any_created, "no natural orbitals")
      if (.natural_orbitals.number_kind == "real") then
         .make_density_grid_r(density_grid,pt)
      else
         .make_density_grid_c(density_grid,pt)
      end
   end

   make_density_grid_r(density_grid,pt)
   ! Make the "density_grid" for the supplied points "pt" from restricted real
   ! natural orbitals
     density_grid :: REALVEC
     pt :: REALMAT
     NO :: REALVEC*
     n_occ,n :: INT
   ENSURE(pt.dim2==3,  "wrong dimension for points array")
   ENSURE(.natural_orbitals.created("restricted"), "no restricted NO's")
   ENSURE(.occupation_numbers.restricted.created, "no occupation numbers")
     density_grid = ZERO
     NO.create(pt.dim1)
     n_occ = .no_of_occupied_NOs
     do n = 1,n_occ
       .make_orbital_grid_r(NO,.natural_orbitals.restricted(:,n), pt)
       density_grid(:) = density_grid(:) + .occupation_numbers.restricted(n)*NO(:)*NO(:)
     end
     NO.destroy
   end

   make_density_grid_c(density_grid,pt)
   ! Make the "density_grid" for the supplied points "pt" from restricted
   ! complex natural orbitals.
      density_grid :: REALVEC
      pt :: REALMAT
      NO :: CPXVEC*
      n_occ,n :: INT
   ENSURE(pt.dim2==3,  "incorrect dimension for points array")
   ENSURE(.natural_orbitals.created("restricted_complex"), "no natural orbitals")
   ENSURE(.occupation_numbers.restricted.created, "no occupation numbers")
      density_grid = ZERO
      NO.create(pt.dim1)
      n_occ = .no_of_occupied_NOs
      do n = 1,n_occ
         .make_orbital_grid_c(NO,.natural_orbitals.restricted_complex(:,n), pt)
         density_grid(:) = density_grid(:) + .occupation_numbers.restricted(n)*conjg(NO(:))*NO(:)
      end
      NO.destroy
   end

   make_nabla_density_grid_fdm_r(nabla_grid,pts)
   ! Work out the nabla density on ".grid" using ".natural orbitals" and the
   ! ".occupation" number vector.
   ! This method uses the finite difference method to calculate the gradient
   ! from the density.  It is much slower, but useful for checking.
     nabla_grid, pts :: REALMAT
     orb :: REALVEC*
     dens_1,dens_2,nabla_orb,comp :: REALVEC*
     pt1 :: REALMAT*
     alpha :: REAL
     n_occ,n,n_pts,i :: INT
   ENSURE(pts.dim2==3,  "wrong dimension for points array")
   ENSURE(nabla_grid.dim2==3,  "wrong dimension for nabla_grid array")
   ENSURE(.natural_orbitals.created("restricted"), "no restricted NO's")
   ENSURE(.occupation_numbers.restricted.created, "no occupation #'s")
     alpha = TOL(6)
     n_pts = size(pts,1)
     pt1.create(n_pts,3)
     nabla_grid = ZERO
     orb.create(n_pts)
     dens_1.create(n_pts)
     dens_2.create(n_pts)
     nabla_orb.create(n_pts)
     n_occ = .no_of_occupied_NOs
     do n = 1,n_occ
        do i = 1,3
          comp => pt1(:,i)
          pt1 = pts;    comp = comp + alpha
          .make_orbital_grid_r(dens_1,.natural_orbitals.restricted(:,n),pt1,square=TRUE)
          pt1 = pts;    comp = comp - alpha
          .make_orbital_grid_r(dens_2,.natural_orbitals.restricted(:,n),pt1,square=TRUE)
          nabla_orb = HALF/alpha * (dens_1 - dens_2)
          .make_orbital_grid_r(orb,.natural_orbitals.restricted(:,n), pts)
          nabla_grid(:,i) = nabla_grid(:,i) + .occupation_numbers.restricted(n)*orb(:)*nabla_orb
        end
     end
     nabla_grid = TWO*nabla_grid
     nabla_orb.destroy
     dens_2.destroy
     dens_1.destroy
     orb.destroy
     pt1.destroy
   end

   make_nabla_density_grid(nabla_grid,pts)
   ! Work out the nabla density on ".grid" using ".natural orbitals" and the
   ! ".occupation" number vector.
      nabla_grid, pts :: REALMAT
      if (.natural_orbitals.number_kind == "real") then
         .make_nabla_density_grid_r(nabla_grid,pts)
      !else
      !   .make_nabla_density_grid_c(nabla_grid,pts)
      end
   end

   make_nabla_density_grid_r(nabla_grid,pts)
   ! Work out the nabla density on ".grid" using ".natural orbitals" and the
   ! ".occupation" number vector.
     nabla_grid, pts :: REALMAT
     orb :: REALVEC*
     nabla_orb :: REALMAT*
     occ :: REAL
     n_occ,n,n_pts :: INT
     ENSURE(pts.dim2==3,  "wrong dimension for points array")
     ENSURE(nabla_grid.dim2==3,  "wrong dimension for nabla_grid array")
     ENSURE(.natural_orbitals.created, "no natural orbitals")
     ENSURE(.natural_orbitals.created("restricted"), "no restricted NO's")
     ENSURE(.occupation_numbers.created, "no occupation numbers")
     ENSURE(.occupation_numbers.created("restricted"),"no occupation numbers")
     n_pts = size(pts,1)
     nabla_grid = ZERO
     orb.create(n_pts)
     nabla_orb.create(n_pts,3)
     n_occ = .no_of_occupied_NOs
     do n = 1,n_occ
       .make_nabla_orbital_grid_r(nabla_orb,orb,.natural_orbitals.restricted(:,n), pts)
       occ = .occupation_numbers.restricted(n)
       nabla_grid(:,1) = nabla_grid(:,1) + occ*orb(:)*nabla_orb(:,1)
       nabla_grid(:,2) = nabla_grid(:,2) + occ*orb(:)*nabla_orb(:,2)
       nabla_grid(:,3) = nabla_grid(:,3) + occ*orb(:)*nabla_orb(:,3)
     end
     nabla_grid = TWO*nabla_grid
     orb.destroy
     nabla_orb.destroy
   end

   make_unrestricted_density_grid(p_a,p_b,pt)
   ! Make the alpha and beta density grids separately.
     p_a,p_b :: REALVEC
     pt :: REALMAT, IN
     nat :: REALMAT*
     occ :: REALVEC*
     ENSURE(.natural_orbitals.created, "no natural orbitals")
     ENSURE(.natural_orbitals.created("unrestricted"),"no natural orbitals")
     ENSURE(.occupation_numbers.created, "no occupation numbers")
     ENSURE(.occupation_numbers.created("unrestricted"),"no occupation numbers")
     nat => .natural_orbitals.restricted ! backup pointers
     occ => .occupation_numbers.restricted
     .natural_orbitals.restricted => .natural_orbitals.alpha
     .occupation_numbers.restricted => .occupation_numbers.alpha
     .make_density_grid(p_a,pt)
     .natural_orbitals.restricted => .natural_orbitals.beta
     .occupation_numbers.restricted => .occupation_numbers.beta
     .make_density_grid(p_b,pt)
     .natural_orbitals.restricted => nat ! restore backups
     .occupation_numbers.restricted => occ
   end

   make_u_nabla_density_grid(np_a,np_b,pt)
   ! Make the alpha and beta nabla density grids separately.
     np_a,np_b :: REALMAT
     pt :: REALMAT, IN
     nat :: REALMAT*
     occ :: REALVEC*
     ENSURE(.natural_orbitals.created("unrestricted"),"no natural orbitals")
     ENSURE(.occupation_numbers.created("unrestricted"),"no occupation numbers")
     nat => .natural_orbitals.restricted ! backup pointers
     occ => .occupation_numbers.restricted
     .natural_orbitals.restricted => .natural_orbitals.alpha
     .occupation_numbers.restricted => .occupation_numbers.alpha
     .make_nabla_density_grid(np_a,pt)
     .natural_orbitals.restricted => .natural_orbitals.beta
     .occupation_numbers.restricted => .occupation_numbers.beta
     .make_nabla_density_grid(np_b,pt)
     .natural_orbitals.restricted => nat ! restore backups
     .occupation_numbers.restricted => occ
   end

   make_orbital_density_grid
   ! Work out the orbital on ".grid" using ".natural orbitals" for orbital "orb"
   ! A Gnuplot ascii file is generated.
      arch :: ARCHIVE
      pt :: REALMAT*
      gr :: REALVEC*
      gc :: CPXVEC*
      orb :: INT
      ENSURE(.grid.created, "no grid")
      ENSURE(.grid.orbital>=0, "non-positive grid orbital")
      ENSURE(.natural_orbitals.created, "no natural orbitals")
      ENSURE(.natural_orbitals.any_created, "no natural orbitals")
      orb = .grid.orbital
      pt.create(.grid.n_pt,3); .grid.make_points(pt)
      gr.create(.grid.n_pt)
      if (.natural_orbitals.number_kind == "real") then
        .make_orbital_grid_r(gr,.natural_orbitals.restricted(:,orb),pt,square=TRUE)
      else
        gc.create(.grid.n_pt)
        .make_orbital_grid_c(gc,.natural_orbitals.restricted_complex(:,orb),pt,square=TRUE)
        gr = gc
        gc.destroy
      end
      gr.destroy
      pt.destroy
      arch.set(.name,"orbital_"//trim(orb.to_str)//"_density_grid")
      arch.write(gr)
      arch.set(.name,"orbital_"//trim(orb.to_str)//"_density_grid",format="ascii")
      arch.write_gnuplot(gr, .grid.n_x, .grid.n_y, .grid.n_z)
   end

   make_orbital_grid
   ! Work out the orbital on ".grid" using ".natural orbitals" for orbital "orb"
   ! A Gnuplot ascii file is generated.
      arch :: ARCHIVE
      pt :: REALMAT*
      gr :: REALVEC*
      gc :: CPXVEC*
      orb :: INT
   ENSURE(.grid.created, "no grid")
   ENSURE(.grid.orbital>=0, "non-positive grid orbital")
   ENSURE(.natural_orbitals.created, "no natural orbitals")
   ENSURE(.natural_orbitals.any_created, "no natural orbitals")
      orb = .grid.orbital
      pt.create(.grid.n_pt,3); .grid.make_points(pt)
      if (.natural_orbitals.number_kind == "real") then
         gr.create(.grid.n_pt)
         .make_orbital_grid_r(gr,.natural_orbitals.restricted(:,orb),pt)
         arch.set(.name,"orbital_"//trim(orb.to_str)//"_grid")
         arch.write(gr)
         arch.set(.name,"orbital_"//trim(orb.to_str)//"_grid",format="ascii")
         arch.write_gnuplot(gr, .grid.n_x, .grid.n_y, .grid.n_z)
         gr.destroy
      else
         gc.create(.grid.n_pt)
         .make_orbital_grid_c(gc,.natural_orbitals.restricted_complex(:,orb),pt)
         arch.set(.name,"orbital_"//trim(orb.to_str)//"_grid")
         arch.write(gc)
         arch.set(.name,"orbital_"//trim(orb.to_str)//"_grid",format="ascii")
         ! arch.write_gnuplot(gc, .grid.n_x, .grid.n_y, .grid.n_z)
         gc.destroy
      end
      pt.destroy
   end

   make_orbital_grid_r(g,orb,pt,square)
   ! Evaluate the orbital density grid "g" for *one* AO-basis coefficient
   ! orbital vector "orb" on a set of grid points "pt"
      g :: REALVEC, OUT
      orb :: REALVEC, IN
      pt :: REALMAT, IN
      square :: BIN, optional
      sq :: BIN
      sh :: SHELL1
      sh_grid :: REALMAT*
      n_pt,fa,la,a :: INT
      ENSURE(.basis_info_made, "no basis info")
      ENSURE(.atom.created,  "no atom list")
      sq = FALSE
      if (present(square)) sq = square
      n_pt = pt.dim1
      g = ZERO
      do a = 1,.n_shell
         .get_shell(sh,a,fa,la)
         sh_grid.create(n_pt,sh.n_comp)
         sh.make_grid(sh_grid,pt)
         g = g + matmul(sh_grid,orb(fa:la))
         sh_grid.destroy
         sh.destroy_ptr_part
      end
      if (sq) g = g*g
   end

   make_orbital_grid_c(g,orb,pt,square)
   ! Evaluate the orbital density for *one* AO-basis orbital coefficient vector
   ! "orb" on a set of grid points "pt"
      g :: CPXVEC, OUT
      orb :: CPXVEC, IN, target
      pt :: REALMAT, IN
      square :: BIN, optional
      sq :: BIN
      sh :: SHELL1*
      sh_grid :: REALMAT*
      n_pt,fa,la,a :: INT
      ENSURE(.basis_info_made, "no basis info")
      ENSURE(.atom.created,  "no atom list")
      sq = FALSE
      if (present(square)) sq = square
      n_pt = pt.dim1
      g = ZERO
      sh.create
      do a = 1,.n_shell
         .get_shell(sh,a,fa,la)
         sh_grid.create(n_pt,sh.n_comp)
         sh.make_grid(sh_grid,pt)
         g = g + matmul(sh_grid,orb(fa:la))
         sh_grid.destroy
         sh.destroy_ptr_part
      end
      sh.destroy
      if (sq) g = conjg(g)*g
   end

   make_laplacian_density_grid
   ! Work out the laplacian density on ".grid" using ".natural orbitals" and the
   ! ".occupation_numbers" vector. A Gnuplot ascii file is generated.
      arch :: ARCHIVE
      pt :: REALMAT*
      laplacian_grid :: REALVEC*
      ENSURE(.grid.created, "no grid")
      laplacian_grid.create(.grid.n_pt)
      pt.create(.grid.n_pt,3); .grid.make_points(pt)
      .make_laplacian_grid(laplacian_grid,pt)
      arch.set(.name,"laplacian_density_grid",format="ascii")
      arch.write_gnuplot(laplacian_grid, .grid.n_x, .grid.n_y, .grid.n_z)
      pt.destroy
      laplacian_grid.destroy
   end

   make_laplacian_grid(laplacian_grid) ::: leaky
   ! Work out the laplacian density on ".grid" using ".natural orbitals" and the
   ! ".occupation" number vector.
      laplacian_grid :: REALVEC
      pt :: REALMAT*
      old_NOs :: BIN
      old_NOs = FALSE
      pt.create(.grid.n_pt,3); .grid.make_points(pt)
      if (.natural_orbitals.created) old_NOs = .natural_orbitals.created("restricted")
      if (NOT old_NOs) .make_natural_orbitals
      .make_laplacian_grid(laplacian_grid,pt)
      pt.destroy
   end

   make_laplacian_grid(laplacian_grid,pt)
   ! Work out the electron "laplacian_grid" on "pt" using ".natural orbitals"
   ! and  the ".occupation_numbers" vector.
      laplacian_grid :: REALVEC
      pt :: REALMAT
      ENSURE(.natural_orbitals.created, "no natural orbitals")
      ENSURE(.natural_orbitals.any_created, "no natural orbitals")
      if (.natural_orbitals.number_kind == "real") then
        .make_laplacian_grid_r(laplacian_grid,pt)
      else
        DIE("code not written yet")
      end
   end

   make_laplacian_grid_r(laplacian_grid,pt)
   ! Make the "laplacian_grid" for the supplied points "pt" from restricted
   ! real natural orbitals
     laplacian_grid :: REALVEC
     pt :: REALMAT
     NO :: REALVEC*
     P,D :: REALMAT*
     n_occ,n,n_pt :: INT
     ENSURE(pt.dim2==3, "wrong dimension for pt array")
     ENSURE(.natural_orbitals.created("restricted"), "no restricted NO's")
     ENSURE(.occupation_numbers.restricted.created, "no occupation #'s")
     n_pt = pt.dim1
     laplacian_grid = ZERO
     NO.create(n_pt)
     P.create(n_pt,3)
     D.create(n_pt,3)
     n_occ = .no_of_occupied_NOs
     do n = 1,n_occ
       .make_laplacian_orbital_grid_r(D,P,NO,.natural_orbitals.restricted(:,n), pt)
       laplacian_grid(:) = laplacian_grid(:) +  &
          .occupation_numbers.restricted(n) * ( &
          NO * (D(:,1)+D(:,2)+D(:,3)) + (P(:,1)*P(:,1) + P(:,2)*P(:,2) + P(:,3)*P(:,3)))
     end
     laplacian_grid(:) = TWO*laplacian_grid(:)
     D.destroy
     P.destroy
     NO.destroy
   end

   make_nabla_orbital_grid_r(g,h,orb,pt)
   ! Evaluate the nabla orbital density grid "g" as well as the orbital grid "h"
   ! for *one* AO-basis orbital vector "orb" on a set of grid points "pt"
      g :: REALMAT
      h :: REALVEC
      orb :: REALVEC, IN, target
      pt :: REALMAT, IN
      orb_a :: REALVEC*
      sh :: SHELL1
      sh_grid :: REALMAT3*
      sh_grid0 :: REALMAT*
      n_pt,fa,la,a :: INT
      ENSURE(.basis_info_made, "no basis info")
      ENSURE(.atom.created,"no atom list")
      ENSURE(g.dim1==pt.dim1,"grid array has wrong 1st dimension")
      ENSURE(g.dim2==3,"grid array has wrong 2nd dimension")
      ENSURE(h.dim==pt.dim1,"grid array has wrong 1st dimension")
      n_pt = pt.dim1
      g = ZERO
      h = ZERO
      do a = 1,.n_shell
         .get_shell(sh,a,fa,la)
         sh_grid.create(n_pt,sh.n_comp,3)
         sh_grid0.create(n_pt,sh.n_comp)
         sh.make_nabla_grid(sh_grid,sh_grid0,pt)
         orb_a => orb(fa:la)
         g(:,1) = g(:,1) + matmul(sh_grid(:,:,1),orb_a)
         g(:,2) = g(:,2) + matmul(sh_grid(:,:,2),orb_a)
         g(:,3) = g(:,3) + matmul(sh_grid(:,:,3),orb_a)
         h = h + matmul(sh_grid0,orb_a)
         sh_grid0.destroy
         sh_grid.destroy
         sh.destroy_ptr_part
      end
   end

   make_nabla_orbital_grid_c(g,h,orb,pt)
   ! Evaluate the nabla orbital density grid "g" as well as the orbital grid "h"
   ! for *one* AO-basis orbital vector "orb" on a set of grid points "pt"
      g :: CPXMAT
      h :: CPXVEC
      orb :: CPXVEC, IN, target
      pt :: REALMAT, IN
      orb_a :: CPXVEC*
      sh :: SHELL1
      sh_grid :: REALMAT3*
      sh_grid0 :: REALMAT*
      n_pt,fa,la,a :: INT
      ENSURE(.basis_info_made, "no basis info")
      ENSURE(.atom.created,"no atom list")
      ENSURE(g.dim1==pt.dim1,"grid array has wrong 1st dimension")
      ENSURE(g.dim2==3,"grid array has wrong 2nd dimension")
      ENSURE(h.dim==pt.dim1,"grid array has wrong 1st dimension")
      n_pt = pt.dim1
      g = ZERO
      h = ZERO
      do a = 1,.n_shell
         .get_shell(sh,a,fa,la)
         sh_grid.create(n_pt,sh.n_comp,3)
         sh_grid0.create(n_pt,sh.n_comp)
         sh.make_nabla_grid(sh_grid,sh_grid0,pt)
         orb_a => orb(fa:la)
         g(:,1) = g(:,1) + matmul(sh_grid(:,:,1),orb_a)
         g(:,2) = g(:,2) + matmul(sh_grid(:,:,2),orb_a)
         g(:,3) = g(:,3) + matmul(sh_grid(:,:,3),orb_a)
         h = h + matmul(sh_grid0,orb_a)
         sh_grid0.destroy
         sh_grid.destroy
         sh.destroy_ptr_part
      end
   end

   make_laplacian_orbital_grid_r(g,h,i,orb,pt)
   ! Evaluate the laplacian orbital density grid "g", as well as the nabla
   ! orbital grid "h" and the orbital grid "i" for *one* AO-basis orbital
   ! vector "orb" on a set of grid points "pt"
      g,h :: REALMAT
      i :: REALVEC
      orb :: REALVEC, IN, target
      pt :: REALMAT, IN
      sh :: SHELL1
      sh_grid,sh_grid1 :: REALMAT3*
      sh_grid0 :: REALMAT*
      orb_a :: REALVEC*
      n_pt,fa,la,a :: INT
      ENSURE(.basis_info_made, "no basis info")
      ENSURE(.atom.created,  "no atom list")
      ENSURE(g.dim1==pt.dim1, "grid array has wrong 1st dimension")
      ENSURE(g.dim2==3,        "grid array has wrong 2nd dimension")
      ENSURE(h.dim1==pt.dim1, "grid array has wrong 1st dimension")
      ENSURE(h.dim2==3,        "grid array has wrong 2nd dimension")
      ENSURE(i.dim==pt.dim1,  "grid array has wrong 1st dimension")
      n_pt = pt.dim1
      g = ZERO
      h = ZERO
      i = ZERO
      do a = 1,.n_shell
         .get_shell(sh,a,fa,la)
         sh_grid.create(n_pt,sh.n_comp,3)
         sh_grid1.create(n_pt,sh.n_comp,3)
         sh_grid0.create(n_pt,sh.n_comp)
         sh.make_laplacian_grid(sh_grid,sh_grid1,sh_grid0,pt)
         orb_a => orb(fa:la)
         g(:,1) = g(:,1) + matmul(sh_grid(:,:,1),orb_a)
         g(:,2) = g(:,2) + matmul(sh_grid(:,:,2),orb_a)
         g(:,3) = g(:,3) + matmul(sh_grid(:,:,3),orb_a)
         h(:,1) = h(:,1) + matmul(sh_grid1(:,:,1),orb_a)
         h(:,2) = h(:,2) + matmul(sh_grid1(:,:,2),orb_a)
         h(:,3) = h(:,3) + matmul(sh_grid1(:,:,3),orb_a)
         i = i + matmul(sh_grid0,orb_a)
         sh_grid1.destroy
         sh_grid0.destroy
         sh_grid.destroy
         sh.destroy_ptr_part
      end
   end

   make_laplacian_orbital_grid_c(g,h,i,orb,pt)
   ! Evaluate the laplacian orbital density grid "g", as well as the nabla
   ! orbital grid "h" and the orbital grid "i" for *one* AO-basis orbital
   ! vector "orb" on a set of grid points "pt"
      g,h :: CPXMAT
      i :: CPXVEC
      orb :: CPXVEC, IN, target
      pt :: REALMAT, IN
      sh :: SHELL1
      sh_grid,sh_grid1 :: REALMAT3*
      sh_grid0 :: REALMAT*
      orb_a :: CPXVEC*
      n_pt,fa,la,a :: INT
   ENSURE(.basis_info_made, "no basis info")
   ENSURE(.atom.created,  "no atom list")
   ENSURE(g.dim1==pt.dim1, "grid array has wrong 1st dimension")
   ENSURE(g.dim2==3,        "grid array has wrong 2nd dimension")
   ENSURE(h.dim1==pt.dim1, "grid array has wrong 1st dimension")
   ENSURE(h.dim2==3,        "grid array has wrong 2nd dimension")
   ENSURE(i.dim==pt.dim1,  "grid array has wrong 1st dimension")
      n_pt = pt.dim1
      g = ZERO
      h = ZERO
      i = ZERO
      do a = 1,.n_shell
         .get_shell(sh,a,fa,la)
         sh_grid.create(n_pt,sh.n_comp,3)
         sh_grid1.create(n_pt,sh.n_comp,3)
         sh_grid0.create(n_pt,sh.n_comp)
         sh.make_laplacian_grid(sh_grid,sh_grid1,sh_grid0,pt)
         orb_a => orb(fa:la)
         g(:,1) = g(:,1) + matmul(sh_grid(:,:,1),orb_a)
         g(:,2) = g(:,2) + matmul(sh_grid(:,:,2),orb_a)
         g(:,3) = g(:,3) + matmul(sh_grid(:,:,3),orb_a)
         h(:,1) = h(:,1) + matmul(sh_grid1(:,:,1),orb_a)
         h(:,2) = h(:,2) + matmul(sh_grid1(:,:,2),orb_a)
         h(:,3) = h(:,3) + matmul(sh_grid1(:,:,3),orb_a)
         i = i + matmul(sh_grid0,orb_a)
         sh_grid1.destroy
         sh_grid0.destroy
         sh_grid.destroy
         sh.destroy_ptr_part
      end
   end

   make_grad_rho_on_rho_grid
   ! Work out abs(grad(rho))/rho on a set of grid points "pt".
   ! A Gnuplot ascii file is also generated.
      arch :: ARCHIVE
      grid :: REALVEC*
      pt :: REALMAT*
      ENSURE(.grid.created, "no grid")
      grid.create(.grid.n_pt)
      pt.create(.grid.n_pt,3); .grid.make_points(pt)
      .make_grad_rho_on_rho_grid(grid,pt)
      arch.set(.name,"grad_rho_on_rho_grid",format="ascii")
      arch.write_gnuplot(grid, .grid.n_x, .grid.n_y, .grid.n_z)
      pt.destroy
      grid.destroy
   end

   make_grad_rho_on_rho_grid(grid,pt)
   ! Work out abs(grad(rho))/rho on a set of grid points "pt".
      grid :: REALVEC
      pt :: REALMAT
      rho :: REALVEC*
      grad_rho :: REALMAT*
      n_pt,i :: INT
      ENSURE(pt.dim1==grid.dim,"array dimensions do not match")
      grid = ZERO
      n_pt = pt.dim1
      rho.create(n_pt)
      .make_density_grid(rho,pt)
      grid=ZERO
      grad_rho.create(n_pt,3)
      .make_nabla_density_grid(grad_rho,pt)
      do i=1,n_pt
        if (rho(i)>ZERO) then
          grid(i)=sqrt(dot_product(grad_rho(i,:),grad_rho(i,:)))/rho(i)
        else
          grid(i)=ZERO
        end
      end
      grad_rho.destroy
      rho.destroy
   end

   make_ELF_grid
   ! Work out the Electron Localisation Function (ELF) density on ".grid"
   ! using ".natural orbitals" and the ".occupation_numbers" vector.
   ! Grid, basis set, and natural orbitals are required to exist.
   ! A Gnuplot ascii file is also generated.
      arch :: ARCHIVE
      ELF_grid :: REALVEC*
      pt :: REALMAT*
   ENSURE(.grid.created, "no grid")
      ELF_grid.create(.grid.n_pt)
      pt.create(.grid.n_pt,3); .grid.make_points(pt)
      .make_ELF_grid(ELF_grid,pt)
      arch.set(.name,"ELF_grid",format="ascii")
      arch.write_gnuplot(ELF_grid, .grid.n_x, .grid.n_y, .grid.n_z)
      pt.destroy
      ELF_grid.destroy
   end

   make_ELF_grid(ELF_grid,pt)
   ! Work out the Electron Localisation Function (ELF) density "g" on a set of
   ! grid points "pt", using ".natural orbitals" and the ".occupation" number
   ! vector.
     ELF_grid :: REALVEC
     pt :: REALMAT
   ENSURE(.natural_orbitals.created, "no natural orbitals")
   ENSURE(.natural_orbitals.any_created, "no natural orbitals")
     if (.natural_orbitals.number_kind == "real") then
       .make_ELF_grid_r(ELF_grid,pt)
     else
       .make_ELF_grid_c(ELF_grid,pt)
     end
   end

   make_ELF_grid_r(ELF_grid,pt)
   ! Work out the Electron Localisation Function (ELF) density on a set of grid
   ! points "pt", using ".natural orbitals" and the ".occupation_numbers"
   ! vector.  Grid, basis set, and natural orbitals are required to exist.
      ELF_grid :: REALVEC
      pt :: REALMAT
      DD :: REALMAT*
      mo_val,gx,gy,gz,rho_s,rho_sx,rho_sy,rho_sz,tau,d_s,d0_s,NO :: REALVEC*
      occu,factor,mo_val_n,gx_n,gy_n,gz_n,occ_mo :: REAL
      i,n_occ,n,n_pt :: INT
   ENSURE(.basis_info_made, "no basis info")
   ENSURE(.natural_orbitals.created, "no natural orbitals")
      ELF_grid = ZERO
      n_pt = pt.dim1
      rho_s.create(n_pt);  rho_s  = ZERO
      tau.create(n_pt);    tau    = ZERO
      rho_sx.create(n_pt); rho_sx = ZERO
      rho_sy.create(n_pt); rho_sy = ZERO
      rho_sz.create(n_pt); rho_sz = ZERO
      NO.create(n_pt)
      DD.create(n_pt,3)
      n_occ = .no_of_occupied_NOs
      do i = 1,n_occ
         .make_nabla_orbital_grid_r(DD,NO,.natural_orbitals.restricted(:,i), pt)
         mo_val => NO(:)
         gx     => DD(:,1)
         gy     => DD(:,2)
         gz     => DD(:,3)
         occu   = HALF*.occupation_numbers.restricted(i)
         do n = 1,n_pt
           mo_val_n  = mo_val(n)
           gx_n      = gx(n)
           gy_n      = gy(n)
           gz_n      = gz(n)
           occ_mo    = occu*mo_val_n
           rho_s(n)  = rho_s(n)  + occ_mo*mo_val_n
           tau(n)    = tau(n)    + occu*(gx_n*gx_n+gy_n*gy_n+gz_n*gz_n)
           rho_sx(n) = rho_sx(n) + occ_mo*gx_n ! this is half grad_x rho_s
           rho_sy(n) = rho_sy(n) + occ_mo*gy_n
           rho_sz(n) = rho_sz(n) + occ_mo*gz_n
         end
      end
      DD.destroy
      NO.destroy
      d_s.create(n_pt)
      d_s = tau - (rho_sx*rho_sx + rho_sy*rho_sy + rho_sz*rho_sz)/rho_s
      rho_sz.destroy; rho_sy.destroy; rho_sx.destroy; tau.destroy
      d0_s.create(n_pt)
      factor = 0.6d0*(SIX*PI*PI)**(TWO/THREE)
      d0_s = factor*rho_s**(FIVE/THREE)
      rho_s.destroy
      ELF_grid = ONE/(ONE+(d_s*d_s)/(d0_s*d0_s))
      ! this could be more efficient if the d0_s*d0_s is written
      ! factor2*rho_s**(TWO+FIVE/THREE)
      d0_s.destroy; d_s.destroy
   end

   make_ELF_grid_c(ELF_grid,pt)
   ! Work out the Electron Localisation Function (ELF) density on a set of grid
   ! points "pt", using ".natural orbitals" and the ".occupation_numbers"
   ! vector.  Grid, basis set, and natural orbitals are required to exist.
     ELF_grid :: REALVEC
     pt :: REALMAT
     mo_val,gx,gy,gz,NO :: CPXVEC*
     DD :: CPXMAT*
     rho_s,rho_sx,rho_sy,rho_sz,tau,d_s,d0_s :: REALVEC*
     occu,factor :: REAL
     n_occ,n,n_pt :: INT
   ENSURE(.basis_info_made, "no basis set")
   ENSURE(.natural_orbitals.created, "no natural orbitals")
     ELF_grid = ZERO
     n_pt = pt.dim1
     rho_s.create(n_pt);  rho_s  = ZERO
     tau.create(n_pt);    tau    = ZERO
     rho_sx.create(n_pt); rho_sx = ZERO
     rho_sy.create(n_pt); rho_sy = ZERO
     rho_sz.create(n_pt); rho_sz = ZERO
     NO.create(n_pt)
     DD.create(n_pt,3)
     n_occ = .no_of_occupied_NOs
     do n = 1,n_occ
       .make_nabla_orbital_grid_c(DD,NO,.natural_orbitals.restricted_complex(:,n), pt)
       mo_val => NO(:)
       gx     => DD(:,1)
       gy     => DD(:,2)
       gz     => DD(:,3)
       occu   = HALF*.occupation_numbers.restricted(n)
       rho_s  = rho_s  + occu*conjg(mo_val)*mo_val
       tau    = tau    + occu*(conjg(gx)*gx+conjg(gy)*gy+conjg(gz)*gz)
       rho_sx = rho_sx + occu*conjg(gx)*mo_val ! this is half grad_x rho_s
       rho_sy = rho_sy + occu*conjg(gy)*mo_val
       rho_sz = rho_sz + occu*conjg(gz)*mo_val
     end
     DD.destroy
     NO.destroy
     d_s.create(n_pt)
     d_s = tau - (rho_sx*rho_sx + rho_sy*rho_sy + rho_sz*rho_sz)/rho_s
     rho_sz.destroy; rho_sy.destroy; rho_sx.destroy; tau.destroy
     d0_s.create(n_pt)
     factor = 0.6d0*(SIX*PI*PI)**(TWO/THREE)
     d0_s = factor*rho_s**(FIVE/THREE)
     rho_s.destroy
     ELF_grid = ONE/(ONE+(d_s*d_s)/(d0_s*d0_s))
     d0_s.destroy; d_s.destroy
   end

   make_Tsirelson_ELF_grid
   ! Work out the Tsirelson-Stash Electron Localisation Function (ELF) density
   ! on ".grid" using ".natural orbitals" and the ".occupation_numbers" vector.
   ! Grid, basis set, and natural orbitals are required to exist.  A Gnuplot
   ! ascii file is also generated.
      arch :: ARCHIVE
      ELF_grid :: REALVEC*
      pt :: REALMAT*
   ENSURE(.grid.created, "no grid")
      ELF_grid.create(.grid.n_pt)
      pt.create(.grid.n_pt,3); .grid.make_points(pt)
      .make_Tsirelson_ELF_grid(ELF_grid,pt)
      arch.set(.name,"Tsirelson-Stash_ELF_grid",format="ascii")
      arch.write_gnuplot(ELF_grid, .grid.n_x, .grid.n_y, .grid.n_z)
      pt.destroy
      ELF_grid.destroy
   end

   make_Tsirelson_ELF_grid(ELF_grid,pt)
   ! Work out the Tsirelson-Stash Electron Localisation Function (ELF) density
   ! on a series of grid points "pt" ".natural orbitals" and the
   ! ".occupation_numbers" vector.
     ELF_grid :: REALVEC
     pt :: REALMAT
   ENSURE(.natural_orbitals.created, "no natural orbitals")
   ENSURE(.natural_orbitals.any_created, "no natural orbitals")
     if (.natural_orbitals.number_kind == "real") then
       .make_Tsirelson_ELF_grid_r(ELF_grid,pt)
     else
       .make_Tsirelson_ELF_grid_c(ELF_grid,pt)
     end
   end

   make_Tsirelson_ELF_grid_r(ELF_grid,pt)
   ! Work out the Tsirelson-Stash Electron Localisation Function (ELF) density
   ! on a series of grid points "pt" ".natural orbitals" and the
   ! ".occupation_numbers" vector.
      ELF_grid :: REALVEC
      pt :: REALMAT
      DD,LL :: REALMAT*
      mo_val,gx,gy,gz,lx,ly,lz,rho,rho_x,rho_y,rho_z,lap,d_p,d_0,NO :: REALVEC*
      occu,factor,mo_val_n,gx_n,gy_n,gz_n,lx_n,ly_n,lz_n,occ_mo :: REAL
      i,n_occ,n,n_pt :: INT
   ENSURE(.basis_info_made, "no basis info")
   ENSURE(.natural_orbitals.created, "no natural orbitals")
      ELF_grid = ZERO
      n_pt = pt.dim1
      rho.create(n_pt);   rho   = ZERO
      rho_x.create(n_pt); rho_x = ZERO
      rho_y.create(n_pt); rho_y = ZERO
      rho_z.create(n_pt); rho_z = ZERO
      lap.create(n_pt);   lap   = ZERO
      NO.create(n_pt)
      DD.create(n_pt,3)
      LL.create(n_pt,3)
      n_occ = .no_of_occupied_NOs
      do i = 1,n_occ
         .make_laplacian_orbital_grid_r(LL,DD,NO,.natural_orbitals.restricted(:,i), pt)
         mo_val => NO(:)
         gx => DD(:,1); gy => DD(:,2); gz => DD(:,3)
         lx => LL(:,1); ly => LL(:,2); lz => LL(:,3)
         occu = .occupation_numbers.restricted(i)
         do n = 1,n_pt
           mo_val_n = mo_val(n)
           gx_n = gx(n); gy_n = gy(n); gz_n = gz(n)
           lx_n = lx(n); ly_n = ly(n); lz_n = lz(n)
           occ_mo   = occu*mo_val_n                        ! this is n_i phi_i
           rho(n)   = rho(n)   + occ_mo*mo_val_n           ! this is rho
           rho_x(n) = rho_x(n) + occ_mo*gx_n               ! this is half grad_x rho
           rho_y(n) = rho_y(n) + occ_mo*gy_n
           rho_z(n) = rho_z(n) + occ_mo*gz_n
           lap(n)   = lap(n)   + occ_mo*(lx_n+ly_n+lz_n) & ! this is half nabla^2 rho
                               + occu*(gx_n*gx_n+gy_n*gy_n+gz_n*gz_n)
         end
      end
      LL.destroy
      DD.destroy
      NO.destroy
      d_0.create(n_pt)
      factor = 0.3d0*(THREE*PI*PI)**(TWO/THREE)
      d_0 = factor*rho**(FIVE/THREE)
      d_p.create(n_pt)
      factor = FOUR/NINE
      d_p = d_0 - factor*(rho_x*rho_x + rho_y*rho_y + rho_z*rho_z)/rho &
                + lap/THREE
      lap.destroy
      rho_z.destroy; rho_y.destroy; rho_x.destroy
      rho.destroy
      ELF_grid = ONE/(ONE+(d_p*d_p)/(d_0*d_0))
      d_p.destroy; d_0.destroy
   end

   make_Tsirelson_ELF_grid_c(ELF_grid,pt)
   ! Work out the Tsirelson-Stash Electron Localisation Function (ELF) density
   ! on a series of grid points "pt" ".natural orbitals" and the
   ! ".occupation_numbers" vector.
      ELF_grid :: REALVEC
      pt :: REALMAT
      mo_val,gx,gy,gz,lx,ly,lz,NO :: CPXVEC*
      DD,LL :: CPXMAT*
      rho,rho_x,rho_y,rho_z,lap,d_0,d_p :: REALVEC*
      occu,factor :: REAL
      mo_val_n,gx_n,gy_n,gz_n,lx_n,ly_n,lz_n,occ_mo :: CPX
      n_occ,n_pt,n,i :: INT
   ENSURE(.basis_info_made, "no basis info")
   ENSURE(.natural_orbitals.created, "no natural orbitals")
      ELF_grid = ZERO
      n_pt = pt.dim1
      rho.create(n_pt);   rho   = ZERO
      rho_x.create(n_pt); rho_x = ZERO
      rho_y.create(n_pt); rho_y = ZERO
      rho_z.create(n_pt); rho_z = ZERO
      lap.create(n_pt);   lap   = ZERO
      NO.create(n_pt)
      DD.create(n_pt,3)
      LL.create(n_pt,3)
      n_occ = .no_of_occupied_NOs
      do i = 1,n_occ
         .make_laplacian_orbital_grid_c(LL,DD,NO,.natural_orbitals.restricted_complex(:,i), pt)
         mo_val => NO(:)
         gx => DD(:,1); gy => DD(:,2); gz => DD(:,3)
         lx => LL(:,1); ly => LL(:,2); lz => LL(:,3)
         occu = .occupation_numbers.restricted(i)
         do n = 1,n_pt
           mo_val_n = mo_val(n)
           gx_n = gx(n); gy_n = gy(n); gz_n = gz(n)
           lx_n = lx(n); ly_n = ly(n); lz_n = lz(n)
           occ_mo   = occu*mo_val_n                     ! this is n_i phi_i
           rho(n)   = rho(n)   + occ_mo*conjg(mo_val_n) ! this is rho
           rho_x(n) = rho_x(n) + occ_mo*conjg(gx_n)     ! this is half grad_x rho
           rho_y(n) = rho_y(n) + occ_mo*conjg(gy_n)
           rho_z(n) = rho_z(n) + occ_mo*conjg(gz_n)
                                                        ! this is half nabla^2 rho
           lap(n)   = lap(n)   + occ_mo*(conjg(lx_n)+conjg(ly_n)+conjg(lz_n)) &
                               + occu*(conjg(gx_n)*gx_n+conjg(gy_n)*gy_n+conjg(gz_n)*gz_n)
         end
      end
      LL.destroy
      DD.destroy
      NO.destroy
      d_0.create(n_pt)
      factor = 0.3d0*(THREE*PI*PI)**(TWO/THREE)
      d_0 = factor*rho**(FIVE/THREE)
      d_p.create(n_pt)
      factor = FOUR/NINE
      d_p = d_0 - factor*(rho_x*rho_x + rho_y*rho_y + rho_z*rho_z)/rho &
                + lap/THREE
      lap.destroy
      rho_z.destroy; rho_y.destroy; rho_x.destroy
      rho.destroy
      ELF_grid = ONE/(ONE+(d_p*d_p)/(d_0*d_0))
      d_p.destroy; d_0.destroy
   end

   make_fermi_mobility_grid
   ! Work out the Luken's fermi mobility density on ".grid" using ".natural
   ! orbitals" and the ".occupation_numbers" vector. A Gnuplot ascii file is
   ! generated.
      arch :: ARCHIVE
      fermi_grid :: REALVEC*
      pt :: REALMAT*
   ENSURE(.grid.created, "no grid")
      fermi_grid.create(.grid.n_pt)
      pt.create(.grid.n_pt, 3 ); .grid.make_points(pt)
      .make_fermi_mobility_grid_r(fermi_grid,pt)
      arch.set(.name,"fermi_mobility_grid",format="ascii")
      arch.write_gnuplot(fermi_grid, .grid.n_x, .grid.n_y, .grid.n_z)
      pt.destroy
      fermi_grid.destroy
   end

   make_fermi_mobility_grid(f,pt)
   ! Evaluate the Luken's Fermi hole mobility grid "f" on a set of grid points "pt".
     f :: REALVEC
     pt :: REALMAT
   ENSURE(.natural_orbitals.created, "no natural orbitals")
   ENSURE(.natural_orbitals.any_created, "no natural orbitals")
     if (.natural_orbitals.number_kind == "real") then
       .make_fermi_mobility_grid_r(f,pt)
     else
       DIE("code not written yet")
     end
   end

   make_fermi_mobility_grid_r(f,pt)
   ! Evaluate the Luken's Fermi hole mobility grid "f" on a set of grid points "pt".
     f :: REALVEC, OUT
     pt :: REALMAT, IN
     del_gi :: REALMAT*
     dg,gi,rho,dgx,dgy,dgz,orb :: REALVEC*
     n,n_pt,i,n_occ :: INT
     delx,dely,delz,fac :: REAL
   ENSURE(.basis_info_made, "no basis info")
   ENSURE(.natural_orbitals.created, "no natural orbitals")
     n_pt = pt.dim1
     n_occ = .no_of_occupied_NOs
     dg.create(n_pt);    dg  = ZERO
     dgx.create(n_pt);   dgx = ZERO
     dgy.create(n_pt);   dgy = ZERO
     dgz.create(n_pt);   dgz = ZERO
     gi.create(n_pt)
     del_gi.create(n_pt,3)
     do i=1, n_occ
       orb => .natural_orbitals.restricted(:,i)
       .make_nabla_orbital_grid_r(del_gi,gi,orb,pt)
       do n=1,n_pt
         delx = del_gi(n,1)
         dely = del_gi(n,2)
         delz = del_gi(n,3)
         dg(n)  = dg(n)  + delx*delx+dely*dely+delz*delz
         dgx(n) = dgx(n) + delx*gi(n)
         dgy(n) = dgy(n) + dely*gi(n)
         dgz(n) = dgz(n) + delz*gi(n)
       end
     end
     del_gi.destroy
     gi.destroy
     rho.create(n_pt)
     .make_density_grid(rho,pt)
     fac = (THREE*PI/FOUR) * HALF**TWOTHIRDS
     f = ONE/rho * (dg - TWO*(dgx*dgx + dgy*dgy + dgz*dgz)/rho) - fac * rho**TWOTHIRDS
     rho.destroy
     dgz.destroy
     dgy.destroy
     dgx.destroy
     dg.destroy
   end

   make_true_fermi_mobility_grid
   ! Work out the the true fermi mobility density "f" on a series of grid points
   ! "pt" using ".natural orbitals" and the ".occupation_numbers" vector. The
   ! true function differs from that above in that the kinetic energy density is
   ! evaluated exactly.
      arch :: ARCHIVE
      fermi_grid :: REALVEC*
      pt :: REALMAT*
   ENSURE(.grid.created, "no grid")
      fermi_grid.create(.grid.n_pt)
      pt.create(.grid.n_pt, 3 ); .grid.make_points(pt)
      .make_true_fermi_mobil_grid_r(fermi_grid,pt)
      arch.set(.name,"true_fermi_mobility_grid",format="ascii")
      arch.write_gnuplot(fermi_grid, .grid.n_x, .grid.n_y, .grid.n_z)
      pt.destroy
      fermi_grid.destroy
   end

   make_true_fermi_mobility_grid(f,pt)
   ! Work out the the true fermi mobility density "f" on a series of grid points
   ! "pt" using ".natural orbitals" and the ".occupation_numbers" vector. The
   ! true function differs from that above in that the kinetic energy density is
   ! evaluated exactly.
     f :: REALVEC
     pt :: REALMAT
   ENSURE(.natural_orbitals.created, "no natural orbitals")
   ENSURE(.natural_orbitals.any_created, "no natural orbitals")
     if (.natural_orbitals.number_kind == "real") then
       .make_true_fermi_mobil_grid_r(f,pt)
     else
       DIE("code not written yet")
     end
   end

   make_true_fermi_mobil_grid_r(f,pt)
   ! Evaluate the true Fermi hole mobility grid "f" on a set of grid points
   ! "pt".  The true function differs from that above in that the kinetic energy
   ! density is evaluated exactly.
   ! NOTE: this routine is only valid for single determinant wavefunctions.
     f :: REALVEC, OUT
     pt :: REALMAT, IN
     dg,rho,NO,K,gj,Tj :: REALVEC*
     dgx,dgy,dgz,gi :: REALVEC*
     n,n_pt,i,j,n_occ :: INT
     delx,dely,delz :: REAL
     del_gi,g,T :: REALMAT*
   ENSURE(.basis_info_made, "no basis info")
   ENSURE(.natural_orbitals.created, "no natural orbitals")
     n_pt = pt.dim1
     n_occ = .no_of_occupied_NOs
     dg.create(n_pt);    dg  = ZERO
     dgx.create(n_pt);   dgx = ZERO
     dgy.create(n_pt);   dgy = ZERO
     dgz.create(n_pt);   dgz = ZERO
     g.create(n_pt,n_occ)
     del_gi.create(n_pt,3)
     ! Assemble intermediate terms
     do i=1, n_occ
       NO => .natural_orbitals.restricted(:,i)
       gi => g(:,i)
       .make_nabla_orbital_grid_r(del_gi,gi,NO,pt)
       do n=1,n_pt
         delx = del_gi(n,1)
         dely = del_gi(n,2)
         delz = del_gi(n,3)
         dg(n)  = dg(n)  + delx*delx+dely*dely+delz*delz
         dgx(n) = dgx(n) + delx*gi(n)
         dgy(n) = dgy(n) + dely*gi(n)
         dgz(n) = dgz(n) + delz*gi(n)
       end
     end
     del_gi.destroy
     ! Make kinetic energy matrix part
     K.create(n_pt);    K = ZERO
     T.create(.n_bf,.n_bf)
     .get_kinetic_matrix(T)
     T.change_basis(.natural_orbitals.restricted)
     do j=1,n_occ
       gj => g(:,j)
       Tj => T(:,j)
       do i=1,n_occ
         K(:) = K(:) + g(:,i)*gj(:)*Tj(i)
       end
     end
     T.destroy
     ! Now do the final assembly
     rho.create(n_pt)
     .make_density_grid(rho,pt)
     f = ONE/rho * (dg - TWO*(dgx*dgx+dgy*dgy+dgz*dgz)/rho - TWO*K)
     rho.destroy
     K.destroy
     g.destroy
     dgz.destroy
     dgy.destroy
     dgx.destroy
     dg.destroy
   end

   make_electric_potential_grid
   ! Make the electric potential "pot_grid" on ".grid"
     arch :: ARCHIVE
     pot_grid :: REALVEC*
     pt :: REALMAT*
   ENSURE(.grid.created,  "no grid")
   ENSURE(.basis_info_made, "no basis info")
   ENSURE(.density_matrix.created, "no density matrix")
   ENSURE(.density_matrix.any_created, "no density matrix")
     pot_grid.create(.grid.n_pt)
     pt.create(.grid.n_pt,3); .grid.make_points(pt)
     .make_electric_potential_grid(pot_grid,pt)
     pt.destroy
     arch.set(.name,"electric_potential_grid",format="ascii")
     arch.write_gnuplot(pot_grid, .grid.n_x, .grid.n_y, .grid.n_z)
     pot_grid.destroy
   end

   make_electric_potential_grid(pot_grid,pt)
   ! Make the electric potential "pot_grid" on a series of points "pt"
     pot_grid :: REALVEC
     pt :: REALMAT
   ENSURE(.basis_info_made, "no basis info")
   ENSURE(.density_matrix.created, "no density matrix")
   ENSURE(.density_matrix.any_created, "no density matrix")
     .make_ao_density_matrix
     if (.density_matrix.number_kind == "real") then
       .make_electric_potential_grid_r(pot_grid,pt,.density_matrix.restricted)
     else
       .make_electric_potential_grid_c(pot_grid,pt,.density_matrix.restricted_complex)
     end
   end

   make_electric_potential_grid_r(pot_grid,pt,dens)
   ! Make the total electric potential "pot_grid" on a series of grid points
   ! "pt" using AO density matrix "dens"
     pot_grid :: REALVEC
     pt :: REALMAT
     dens :: REALMAT, target
     elec_grid :: REALVEC*
     .nuclear_potential(pot_grid,pt)
     elec_grid.create(size(pot_grid))
     .make_electronic_pot_grid_r(elec_grid,pt,dens)
     pot_grid.plus(elec_grid)
     elec_grid.destroy
   end

   make_electric_potential_grid_c(pot_grid,pt,dens)
   ! Make the total electric potential "pot_grid" on a series of grid points
   ! "pt" using AO density matrix "dens"
     pot_grid :: REALVEC
     pt :: REALMAT
     dens :: CPXMAT, target
     elec_grid :: REALVEC*
     .nuclear_potential(pot_grid,pt)
     elec_grid.create(size(pot_grid))
     .make_electronic_pot_grid_c(elec_grid,pt,dens)
     pot_grid.plus(elec_grid)
     elec_grid.destroy
   end

   make_electronic_pot_grid_r(pot_grid,pt,dens)
   ! Make the electronic potential "pot_grid" on a series of grid points "pt"
   ! using AO density matrix "dens"
      pot_grid :: REALVEC
      pt :: REALMAT
      dens :: REALMAT, target
      Vab,Dba :: REALMAT*
      n_pt,q,fa,fb,la,lb,k :: INT
      sh :: SHELL2
   ENSURE(.basis_info_made, "no basis info")
   ENSURE(.atom.created,  "no atom list")
      n_pt = pt.dim1
      pot_grid = ZERO
      do q = 1,.n_shell_pairs
         .get_precomp_shell_pair(sh,q,fa,la,fb,lb)
         Dba => dens(fa:la,fb:lb)
         Vab.create(sh.a.n_comp,sh.b.n_comp)
         if (fa/=fb) then
           do k = 1,n_pt
             sh.get_nuc(Vab,ONE,pt(k,:))
             pot_grid(k) = pot_grid(k) - TWO*sum(Vab*Dba)
           end
         else
           do k = 1,n_pt
             sh.get_nuc(Vab,ONE,pt(k,:))
             pot_grid(k) = pot_grid(k) - sum(Vab*Dba)
           end
         end
         Vab.destroy
         sh.destroy_ptr_part
      end
   end

   make_electronic_pot_grid_c(pot_grid,pt,dens)
   ! Make the electronic potential "pot_grid" on a series of grid points "pt"
   ! using AO density matrix "dens"
      pot_grid :: REALVEC
      pt :: REALMAT
      dens :: CPXMAT, target
      Vab :: REALMAT*
      Dba :: CPXMAT*
      n_pt,q,fa,fb,la,lb,k :: INT
      sh :: SHELL2
   ENSURE(.basis_info_made, "no basis info")
   ENSURE(.atom.created,  "no atom list")
      n_pt = pt.dim1
      pot_grid = ZERO
      do q = 1,.n_shell_pairs
         .get_shell_pair(sh,q,fa,la,fb,lb)
         Dba => dens(fa:la,fb:lb)
         Vab.create(sh.a.n_comp,sh.b.n_comp)
         if (fa/=fb) then
           do k = 1,n_pt
             sh.make_nuclear_attraction_ints(Vab,pt(k,:))
             pot_grid(k) = pot_grid(k) - TWO*sum(Vab*real(Dba,kind=REAL_KIND))
           end
         else
           do k = 1,n_pt
             sh.make_nuclear_attraction_ints(Vab,pt(k,:))
             pot_grid(k) = pot_grid(k) - TWO*sum(Vab*real(Dba,kind=REAL_KIND))
           end
         end
         Vab.destroy
         sh.destroy_ptr_part
      end
   end

   make_j_density_grid
   ! Make the current density on ".grid" using ".natural orbitals"
   ! and the ".occupation_numbers" vector.
   !    J(r) = J_p(r) + J_d(r)
      arch :: ARCHIVE
      j,jp :: REALMAT*
   ENSURE(.grid.created, "no grid")
      j.create(.grid.n_pt,3);  .get_jd_density_grid(j)
      jp.create(.grid.n_pt,3); .get_jp_density_grid(jp)
      j = j + jp
      jp.destroy
      arch.set(.name,"current_density")
      arch.write(j)
      arch.set(.name,"current_density",format="ascii")
      arch.write_gnuplot(j, .grid.n_x, .grid.n_y, .grid.n_z)
      arch.set(.name,"current_norm_density",format="ascii")
      arch.write_gnuplot(j, .grid.n_x, .grid.n_y, .grid.n_z, norm=TRUE)
      arch.set(.name,"current_density,normalized",format="ascii")
      arch.write_gnuplot(j, .grid.n_x, .grid.n_y, .grid.n_z, normalise=TRUE)
      j.destroy
   end

   get_jd_density_grid(jd)
   ! Set "jd" to the diamagnetic current density grid.
   ! If the archive file exists, read it; otherwise make it.
      jd :: REALMAT
      arch :: ARCHIVE
      arch.set(.name,"jd_density_grid")
      if (NOT arch.exists) .make_jd_density_grid
      arch.read(jd)
   end

   make_jd_density_grid
   ! Work out the diamagnetic current density on ".grid" using ".natural
   ! orbitals" and the ".occupation_numbers" number vector.
   !    J_d(r) = - (e^2/2m) (B x r) rho(r)
      arch :: ARCHIVE
      jd,r :: REALMAT*
      rho :: REALVEC*
      ENSURE(.grid.created, "no grid")
      nullify(r)
      if (.B_field.norm<TOL(10)) return
      jd.create(.grid.n_pt,3)
      rho.create(.grid.n_pt)
      r.create(.grid.n_pt,3)
      .grid.make_points(r)
      jd(:,1) = .B_field(2)*r(:,3) - .B_field(3)*r(:,2)
      jd(:,2) = .B_field(3)*r(:,1) - .B_field(1)*r(:,3)
      jd(:,3) = .B_field(1)*r(:,2) - .B_field(2)*r(:,1)
      .make_density_grid(rho,r)
      r.destroy
      jd(:,1) = -HALF*jd(:,1)*rho
      jd(:,2) = -HALF*jd(:,2)*rho
      jd(:,3) = -HALF*jd(:,3)*rho
      rho.destroy
      arch.set(.name,"jd_density")
      arch.write(jd)
      arch.set(.name,"jd_density",format="ascii")
      arch.write_gnuplot(jd, .grid.n_x, .grid.n_y, .grid.n_z)
      arch.set(.name,"jd_norm_density",format="ascii")
      arch.write_gnuplot(jd, .grid.n_x, .grid.n_y, .grid.n_z, norm=TRUE)
      arch.set(.name,"jd_density,normalized",format="ascii")
      arch.write_gnuplot(jd, .grid.n_x, .grid.n_y, .grid.n_z, normalise=TRUE)
      jd.destroy
   end

   get_jp_density_grid(jp)
   ! Set "jp" to the paramagnetic current density grid.
   ! If the archive file exists, read it; otherwise make it.
      jp :: REALMAT
      arch :: ARCHIVE
      arch.set(.name,"jp_density_grid")
      if (NOT arch.exists) .make_jp_density_grid
      arch.read(jp)
   end

   make_jp_density_grid
   ! Work out the paramagnetic current density on ".grid" using ".natural
   ! orbitals".  A Gnuplot ascii file is generated.
      arch :: ARCHIVE
      jp :: REALMAT*
      complex :: BIN
      ENSURE(.grid.created,  "no grid")
      ENSURE(.basis_info_made, "no basis info")
      ENSURE(.natural_orbitals.created, "no natural orbitals")
      ENSURE(.natural_orbitals.created, "no natural orbitals")
      complex = .natural_orbitals.number_kind == "complex"
      ENSURE(complex, "natural orbitals not complex")
      .make_ao_density_matrix
      .make_restricted_complex_NOs
      jp.create(.grid.n_pt,3)
      .make_jp_density_grid(jp)
      arch.set(.name,"jp_density_grid")
      arch.write(jp)
      arch.set(.name,"jp_density_grid",format="ascii")
      arch.write_gnuplot(jp, .grid.n_x, .grid.n_y, .grid.n_z)
      arch.set(.name,"jp_norm_density_grid",format="ascii")
      arch.write_gnuplot(jp, .grid.n_x, .grid.n_y, .grid.n_z, norm=TRUE)
      arch.set(.name,"jp_density_grid,normalized",format="ascii")
      arch.write_gnuplot(jp, .grid.n_x, .grid.n_y, .grid.n_z, normalise=TRUE)
      jp.destroy
   end

   make_jp_density_grid(jp)
   ! Work out the paramagnetic current density "jp" on ".grid" using ".natural
   ! orbitals" .
   !    J_p(r) = - (eh/m) Re [ \sum_i n_i \phi^*_i(r) \nabla \phi^*_i(r)
     jp :: REALMAT
     pt :: REALMAT*
     P :: CPXMAT*
     D :: CPXVEC*
     n_occ,n,n_pt :: INT
     occ :: REAL
     ENSURE(.grid.created,  "no grid")
     ENSURE(.basis_info_made, "no basis info")
     ENSURE(.natural_orbitals.created, "no density matrix")
     jp = ZERO
     n_pt = .grid.n_pt
     pt.create(n_pt,3); .grid.make_points(pt)
     D.create(n_pt)
     P.create(n_pt,3)
     n_occ = .no_of_occupied_NOs
     do n = 1,n_occ
       .make_nabla_orbital_grid_c(P,D,.natural_orbitals.restricted_complex(:,n), pt)
       occ = .occupation_numbers.restricted(n)
       jp(:,1) = jp(:,1) - occ*aimag(conjg(D(:))*P(:,1))
       jp(:,2) = jp(:,2) - occ*aimag(conjg(D(:))*P(:,2))
       jp(:,3) = jp(:,3) - occ*aimag(conjg(D(:))*P(:,3))
     end
     P.destroy
     D.destroy
     pt.destroy
   end

   make_solenoidal_jp_grid
   ! Make the solenoidal paramagnetic current density grid "jp" on ".grid"
     arch :: ARCHIVE
     jp :: REALMAT*
      ENSURE(.grid.created,  "no grid")
      ENSURE(.basis_info_made, "no basis info")
     .make_ao_density_matrix
     ENSURE(.density_matrix.created("restricted_complex"), "no density matrix")
     jp.create(.grid.n_pt,3)
     .make_solenoidal_jp_grid(jp,.density_matrix.restricted_complex)
     arch.set(.name,"solenoidal_jp_density_grid")
     arch.write(jp)
     arch.set(.name,"solenoidal_jp_density_grid",format="ascii")
     arch.write_gnuplot(jp, .grid.n_x, .grid.n_y, .grid.n_z)
     arch.set(.name,"solenoidal_jp_norm_density_grid",format="ascii")
     arch.write_gnuplot(jp, .grid.n_x, .grid.n_y, .grid.n_z, norm=TRUE)
     arch.set(.name,"solenoidal_jp_density_grid,normalized",format="ascii")
     arch.write_gnuplot(jp, .grid.n_x, .grid.n_y, .grid.n_z, normalise=TRUE)
     jp.destroy
   end

   make_solenoidal_jp_grid(jp,dens)
   ! Make the solenoidal paramagnetic current density grid "jp" on ".grid"
   ! using AO density matrix "dens"
      jp :: REALMAT
      dens :: CPXMAT, target
      Dba :: CPXMAT*
      pt,Jxab,Jyab,Jzab :: REALMAT*
      q,fa,fb,la,lb,k :: INT
      fac :: REAL
      sh :: SHELL2
      ENSURE(.grid.created,  "no grid")
      ENSURE(.basis_info_made, "no basis info")
      ENSURE(.atom.created,  "no atom list")
      pt.create(.grid.n_pt,3); .grid.make_points(pt)
      jp = ZERO
      do q = 1,.n_shell_pairs
        .get_shell_pair(sh,q,fa,la,fb,lb)
        Dba => dens(fb:lb,fa:la)
        fac = TWO; if (fa==fb) fac=ONE
        Jxab.create(sh.a.n_comp,sh.b.n_comp)
        Jyab.create(sh.a.n_comp,sh.b.n_comp)
        Jzab.create(sh.a.n_comp,sh.b.n_comp)
        do k = 1,.grid.n_pt
          sh.make_solenoidal_jp_ints(Jxab,Jyab,Jzab,pt(k,:))
          jp(k,1) = jp(k,1) - fac*Jxab.trace_of_product(real(aimag(Dba),kind=REAL_KIND))
          jp(k,2) = jp(k,2) - fac*Jyab.trace_of_product(real(aimag(Dba),kind=REAL_KIND))
          jp(k,3) = jp(k,3) - fac*Jzab.trace_of_product(real(aimag(Dba),kind=REAL_KIND))
        end
        Jxab.destroy
        Jyab.destroy
        Jzab.destroy
        sh.destroy_ptr_part
      end
      pt.destroy
      jp.zero_small_values(TOL(10))
   end

   make_irrotational_jp_grid
   ! Make the irrotational paramagnetic current density grid "jp" on ".grid"
      arch :: ARCHIVE
      jp :: REALMAT*
      ENSURE(.grid.destroyed,  "no grid")
      ENSURE(.basis_info_made, "no basis info")
      .make_ao_density_matrix
      ENSURE(.density_matrix.created("restricted_complex"), "no density matrix")
      jp.create(.grid.n_pt,3)
      .make_irrotational_jp_grid(jp,.density_matrix.restricted_complex)
      arch.set(.name,"irrotational_jp_density_grid")
      arch.write(jp)
      arch.set(.name,"irrotational_jp_density_grid",format="ascii")
      arch.write_gnuplot(jp, .grid.n_x, .grid.n_y, .grid.n_z)
      arch.set(.name,"irrotational_jp_norm_density_grid",format="ascii")
      arch.write_gnuplot(jp, .grid.n_x, .grid.n_y, .grid.n_z, norm=TRUE)
      arch.set(.name,"irrotational_jp_density_grid,normalized",format="ascii")
      arch.write_gnuplot(jp, .grid.n_x, .grid.n_y, .grid.n_z, normalise=TRUE)
      jp.destroy
   end

   make_irrotational_jp_grid(jp,dens)
   ! Make the irrotational paramagnetic current density grid "jp" on ".grid"
   ! using AO density matrix "dens"
      jp :: REALMAT
      dens :: CPXMAT, target
      Dba :: CPXMAT*
      pt,Jxab,Jyab,Jzab :: REALMAT*
      q,fa,fb,la,lb,k :: INT
      fac :: REAL
      sh :: SHELL2
      ENSURE(.grid.created,  "no grid")
      ENSURE(.basis_info_made, "no basis info")
      ENSURE(.atom.created,  "no atom list")
      pt.create(.grid.n_pt,3); .grid.make_points(pt)
      jp = ZERO
      do q = 1,.n_shell_pairs
        .get_shell_pair(sh,q,fa,la,fb,lb)
        Dba => dens(fb:lb,fa:la)
        fac = TWO; if (fa==fb) fac=ONE
        Jxab.create(sh.a.n_comp,sh.b.n_comp)
        Jyab.create(sh.a.n_comp,sh.b.n_comp)
        Jzab.create(sh.a.n_comp,sh.b.n_comp)
        do k = 1,.grid.n_pt
          sh.make_irrotational_jp_ints(Jxab,Jyab,Jzab,pt(k,:))
          jp(k,1) = jp(k,1) - fac*Jxab.trace_of_product(real(aimag(Dba),kind=REAL_KIND))
          jp(k,2) = jp(k,2) - fac*Jyab.trace_of_product(real(aimag(Dba),kind=REAL_KIND))
          jp(k,3) = jp(k,3) - fac*Jzab.trace_of_product(real(aimag(Dba),kind=REAL_KIND))
        end
        Jxab.destroy
        Jyab.destroy
        Jzab.destroy
        sh.destroy_ptr_part
      end
      pt.destroy
      jp.zero_small_values(TOL(10))
   end

   make_crystal_error_map ::: leaky
   ! Work out the crystal_error map on ".grid". A Gnuplot ascii file is
   ! generated.
      arch :: ARCHIVE
      map :: REALVEC*
      ENSURE(.grid.created, "no grid")
      map.create(.grid.n_pt)
      .make_crystal_error_map(map)
      arch.set(.name,"crystal_error_map",format="ascii")
      arch.write_gnuplot(map, .grid.n_x, .grid.n_y, .grid.n_z)
      map.destroy
   end

   make_crystal_error_map(map)
   ! Make the crystal error "map".
      map :: REALVEC
      pt :: REALMAT*
      n_pt :: INT
      ENSURE(.grid.created, "no grid")
      map = ZERO
      n_pt = .grid.n_pt
      pt.create(n_pt,3); .grid.make_points(pt)
      .crystal.make_crystal_error_map(map,pt)
      pt.destroy
   end

   make_stockholder_grid
   ! Work out the hirschfeld stockholder function on ".grid" using
   ! ".natural_orbitals" and the ".occupation" number vector. A Gnuplot ascii
   ! file is generated.
      arch :: ARCHIVE
      density_grid :: REALVEC*
      pt :: REALMAT*
      ENSURE(.grid.created, "no grid")
      ENSURE(.cluster.created, "no cluster data")
      ENSURE(.cluster.info_made, "no cluster info")
      density_grid.create(.grid.n_pt)
      pt.create(.grid.n_pt,3); .grid.make_points(pt)
      .make_stockholder_grid(density_grid,pt)
      arch.set(.name,"stockholder_grid",format="ascii")
      arch.write_gnuplot(density_grid, .grid.n_x, .grid.n_y, .grid.n_z)
      pt.destroy
      density_grid.destroy
   end

   make_stockholder_grid(density_grid,pt)
   ! Make the Hirschfeld stockholder "density_grid" for the supplied points "pt"
   ! from restricted real natural orbitals
     self :: IN
     density_grid :: REALVEC, OUT
     pt :: REALMAT, IN
     sphere_pos :: REALVEC(3)
     !diff :: REALVEC(3)
     grid,rho_fragment :: REALVEC*
     sphere_radius :: REAL
     !min_exp,dist,cutoff :: REAL
     n_pt, a :: INT
     ENSURE(.cluster.created, "no cluster data")
     ENSURE(.cluster.info_made, "no cluster info")
     ENSURE(.coppensbasis.created OR .slaterbasis.created,"no atomic orbitals")
     n_pt = density_grid.dim
     grid.create(n_pt)
     ! Make the central position and radius of the cluster
     pt.make_enclosing_sphere(sphere_pos,sphere_radius)
     !cutoff = TOL(30)
     rho_fragment.create(n_pt)
     rho_fragment = ZERO
     do a = 1,.cluster.n_atoms
        if (NOT .cluster.is_fragment_atom(a)) cycle
        !min_exp = .atom(a).min_basis_exponent
        !diff = .atom(a).pos - sphere_pos
        !dist = sqrt(dot_product(diff,diff)) - sphere_radius
        !if (.atom(a).atomic_number*exp(-min_exp*dist)> cutoff) then
        !if (.atom(a).density_at_radius(dist)> cutoff) then
        !if (dist>.atom(a).coppensbasis.interpolator.last_data_point) cycle
        .atom(a).make_density_grid(grid,pt)
        rho_fragment = rho_fragment + grid
     end
     density_grid = rho_fragment
     do a = 1,.cluster.n_atoms
        if (.cluster.is_fragment_atom(a)) cycle
        !min_exp = .atom(a).min_basis_exponent
        !diff = .atom(a).pos - sphere_pos
        !dist = sqrt(dot_product(diff,diff)) - sphere_radius
        !if (.atom(a).atomic_number*exp(-min_exp*dist)> cutoff) then
        !if (.atom(a).density_at_radius(dist)> cutoff) then
        !if (dist>.atom(a).coppensbasis.interpolator.last_data_point) cycle
        .atom(a).make_density_grid(grid,pt)
        density_grid = density_grid + grid
     end
     ! density_grid = rho_fragment/density_grid
     do a = 1,size(density_grid)
       if (density_grid(a)>epsilon(ONE)) then
         density_grid(a) = rho_fragment(a)/density_grid(a)
       else
         density_grid(a) = ZERO
       end
     end
     rho_fragment.destroy
     grid.destroy
   end

   make_div_jp_density_grid
   ! Work out the divergence of the paramagnetic current density on ".grid"
   ! using ".natural orbitals".  A Gnuplot ascii file is generated.
      arch :: ARCHIVE
      div_jp :: REALVEC*
      ENSURE(.grid.created,  "no grid")
      ENSURE(.basis_info_made, "no basis info")
      ENSURE(.natural_orbitals.created, "no natural orbitals")
      ENSURE(.natural_orbitals.created, "no natural orbitals")
      ENSURE(.natural_orbitals.number_kind == "complex", "natural orbitals not complex")
      .make_ao_density_matrix
      .make_restricted_complex_NOs
      div_jp.create(.grid.n_pt)
      .make_div_jp_density_grid(div_jp)
      arch.set(.name,"div_jp_density_grid")
      arch.write(div_jp)
      arch.set(.name,"div_jp_density_grid",format="ascii")
      arch.write_gnuplot(div_jp, .grid.n_x, .grid.n_y, .grid.n_z)
      div_jp.destroy
   end

   make_div_jp_density_grid(div_jp)
   ! Work out the divergence of the paramagnetic current density "jp" on ".grid"
   ! using ".natural orbitals" .
   !  \nabla .  J_p(r) = - (eh/m) \sum_i n_i Im[ \phi^*_i(r) \nabla^2 \phi^_i(r) ]
     div_jp :: REALVEC
     pt :: REALMAT*
     L :: CPXMAT*
     P :: CPXMAT*
     D :: CPXVEC*
     n_occ,n,n_pt :: INT
     occ :: REAL
     ENSURE(.grid.created,  "no grid")
     ENSURE(.basis_info_made, "no basis info")
     ENSURE(.natural_orbitals.created, "no density matrix")
     div_jp = ZERO
     n_pt = .grid.n_pt
     pt.create(n_pt,3); .grid.make_points(pt)
     D.create(n_pt)
     P.create(n_pt,3)
     L.create(n_pt,3)
     n_occ = .no_of_occupied_NOs
     do n = 1,n_occ
       .make_laplacian_orbital_grid_c(L,P,D,.natural_orbitals.restricted_complex(:,n), pt)
       occ = .occupation_numbers.restricted(n)
       div_jp(:) = div_jp(:) - occ*aimag(conjg(D(:))*(L(:,1)+L(:,2)+L(:,3)))
     end
     L.destroy
     P.destroy
     D.destroy
     pt.destroy
   end

! ***************************
! Isosurface plotting methods
! ***************************

   isosurface_plot ::: leaky
   ! Do one of the many kinds of isosurface plot calculations
     word :: STR
     self :: target
     ENSURE(.isosurface.created,"no isosurface")
     saved_self => self ! Note this !
     word = .isosurface.kind
     word.to_lower_case
#ifndef NOGENERIC
     select case (word)
      ! case("delta_density      "); .isosurface.cubify(delta_density_grid)
        case("elf                "); .isosurface.cubify(ELF_grid)
        case("electric_potential "); .isosurface.cubify(electric_potential_grid)
        case("electron_density   "); .isosurface.cubify(electron_density_grid)
        case("fermi_mobility     "); .isosurface.cubify(fermi_mobility_grid)
        case("laplacian_density  "); .isosurface.cubify(laplacian_density_grid)
        case("orbital            "); .isosurface.cubify(orbital_grid)
        case("orbital_density    "); .isosurface.cubify(orbital_density_grid)
        case("spin_density       "); .isosurface.cubify(spin_density_grid)
        case("stockholder_density"); .isosurface.cubify(stockholder_density_grid)
        case("true_fermi_mobility"); .isosurface.cubify(true_fermi_mobility_grid)
        case("tsirelson_elf      "); .isosurface.cubify(Tsirelson_ELF_grid)
        case("grad_rho_on_rho    "); .isosurface.cubify(grad_rho_on_rho_grid)
        case default;                UNKNOWN(word)
     end
#else
     select case (word)
      ! case("delta_density      "); .isosurface.cubify(delta_density_grid)
        case("elf                "); .isosurface.cubify(MOL_ELF_grid)
        case("electric_potential "); .isosurface.cubify(MOL_electric_potential_grid)
        case("electron_density   "); .isosurface.cubify(MOL_electron_density_grid)
        case("fermi_mobility     "); .isosurface.cubify(MOL_fermi_mobility_grid)
        case("laplacian_density  "); .isosurface.cubify(MOL_laplacian_density_grid)
        case("orbital            "); .isosurface.cubify(MOL_orbital_grid)
        case("orbital_density    "); .isosurface.cubify(MOL_orbital_density_grid)
        case("spin_density       "); .isosurface.cubify(MOL_spin_density_grid)
        case("stockholder_density"); .isosurface.cubify(MOL_stockholder_density_grid)
        case("true_fermi_mobility"); .isosurface.cubify(MOL_true_fermi_mobility_grid)
        case("tsirelson_elf      "); .isosurface.cubify(MOL_Tsirelson_ELF_grid)
        case("grad_rho_on_rho    "); .isosurface.cubify(MOL_grad_rho_on_rho_grid)
        case default;                UNKNOWN(word)
     end
#endif
   end

   plot_on_isosurface ::: leaky
   ! Do one of the many kinds of isosurface plot calculations
     word :: STR
     self :: target
     ENSURE(.isosurface.created,"no isosurface")
     saved_self => self ! Note this !
     word = .isosurface.surface_property
     word.to_lower_case
#ifndef NOGENERIC
     select case (word)
      ! case("delta_density      "); .isosurface.plot_function(delta_density_grid)
        case("elf                "); .isosurface.plot_function(ELF_grid)
        case("electric_potential "); .isosurface.plot_function(electric_potential_grid)
        case("electron_density   "); .isosurface.plot_function(electron_density_grid)
        case("fermi_mobility     "); .isosurface.plot_function(fermi_mobility_grid)
        case("laplacian_density  "); .isosurface.plot_function(laplacian_density_grid)
        case("orbital            "); .isosurface.plot_function(orbital_grid)
        case("orbital_density    "); .isosurface.plot_function(orbital_density_grid)
        case("spin_density       "); .isosurface.plot_function(spin_density_grid)
        case("stockholder_density"); .isosurface.plot_function(stockholder_density_grid)
        case("true_fermi_mobility"); .isosurface.plot_function(true_fermi_mobility_grid)
        case("tsirelson_elf      "); .isosurface.plot_function(Tsirelson_ELF_grid)
        case("grad_rho_on_rho    "); .isosurface.plot_function(grad_rho_on_rho_grid)
        case default;                UNKNOWN(word)
     end
#else
     select case (word)
      ! case("delta_density      "); .isosurface.plot_function(delta_density_grid)
        case("elf                "); .isosurface.plot_function(MOL_ELF_grid)
        case("electric_potential "); .isosurface.plot_function(MOL_electric_potential_grid)
        case("electron_density   "); .isosurface.plot_function(MOL_electron_density_grid)
        case("fermi_mobility     "); .isosurface.plot_function(MOL_fermi_mobility_grid)
        case("laplacian_density  "); .isosurface.plot_function(MOL_laplacian_density_grid)
        case("orbital            "); .isosurface.plot_function(MOL_orbital_grid)
        case("orbital_density    "); .isosurface.plot_function(MOL_orbital_density_grid)
        case("spin_density       "); .isosurface.plot_function(MOL_spin_density_grid)
        case("stockholder_density"); .isosurface.plot_function(MOL_stockholder_density_grid)
        case("true_fermi_mobility"); .isosurface.plot_function(MOL_true_fermi_mobility_grid)
        case("tsirelson_elf      "); .isosurface.plot_function(MOL_Tsirelson_ELF_grid)
        case("grad_rho_on_rho    "); .isosurface.plot_function(MOL_grad_rho_on_rho_grid)
        case default;                UNKNOWN(word)
     end
#endif
   end

   electron_density_grid(g,pt) ::: selfless
   ! Work out the electron density grid "g" for a series of points "pt" for
   ! using the ".natural orbitals".
      g  :: REALVEC, OUT
      pt :: REALMAT, IN
      self :: MOL*; self => saved_self
      .make_density_grid(g,pt)
   end

   spin_density_grid(g,pt) ::: selfless
   ! Work out the electron density grid "g" for a series of points "pt" for
   ! using the ".natural orbitals" and ".occupation_numbers" vector.
      g  :: REALVEC, OUT
      pt :: REALMAT, IN
      self :: MOL*; self => saved_self
      .make_ao_sz_density_matrix
      .make_density_grid(g,pt)
   end

   laplacian_density_grid(g,pt) ::: selfless
   ! Work out the laplacian density grid "g" for a series of points "pt" for
   ! using the ".natural orbitals".
      g  :: REALVEC, OUT
      pt :: REALMAT, IN
      self :: MOL*; self => saved_self
      .make_laplacian_grid(g,pt)
   end

   orbital_density_grid(g,pt) ::: selfless
   ! Work out the orbital density grid "g" for a series of points "pt" for using
   ! the ".natural orbitals", for a partcular orbital .grid.orbital.
      g  :: REALVEC, OUT
      pt :: REALMAT, IN
      gc :: CPXVEC*
      n_pt :: INT
      grid :: PLOTGRID*
      self :: MOL*; self => saved_self
      ENSURE(.isosurface.created,"no isosurface")
      ENSURE(.isosurface.grid.orbital>=0,"non-positive grid orbital")
      ENSURE(pt.dim1==g.dim1,"incompatible # of points, g and pt arrays")
      ENSURE(pt.dim2==3,"wrong shape, pt array")
      ENSURE(.natural_orbitals.created, "no natural orbitals")
      n_pt = pt.dim1
      grid => .isosurface.grid
      if (.natural_orbitals.number_kind == "real") then
        .make_orbital_grid_r(g,.natural_orbitals.restricted(:,grid.orbital),pt,square=TRUE)
      else
        gc.create(n_pt)
        .make_orbital_grid_c(gc,.natural_orbitals.restricted_complex(:,grid.orbital),pt,square=TRUE)
        g = gc
        gc.destroy
      end
   end

   orbital_grid(g,pt) ::: selfless
   ! Work out the orbital grid "g" for a series of points "pt" for using
   ! the ".natural orbitals", for a partcular orbital .grid.orbital.
   ! NOTE: for complex orbitals, the absolute value times the sign of
   ! the complex part
      g  :: REALVEC, OUT
      pt :: REALMAT, IN
      gc :: CPXVEC*
      n_pt :: INT
      grid :: PLOTGRID*
      self :: MOL*; self => saved_self
      ENSURE(.isosurface.created,"no isosurface")
      ENSURE(.isosurface.grid.orbital>=0,"non-positive grid orbital")
      ENSURE(pt.dim1==g.dim1,"incompatible # of points, g and pt arrays")
      ENSURE(pt.dim2==3,"wrong shape, pt array")
      ENSURE(.natural_orbitals.created, "no natural orbitals")
      n_pt = pt.dim1
      grid => .isosurface.grid
      if (.natural_orbitals.number_kind == "real") then
        .make_orbital_grid_r(g,.natural_orbitals.restricted(:,grid.orbital),pt)
      else
        gc.create(n_pt)
        .make_orbital_grid_c(gc,.natural_orbitals.restricted_complex(:,grid.orbital),pt)
        g = sign(real(gc),aimag(gc))
        gc.destroy
      end
   end

   ELF_grid(g,pt) ::: selfless
   ! Work out the Electron Localisation Function (ELF) density "g" for a series
   ! of points "pt" for using the ".natural orbitals".
      g  :: REALVEC, OUT
      pt :: REALMAT, IN
      self :: MOL*; self => saved_self
      .make_ELF_grid(g,pt)
   end

   grad_rho_on_rho_grid(g,pt) ::: selfless
   ! Work out abs(grad(rho))/rho on a set of grid points "pt".
      g  :: REALVEC, OUT
      pt :: REALMAT, IN
      self :: MOL*; self => saved_self
      .make_grad_rho_on_rho_grid(g,pt)
   end

   Tsirelson_ELF_grid(g,pt) ::: selfless
   ! Work out the Tsirelson-Stash version of the Electron Localisation Function
   ! (ELF) density "g" for a series of points "pt" for using the ".natural
   ! orbitals".
      g  :: REALVEC, OUT
      pt :: REALMAT, IN
      self :: MOL*; self => saved_self
      .make_Tsirelson_ELF_grid(g,pt)
   end

   fermi_mobility_grid(g,pt) ::: selfless
   ! Work out the Luken's fermi mobility density on a series of grid points "g"
   ! using ".natural orbitals" and the ".occupation_numbers" vector. A Gnuplot
   ! ascii file is generated.
      g  :: REALVEC, OUT
      pt :: REALMAT, IN
      self :: MOL*; self => saved_self
      .make_fermi_mobility_grid(g,pt)
   end

   true_fermi_mobility_grid(g,pt) ::: selfless
   ! Work out the Luken's true fermi mobility density (the one using kinetic
   ! energy matrix elements) on a series of grid points "g" using ".natural
   ! orbitals" and the ".occupation_numbers" vector. A Gnuplot ascii file is
   ! generated.
      g  :: REALVEC, OUT
      pt :: REALMAT, IN
      self :: MOL*; self => saved_self
      .make_true_fermi_mobility_grid(g,pt)
   end

   electric_potential_grid(g,pt) ::: selfless
   ! Make the electric potential "pot_grid" on a series of points "pt"
      g  :: REALVEC, OUT
      pt :: REALMAT, IN
      self :: MOL*; self => saved_self
     .make_electric_potential_grid(g,pt)
   end

   stockholder_density_grid(g,pt) ::: selfless
   ! Work out the Hirshfeld stockholder density grid "g" for a series of points.
      g  :: REALVEC, OUT
      pt :: REALMAT, IN
      self :: MOL*; self => saved_self
      .make_stockholder_grid(g,pt)
   end

! ****************************
! Vibrationally averaged grids
! ****************************

   get_vib_averaged_rho_grid(density_grid)
   ! Set "density_grid" to the vibrationally averaged electron density grid.
   ! If the archive file exists, read it; otherwise make it.
      density_grid :: REALVEC
      arch :: ARCHIVE
      ENSURE(.grid.created,  "no grid")
      ENSURE(.atom.created,  "no atom list")
      ENSURE(.n_atom==2,"can only do diatomics")
      arch.set(.name,"vib_averaged_rho_grid")
      if (NOT arch.exists) .make_vib_averaged_rho_grid
      arch.read(density_grid)
   end

   make_vib_averaged_rho_grid
   ! Work out the averaged density on ".grid" using ".natural orbitals" and the
   ! ".occupation_numbers" vector. A Gnuplot ascii file is generated.
      arch :: ARCHIVE
      density_grid :: REALVEC*
      ENSURE(.grid.created,  "no grid")
      ENSURE(.atom.created,  "no atom list")
      ENSURE(.basis_info_made, "no basis info")
      ENSURE(.n_atom==2,"can only do diatomics")
      .move_origin_to_centre_of_mass
      density_grid.create(.grid.n_pt)
      .integrate_rho_grid(density_grid,-FOUR,FOUR,TOL(4))
      arch.set(.name,"vib_averaged_rho_grid")
      arch.write(density_grid)
      arch.set(.name,"vib_averaged_rho_grid",format="ascii")
      arch.write_gnuplot(density_grid, .grid.n_x, .grid.n_y, .grid.n_z)
      density_grid.destroy
   end

   integrate_rho_grid(res,a,b,accuracy,fa0,fb0) ::: recursive
   ! Integrate the rho grid between the limits "a" and "b" using adaptive
   ! trapezoidal rule with Simpsons approximation.  If present, "accuracy"
   ! is the required accuracy of the integral. If present, "fa0" and
   ! "fb0" are the value of the rho_grid at "a" and "b" respectively.
   ! size of "res" is .grid.n_pt.
      a,b :: REAL
      accuracy :: REAL, optional
      fa0,fb0 :: REALVEC*, optional
      res :: REALVEC*
      fa,fb,fm,one_trap,two_trap,left,right :: REALVEC*
      n_pt :: INT
      same :: BIN
      tol,h,m :: REAL
      depth :: INT = 0
      ENSURE(.grid.created, "no grid")
      n_pt = .grid.n_pt
      depth = depth+1
      stdout.show("depth =",depth)
      tol = TOL(6)
      if (present(accuracy)) tol = accuracy
      h  = b-a
      m  = (a+b)/TWO
      if (present(fb0)) then; fb => fb0
      else;                   fb.create(n_pt); .make_rho_grid_at(b,fb)
      end
      if (present(fa0)) then; fa => fa0
      else;                   fa.create(n_pt); .make_rho_grid_at(a,fa)
      end
      fm.create(n_pt);    .make_rho_grid_at(m,fm)
      one_trap.create(n_pt)
      two_trap.create(n_pt)
      one_trap = h*(fa+fb)/TWO
      two_trap = h*(fa+TWO*fm+fb)/FOUR
      res = abs(one_trap-two_trap)
      same = maxval(res) < THREE*tol
      if (same AND depth>1) then
        res = (FOUR*two_trap - one_trap)/THREE
        two_trap.destroy
        one_trap.destroy
        fm.destroy
        fa.destroy
      else
        two_trap.destroy
        one_trap.destroy
        left.create(n_pt);  .integrate_rho_grid(left ,a,m,tol/TWO,fa0=fa,fb0=fm)
        right.create(n_pt); .integrate_rho_grid(right,m,b,tol/TWO,fa0=fm,fb0=fb)
        res = left + right
        right.destroy
        left.destroy
      end
      if (depth==1) fb.destroy
      depth = depth-1
   end

   make_rho_grid_at(q,rho)
   ! Work out the electron density on ".grid" using ".natural orbitals" and the
   ! ".occupation_numbers" vector at nuclear separation "q", where "q" is a
   ! dimensionless normal coordinate
   ! size or "rho" is .grid.n_pt.
      q :: REAL
      rho :: REALVEC
      pt :: REALMAT*
      re,w,mu, gamma,d,r, wt :: REAL
      n :: INT
      re = 2.0460259 ! N2
      w  = 2708      ! N2
      re = 1.3848617 ! H2
      w  = 4658      ! H2
      mu = .reduced_mass
      n = 1
      gamma = sqrt((w/WAVENUMBER_PER_HARTREE) &
                  * mu * MASS_OF_ELECTRON_PER_AMU ) ! This is gamma^(1/2)
      d = q/gamma ! d is the cartesian displacement in Bohr
      r = re + d  ! r is the actual separation of atoms in Bohr
      stdout.show("q =",q)
      stdout.show("d =",d)
      stdout.show("r =",r)
      stdout.show("g =",gamma)
      .atom(1).pos = ZERO
      .atom(2).pos = ZERO
      .atom(1).pos(3) = -r/TWO
      .atom(2).pos(3) = +r/TWO
      .move_origin_to_centre_of_mass
      .delete_scf_integrals
      .scf
      pt.create(.grid.n_pt,3); .grid.make_points(pt)
      .make_density_grid(rho,pt)
      pt.destroy
      wt = q.harmonic_vibrational_fn(n)
      wt = wt*wt
      rho = wt * rho
   end

   integrate_density_numerically
   ! Integrate the density numerically
      n_pts :: INT
      pt :: REALMAT*
      wt,rho :: REALVEC*
      n_e :: REAL
      ENSURE(.dftgrid.created, "no dftgrid info!")
      n_pts = .dftgrid.n_pts * .n_atom
      stdout.show("number of grid points = ", n_pts)
      pt.create(n_pts,3)
      wt.create(n_pts)
      rho.create(n_pts)
      .dftgrid.make_grid(pt,wt,.atom)
      .make_density_grid(rho,pt)
      n_e = sum(rho*wt)
      stdout.show("numerically integrated charge =",n_e)
      rho.destroy
      wt.destroy
      pt.destroy
   end

!   integrate_density_functional
!   ! Integrate some functional of the density and nabla density numerically
!   ! skw
!      n_pts :: INT
!      wt,rho,x,y,z :: REALVEC*
!      pt,nabla_rho :: REALMAT*
!      n_e,value :: REAL
!      ENSURE(.dftgrid.created, "no dftgrid info!")
!      n_pts = .dftgrid.n_pts * .n_atom
!      stdout.show("number of grid points = ", n_pts)
!      pt.create(n_pts,3)
!      wt.create(n_pts)
!      rho.create(n_pts)
!      nabla_rho.create(n_pts,3)
!      .dftgrid.make_grid(pt,wt,.atom)
!      .make_density_grid(rho,pt)
!      .make_nabla_density_grid(nabla_rho,pt)
!      x => pt(:,1); y => pt(:,2); z => pt(:,3)
!      n_e = sum(rho*wt)
!      value = sum(x*nabla_rho(:,1)*wt)
!      stdout.show("integrate(rho) =",n_e)
!      stdout.show("integrate(x*nabla_rho) =",value)
!      rho.destroy
!      nabla_rho.destroy
!      wt.destroy
!      pt.destroy
!   end

!*******************************************************************************
!                        Camp-King routines
!*******************************************************************************

!   camp_king(E_HF,E_K)
!   ! WARNING: the old matrices were removed, this routine needs to be examined
!   ! again ...
!   ! Uses .old_molecular_orbitals (lambda=0) and .molecular_orbitals (lambda=1)
!   ! to generate molecular orbitals at optimal lambda.  These overwrite
!   ! .molecular_orbitals.
!   ! E_HF and E_K are only changed if the orbitals are changed.
!   ! Can do restricted case only.
!     E_HF,E_K :: REAL, INOUT
!     F_backup,MO_backup,P_backup :: OPMATRIX*
!     old_MO,new_MO,old_F,old_P :: REALMAT*
!     Uh,V,W,U,CV,CW,S,Q,Q1,F,Cj,Cj1,Cl :: REALMAT*
!     theta :: REALVEC*
!     minpq,n,n_p,n_q,i,k,j :: INT
!     ded0,ded1,ded1a,lambda,El :: REAL
!     tol,diis0,diis1,diisl :: REAL
!     ENSURE(.fock_matrix.spinorbital_kind=="restricted","only for restricted for now")
!
!     .scfdata.camp_king_iters=0
!     F_backup.create_copy(.fock_matrix)
!     MO_backup.create_copy(.molecular_orbitals)
!     P_backup.create_copy(.density_matrix)
!     .make_diis_error(diis1)
!
!     .unarchive_fock_matrix(archive_name="old_fock_matrix")
!     old_F  => .fock_matrix.restricted
!     .unarchive_molecular_orbitals(archive_name="old_molecular_orbitals")
!     old_MO => .molecular_orbitals.restricted
!     .unarchive_density_matrix(archive_name="old_density_matrix")
!     old_P  => .density_matrix.restricted
!     .make_diis_error(diis0)
!
!     .fock_matrix        => F_backup
!     .molecular_orbitals => MO_backup
!     new_MO              => .molecular_orbitals.restricted
!     .density_matrix     => P_backup
!
!     if (diis1 < 0.95*diis0) then
!       old_F.destroy
!       old_P.destroy
!       old_MO.destroy
!       return ! the new orbitals are better than the old.
!     end
!
!     n_p = .n_e/2
!     n_q = .n_bf - n_p
!     minpq = min(n_p,n_q)
!
!     Q.create(.n_bf,.n_bf)
!     Q = old_MO                                  ! Q is an orthogonal basis.
!
!     Q1.create(.n_bf,.n_bf)                      ! Get inverse of Q, store in Q1.
!     S.create(.n_bf,.n_bf)
!     .get_overlap_matrix(S)
!     Q1.to_product_of(Q,S,transpose_a=TRUE)
!     S.destroy
!
!     Cj.create(.n_bf,.n_bf)                      ! Convert the MOs into Q basis.
!     Cj1.create(.n_bf,.n_bf)
!     Cj.to_product_of(Q1,old_MO)
!     Cj1.to_product_of(Q1,new_MO)
!     Q1.destroy
!
!     V.create(.n_bf,.n_bf)
!     W.create(.n_bf,.n_bf)
!     theta.create(minpq)
!     U.create(.n_bf,.n_bf)
!     U.to_product_of(Cj,Cj1)                        ! eqn 8
!     V=Cj1
!     W=Cj1
!     U.make_corresponding_orbitals(V,W,theta,n_p)
!     U.destroy
!
!     CV.create(.n_bf,.n_bf)
!     CW.create(.n_bf,.n_bf)
!     CV.to_product_of(Cj,V)                         ! eqn 11
!     CW.to_product_of(Cj1,W)                        ! eqn 12
!     W.destroy
!     V.destroy
!     Cj1.destroy
!     Cj.destroy
!
!     F.create(.n_bf,.n_bf)
!     !get de/dl at l=1
!     F=F_backup.restricted                          ! Fbar at lambda=1
!     F.change_basis(Q)                              ! F = Q^t Fbar Q
!     F.change_basis(CW)                             ! eqn 28.
!     CW.destroy
!     ded1 = ZERO
!     do n=1,n_p
!       ded1 = ded1 + theta(n)*F(n+n_p,n)
!     end
!     ded1 = -FOUR * ded1
!
!     !get de/dl at l=0
!     F=old_F                                        ! Fbar at lambda=0
!     F.change_basis(Q)                              ! F = Q^t Fbar Q
!     F.change_basis(CV)                             ! eqn 27.
!     ded0 = ZERO
!     do n=1,n_p
!       ded0 = ded0 + theta(n)*F(n+n_p,n)
!     end
!     ded0 = -FOUR * ded0
!     F.destroy
!
!     .scfdata.camp_king_iters=0
!     if (abs(ded1) > TEN*abs(ded0)) then
!       lambda = 0.1
!     else
!       lambda = HALF
!     end
!     .old_fock_matrix.minus(.old_constraint_matrix)
!     .minimise_Camp_King_lambda(lambda,ded0,ded1a,Q,CV,theta,n_p,diis0)
!     .make_diis_error(diisl)
!     if (diisl < 0.95*diis1 OR abs(ded1a) < abs(ded1)) then
!       Uh.create(.n_bf,.n_bf)
!       .make_Camp_King_U_hat(Uh,lambda,theta)
!       Cl.create(.n_bf,.n_bf)
!       Cl.to_product_of(CV,Uh)
!       Uh.destroy
!       .molecular_orbitals.restricted.to_product_of(Q,Cl)
!       Cl.destroy
!       .schmidt_orthonormalise(.molecular_orbitals)
!       .make_scf_density_matrix(damp=FALSE)
!       .make_structure_factors
!       .scfdata.set(crystal=.crystal)
!
!       .make_fock_matrix
!       if (.scfdata.kind == "xray_rhf") then
!         E_HF = .scf_energy
!         E_K = .kinetic_energy
!         .add_constraint
!       else
!         E_HF = .scf_energy
!         E_K = .kinetic_energy
!       end
!     else
!       .fock_matrix.set_to(F_backup)
!       .molecular_orbitals.set_to(MO_backup)
!       .density_matrix.set_to(P_backup)
!     end
!     .old_fock_matrix.plus(.old_constraint_matrix)
!
!     CV.destroy
!     theta.destroy
!     Q.destroy
!     F_backup.destroy
!     P_backup.destroy
!     MO_backup.destroy
!   end
!
!   minimise_Camp_King_lambda(lambda,ded0,dedx,Ql,CV,theta,n_p,diis0) ::: private
!   !
!     ded0,diis0 :: REAL, IN
!     lambda,tol,dedx :: REAL
!     n_p :: INT, IN
!     Ql,CV :: REALMAT
!     theta :: REALVEC
!      i :: INT
!     a,b,d,d1,d2,du,dv,dw,dx,e,fu,fv,fw,fx,olde,tol1,tol2,u,u1,u2,v,w,x,xm :: REAL
!     diisl :: REAL
!     ok1,ok2 :: BIN
!
!     tol=0.1
!     a=ZERO
!     if (ded0>0) a=-0.2
!     b=ONE
!     v=lambda
!     w=lambda
!     x=lambda
!     e=ZERO
!     d=ZERO
!     .get_Camp_King_energy(x,fx,dx,Ql,CV,theta,n_p,diisl)
!     fv=fx
!     fw=fx
!     dv=dx
!     dw=dx
!     .scfdata.camp_king_iters=0
!     do i=1,100
!       .scfdata.camp_king_iters=.scfdata.camp_king_iters+1
!       xm=HALF*(a+b)
!       tol1=tol*abs(x)+TOL(10)
!       tol2=TWO*tol1
!!       if (diisl < diis0) exit
!       if (abs(x-xm)<=(tol2-HALF*(b-a))) exit
!       if (abs(e)>tol1) then
!         d1=TWO*(b-a)
!         d2=d1
!         if (dw /= dx) d1=(w-x)*dx/(dx-dw)
!         if (dv /= dx) d2=(v-x)*dx/(dx-dv)
!         u1=x+d1
!         u2=x+d2
!         ok1=((a-u1)*(u1-b)>ZERO) AND (dx*d1 <=ZERO)
!         ok2=((a-u2)*(u2-b)>ZERO) AND (dx*d2 <=ZERO)
!         olde=e
!         e=d
!
!         if (ok1 OR ok2) then
!           if (ok1 AND ok2) then
!             if (abs(d1)<abs(d2)) then; d=d1
!             else;                      d=d2
!             end
!           else
!             if (ok1) then; d=d1
!             else;          d=d2
!             end
!           end if
!           if (abs(d)<=abs(HALF*olde)) then
!             u=x+d
!             if (u-a <tol2 OR b-u <tol2) d=sign(tol1,xm-x)
!           else
!             if (dx<=ZERO) then; e=a-x
!             else;               e=b-x
!             end
!             d=HALF*e
!           end if
!         else
!           if (dx>=ZERO) then; e=a-x
!           else;               e=b-x
!           end
!           d=HALF*e
!         end if
!       else
!         if (dx>=ZERO) then; e=a-x
!         else;               e=b-x
!         end
!         d=HALF*e
!       end if
!       if (abs(d)>=tol1) then
!         u=x+d
!         .get_Camp_King_energy(u,fu,du,Ql,CV,theta,n_p,diisl)
!       else
!         u=x+sign(tol1,d)
!         .get_Camp_King_energy(u,fu,du,Ql,CV,theta,n_p,diisl)
!         if (fu > fx) exit
!       end if
!       if (fu <= fx) then
!         if (u >= x) then
!           a=x
!         else
!           b=x
!         end if
!         v=w; fv=fw; dv=dw
!         w=x; fw=fx; dw=dx
!         x=u; fx=fu; dx=du
!       else
!         if (u < x) then
!           a=u
!         else
!           b=u
!         end if
!         if (fu <=fw OR w ==x) then
!           v=w; fv=fw; dv=dw
!           w=u; fw=fu; dw=du
!         else if (fu <=fv OR v ==x OR v ==w) then
!           v=u; fv=fu; dv=du
!         end if
!       end if
!       if (abs(fv-fw) < .scfdata.convergence AND abs(fv-fx) < .scfdata.convergence) then
!         exit
!       end
!     end do
!     lambda = x
!     dedx=dx
!   end
!
!   get_Camp_King_energy(lambda,El,dedl,Q,CV,theta,n_p,diisl) ::: private
!   !
!     Q,CV :: REALMAT, IN
!     theta :: REALVEC, IN
!     n_p :: INT, IN
!     constraint :: OPMATRIX*
!     lambda,El,dedl,diisl :: REAL
!     Uh,Cl,F :: REALMAT*
!      n :: INT
!     Uh.create(.n_bf,.n_bf)
!     .make_Camp_King_U_hat(Uh,lambda,theta)
!     Cl.create(.n_bf,.n_bf)
!     Cl.to_product_of(CV,Uh)                          ! C(lambda) = C^j V Uh(lambda)
!     Uh.destroy
!     .molecular_orbitals.restricted.to_product_of(Q,Cl) ! Cbar(lambda) = Q C(lambda)
!     .schmidt_orthonormalise(.molecular_orbitals)
!     .make_scf_density_matrix(damp=FALSE)
!     .make_structure_factors
!     .make_fock_matrix
!     if (.scfdata.kind == "xray_rhf") then
!       El = .scf_energy + .scfdata.lambda * .crystal.F_chi2
!       .add_constraint
!     else
!       El = .scf_energy
!     end
!     .make_diis_error(diisl)
!     F.create(.n_bf,.n_bf)
!     F=.fock_matrix.restricted                      ! Fbar at lambda in AO basis.
!     F.change_basis(Q)
!     F.change_basis(Cl)
!     Cl.destroy
!     dedl = ZERO
!     do n=1,n_p
!       dedl = dedl + theta(n)*F(n+n_p,n)
!     end
!     dedl = -FOUR * dedl
!     F.destroy
!   end
!
!   make_Camp_King_U_hat(Uh,lambda,theta) ::: private
!   !
!     self :: IN
!     Uh :: REALMAT, target
!     lambda :: REAL, IN
!     theta :: REALVEC, IN
!     sin_theta,cos_theta :: REALVEC*
!     Uh_pp,Uh_qq,Uh_qp,Uh_pq :: REALMAT*
!     minpq,maxpq,n_p,n_q,m,n :: INT
!     ok :: BIN
!
!     ok = size(Uh,1)==.n_bf AND size(Uh,2)==.n_bf
!     n_p = ceiling(.n_e/TWO)
!     n_q = .n_bf - n_p
!     minpq = min(n_p,n_q)
!     maxpq = max(n_p,n_q)
!     m=n_p-minpq
!     n=n_q-minpq
!     ENSURE(ok,"incorrect dimensions for Uh matrix")
!     DIE_IF(size(theta)/=minpq,"incorrect dimensions for theta array")
!
!     sin_theta.create(minpq)
!     cos_theta.create(minpq)
!     sin_theta = sin(theta*lambda)
!     cos_theta = cos(theta*lambda)
!
!     Uh=ZERO
!     Uh_pp => Uh(:n_p,:n_p)
!     Uh_qq => Uh(n_p+1:,n_p+1:)
!     Uh_qp => Uh(n_p+1:,:n_p)
!     Uh_pq => Uh(:n_p,n_p+1:)
!
!     Uh_pp(:minpq,:minpq).from_diagonal(cos_theta)
!     Uh_qq(:minpq,:minpq).from_diagonal(cos_theta)
!
!     Uh_qp(:minpq,:minpq).from_diagonal(-sin_theta)
!     Uh_pq(:minpq,:minpq).from_diagonal(sin_theta)
!
!     if (m>0) then ! do p-m:p block
!       Uh_pp(minpq+1:,minpq+1:).to_unit_mat
!     else if (n>0) then ! do p+q-n:p+q block
!       Uh_qq(minpq+1:,minpq+1:).to_unit_mat
!     end
!
!     cos_theta.destroy
!     sin_theta.destroy
!   end
!
!   dynamic_damp(E_HF,E_K)
!   ! Increase the damp factor until the new density matrix gives better results
!   ! than the previous one.  Good for difficult convergence.
!   ! E_HF and E_K are only changed if the orbitals are changed.
!     E_HF,E_K :: REAL, INOUT
!     F_backup,MO_backup,P_backup :: OPMATRIX*
!     theta :: REALVEC*
!      n :: INT
!     diis0,diis1,diisl,damp,delta_damp,E0,E1,El,mix :: REAL
!     chi2 :: REAL
!
!     chi2=ZERO
!
!     F_backup.create_copy(.fock_matrix)
!     MO_backup.create_copy(.molecular_orbitals)
!     P_backup.create_copy(.density_matrix)
!     ! .fock_matrix contains .constraint_matrix
!     ! .old_fock_matrix contains .old_constraint_matrix
!
!     ! Get DIIS error and energy for new density
!     .make_diis_error(diis1)
!     if (.scfdata.kind == "xray_rhf") then
!       ! Remove the constraint matrix from the new fock matrix.
!       F_backup.minus(.constraint_matrix)
!       .fock_matrix.set_to(F_backup)
!       .make_structure_factors
!       chi2 = .crystal.F_chi2
!     end
!     E1 = .scf_energy + .scfdata.lambda * chi2
!
!     ! Get DIIS error and energy for old density
!     .fock_matrix.set_to(.old_fock_matrix)
!     .density_matrix.set_to(.old_density_matrix)
!     .make_diis_error(diis0)
!     if (.scfdata.kind == "xray_rhf") then
!       ! Remove the constraint matrix from the old fock matrix.
!       .old_fock_matrix.minus(.old_constraint_matrix)
!       .fock_matrix.set_to(.old_fock_matrix)
!       .make_structure_factors
!       chi2 = .crystal.F_chi2
!     end
!     E0 = .scf_energy + .scfdata.lambda * chi2
!
!     ! .fock_matrix does not contain .constraint_matrix
!     ! .old_fock_matrix does not contain .old_constraint_matrix
!
!     if (diis1<TEN*diis0) then
!       .fock_matrix.set_to(F_backup)
!       .molecular_orbitals.set_to(MO_backup)
!       .density_matrix.set_to(P_backup)
!       if (.scfdata.kind == "xray_rhf") then
!         ! reinsert contraint matrices
!         F_backup.plus(.constraint_matrix)
!         .old_fock_matrix.plus(.old_constraint_matrix)
!         .make_structure_factors
!       end
!       P_backup.destroy
!       MO_backup.destroy
!       F_backup.destroy
!       return ! the new orbitals are better than the old.
!     end
!
!     mix = 0.9 ! How much of the new, not the old.
!     do n=1,15
!       .density_matrix.set_to(P_backup)
!       .fock_matrix.set_to(F_backup)
!       .density_matrix.damp(.old_density_matrix,ONE-mix)
!       .fock_matrix.damp(.old_fock_matrix,ONE-mix)
!       E_HF = .scf_energy
!       if (.scfdata.kind == "xray_rhf") then
!         .make_structure_factors
!         .add_constraint
!         El = E_HF + .scfdata.lambda * .crystal.F_chi2
!       else
!         El = E_HF
!       end
!       .make_diis_error(diisl)
!       .scfdata.dynamic_damp_factor = ONE-mix
!       if (diisl<TEN*diis0) exit
!       mix = HALF * mix
!     end
!     E_K = .kinetic_energy ! move this outside of loop
!     .make_structure_factors
!     F_backup.destroy
!     P_backup.destroy
!     MO_backup.destroy
!   end

! *********************
! Roby analysis methods
! *********************

   roby_analysis ::: leaky
   ! Do one of the many kind of Roby population analysis
     allowed_kind :: BIN
   ENSURE(.roby.created,"no robydata= supplied")
   ENSURE(.density_matrix.created,"no density")
     allowed_kind =  .density_matrix.spinorbital_kind=="restricted" &
                  OR .density_matrix.spinorbital_kind=="unrestricted"
   ENSURE(allowed_kind,"only restricted or unrestricted densities are allowed")
     .get_ANO_data
     select case (.roby.kind)
         case("atom_bond_analysis     "); .roby.atom_bond_analysis
         case("atom_shared_population "); .roby.atom_shared_population
         case("atom_pair_populations  "); .roby.atom_pair_populations
         case("atom_populations       "); .roby.atom_populations
         case("group_bond_analysis    "); .roby.group_bond_analysis
         case("group_shared_population"); .roby.group_shared_population
         case("group_pair_populations "); .roby.group_pair_populations
         case("group_populations      "); .roby.group_populations
        case default;                UNKNOWN(.roby.kind)
     end
   end

!  ********************
!  ANO control routines
!  ********************

   get_ANO_data ::: leaky
   ! Get the restricted atomic natural orbitals (ANO) data for all atoms in the
   ! molecule, from an archive. If it is not there, then make it and archive it.
      k,u,j :: INT
   ENSURE(.unique_atom.created,"no unique atom list")
      .destroy_ANO_data
      do k = 1,.n_atom_kind ! Get ANO data only for unique atoms
        u = .unique_atom(k)
        .get_ANO_data_for_atom(u)
        do j = u+1,.n_atom
           if (.atom_kind(j)/=k) cycle
           .atom(j).density_matrix     => .atom(u).density_matrix
           .atom(j).natural_orbitals   => .atom(u).natural_orbitals
           .atom(j).occupation_numbers => .atom(u).occupation_numbers
        end
      end
   end

   get_ANO_data_for_atom(a) ::: leaky
   ! Get the restricted atomic natural orbitals (ANO) data for atom "a" from an
   ! archive. If the archive is not there then make it.
     a :: INT
     mol :: MOL*
     n_no :: INT
     output :: BIN
     ENSURE(.atom(a).natural_orbitals.destroyed,"NO's exist, atom "//trim(a.to_str))
     ENSURE(.atom(a).occupation_numbers.destroyed,"occupations exist, atom "//trim(a.to_str))
     ENSURE(.atom(a).density_matrix.destroyed,"density exists, atom "//trim(a.to_str))
     mol.create
     .make_molecule_from_atom(a,mol)
     if (mol.archive_doesnt_exist("natural_orbitals","restricted")) &
       .make_ANO_data_for_atom(a)
     mol.unarchive_natural_orbitals(genre="restricted")
     mol.unarchive_occupation_numbers(genre="restricted")
     mol.unarchive_density_matrix(genre="restricted")
     .atom(a).natural_orbitals   => mol.natural_orbitals
     .atom(a).occupation_numbers => mol.occupation_numbers
     .atom(a).density_matrix     => mol.density_matrix
     mol.atom.nullify_ptr_part       ! do not destroy basis part
     nullify(mol.natural_orbitals)   ! do not destroy this
     nullify(mol.occupation_numbers) ! do not destroy this
     nullify(mol.density_matrix)     ! do not destroy this
     nullify(mol.basis)              ! do not destroy this
     nullify(mol.slaterbasis)        ! do not destroy this
     nullify(mol.coppensbasis)       ! do not destroy this
     mol.destroy
     output = FALSE
     if (NOT output) return
     n_no = .atom(a).no_of_occupied_NOs(tol=0.05d0)
     stdout.show("n_no=",n_no)
     .atom(a).put_natural_orbitals
   end

   make_ANO_data_for_atom(a)
   ! Make and archive the spherically averaged restricted atomic natural
   ! orbitals (ANO) and density matrix data for atom "a".
     a :: INT
     mol :: MOL*
     mol.create
     .make_molecule_from_atom(a,mol)
     mol.scfdata.output = FALSE
     mol.scfdata.direct = TRUE
     mol.scf
     mol.delete_scf_MO_archive
     mol.delete_scf_fock_archive
     mol.delete_old_scf_archives
     mol.delete_scf_integrals
     mol.make_ao_density_matrix
     mol.pointgroup.create("oh")
     mol.symmetrise(mol.density_matrix)
     mol.archive_density_matrix
     mol.make_natural_orbitals       ! ... and archive them
     mol.atom.nullify_basis_part     ! do not destroy basis part
     mol.atom.destroy_ptr_part       ! do not destroy basis part
     nullify(mol.basis)              ! do not destroy basis part
     nullify(mol.slaterbasis)        ! do not destroy this
     nullify(mol.coppensbasis)       ! do not destroy this
     mol.destroy
   end

   destroy_ANO_data ::: leaky
   ! Destroy the restricted atomic natural orbitals (ANO) data for
   ! all atoms in the molecule.
      k,u,j :: INT
      if (.unique_atom.destroyed) return
      do k = 1,.n_atom_kind ! Do an SCF for every different kind of atom
        u = .unique_atom(k)
        .atom(u).natural_orbitals.destroy
        .atom(u).occupation_numbers.destroy
        .atom(u).density_matrix.destroy
        nullify(.atom(u).natural_orbitals)
        nullify(.atom(u).occupation_numbers)
        nullify(.atom(u).density_matrix)
        .atom(u).energy = ZERO
        do j = u+1,.n_atom
           if (.atom_kind(j)/=k) cycle
           nullify(.atom(j).natural_orbitals)
           nullify(.atom(j).occupation_numbers)
           nullify(.atom(j).density_matrix)
           .atom(j).energy = ZERO
        end
      end
   end

!---------------------------------------------!
! Roby Energy and Shared Energy calculations  !
!---------------------------------------------!

!   roby_energy_analysis
!   ! directs the energy analysis of a diatomic
!    roby_atom :: INTVEC*
!    Ep_A, Ep_B, Ep_AB, E_A, E_B, E_AB :: REAL
!    a,b :: INT
!    .read_roby_atom(roby_atom)
!    ENSURE( size(roby_atom)==2, "Must supply a diatomic...")
!    a = roby_atom(1); b=roby_atom(2)
!    .put_roby_atom_energy( (/ a /) )
!    .put_roby_atom_energy( (/ b /) )
!    .put_roby_atom_energy( roby_atom )
!    Ep_A = .roby_atom_energy( (/a/))
!    Ep_B = .roby_atom_energy( (/b/))
!    Ep_AB = .roby_atom_energy( roby_atom)
!    E_A = .roby_total_atom_energy((/ a /), nuclei=roby_atom,output=TRUE)
!    E_B = .roby_total_atom_energy((/ b /), nuclei=roby_atom,output=TRUE)
!    E_AB = .roby_total_atom_energy(roby_atom, nuclei=roby_atom,output=TRUE)
!!    E_AB = .roby_atom_energy(roby_atom)
!    stdout.show( "Binding Energy: ", HALF * (E_A + E_B - E_AB + Ep_A + Ep_B - Ep_AB) )
!    .put_roby_shared_energy(roby_atom)
!    .put_roby_ionic_energy(roby_atom)
!    stdout.show("Nuclear potential for A:", .atom.nuclear_energy( (/ a /) ))
!    stdout.show("Nuclear potential for B:", .atom.nuclear_energy( (/ b /) ))
!    roby_atom.destroy
!   end
!
!   get_roby_shared_energy(roby_atom) result(se) ::: leaky
!   ! returns the shared energy of the atoms given in "roby_atom"
!   ! as well as the energy of all sub-groups of atoms "en_groups"
!     roby_atom :: INTVEC
!     se, energy_subgroup, en_groups :: REAL
!     m,k, n_k, n_roby_atom :: INT
!     comb_mat :: INTMAT*
!     n_roby_atom = size(roby_atom)
!     se = 0
!     do k = 1,n_roby_atom
!       n_k = n_roby_atom.choose(k)
!       comb_mat.create(k,n_k)
!       comb_mat = roby_atom.get_combination_matrix_from(k)
!       en_groups = 0
!       do m = 1,n_k
!         energy_subgroup = .roby_total_atom_energy(comb_mat(:,m),output=FALSE)
!         en_groups = en_groups + energy_subgroup
!       end
!       comb_mat.destroy
!       se = se - ((-1)**k)*en_groups
!     end
!   end
!
!   get_roby_ionic_energy(roby_atom, roby_atom2) result(ionic_energy) ::: leaky
!   ! returns the shared energy of the atoms given in "roby_atom"
!   ! as well as the energy of all sub-groups of atoms "en_groups"
!   roby_atom, roby_atom2 :: INTVEC
!   ionic_energy, energy_group1, energy_group2 :: REAL
!   ground1, ground2 :: REAL
!       energy_group1 = .roby_total_atom_energy(roby_atom,output=FALSE)
!       energy_group2 = .roby_total_atom_energy(roby_atom2,output=FALSE)
!       ground1 = sum(.atom(roby_atom).energy)
!       ground2 = sum(.atom(roby_atom2).energy)
!       stdout.flush
!       stdout.dash(real_fields=3)
!       stdout.put("Ground State Energy of Atom 1"); stdout.put(ground1)
!       stdout.flush
!       stdout.put("Ground State Energy of Atom 2"); stdout.put(ground2)
!       stdout.flush
!       stdout.dash(real_fields=3)
!       stdout.flush
!       ionic_energy = energy_group1 - energy_group2
!       ionic_energy = ionic_energy - ground1 + ground2
!   end
!
!   put_roby_shared_energy(atoms) ::: leaky
!   ! Evaluate and put the Roby shared energy for a group of atoms
!      atoms :: INTVEC, OPTIONAL
!      shared_energy :: REAL
!      roby_atom :: INTVEC*
!      if (PRESENT(atoms)) then
!          roby_atom.create(size(atoms))
!          roby_atom = atoms
!      else
!          .read_roby_atom(roby_atom)
!      end
!      shared_energy = .get_roby_shared_energy(roby_atom)
!      stdout.flush
!      stdout.dash(real_fields=3)
!      stdout.show("Shared energy =",shared_energy)
!      roby_atom.destroy
!   end
!
!   put_roby_ionic_energy(atoms) ::: leaky
!   ! Evaluate and put the Roby ionic energy for a group of atoms
!      atoms :: INTVEC, OPTIONAL
!      n_roby_atom :: INT
!      roby_atom :: INTVEC*
!      if (PRESENT(atoms)) then
!          roby_atom.create(size(atoms))
!          roby_atom = atoms
!      else
!          .read_roby_atom(roby_atom)
!      end
!      n_roby_atom = size(roby_atom)
!      ENSURE(n_roby_atom == 2, "current routine only for two atoms")
!      stdout.dash(real_fields=3)
!      stdout.show("Ionic Energy =", .get_roby_ionic_energy( roby_atom(1:1), roby_atom(2:2)))
!      stdout.flush
!      roby_atom.destroy
!   end
!
!   put_roby_atom_energy(atoms) ::: leaky
!   ! Evaluate and put the Roby ionic energy for a group of atoms
!      atoms :: INTVEC, OPTIONAL
!      n_roby_atom, i, a :: INT
!      roby_atom :: INTVEC*
!      E_T, E_P, E_A :: REAL
!      if (PRESENT(atoms)) then
!          roby_atom.create(size(atoms))
!          roby_atom = atoms
!      else
!          .read_roby_atom(roby_atom)
!      end
!      n_roby_atom = size(roby_atom)
!      stdout.dash(real_fields=3)
!      stdout.flush
!      stdout.text("Roby atom energy analysis:")
!      stdout.flush
!      stdout.dash(real_fields=3)
!      stdout.flush
!      stdout.text("Atoms =")
!      do i=1,n_roby_atom
!        a = roby_atom(i)
!        stdout.text(trim(.atom(a).label))
!      end
!      E_T = .roby_total_atom_energy(roby_atom)
!      E_P = .roby_atom_energy(roby_atom)
!      E_A = E_T/2 + E_P/2
!      stdout.flush
!      stdout.show("Atom Total Energy =", E_T)
!      stdout.flush
!      stdout.show("Promoted Atom Energy =", E_P)
!      stdout.flush
!      stdout.show("Partitioned Atom Energy =", E_A)
!      stdout.flush
!      stdout.dash(real_fields=3)
!      stdout.flush
!      roby_atom.destroy
!   end
!
!   roby_atom_energy(roby_atom) result(energy) ::: leaky
!   ! Return the Roby promoted atom energy for the group of atoms whose
!   ! indices are given in "roby_atom".
!      roby_atom :: INTVEC
!      energy :: REAL
!      D,D_save :: OPMATRIX*
!      P, Q :: REALMAT*
!      D_save => .density_matrix
!      P.create(.n_bf, .n_bf)
!      if (.mult/=1) then
!        Q.create(.n_bf, .n_bf)
!        .make_roby_projected_density(P,roby_atom,.density_matrix.alpha)
!        .make_roby_projected_density(Q,roby_atom,.density_matrix.beta)
!        D.create(.n_bf,"unrestricted")
!        D.alpha = P        ! P is projected density
!        D.beta = Q         ! P is projected density
!        Q.destroy
!      else
!        D.create(.n_bf,"restricted")
!        .make_roby_projected_density(P,roby_atom)
!        D.restricted = P        ! P is projected density
!      end
!      .density_matrix => D
!      .make_fock_matrix(core=FALSE)
!      if (.mult/=1) then
!          .add_core_hamiltonian(.fock_matrix.beta, roby_atom)
!          .add_core_hamiltonian(.fock_matrix.alpha, roby_atom)
!      else
!          .add_core_hamiltonian(.fock_matrix.restricted, roby_atom)
!      end
!      energy = .scf_electronic_energy(D,roby_atom) + .atom(roby_atom).nuclear_energy
!      .density_matrix => D_save
!      D.destroy
!      P.destroy
!   end
!
!   roby_total_atom_energy(roby_atom, nuclei, output) result(energy) ::: leaky
!   ! Return the total Roby energy for the group of atoms whose
!   ! indices are given in "roby_atom" If output is present and false energy breakdown
!   ! output is suppressed. If nuclei is given then only the nuclei specified
!   ! are used for E_N and N_N and N_E interactions, and the projected atoms specified by nuclei for the E_E
!   ! repulsions
!      roby_atom :: INTVEC
!      nuclei :: INTVEC, optional
!      output :: BIN, optional
!      do_output :: BIN
!      energy, E_k, Na_Em, Na_Ea, Ea_Nm, Ea_Em, Ea_Ea :: REAL
!      Pa, Pb, Za, Zm, T :: REALMAT*
!      D, D_save :: REALMAT*
!      do_output=TRUE
!      if (present(output)) do_output=output              ! puts out the energies and sub-energies and all that
!      T.create(.n_bf, .n_bf); Pa.create(.n_bf, .n_bf)
!      Za.create(.n_bf, .n_bf); Zm.create(.n_bf, .n_bf)
!      if (present(nuclei)) then
!         .make_nuclear_matrix(Zm,nuclei)   ! The e->n attractions of the atoms electrons for the "nuclei"
!      else
!         .make_nuclear_matrix(Zm)          ! The e->n attractions of the atoms electrons for all the nuclei
!      end
!      .make_nuclear_matrix(Za,roby_atom)   ! The n->e attractions felt by the nuclei in the roby atom
!      .make_kinetic_matrix(T)              ! The electronic kinetic energy matrix
!      if (.mult/=1) then
!        Pb.create(.n_bf, .n_bf)
!        if (present(nuclei)) then          ! if we only want to look at interactions with subgroups of the molecule
!          D_save => .density_matrix.alpha  ! store the "real" density matrix of the molecule
!          D => .density_matrix.beta
!          .make_roby_projected_density(Pa,nuclei,.density_matrix.alpha)
!          .make_roby_projected_density(Pb,nuclei,.density_matrix.beta)
!          .density_matrix.alpha => Pa      ! replace the "real" density matrix with the projected "nuclei"
!          .density_matrix.beta => Pb
!          .make_fock_matrix(core=FALSE)    ! calculate e-e repulsions for all electrons in projected "nuclei"
!          !Na_Em = Za.trace_of_product(.density_matrix.alpha) + Za.trace_of_product(.density_matrix.beta)
!          Na_Em = .density_matrix.alpha.trace_of_product(Za) + .density_matrix.beta.trace_of_product(Za)
!                                           ! calculate n-e repulsions for all electrons in projected "nuclei"
!                                           ! and nuclei in "roby_atom"
!          .density_matrix.alpha => D_save  ! restore "real" density matrix
!          .density_matrix.beta => D
!        else
!          .make_fock_matrix(core=FALSE)    ! calculate e-e repulsions for all electrons in molecule
!        ! Na_Em = Za.trace_of_product(.density_matrix.alpha) + Za.trace_of_product(.density_matrix.beta)
!          Na_Em = .density_matrix.alpha.trace_of_product(Za) + .density_matrix.beta.trace_of_product(Za)
!                                           ! calculate e-e repulsions for all electrons in molecule with roby_atom
!        end
!        D_save => .density_matrix.alpha    ! save "real" density matrix
!        D => .density_matrix.beta
!        .make_roby_projected_density(Pa,roby_atom,.density_matrix.alpha)
!        .make_roby_projected_density(Pb,roby_atom,.density_matrix.beta )
!        Ea_Em = .fock_matrix.alpha.trace_of_product(Pa) + .fock_matrix.beta.trace_of_product(Pb)
!        E_k = T.trace_of_product(Pa) + T.trace_of_product(Pb)     ! calculate Kinetic Energy for "roby_atom" electrons
!        Na_Ea = Za.trace_of_product(Pa) + Za.trace_of_product(Pb) ! calculate Nuclear -> electron energy  (A->A)
!        Ea_Nm = Zm.trace_of_product(Pa) + Zm.trace_of_product(Pb) ! calculate Nuclear -> electron energy  (M->A)
!        .density_matrix.alpha => Pa        ! set "real" density matrix to be the projected atoms "roby_atom"
!        .density_matrix.beta => Pb
!        .make_fock_matrix(core=FALSE)      ! calculate repulsions within the "roby_atom"
!        Ea_Ea = .fock_matrix.alpha.trace_of_product(Pa) + .fock_matrix.beta.trace_of_product(Pb)
!        Ea_Em = Ea_Em - Ea_Ea/2            ! subtract 1/2 of the internal atom repulsions for double up
!        .density_matrix.alpha => D_save
!        .density_matrix.beta => D          ! reset "real" density matrix
!        Pb.destroy
!      else
!        if (present(nuclei)) then             ! to look at the energy of the atom in the field of only certain atoms "nuclei"
!          D_save => .density_matrix.restricted          ! save the "real" density matrix
!          .make_roby_projected_density(Pa,nuclei)   ! reset the "real" density matrix to a projected density
!          .density_matrix.restricted => Pa
!          Na_Em = Za.trace_of_product(.density_matrix.restricted)
!          .make_fock_matrix(core=FALSE)      ! no core and for the whole molecule
!          .density_matrix.restricted => D_save
!        else
!          Na_Em = Za.trace_of_product(.density_matrix.restricted)
!          .make_fock_matrix(core=FALSE)
!        end
!        D_save => .density_matrix.restricted
!        .make_roby_projected_density(Pa,roby_atom)
!        Ea_Em = .fock_matrix.restricted.trace_of_product(Pa)
!        Na_Ea = Za.trace_of_product(Pa)
!        Ea_Nm = Zm.trace_of_product(Pa)
!        E_k = T.trace_of_product(Pa)
!        .density_matrix.restricted => Pa
!        .make_fock_matrix(core=FALSE)      ! no core and for the whole molecule
!        Ea_Ea = .fock_matrix.restricted.trace_of_product(Pa)
!        Ea_Em = Ea_Em - Ea_Ea/2
!        .density_matrix.restricted => D_save
!      end
!      energy = Na_Em + E_k + Ea_Em + Ea_Nm - Na_Ea
!      if (present(nuclei)) then
!        energy = energy + .atom.nuclear_energy(roby_atom,nuclei)
!      else
!        energy = energy + .atom.nuclear_energy(roby_atom)
!      end
!      if (do_output) then
!       stdout.dash(real_fields=3)
!       stdout.show("N_a to E_m:",Na_Em)
!       stdout.show("N_a to E_a:",Na_Ea)
!       stdout.show("E_a to N_m:",Ea_Nm)
!       stdout.show("E_a to E_m:",Ea_Em)
!       stdout.show("N_a to N_m:", .atom.nuclear_energy(roby_atom))
!       stdout.show("Kinetic Energy:", E_k)
!       stdout.show("Total Energy:", energy)
!       stdout.dash(real_fields=3)
!      end
!      Pa.destroy
!   end

!-----------------------------------------!
! Plot covalent and ionic theta orbitals  !
!-----------------------------------------!

!   plot_roby_orbitals
!   ! Plots the covalent and ionic orbitals to a grid
!   roby_atom, roby_atom1, roby_atom2 :: INTVEC*
!     .read_roby_groups(roby_atom,roby_atom1,roby_atom2)
!     .plot_cos_sin_orbitals(roby_atom, roby_atom1, roby_atom2)
!     roby_atom.destroy
!     roby_atom1.destroy
!     roby_atom2.destroy
!   end
!
!   plot_cos_sin_orbitals(roby_atom, roby_atom1, roby_atom2)
!   ! Plots the cos and sin Roby-Gould orbitals
!   ! -----------------------------------------
!      roby_atom, roby_atom1, roby_atom2 :: INTVEC
!      C, theta_c, S, theta_s :: REALMAT*
!      cval, sval :: REALVEC*
!      c_pair, s_pair, cs_pair :: INTVEC*
!      n_a, n_b, n_ab :: INT
!      i, j, k, kk :: INT
!      proj_COs, proj_SOs, saved_NOs :: OPMATRIX*
!      arch :: ARCHIVE
!      gr :: REALVEC*
!      pi_space, blurb :: BIN
!   ! -----------------------------------------
!      blurb = TRUE
!      DIE_IF(.grid.destroyed, "no grid exists")
!      DIE_IF(.mult/=1, "multiplicity /= 1")
!      DIE_IF(.natural_orbitals.number_kind /= "real","NOs not real")
!      n_a = .atom(roby_atom1).n_bf
!      n_b = .atom(roby_atom2).n_bf
!      n_ab = .atom(roby_atom).n_bf
!      DIE_IF(n_ab /= n_a + n_b, "n-ab /= n_a + n_b")
!      C.create(n_ab,n_ab); theta_c.create(n_ab, n_ab); cval.create(n_ab)
!      S.create(n_ab,n_ab); theta_s.create(n_ab, n_ab); sval.create(n_ab)
!      .make_shared_operator(C)
!      .make_ionic_operator(S)
!      .diagonalise_V_AB_operator(C,roby_atom,theta_c,cval)
!      .diagonalise_V_AB_operator(S,roby_atom,theta_s,sval)
!      c_pair.create(n_ab); s_pair.create(n_ab); cs_pair.create(n_ab)
!      .find_pairs(cval, sval, c_pair,s_pair,cs_pair)
!      .put_roby_eigenvalues(roby_atom1,roby_atom2,sval,cval,c_pair,s_pair,cs_pair,blurb)
!      saved_NOs => .natural_orbitals
!      gr.create(.grid.n_pt)
!      proj_COs.create( .n_bf, "restricted")
!      proj_SOs.create( .n_bf, "restricted")
!      .AO_subspace_set(proj_COs.restricted, theta_c, roby_atom)
!      .AO_subspace_set(proj_SOs.restricted, theta_s, roby_atom)
!      pi_space = TRUE
!      do i = 1, n_ab
!        stdout.flush; stdout.put("i,c_pair(i),s_pair(i),cs_pair(i) = ")
!        stdout.put(i); stdout.put(c_pair(i)); stdout.put(s_pair(i)); stdout.put(cs_pair(i))
!        j = cs_pair(i)
!        if (j < 0) cycle
!        stdout.put("cs_pair(i) >= 0")
!        if (pi_space AND s_pair(j) == -1) then
!           ! sin: pi/2
!           stdout.flush; stdout.put("pi/2")
!           k = j
!           kk = i
!           .natural_orbitals => proj_SOs
!           .make_orbital_grid(gr,k)
!           arch.set(.name,"sin_pi_grid")
!           arch.write(gr)
!           arch.set(.name,"sin_pi_grid"//trim(kk.to_str)//"",format="ascii")
!           arch.write_gnuplot(gr, .grid.n_x, .grid.n_y, .grid.n_z)
!        end
!        if (s_pair(j) > -1) then
!           stdout.flush; stdout.put("other")
!           ! cos: +
!           k = i
!           kk = k
!           .natural_orbitals => proj_COs
!           .make_orbital_grid(gr,k)
!           arch.set(.name,"cos_orbital_grid")
!           arch.write(gr)
!           arch.set(.name,"cos_orbital_grid"//trim(kk.to_str)//"",format="ascii")
!           arch.write_gnuplot(gr, .grid.n_x, .grid.n_y, .grid.n_z)
!           ! cos: -
!           k = c_pair(i)
!           kk = k
!           .make_orbital_grid(gr,k)
!           arch.set(.name,"cos_orbital_grid")
!           arch.write(gr)
!           arch.set(.name,"cos_orbital_grid"//trim(kk.to_str)//"",format="ascii")
!           arch.write_gnuplot(gr, .grid.n_x, .grid.n_y, .grid.n_z)
!           ! sin: +
!           k = j
!           kk = i
!           .natural_orbitals => proj_SOs
!           .make_orbital_grid(gr,k)
!           arch.set(.name,"sin_orbital_grid")
!           arch.write(gr)
!           arch.set(.name,"sin_orbital_grid"//trim(kk.to_str)//"",format="ascii")
!           arch.write_gnuplot(gr, .grid.n_x, .grid.n_y, .grid.n_z)
!           ! sin: -
!           k = s_pair(j)
!           kk = c_pair(i)
!           .make_orbital_grid(gr,k)
!           arch.set(.name,"sin_orbital_grid")
!           arch.write(gr)
!           arch.set(.name,"sin_orbital_grid"//trim(kk.to_str)//"",format="ascii")
!           arch.write_gnuplot(gr, .grid.n_x, .grid.n_y, .grid.n_z)
!        end
!      end
!      .natural_orbitals => saved_NOs
!      gr.destroy
!      proj_COs.destroy
!      proj_SOs.destroy
!      C.destroy; theta_c.destroy; cval.destroy
!      S.destroy; theta_s.destroy; sval.destroy
!      c_pair.destroy; s_pair.destroy; cs_pair.destroy
!   end

!  ***************************
!  Cluster generation routines
!  ***************************

   read_cluster ::: leaky
   ! Read in the crystal cluster data. NOTE: the .atom list must correspond to
   ! the asymmetric unit cell geometry of the .crystal.
      ENSURE(.atom.created,"no atom data")
      ENSURE(.crystal.created,"no crystal data")
      .cluster.destroy
      if (.crystal.asymmetric_unit_exists) then
         .cluster.create(.crystal,.atom)
      else
         .crystal.make_asymmetric_geometry
         .cluster.create_from_molecule(.crystal,.atom)
      end
      .cluster.read_keywords
   end

   create_cluster ::: leaky
   ! Create a new "self" by generating a cluster from information stored in
   ! .cluster.  The original molecule is stored in .saved and can be recovered
   ! by the "destroy_cluster" routine.
     self :: PTR
     ENSURE(.crystal.created,"no crystal data")
     ENSURE(.cluster.created,"no cluster data")
     ENSURE(.cluster.info_made,"no cluster data")
     .save ! Save the original molecule
     ! Making a new cluster from .saved
     .name  =  trim(.saved.name) // "_cluster"
     ! Get CIF information -- a cluster usually comes from CIF
     .CIF_file_name = .saved.CIF_file_name
     .CIF_data_block_name = .saved.CIF_data_block_name
     .CX_file_name = .saved.CX_file_name
     ! Create copies so that they can easily be destroyed without leaks
     .crystal.create_copy(.saved.crystal)            
     .cluster.create_copy(.saved.cluster)                
     .cluster.create_atom_list(.atom)                 ! Make new .atom list
     ! Make sure basis is OK.
     .basis_set_kind = .saved.basis_set_kind  
     if (.saved.basis.created) .basis.create_copy(.saved.basis)
     if (.saved.slaterbasis.created) .slaterbasis.create_copy(.saved.slaterbasis)
     if (.saved.coppensbasis.created) .coppensbasis.create_copy(.saved.coppensbasis)
     .set_atom_info
     .resolve_basis_info
   ! *** not tested yet
   ! if (.saved.density_matrix.created) then
   ! if (.saved.density_matrix.restricted.created) then
   !    .density_matrix.create(.n_bf,"restricted")
   !    .cluster.make_density_matrix(.density_matrix.restricted,.saved.density_matrix.restricted,.atom)
   ! end
   ! end
     stdout.flush
     stdout.text("New molecule created with name: " // trim(.name))
     stdout.flush
     stdout.text('To recover the original molecule use the "unsave" or "destroy_cluster" keyword')
   end

   destroy_cluster ::: leaky
   ! Destroy a molecule created by the "create_cluster" routine, and recover
   ! the original molecule from .saved
     self :: PTR
     ENSURE(.saved.created,"no crystal data")
     .unsave
   end

!  *************
!  Miscellaneous
!  *************

!   put_sylvian_csizmadia_tensors
!   ! Put out the Sylvian-Csizmadia polarisability tensors.
!   ! This routine will read the value of the Unsold denominator.
!      Dx,Dy,Dz, P,Pi,Pj,MOi,MOj :: REALMAT*
!      Qxx,Qyy,Qzz,Qxy,Qxz,Qyz :: REALMAT*
!      Oxxx,Oyyy,Ozzz,Oxxy,Oxxz,Oyyx,Oyyz,Ozzx,Ozzy,Oxyz :: REALMAT*
!      x,y,z, i,j :: INT
!      delta,fac :: REAL
!      alpha :: REALMAT(3,3)
!      beta :: REALMAT3(3,3,3)
!      alpha1 :: REALMAT3*
!      alpha2 :: REALMAT4*
!   ENSURE(.density_matrix.created,"no density matrix")
!   ENSURE(.basis_info_made, "no basis info")
!   ENSURE(.atom.created, "no atom info")
!      stdout.flush
!      stdout.text("Sylvian-Csizmadia polarisability tensors")
!      stdout.flush
!      stdin.read(delta)
!      stdout.show("Unsold denominator/a.u. =",delta)
!      Dx.create(.n_bf,.n_bf); Dy.create(.n_bf,.n_bf); Dz.create(.n_bf,.n_bf)
!      Qxx.create(.n_bf,.n_bf); Qyy.create(.n_bf,.n_bf); Qzz.create(.n_bf,.n_bf)
!      Qxy.create(.n_bf,.n_bf); Qxz.create(.n_bf,.n_bf); Qyz.create(.n_bf,.n_bf)
!      Oxxx.create(.n_bf,.n_bf); Oyyy.create(.n_bf,.n_bf); Ozzz.create(.n_bf,.n_bf)
!      Oxxy.create(.n_bf,.n_bf); Oxxz.create(.n_bf,.n_bf)
!      Oyyx.create(.n_bf,.n_bf); Oyyz.create(.n_bf,.n_bf)
!      Ozzx.create(.n_bf,.n_bf); Ozzy.create(.n_bf,.n_bf)
!      Oxyz.create(.n_bf,.n_bf)
!      .get_dipole_matrices(Dx,Dy,Dz)
!      .get_quadrupole_matrices(Qxx,Qyy,Qzz,Qxy,Qxz,Qyz)
!      .get_octupole_matrices(Oxxx,Oyyy,Ozzz,Oxxy,Oxxz,Oyyx,Oyyz,Ozzx,Ozzy,Oxyz)
!      .make_ao_density_matrix
!      x = 1; y = 2; z = 3
!      P.create(.n_bf,.n_bf)
!      P = HALF*.density_matrix.restricted
!      alpha(x,x) = P.trace_product_with(Qxx) - P.trace_product_with(Dx,P,Dx)
!      alpha(y,y) = P.trace_product_with(Qyy) - P.trace_product_with(Dy,P,Dy)
!      alpha(z,z) = P.trace_product_with(Qzz) - P.trace_product_with(Dz,P,Dz)
!      alpha(y,x) = P.trace_product_with(Qxy) - P.trace_product_with(Dy,P,Dx)
!      alpha(z,x) = P.trace_product_with(Qxz) - P.trace_product_with(Dz,P,Dx)
!      alpha(z,y) = P.trace_product_with(Qyz) - P.trace_product_with(Dz,P,Dy)
!      alpha.symmetric_reflect
!      fac = FOUR/delta
!      alpha = fac*alpha
!      stdout.flush
!      stdout.show("No. of occupiedf orbitals = ",.n_a)
!      stdout.flush
!      stdout.text("Orbital eigenvalues:")
!      stdout.flush
!      stdout.put(.orbital_energies,"column")
!      stdout.flush
!      stdout.text("First polarisability:")
!      stdout.flush
!      stdout.put(alpha)
!      ! Evaluate the orbital contributions
!      alpha1.create(3,3,.n_a); alpha1 = ZERO
!      alpha2.create(3,3,.n_a,.n_a); alpha2 = ZERO
!      Pi.create(.n_bf,.n_bf)
!      Pj.create(.n_bf,.n_bf)
!      do i = 1,.n_a
!         MOi => .molecular_orbitals.restricted(:,i:i)
!         Pi.to_product_of(MOi,MOi,transpose_b=TRUE)
!         alpha1(x,x,i) = Pi.trace_product_with(Qxx) - Pi.trace_product_with(Dx,Pi,Dx)
!         alpha1(y,y,i) = Pi.trace_product_with(Qyy) - Pi.trace_product_with(Dy,Pi,Dy)
!         alpha1(z,z,i) = Pi.trace_product_with(Qzz) - Pi.trace_product_with(Dz,Pi,Dz)
!         alpha1(y,x,i) = Pi.trace_product_with(Qxy) - Pi.trace_product_with(Dy,Pi,Dx)
!         alpha1(z,x,i) = Pi.trace_product_with(Qxz) - Pi.trace_product_with(Dz,Pi,Dx)
!         alpha1(z,y,i) = Pi.trace_product_with(Qyz) - Pi.trace_product_with(Dz,Pi,Dy)
!         alpha1(:,:,i).symmetric_reflect
!         do j = 1,(i-1)
!            MOj => .molecular_orbitals.restricted(:,j:j)
!            Pj.to_product_of(MOj,MOj,transpose_b=TRUE)
!            alpha2(x,x,i,j) = -Pi.trace_product_with(Dx,Pj,Dx)-Pj.trace_product_with(Dx,Pi,Dx)
!            alpha2(y,y,i,j) = -Pi.trace_product_with(Dy,Pj,Dy)-Pj.trace_product_with(Dy,Pi,Dy)
!            alpha2(z,z,i,j) = -Pi.trace_product_with(Dz,Pj,Dz)-Pj.trace_product_with(Dz,Pi,Dz)
!            alpha2(y,x,i,j) = -Pi.trace_product_with(Dy,Pj,Dx)-Pj.trace_product_with(Dy,Pi,Dx)
!            alpha2(z,x,i,j) = -Pi.trace_product_with(Dz,Pj,Dx)-Pj.trace_product_with(Dz,Pi,Dx)
!            alpha2(z,y,i,j) = -Pi.trace_product_with(Dz,Pj,Dy)-Pj.trace_product_with(Dz,Pi,Dy)
!            alpha2(:,:,i,j).symmetric_reflect
!         end
!      end
!      Pj.destroy
!      Pi.destroy
!      alpha1 = fac*alpha1
!      alpha2 = fac*alpha2
!      stdout.flush
!      stdout.text("First polarisability, orbital contributions:")
!      stdout.flush
!      do i = 1,.n_a
!         stdout.text("... for orbital "//i.to_str.trim)
!         stdout.put(alpha1(:,:,i))
!      end
!      stdout.flush
!      stdout.text("First polarisability, orbital pair contributions:")
!      stdout.flush
!      do i = 1,.n_a
!      do j = 1,(i-1)
!         stdout.text("... for orbitals "//i.to_str.trim//" and "//j.to_str.trim)
!         stdout.put(alpha2(:,:,i,j))
!      end
!      end
!      stdout.flush
!      stdout.text("Sum of all orbital contributions:")
!      stdout.flush
!      alpha = ZERO
!      do i = 1,.n_a
!         alpha = alpha + alpha1(:,:,i)
!         do j = 1,(i-1)
!            alpha = alpha + alpha2(:,:,i,j)
!         end
!      end
!      stdout.put(alpha)
!      alpha2.destroy
!      alpha1.destroy
!      beta(x,x,x) = P.trace_product_with(Oxxx) - THREE*P.trace_product_with(Dx,P,Qxx) &
!                  + P.trace_product_with(Dx,P,Dx,P,Dx)
!      beta(y,y,y) = P.trace_product_with(Oyyy) - THREE*P.trace_product_with(Dy,P,Qyy) &
!                  + P.trace_product_with(Dy,P,Dy,P,Dy)
!      beta(z,z,z) = P.trace_product_with(Ozzz) - THREE*P.trace_product_with(Dz,P,Qzz) &
!                  + P.trace_product_with(Dz,P,Dz,P,Dz)
!      beta(y,x,x) = P.trace_product_with(Oxxy) - TWO*P.trace_product_with(Dx,P,Qxy) &
!                  - P.trace_product_with(Dy,P,Qxx) + P.trace_product_with(Dy,P,Dx,P,Dx)
!      beta(z,x,x) = P.trace_product_with(Oxxz) - TWO*P.trace_product_with(Dx,P,Qxz) &
!                  - P.trace_product_with(Dz,P,Qxx) + P.trace_product_with(Dz,P,Dx,P,Dx)
!      beta(y,y,x) = P.trace_product_with(Oyyx) - TWO*P.trace_product_with(Dy,P,Qxy) &
!                  - P.trace_product_with(Dx,P,Qyy) + P.trace_product_with(Dy,P,Dy,P,Dx)
!      beta(z,y,x) = P.trace_product_with(Oxyz) - P.trace_product_with(Dz,P,Qxy) &
!                  - P.trace_product_with(Dy,P,Qxz) - P.trace_product_with(Dx,P,Qyz) &
!                  + P.trace_product_with(Dz,P,Dy,P,Dx)
!      beta(z,z,x) = P.trace_product_with(Ozzx) - TWO*P.trace_product_with(Dz,P,Qxz) &
!                  - P.trace_product_with(Dx,P,Qzz) + P.trace_product_with(Dz,P,Dz,P,Dx)
!      beta(z,y,y) = P.trace_product_with(Oyyz) - TWO*P.trace_product_with(Dy,P,Qyz) &
!                  - P.trace_product_with(Dz,P,Qyy) + P.trace_product_with(Dz,P,Dy,P,Dy)
!      beta(z,z,y) = P.trace_product_with(Ozzy) - TWO*P.trace_product_with(Dz,P,Qyz) &
!                  - P.trace_product_with(Dy,P,Qzz) + P.trace_product_with(Dz,P,Dz,P,Dy)
!      beta.make_symmetric
!      fac = 12.0d0/delta
!      beta = fac*beta
!      stdout.flush
!      stdout.text("Second polarisability:")
!      stdout.flush
!      stdout.put(beta)
!      P.destroy
!      Oxyz.destroy
!      Ozzy.destroy; Ozzx.destroy
!      Oyyz.destroy; Oyyx.destroy
!      Oxxz.destroy; Oxxy.destroy
!      Ozzz.destroy; Oyyy.destroy; Oxxx.destroy
!      Qyz.destroy; Qxz.destroy; Qxy.destroy
!      Qzz.destroy; Qyy.destroy; Qxx.destroy
!      Dz.destroy; Dy.destroy; Dx.destroy
!   end

   make_weak_force_energy_shift
   ! Make the expectation value of the parity-violating energy shift.
   ! Requires some archived molecular orbitals, general_complex kind.
   ! Reference: R. Zanasi and P. Lazzeretti, CPL 286, 240 (1998)
       pt :: REALMAT*
       Pa,Pb :: CPXVEC*
       Na,Nb :: CPXMAT*
       PV,NN :: REALVEC*
       n, x,y,z :: INT
       Gamma :: REAL
        I :: CPX
       arch :: ARCHIVE
   ENSURE(.basis_info_made, "no basis info")
       .molecular_orbitals.destroy_ptr_part
       arch.set(.name,"molecular_orbitals")
       arch.read(.molecular_orbitals, genre="general_complex")
       Gamma = 5.73416d-17
       PV.create(.n_atom)
       pt.create(.n_atom,3)
       .atom.get_coordinates(pt)
       Pa.create(.n_atom);   Pb.create(.n_atom)
       Na.create(.n_atom,3); Nb.create(.n_atom,3)
       I = (ZERO,ONE)
       stdout.set_real_style("d")
       x = 1; y = 2; z = 3
       PV = ZERO
       do n = 1,.n_e
          .make_nabla_orbital_grid_c(Na,Pa,.molecular_orbitals%general_complex(      1:  .n_bf,n), pt)
          .make_nabla_orbital_grid_c(Nb,Pb,.molecular_orbitals%general_complex(.n_bf+1:2*.n_bf,n), pt)
          PV(:) = PV(:) &
                + I*conjg(Nb(:,x))*Pa(:) + I*conjg(Na(:,x))*Pb(:) &
                - I*conjg(Pb(:))*Na(:,x) - I*conjg(Pa(:))*Nb(:,x) &
                +   conjg(Nb(:,y))*Pa(:) -   conjg(Na(:,y))*Pb(:) &
                +   conjg(Pb(:))*Na(:,y) -   conjg(Pa(:))*Nb(:,y) &
                + I*conjg(Na(:,z))*Pa(:) - I*conjg(Nb(:,z))*Pb(:) &
                - I*conjg(Pa(:))*Na(:,z) + I*conjg(Pb(:))*Nb(:,z)
       end
       PV = -HALF*Gamma*PV
       Nb.destroy; Na.destroy
       Pb.destroy; Pa.destroy
       pt.destroy
       NN.create(.n_atom)
       .atom.get_mean_neutron_numbers(NN)
       PV = PV*NN

       stdout.set_real_style("d")
       stdout.flush
       stdout.text("Contributions (by nucleus) to the parity-violating weak force energy shift term:")
       stdout.flush
       stdout.put(PV, format="column")
       stdout.flush
       stdout.show("Total contribution =", sum(PV) )
       stdout.flush
       stdout.text("Neutron numbers:")
       stdout.flush
       stdout.put(NN, format="column")
       stdout.set_real_style("f")
       NN.destroy
       PV.destroy
       .molecular_orbitals.destroy_ptr_part
   end

   put_g_tensor_information
   ! Put the g-tensor shift information to the output.
   ! Reference: Jayatilaka, JCP 108, 7587 (1998)
      S, Lx,Ly,Lz, Qxx,Qxy,Qxz,Qyx,Qyy,Qyz,Qzx,Qzy,Qzz, T :: REALMAT*
      HH,P :: CPXMAT*
      Sx,Sy,Sz,SS_net, Mx,My,Mz,MM_net :: REAL
      Qx,Qy,Qz,QQ_net, Tx,Ty,Tz,TT_net :: REAL
      Sx_ppm,Sy_ppm,Sz_ppm, Mx_ppm,My_ppm,Mz_ppm :: REAL
      Qx_ppm,Qy_ppm,Qz_ppm, Tx_ppm,Ty_ppm,Tz_ppm :: REAL
      fac, fx,fy,fz, total :: REAL
      quantization_axis :: REALVEC(3)
       I :: CPX
       m :: INT
      int_width :: BIN
      arch :: ARCHIVE
      .density_matrix.destroy_ptr_part
      arch.set(.name,"density_matrix")
      arch.read(.density_matrix, genre="general_complex")
      P => .density_matrix%general_complex
      HH.create(2*.n_bf,2*.n_bf)
      I = (ZERO,ONE)
      quantization_axis = .scfdata.quantization_axis
      ! Spin contribution
      S.create(.n_bf,.n_bf)
      .get_overlap_matrix(S)
      fac = G_FACTOR/FOUR
      HH = ZERO
      HH.beta_alpha_plus(S,factor=fac)
      HH.alpha_beta_plus(S,factor=fac)
      Sx = HH.trace_of_product(P)
      HH = ZERO
      HH.beta_alpha_plus(S,factor=fac*I)
      HH.alpha_beta_plus(S,factor=-fac*I)
      Sy = HH.trace_of_product(P)
      HH = ZERO
      HH.alpha_alpha_plus(S,factor=fac)
      HH.beta_beta_plus(S,factor=-fac)
      Sz = HH.trace_of_product(P)
      S.destroy
      m = .n_a - .n_b
      fx = m*fac*quantization_axis(1)
      fy = m*fac*quantization_axis(2)
      fz = m*fac*quantization_axis(3)
      Sx_ppm = (Sx-fx)*4000000/m
      Sy_ppm = (Sy-fy)*4000000/m
      Sz_ppm = (Sz-fz)*4000000/m
      SS_net = Sx_ppm*quantization_axis(1) + Sy_ppm*quantization_axis(2) + Sz_ppm*quantization_axis(3)
      ! L contribution
      Lx.create(.n_bf,.n_bf)
      Ly.create(.n_bf,.n_bf)
      Lz.create(.n_bf,.n_bf)
      .get_L_matrices(Lx,Ly,Lz)
      fac = HALF
      HH = ZERO
      HH.alpha_alpha_plus(Lx,factor=-fac*I)  ! -I factor for the nabla part
      HH.beta_beta_plus(Lx,factor=-fac*I)
      Mx = HH.trace_of_product(P)
      HH = ZERO
      HH.alpha_alpha_plus(Ly,factor=-fac*I)
      HH.beta_beta_plus(Ly,factor=-fac*I)
      My = HH.trace_of_product(P)
      HH = ZERO
      HH.alpha_alpha_plus(Lz,factor=-fac*I)
      HH.beta_beta_plus(Lz,factor=-fac*I)
      Mz = HH.trace_of_product(P)
      Lz.destroy; Ly.destroy; Lx.destroy
      Mx_ppm = Mx*4000000/m
      My_ppm = My*4000000/m
      Mz_ppm = Mz*4000000/m
      MM_net = Mx_ppm*quantization_axis(1) + My_ppm*quantization_axis(2) + Mz_ppm*quantization_axis(3)
      ! 1 electron LS gauge contribution
      Qxx.create(.n_bf,.n_bf); Qxy.create(.n_bf,.n_bf); Qxz.create(.n_bf,.n_bf)
      Qyx.create(.n_bf,.n_bf); Qyy.create(.n_bf,.n_bf); Qyz.create(.n_bf,.n_bf)
      Qzx.create(.n_bf,.n_bf); Qzy.create(.n_bf,.n_bf); Qzz.create(.n_bf,.n_bf)
      .get_spin_orbit_Q_matrices(Qxx,Qxy,Qxz,Qyx,Qyy,Qyz,Qzx,Qzy,Qzz)
      fac = G_FACTOR/(TWO*EIGHT*SPEED_OF_LIGHT_AU*SPEED_OF_LIGHT_AU)
      HH = ZERO
      HH.beta_alpha_plus(Qyy,factor=fac)
      HH.beta_alpha_plus(Qzz,factor=fac)
      HH.beta_alpha_plus(Qyx,factor=-I*fac)
      HH.alpha_alpha_plus(Qzx,factor=-fac)
      HH.beta_beta_plus(Qzx,factor=+fac)
      HH.make_hermitian
      Qx = HH.trace_of_product(P)
      HH = ZERO
      HH.beta_alpha_plus(Qxx,factor=I*fac)
      HH.beta_alpha_plus(Qzz,factor=I*fac)
      HH.beta_alpha_plus(Qxy,factor=-fac)
      HH.alpha_alpha_plus(Qzy,factor=-fac)
      HH.beta_beta_plus(Qzy,factor=+fac)
      HH.make_hermitian
      Qy = HH.trace_of_product(P)
      HH = ZERO
      HH.alpha_alpha_plus(Qxx,factor=fac)
      HH.alpha_alpha_plus(Qyy,factor=fac)
      HH.beta_beta_plus(Qxx,factor=-fac)
      HH.beta_beta_plus(Qyy,factor=-fac)
      HH.beta_alpha_plus(Qxz,factor=-fac)
      HH.beta_alpha_plus(Qyz,factor=-I*fac)
      HH.make_hermitian
      Qz = HH.trace_of_product(P)
      Qzz.destroy; Qzy.destroy; Qzx.destroy
      Qyz.destroy; Qyy.destroy; Qyx.destroy
      Qxz.destroy; Qxy.destroy; Qxx.destroy
      Qx_ppm = Qx*4000000/m
      Qy_ppm = Qy*4000000/m
      Qz_ppm = Qz*4000000/m
      QQ_net = Qx_ppm*quantization_axis(1) + Qy_ppm*quantization_axis(2) + Qz_ppm*quantization_axis(3)
      ! Relativistic kinetic energy contribution
      T.create(.n_bf,.n_bf)
      .get_kinetic_matrix(T)
      fac = -G_FACTOR/(FOUR*SPEED_OF_LIGHT_AU*SPEED_OF_LIGHT_AU)
      HH = ZERO
      HH.beta_alpha_plus(T,factor=fac)
      HH.alpha_beta_plus(T,factor=fac)
      Tx = HH.trace_of_product(P)
      HH = ZERO
      HH.beta_alpha_plus(T,factor=I*fac)
      HH.alpha_beta_plus(T,factor=-I*fac)
      Ty = HH.trace_of_product(P)
      HH = ZERO
      HH.alpha_alpha_plus(T,factor=fac)
      HH.beta_beta_plus(T,factor=-fac)
      Tz = HH.trace_of_product(P)
      T.destroy
      HH.destroy
      .density_matrix.destroy_ptr_part
      Tx_ppm = Tx*4000000/m
      Ty_ppm = Ty*4000000/m
      Tz_ppm = Tz*4000000/m
      TT_net = Tx_ppm*quantization_axis(1) + Ty_ppm*quantization_axis(2) + Tz_ppm*quantization_axis(3)

      stdout.set_real_style("d")
      int_width = TRUE
      stdout.flush
      stdout.text("Contribution to g-tensor shift:")
      stdout.flush
      stdout.dash(int_fields=1,real_fields=2)
      stdout.put("Term",int_width); stdout.put("<value>");
      stdout.put("shift/ppm"); stdout.flush
      stdout.dash(int_fields=1,real_fields=2)
      stdout.text("Spin term:")
      stdout.put("S_x",int_width)
      stdout.set_real_style("d"); stdout.put(Sx)
      stdout.set_real_style("f"); stdout.put(Sx_ppm); stdout.flush
      stdout.put("S_y",int_width)
      stdout.set_real_style("d"); stdout.put(Sy)
      stdout.set_real_style("f"); stdout.put(Sy_ppm); stdout.flush
      stdout.put("S_z",int_width)
      stdout.set_real_style("d"); stdout.put(Sz);
      stdout.set_real_style("f"); stdout.put(Sz_ppm); stdout.flush
      stdout.put("Net",int_width); stdout.tab(real_fields=1);
      stdout.put(SS_net); stdout.flush
      stdout.text("Angular momentum term:")
      stdout.put("L_x",int_width)
      stdout.set_real_style("d"); stdout.put(Mx);
      stdout.set_real_style("f"); stdout.put(Mx_ppm); stdout.flush
      stdout.put("L_y",int_width)
      stdout.set_real_style("d"); stdout.put(My);
      stdout.set_real_style("f"); stdout.put(My_ppm); stdout.flush
      stdout.put("L_z",int_width)
      stdout.set_real_style("d"); stdout.put(Mz);
      stdout.set_real_style("f"); stdout.put(Mz_ppm); stdout.flush
      stdout.put("Net",int_width); stdout.tab(real_fields=1);
      stdout.put(MM_net); stdout.flush
      stdout.text("1-electron L:S gauge term:")
      stdout.put("Q_x",int_width)
      stdout.set_real_style("d"); stdout.put(Qx);
      stdout.set_real_style("f"); stdout.put(Qx_ppm); stdout.flush
      stdout.put("Q_y",int_width)
      stdout.set_real_style("d"); stdout.put(Qy);
      stdout.set_real_style("f"); stdout.put(Qy_ppm); stdout.flush
      stdout.put("Q_z",int_width)
      stdout.set_real_style("d"); stdout.put(Qz);
      stdout.set_real_style("f"); stdout.put(Qz_ppm); stdout.flush
      stdout.put("Net",int_width); stdout.tab(real_fields=1);
      stdout.put(QQ_net); stdout.flush
      stdout.text("Relativistic B:S kinetic term:")
      stdout.put("T_x",int_width)
      stdout.set_real_style("d"); stdout.put(Tx)
      stdout.set_real_style("f"); stdout.put(Tx_ppm); stdout.flush
      stdout.put("T_y",int_width)
      stdout.set_real_style("d"); stdout.put(Ty);
      stdout.set_real_style("f"); stdout.put(Ty_ppm); stdout.flush
      stdout.put("T_z",int_width)
      stdout.set_real_style("d"); stdout.put(Tz);
      stdout.set_real_style("f"); stdout.put(Tz_ppm); stdout.flush
      stdout.put("Net",int_width); stdout.tab(real_fields=1);
      stdout.put(TT_net); stdout.flush
      total = SS_net + MM_net + QQ_net + TT_net
      stdout.flush
      stdout.put("Total:",int_width); stdout.tab(real_fields=1); stdout.put(total)
      stdout.flush
      stdout.dash(int_fields=1,real_fields=2)
      stdout.set_real_style("f")
   end

!*******************************************************************************
!                      Thermal parameter fitting
!*******************************************************************************

   force_thermal_symmetry
   ! Impose crystal symmetry on the thermal tensors.
     self :: INOUT
     n,u,s,n_unique :: INT
     unique_thermals,seitz :: REALMAT3*
     thermal,seitz_inv :: REALMAT(3,3)
     n_equiv :: INTVEC*
   ENSURE(.crystal.created,"crystal not created")
   ENSURE(.n_atom==.crystal.n_fragment_atoms,"incosistent crystal fragment")
     n_unique = .crystal.n_unique_fragment_atoms
     seitz => .crystal.spacegroup.seitz
     unique_thermals.create(3,3,n_unique)
     unique_thermals = ZERO
     n_equiv.create(n_unique)
     n_equiv = 0
     ! change to crystal coordinates.
     do n=1,.n_atom
       u = .crystal.unique_atom_for_fragment_atom(n)
       s = .crystal.unique_symop_for_fragment_atom(n)
       seitz_inv.to_inverse_of(transpose(seitz(1:3,1:3,s)))
       thermal = .atom(n).thermal_tensor
       thermal.change_basis(.crystal.unitcell.reciprocal_U_matrix)
       thermal.change_basis(seitz_inv)
       unique_thermals(:,:,u) = unique_thermals(:,:,u) + thermal
       n_equiv(u) = n_equiv(u) + 1
     end
     ! Average them.
     do u=1,n_unique
       unique_thermals(:,:,u) = unique_thermals(:,:,u) / n_equiv(u)
     end
     ! change back to cartesians.
     do n=1,.n_atom
       u = .crystal.unique_atom_for_fragment_atom(n)
       s = .crystal.unique_symop_for_fragment_atom(n)
       thermal = unique_thermals(:,:,u)
       thermal.change_basis(transpose(seitz(1:3,1:3,s)))
       thermal.change_basis(.crystal.unitcell.direct_U_matrix)
       .atom(n).thermal_tensor = thermal
     end
     n_equiv.destroy
     unique_thermals.destroy
   end

   fit_thermal_parameters ::: leaky
   ! Fit the thermal parameters to the calculated structure factors.
   ! Uses a line search method.
     dim :: INT
     chi2_min :: REAL
     U :: REALVEC*
     self :: PTR
     ENSURE(.crystal.created, "no crystal")
     ENSURE(.atom.created, "no atoms to fit")
     dim = .n_atom * 6
     U.create(dim)
     .get_thermal_parameters(U)
 !    .crystal.optimise_extinction = FALSE
 !    .crystal.optimise_scale = FALSE
     .atom.put_thermal_tensors
     saved_self => self
#ifndef NOGENERIC
     call minimise_BFGS(sfchi2,d_sfchi2_d_thermal,U,chi2_min,tol=TOL(7),gtol=TOL(7),step=TOL(4))
#else
     call REALVEC_minimise_BFGS(MOL_sfchi2,MOL_d_sfchi2_d_thermal,U,chi2_min,tol=TOL(7),gtol=TOL(7),step=TOL(4))
#endif
     U.destroy
     .put_atom_thermal_tensors
   end

   get_thermal_parameters(U) ::: private
   ! Set a new set of thermal parameters for all the atoms, assuming
   ! "U" is a vector of the independent thermal parameters.
      U :: REALVEC
      n,base :: INT
      ENSURE(size(U)==6*.n_atom, "wrong size, U")
      do n = 1,.n_atom      ! get thermal parameters into array
        base = (n-1) * 6
        U(base+1) = .atom(n).thermal_tensor(1,1)
        U(base+2) = .atom(n).thermal_tensor(1,2)
        U(base+3) = .atom(n).thermal_tensor(1,3)
        U(base+4) = .atom(n).thermal_tensor(2,2)
        U(base+5) = .atom(n).thermal_tensor(2,3)
        U(base+6) = .atom(n).thermal_tensor(3,3)
      end
   end

   set_thermal_parameters(U) ::: private
   ! Set a new set of thermal parameters for all the atoms, assuming
   ! "U" is a vector of the independent thermal parameters.
      U :: REALVEC
      n,base :: INT
      ENSURE(size(U)==6*.n_atom, "wrong size, U")
      do n = 1,.n_atom      ! get thermal parameters into array
        base = (n-1) * 6
        .atom(n).thermal_tensor(1,1) = U(base+1)
        .atom(n).thermal_tensor(1,2) = U(base+2)
        .atom(n).thermal_tensor(1,3) = U(base+3)
        .atom(n).thermal_tensor(2,2) = U(base+4)
        .atom(n).thermal_tensor(2,3) = U(base+5)
        .atom(n).thermal_tensor(3,3) = U(base+6)
        .atom(n).thermal_tensor(2,1) = .atom(n).thermal_tensor(1,2)
        .atom(n).thermal_tensor(3,1) = .atom(n).thermal_tensor(1,3)
        .atom(n).thermal_tensor(3,2) = .atom(n).thermal_tensor(2,3)
      end
      .force_thermal_symmetry
   end

   sfchi2(U) result(res) ::: leaky, selfless
   ! Evaluate the structure factor chi2.
     U :: REALVEC
     res :: REAL
     self :: MOL*
     self => saved_self
     ENSURE(.crystal.created, "no crystal")
     .set_thermal_parameters(U)
     .make_structure_factors
     res = .crystal.reflections.F_chi2
     stdout.show("new F_chi2 =",res)
   end

   d_sfchi2_d_thermal(U) result(res) ::: leaky, selfless
   ! Evaluate the gradient of the structure factor chi2 with respect to the
   ! unique thermal parameters.
   ! Size of res is [n_atom * 6].
     U :: REALVEC
     res :: REALVEC(size(U))
     sf_deriv,sf_deriv_eq :: CPXMAT*
     k_pts :: REALMAT*
     orb_kind :: STR
     complex :: BIN
     self :: MOL*
     self => saved_self
     ENSURE(.crystal.created, "no crystal")
     ENSURE(.density_matrix.created, "no density matrix")
     .set_thermal_parameters(U)
     k_pts.create(.crystal.n_unique_SF_k_pts,3)
     .crystal.make_unique_SF_k_pts(k_pts)
     sf_deriv.create( .crystal.n_refl, .n_atom * 6) ! d_Fc/d_U
     sf_deriv_eq.create(.n_atom * 6,.crystal.n_unique_SF_k_pts)
     orb_kind = .density_matrix.spinorbital_kind
     complex = orb_kind.includes("complex")
     if (complex) then
       .make_ft_deriv_U(sf_deriv_eq,.density_matrix.restricted_complex,k_pts)
     else
       .make_ft_deriv_U(sf_deriv_eq,.density_matrix.restricted,k_pts)
     end
     .crystal.sum_unique_sf_deriv_U(sf_deriv,sf_deriv_eq)
     sf_deriv_eq.destroy
     ! Do the derivative with respect to chi2
     res = .crystal.d_chi2_dU(sf_deriv)
     sf_deriv.destroy
     k_pts.destroy
   end

end
