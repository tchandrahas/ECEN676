!-------------------------------------------------------------------------------
!
! OPMATRIX: Operator matrices.
!
! Provide a basis set (matrix) representation of a one-electron quantum
! mechanical operator. Can cope with polymorphic types of basis representations,
! including restricted, unrestricted, and general basis orbital matrices.
! Also, complex types for all these matrices.
!
! Basically, its a polymorphic matrix type.
!
! Copyright (C) Dylan Jayatilaka 1998
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id: opmatrix.foo,v 1.25.2.2 2003/09/11 07:51:31 reaper Exp $
!-------------------------------------------------------------------------------

module OPMATRIX

   implicit none

contains

   create(n_bf)
   ! Create an opmatrix object, in a basis set with "n_bf" spatial orbitals
      self :: PTR
      n_bf :: INT, IN, optional
      nullify(self)
      allocate(self)
      ADD_MEMORY(OPMATRIX_SIZE)
      .nullify_ptr_part
      .set(n_bf)
   end

   create(n_bf,opmatkind)
   ! Create an opmatrix object, in a basis set with "n_bf" spatial orbitals
      self :: PTR
      n_bf :: INT, IN
      opmatkind :: STR(*)
      .create(n_bf)
      .create(opmatkind)
   end

   create_copy(m)
   ! Create an opmatrix object
      self :: PTR
       m :: OPMATRIX, IN
      .create(m.n_bf)
      .set_to(m)
   end

   destroy
   ! Destroy an opmatrix object
      self :: PTR
      if (.destroyed) return
      .destroy_ptr_part
      DELETE_MEMORY(OPMATRIX_SIZE)
      deallocate(self)
   end

   create(opmatkind)
   ! Create the appropriate spinorbital kind the opmatrix
      opmatkind :: STR(*), IN
      n_bf :: INT
      n_bf = .n_bf
   ENSURE(n_bf > 0, "bad number of basis functions.")
      select case (opmatkind)
         case ("restricted");           .restricted.create(n_bf,n_bf)
         case ("unrestricted");         .alpha.create(n_bf,n_bf)
                                        .beta.create(n_bf,n_bf)
         case ("alpha");                .alpha.create(n_bf,n_bf)
         case ("beta");                 .beta.create(n_bf,n_bf)
         case ("general");              .general.create(2*n_bf,2*n_bf)
         case ("restricted_complex");   .restricted_complex.create(n_bf,n_bf)
         case ("unrestricted_complex"); .alpha_complex.create(n_bf,n_bf)
                                        .beta_complex.create(n_bf,n_bf)
         case ("alpha_complex");        .alpha_complex.create(n_bf,n_bf)
         case ("beta_complex");         .beta_complex.create(n_bf,n_bf)
         case ("general_complex");      .general_complex.create(2*n_bf,2*n_bf)
         case default;   DIE("unknown kind, "//trim(opmatkind))
      end
   end

   destroy(opmatkind)
   ! Destroy the appropriate spinorbital kind of the opmatrix
      opmatkind :: STR(*)
      select case (opmatkind)
         case ("restricted");           .restricted.destroy
         case ("unrestricted");         .alpha.destroy; .beta.destroy
         case ("alpha");                .alpha.destroy
         case ("beta");                 .beta.destroy
         case ("general");              .general.destroy
         case ("restricted_complex");   .restricted_complex.destroy
         case ("unrestricted_complex"); .alpha_complex.destroy
                                        .beta_complex.destroy
         case ("alpha_complex");        .alpha_complex.destroy
         case ("beta_complex");         .beta_complex.destroy
         case ("general_complex");      .general_complex.destroy
         case ("all");                  .destroy_ptr_part
         case default;   DIE("unknown kind, "//trim(opmatkind))
      end
   end

   nullify_ptr_part
   ! Nullify the pointer parts of the opmatrix object
      nullify(.restricted)
      nullify(.alpha)
      nullify(.beta)
      nullify(.general)
      nullify(.restricted_complex)
      nullify(.alpha_complex)
      nullify(.beta_complex)
      nullify(.general_complex)
      nullify(.triangle)
      nullify(.square)
   end

   destroy_ptr_part
   ! Destroy the pointer parts of the opmatrix object
      .restricted.destroy
      .alpha.destroy
      .beta.destroy
      .general.destroy
      .restricted_complex.destroy
      .alpha_complex.destroy
      .beta_complex.destroy
      .general_complex.destroy
      .triangle.destroy
      .square.destroy
   end

!   created result(res)
!   ! Returns true if self has been created
!      self :: PTR
!      res :: BIN
!      res = associated(self)
!   end

!   destroyed result(res)
!   ! Returns true if self has *not* been created
!      self :: PTR
!      res :: BIN
!      res = NOT associated(self)
!   end

   any_created result(res)
   ! Returns true if any component of self has been created
      res :: BIN
      c :: BIN, dimension(6)
      c(1) = .restricted.created
      c(2) = .alpha.created
      c(3) = .general.created
      c(4) = .restricted_complex.created
      c(5) = .alpha_complex.created
      c(6) = .general_complex.created
      res = any(c)
   end

   all_destroyed result(res)
   ! Returns true if all components of self have been destroyed
      res :: BIN
       d :: BIN, dimension(6)
      d(1) = .restricted.destroyed
      d(2) = .alpha.destroyed
      d(3) = .general.destroyed
      d(4) = .restricted_complex.destroyed
      d(5) = .alpha_complex.destroyed
      d(6) = .general_complex.destroyed
      res = all(d)
   end

   created(opmatkind) result(res)
   ! Returns true if subkind "opmatkind" of self has been created
      self :: PTR
      opmatkind :: STR(*)
      res :: BIN
      if (NOT associated(self)) then
                                           res = FALSE; return
      else
         select case (opmatkind)
            case ("restricted");           res = .restricted.created
            case ("unrestricted");         res = .alpha.created
            case ("general");              res = .general.created
            case ("restricted_complex");   res = .restricted_complex.created
            case ("unrestricted_complex"); res = .alpha_complex.created
            case ("general_complex");      res = .general_complex.created
            case default;   DIE("unknown kind, "//trim(opmatkind))
         end
      end
   end

   destroyed(opmatkind) result(res)
   ! Returns true if subkind "opmatkind" of self has *not* been created
     opmatkind :: STR(*)
     res :: BIN
       select case (opmatkind)
         case ("restricted");           res = .restricted.destroyed
         case ("unrestricted");         res = .alpha.destroyed
         case ("general");              res = .general.destroyed
         case ("restricted_complex");   res = .restricted_complex.destroyed
         case ("unrestricted_complex"); res = .alpha_complex.destroyed
         case ("general_complex");      res = .general_complex.destroyed
         case default;   DIE("unknown kind, "//trim(opmatkind))
       end
   end

   set(n_bf)
   ! Set with "n_bf" spatial orbitals
      n_bf :: INT, IN, optional
      .set_defaults
      if (present(n_bf)) .n_bf = n_bf
   end

   set_defaults
   ! Set defaults
      .n_bf = 0
   end

   set_to(m) ::: leaky
   ! Set self to "m".
      m :: OPMATRIX, IN
     old_n_bf :: INT
     old_n_bf = .n_bf
     .set(m.n_bf)
     if (m.restricted.created) then
        if (old_n_bf /= .n_bf)     .destroy("restricted")
        if (.restricted.destroyed) .create("restricted")
        .restricted = m.restricted
     end
     if (m.alpha.created) then
        if (old_n_bf /= .n_bf) .destroy("alpha")
        if (.alpha.destroyed)  .create("alpha")
        .alpha = m.alpha
     end
     if (m.beta.created) then
        if (old_n_bf /= .n_bf) .destroy("beta")
        if (.beta.destroyed)   .create("beta")
        .beta = m.beta
     end
     if (m.general.created) then
        if (old_n_bf /= .n_bf)  .destroy("general")
        if (.general.destroyed) .create("general")
        .general = m.general
     end
     if (m.restricted_complex.created) then
        if (old_n_bf /= .n_bf)                .destroy("restricted_complex")
        if (.destroyed("restricted_complex")) .create("restricted_complex")
        .restricted_complex = m.restricted_complex
     end
     if (m.alpha_complex.created) then
        if (old_n_bf /= .n_bf)           .destroy("alpha_complex")
        if (.destroyed("alpha_complex")) .create("alpha_complex")
        .alpha_complex = m.alpha_complex
     end
     if (m.beta_complex.created) then
        if (old_n_bf /= .n_bf)          .destroy("beta_complex")
        if (.destroyed("beta_complex")) .create("beta_complex")
        .beta_complex = m.beta_complex
     end
     if (m.general_complex.created) then
        if (old_n_bf /= .n_bf)             .destroy("general_complex")
        if (.destroyed("general_complex")) .create("general_complex")
        .general_complex = m.general_complex
     end
   end

   spinorbital_kind result(res)
   ! Return the kind of spinorbitals used in the representation
   ! The simplest spinorbital kind in use is the one returned.
      res :: STR
      if      (.restricted.created )         then; res = "restricted"
      else if (.alpha.created )              then; res = "unrestricted"
      else if (.general.created )            then; res = "general"
      else if (.restricted_complex.created ) then; res = "restricted_complex"
      else if (.alpha_complex.created )      then; res = "unrestricted_complex"
      else if (.general_complex.created )    then; res = "general_complex"
      else; DIE("no object created")
      end
   end

   number_kind result(res)
   ! Return the kind of numbers used in the representation
      res :: STR
      if      ( .restricted.created )         then; res = "real"
      else if ( .alpha.created )              then; res = "real"
      else if ( .general.created )            then; res = "real"
      else if ( .restricted_complex.created ) then; res = "complex"
      else if ( .alpha_complex.created )      then; res = "complex"
      else if ( .general_complex.created )    then; res = "complex"
      else; DIE("no object created")
      end
   end

   guess_scf_kind result(res)
   ! Guess the kind of SCF to be used from the spinorbitals used in the
   ! representation.
      res :: STR
      if      ( .restricted.created )         then; res = "rhf"
      else if ( .alpha.created )              then; res = "uhf"
      else if ( .general.created )            then; res = "ghf"
      else if ( .restricted_complex.created ) then; res = "rchf"
      else if ( .alpha_complex.created )      then; res = "uchf"
      else if ( .general_complex.created )    then; res = "gchf"
      else; DIE("no object created")
      end
   end

   zero
   ! Set self to zero
      opmatkind :: STR
      opmatkind = .spinorbital_kind
      select case(opmatkind)
         case("restricted");           .restricted = ZERO
         case("unrestricted");         .alpha = ZERO; .beta = ZERO
         case("alpha");                .alpha = ZERO
         case("beta");                 .beta = ZERO
         case("general");              .general = ZERO
         case("restricted_complex");   .restricted = ZERO
         case("unrestricted_complex"); .alpha_complex = ZERO
                                       .beta_complex = ZERO
         case("alpha_complex");        .alpha_complex = ZERO
         case("beta_complex");         .beta_complex = ZERO
         case("general_complex");      .general_complex = ZERO
         case default;   DIE("unknown kind, "//trim(opmatkind))
      end
   end

   convert_to(newkind,factor) ::: leaky
   ! Convert self to a new basis kind "newkind".  To convert MO's please use
   ! the next routine.
      newkind :: STR(*)
      factor :: REAL, optional
      fac :: REAL
      oldkind :: STR
      fac = ONE
      if (present(factor)) fac = factor
      oldkind = .spinorbital_kind
      if (newkind==oldkind) return
      .create(newkind)
      select case (oldkind)
         case("restricted")
            select case (newkind)
               case("unrestricted")
                  .alpha = fac*.restricted
                  .beta  = fac*.restricted
               case("general")
                  .general = ZERO
                  .general.alpha_alpha_set_to(.restricted,fac)
                  .general.beta_beta_set_to(.restricted,fac)
               case("restricted_complex")
                  .restricted_complex = .restricted
               case("unrestricted_complex")
                  .alpha_complex = fac*.restricted
                  .beta_complex  = fac*.restricted
               case("general_complex")
                  .general_complex = ZERO
                  .general_complex.alpha_alpha_set_to(.restricted,fac)
                  .general_complex.beta_beta_set_to(.restricted,fac)
               case default
                  DIE("cant convert kind "//trim(oldkind)//" to kind "//trim(newkind))
            end
         case("unrestricted")
            select case (newkind)
               case("restricted")
                  .restricted = fac*.alpha
               case("general")
                  .general = ZERO
                  .general.alpha_alpha_set_to(.alpha)
                  .general.beta_beta_set_to(.beta)
               case("unrestricted_complex")
                  .alpha_complex = .alpha
                  .beta_complex  = .beta
               case("general_complex")
                  .general_complex = ZERO
                  .general_complex.alpha_alpha_set_to(.alpha)
                  .general_complex.beta_beta_set_to(.beta)
               case default
                  DIE("cant convert kind "//trim(oldkind)//" to kind "//trim(newkind))
            end
         case("general")
            select case (newkind)
               case("unrestricted")
                  .alpha = .general.alpha_alpha
                  .beta  = .general.beta_beta
               case("general_complex")
                  .general_complex = .general
               case default
                  DIE("cant convert kind "//trim(oldkind)//" to kind "//trim(newkind))
            end
         case default; DIE("cant convert old kind "//trim(oldkind))
      end
      .destroy(oldkind)
   end

   convert_to(newkind,na,nb,quantization_axis) ::: leaky
   ! Convert self (which is regarded to be a set of MO's) to a
   ! new basis kind "newkind"
     newkind :: STR(*)
     na,nb :: INT
     quantization_axis :: REALVEC(3), optional
     quantize :: BIN
     oldkind :: STR
     d,ne :: INT
     lam,tmp,ar,br,bi :: REAL
     d = .n_bf
     ne = na + nb
     oldkind = .spinorbital_kind
     if (newkind==oldkind) return
     .create(newkind)
     select case (oldkind)
       case("restricted")
         select case (newkind)
           case("unrestricted")
             .alpha = .restricted
             .beta  = .restricted
           case("general")
             .general = ZERO
             .general(  1:d,     1:2*nb-1:2) = .restricted(:,   1:nb)
             .general(d+1: ,     2:2*nb  :2) = .restricted(:,   1:nb)
             .general(  1:d,2*nb+1:ne      ) = .restricted(:,nb+1:na)
             .general(d+1: ,  ne+1:2*na    ) = .restricted(:,nb+1:na)
             .general(1:d  ,2*na+1:2*d -1:2) = .restricted(:,na+1: d)
             .general(d+1: ,2*na+2:2*d   :2) = .restricted(:,na+1: d)
           case("restricted_complex")
             .restricted_complex = .restricted
           case("unrestricted_complex")
             .alpha_complex = .restricted
             .beta_complex  = .restricted
           case("general_complex")
             .general_complex = ZERO
             .general_complex(  1:d,     1:2*nb-1:2) = .restricted(:,   1:nb)
             .general_complex(d+1: ,     2:2*nb  :2) = .restricted(:,   1:nb)
             .general_complex(  1:d,2*nb+1:ne      ) = .restricted(:,nb+1:na)
             .general_complex(d+1: ,  ne+1:2*na    ) = .restricted(:,nb+1:na)
             .general_complex(  1:d,2*na+1:2*d -1:2) = .restricted(:,na+1: d)
             .general_complex(d+1: ,2*na+2:2*d   :2) = .restricted(:,na+1: d)
           case default
             DIE("cant convert kind "//trim(oldkind)//" to kind "//trim(newkind))
         end
       case("unrestricted")
         select case (newkind)
           case("restricted","alpha")
             .restricted = .alpha ! Loss of information here
             WARN("Conversion from unrestricted to restricted ignores beta orbitals")
           case("beta")
             .restricted = .beta  ! Loss of information here
             WARN("Conversion from unrestricted to restricted ignores alpha orbitals")
           case("general")
             .general = ZERO
             .general(  1:d,     1:2*nb-1:2) = .alpha(:,   1:nb)
             .general(d+1: ,     2:2*nb  :2) = .beta (:,   1:nb)
             .general(  1:d,2*nb+1:ne      ) = .alpha(:,nb+1:na)
             .general(d+1: ,  ne+1:2*na    ) = .beta (:,nb+1:na)
             .general(  1:d,2*na+1:2*d -1:2) = .alpha(:,na+1: d)
             .general(d+1: ,2*na+2:2*d   :2) = .beta (:,na+1: d)
           case("unrestricted_complex")
             .alpha_complex = .alpha
             .beta_complex  = .beta
           case("general_complex")
             .general_complex = ZERO
             quantize = FALSE
             if (present(quantization_axis)) &
               quantize = NOT quantization_axis.equals((/ZERO,ZERO,ONE/))
             if (quantize) then
               lam = quantization_axis.norm
               tmp = abs(quantization_axis(3)+lam) ! always positive anyway
               if (tmp.equals(ZERO)) then
                  ar = ZERO
                  br = ONE
                  bi = ZERO
               else
                  ar = sqrt(tmp/(TWO*lam))
                  br = ONE/sqrt(TWO*lam*tmp)
                  bi = br
                  br = br*quantization_axis(1)
                  bi = bi*quantization_axis(2)
               end
               .general_complex(d+1: ,     1:  na) = cmplx(br,bi,kind=CPX_KIND)*.alpha(:,   1:na)
               .general_complex(  1:d,     1:  na) =           ar*.alpha(:,   1:na)
               .general_complex(d+1: ,  ne+1:nb+d) = cmplx(br,bi,kind=CPX_KIND)*.alpha(:,na+1: d)
               .general_complex(  1:d,  ne+1:nb+d) =           ar*.alpha(:,na+1: d)
               br = -br
               .general_complex(  1:d,  na+1:ne  ) = cmplx(br,bi,kind=CPX_KIND)*.beta (:,   1:nb)
               .general_complex(d+1: ,  na+1:ne  ) =           ar*.beta (:,   1:nb)
               .general_complex(  1:d,nb+d+1:    ) = cmplx(br,bi,kind=CPX_KIND)*.beta (:,nb+1: d)
               .general_complex(d+1: ,nb+d+1:    ) =           ar*.beta (:,nb+1: d)
             else
               .general_complex(  1:d,     1:na  ) = .alpha(:,   1:na)
               .general_complex(d+1: ,  na+1:ne  ) = .beta (:,   1:nb)
               .general_complex(  1:d,  ne+1:nb+d) = .alpha(:,na+1:  )
               .general_complex(d+1: ,nb+d+1:    ) = .beta (:,nb+1:  )
             end
    stdout.flush
    stdout.text("alpha orbs:"); stdout.put(.alpha)
    stdout.flush
    stdout.text("beta  orbs:"); stdout.put(.beta)
    stdout.flush
    stdout.text("cmplx orbs:"); stdout.put(.general_complex)

           case default
             DIE("cant convert kind "//trim(oldkind)//" to kind "//trim(newkind))
         end
       case("general")
         select case (newkind)
           case("unrestricted")
             .general.alpha_alpha_put_to(.alpha)
             .general.beta_beta_put_to(.beta)
             WARN("Conversion from general to unrestricted not recommended!")
           case("general_complex")
             .general_complex = .general
           case default
             DIE("cant convert kind "//trim(oldkind)//" to kind "//trim(newkind))
         end
       case default; DIE("cant convert old kind "//trim(oldkind))
     end
     .destroy(oldkind)
   end

   l_compress(opmatkind) result(res)
   ! Return the length of the compressed object
      res :: INT
      opmatkind :: STR(*), optional
       k :: STR
      if (present(opmatkind)) then; k = opmatkind
      else;                    k = .spinorbital_kind
      end
      select case (k)
         case("restricted");           res = HALF*.n_bf*(.n_bf+1)
         case("unrestricted");         res = .n_bf*(.n_bf+1)
         case("general");              res = .n_bf*(2*.n_bf+1)
         case("restricted_complex");   res = .n_bf*.n_bf
         case("unrestricted_complex"); res = 2*.n_bf*.n_bf
         case("general_complex");      res = 4*.n_bf*.n_bf
         case default;   DIE("unknown kind, "//trim(k))
      end
   end

   compress(opmatkind) ::: leaky
   ! Compress the opmatrix into a triangle or square vector to save space
      opmatkind :: STR(*), optional
       k :: STR
      k = .spinorbital_kind
      if (present(opmatkind)) k = opmatkind
      select case (k)
         case("restricted")
            .triangle.destroy
            .triangle.create(.l_compress(k))
            .restricted.compress_to_triangle(.triangle)
            .restricted.destroy
         case("unrestricted")
            .triangle.destroy
            .triangle.create(.l_compress(k))
            .alpha.compress_to_triangle( .triangle.alpha)
            .beta.compress_to_triangle( .triangle.beta)
            .alpha.destroy
            .beta.destroy
         case("general")
            .triangle.destroy
            .triangle.create(.l_compress(k))
            .general.compress_to_triangle(.triangle)
         case("restricted_complex")
            .square.destroy
            .square.create(.l_compress(k))
            .restricted_complex.compress_to_square(.square)
            .restricted_complex.destroy
         case("unrestricted_complex")
            .square.destroy
            .square.create(.l_compress(k))
            .alpha_complex.compress_to_square( .square.alpha)
            .beta_complex.compress_to_square( .square.beta)
            .alpha_complex.destroy
            .beta_complex.destroy
         case("general_complex")
            .square.destroy
            .square.create(.l_compress(k))
            .general_complex.compress_to_square( .square)
            .general_complex.destroy
      end
   end

   uncompress ::: leaky
   ! Uncompress the opmatrix
      l_compress :: INT
      l_compress = -1
      if (.triangle.created) l_compress = size(.triangle)
      if (.square.created)   l_compress = size(.square)
      if (l_compress==.l_compress("restricted")) then
            .destroy("restricted")
            .create("restricted")
            .restricted.uncompress_from_triangle(.triangle)
            .triangle.destroy
      else if (l_compress==.l_compress("unrestricted")) then
            .destroy("unrestricted")
            .create("unrestricted")
            .alpha.uncompress_from_triangle( .triangle.alpha)
            .beta.uncompress_from_triangle( .triangle.beta)
            .triangle.destroy
      else if (l_compress==.l_compress("general")) then
            .destroy("general")
            .create("general")
            .general.uncompress_from_triangle(.triangle)
            .triangle.destroy
      else if (l_compress==.l_compress("restricted_complex")) then
            .destroy("restricted_complex")
            .create("restricted_complex")
            .restricted_complex.uncompress_from_square(.square)
            .square.destroy
      else if (l_compress==.l_compress("unrestricted_complex")) then
            .destroy("unrestricted_complex")
            .create("unrestricted_complex")
            .alpha_complex.uncompress_from_square( .square.alpha)
            .beta_complex.uncompress_from_square( .square.beta)
            .square.destroy
      else if (l_compress==.l_compress("general_complex")) then
            .destroy("general_complex")
            .create("general_complex")
            .general_complex.uncompress_from_square(.square)
            .square.destroy
      end
   end

   schmidt_orthonormalise(S,scale)
   ! Schmidt Orthonormalise self.  (For molecular orbitals).
      S :: REALMAT, IN
      scale :: REAL, optional
      opmatkind :: STR
      n :: INT
      SS :: REALMAT*
      opmatkind = .spinorbital_kind
      select case(opmatkind)
         case("restricted")
                  .restricted.schmidt_orthonormalise(S,scale)
         case("unrestricted")
                  .alpha.schmidt_orthonormalise(S)
                  .beta.schmidt_orthonormalise(S)
         case("alpha")
                  .alpha.schmidt_orthonormalise(S,scale)
         case("beta")
                  .beta.schmidt_orthonormalise(S,scale)
         case("general")
                  n = 2*S.dim1
                  SS.create(n,n)
                  SS = ZERO
                  SS.alpha_alpha_set_to(S)
                  SS.beta_beta_set_to(S)
                  .general.schmidt_orthonormalise(SS,scale)
                  SS.destroy
         case("restricted_complex")
                  .restricted.schmidt_orthonormalise(S,scale)
         case("unrestricted_complex")
                  .alpha_complex.schmidt_orthonormalise(S)
                  .beta_complex.schmidt_orthonormalise(S)
         case("alpha_complex")
                  .alpha_complex.schmidt_orthonormalise(S,scale)
         case("beta_complex")
                  .beta_complex.schmidt_orthonormalise(S,scale)
         case("general_complex")
                  n = 2*S.dim1
                  SS.create(n,n)
                  SS = ZERO
                  SS.alpha_alpha_set_to(S)
                  SS.beta_beta_set_to(S)
                  .general_complex.schmidt_orthonormalise(SS,scale)
                  SS.destroy
         case default;   DIE("unknown kind, "//trim(opmatkind))
      end
   end

   symmetrically_orthonormalise(S)
   ! Symmetrically orthonormalise self.  (For molecular orbitals).
   ! "S" is the AO overlap matrix
       S :: REALMAT, IN
      opmatkind :: STR
       n :: INT
      SS :: REALMAT*
      opmatkind = .spinorbital_kind
      select case(opmatkind)
         case("restricted")
                  .restricted.symmetrically_orthonormalise(S)
         case("unrestricted")
                  .alpha.symmetrically_orthonormalise(S)
                  .beta.symmetrically_orthonormalise(S)
         case("alpha")
                  .alpha.symmetrically_orthonormalise(S)
         case("beta")
                  .beta.symmetrically_orthonormalise(S)
         case("general")
                  ENSURE(SS.dim1==2*S.dim1,"wrong size, S")
                  n = 2*S.dim1
                  SS.create(n,n)
                  SS = ZERO
                  SS.alpha_alpha_set_to(S)
                  SS.beta_beta_set_to(S)
                  .general.symmetrically_orthonormalise(SS)
                  SS.destroy
         case("restricted_complex")
                  .restricted.symmetrically_orthonormalise(S)
         case("unrestricted_complex")
                  .alpha_complex.symmetrically_orthonormalise(S)
                  .beta_complex.symmetrically_orthonormalise(S)
         case("alpha_complex")
                  .alpha_complex.symmetrically_orthonormalise(S)
         case("beta_complex")
                  .beta_complex.symmetrically_orthonormalise(S)
         case("general_complex")
                  ENSURE(SS.dim1==2*S.dim1,"wrong size, S")
                  n = 2*S.dim1
                  SS.create(n,n)
                  SS = ZERO
                  SS.alpha_alpha_set_to(S)
                  SS.beta_beta_set_to(S)
                  .general_complex.symmetrically_orthonormalise(SS)
                  SS.destroy
         case default;   DIE("unknown kind, "//trim(opmatkind))
      end
   end

   plus(X)
   ! Add X to self.
      X :: OPMATRIX, IN
     opmatkind :: STR
   ENSURE(.spinorbital_kind==X.spinorbital_kind,"incompatible kinds")
     opmatkind = X.spinorbital_kind
     select case(opmatkind)
       case("restricted")
         .restricted.plus(X.restricted)
       case("unrestricted")
         .alpha.plus(X.alpha)
         .beta.plus(X.beta)
       case("alpha")
         .alpha.plus(X.alpha)
       case("beta")
         .beta.plus(X.beta)
       case("general")
         .general.plus(X.general)
       case("restricted_complex")
         .restricted.plus(X.restricted)
       case("unrestricted_complex")
         .alpha_complex.plus(X.alpha_complex)
         .beta_complex.plus(X.beta_complex)
       case("alpha_complex")
         .alpha_complex.plus(X.alpha_complex)
       case("beta_complex")
         .beta_complex.plus(X.beta_complex)
       case("general_complex")
         .general_complex.plus(X.general_complex)
       case default;   DIE("unknown kind, "//trim(opmatkind))
     end
   end

   minus(X)
   ! Subtract X from self.
      X :: OPMATRIX, IN
     opmatkind :: STR
   ENSURE(.spinorbital_kind==X.spinorbital_kind,"incompatible kinds")
     opmatkind = .spinorbital_kind
     select case(opmatkind)
       case("restricted")
         .restricted.minus(X.restricted)
       case("unrestricted")
         .alpha.minus(X.alpha)
         .beta.minus(X.beta)
       case("alpha")
         .alpha.minus(X.alpha)
       case("beta")
         .beta.minus(X.beta)
       case("general")
         .general.minus(X.general)
       case("restricted_complex")
         .restricted.minus(X.restricted)
       case("unrestricted_complex")
         .alpha_complex.minus(X.alpha_complex)
         .beta_complex.minus(X.beta_complex)
       case("alpha_complex")
         .alpha_complex.minus(X.alpha_complex)
       case("beta_complex")
         .beta_complex.minus(X.beta_complex)
       case("general_complex")
         .general_complex.minus(X.general_complex)
       case default; DIE("unknown spinorbital kind, " // trim(opmatkind))
     end
   end

   to_scaled(fac,X)
   ! Set self to scaled X.
      X :: OPMATRIX, IN
     fac :: REAL, IN
     opmatkind :: STR
   ENSURE(.spinorbital_kind==X.spinorbital_kind,"incompatible kinds")
     opmatkind = .spinorbital_kind
     select case(opmatkind)
       case("restricted")
         .restricted.to_scaled_mat(fac,X.restricted)
       case("unrestricted")
         .alpha.to_scaled_mat(fac,X.alpha)
         .beta.to_scaled_mat(fac,X.beta)
       case("alpha")
         .alpha.to_scaled_mat(fac,X.alpha)
       case("beta")
         .beta.to_scaled_mat(fac,X.beta)
       case("general")
         .general.to_scaled_mat(fac,X.general)
       case("restricted_complex")
         .restricted.to_scaled_mat(fac,X.restricted)
       case("unrestricted_complex")
         .alpha_complex.to_scaled_mat(fac,X.alpha_complex)
         .beta_complex.to_scaled_mat(fac,X.beta_complex)
       case("alpha_complex")
         .alpha_complex.to_scaled_mat(fac,X.alpha_complex)
       case("beta_complex")
         .beta_complex.to_scaled_mat(fac,X.beta_complex)
       case("general_complex")
         .general_complex.to_scaled_mat(fac,X.general_complex)
       case default;   DIE("unknown kind, "//trim(opmatkind))
     end
   end

   plus_scaled(fac,X)
   ! Set self to scaled X.
      X :: OPMATRIX, IN
     fac :: REAL, IN
     opmatkind :: STR
   ENSURE(.spinorbital_kind==X.spinorbital_kind,"incompatible kinds")
     opmatkind = .spinorbital_kind
     select case(opmatkind)
       case("restricted")
         .restricted.plus_scaled_mat(fac,X.restricted)
       case("unrestricted")
         .alpha.plus_scaled_mat(fac,X.alpha)
         .beta.plus_scaled_mat(fac,X.beta)
       case("alpha")
         .alpha.plus_scaled_mat(fac,X.alpha)
       case("beta")
         .beta.plus_scaled_mat(fac,X.beta)
       case("general")
         .general.plus_scaled_mat(fac,X.general)
       case("restricted_complex")
         .restricted.plus_scaled_mat(fac,X.restricted)
       case("unrestricted_complex")
         .alpha_complex.plus_scaled_mat(fac,X.alpha_complex)
         .beta_complex.plus_scaled_mat(fac,X.beta_complex)
       case("alpha_complex")
         .alpha_complex.plus_scaled_mat(fac,X.alpha_complex)
       case("beta_complex")
         .beta_complex.plus_scaled_mat(fac,X.beta_complex)
       case("general_complex")
         .general_complex.plus_scaled_mat(fac,X.general_complex)
       case default;   DIE("unknown kind, "//trim(opmatkind))
     end
   end

   damp(old,mix)
   ! Constructs the new self matrix by combining it with the "old" one using a
   ! "mix" factor, i.e.  self = (1-mix)*self + mix*old.
     self :: INOUT
     old :: OPMATRIX, IN
     mix :: REAL, IN
     .to_scaled(ONE-mix,self)
     .plus_scaled(mix,old)
   end

   expectation(X) result (res)
   ! Get the expectation value of the matrix "X", i.e:
   !    res = Trace ( X  .self )
      X :: REALMAT
      res :: REAL
      opmatkind :: STR
   ENSURE(X.dim1==.n_bf,"wrong X dimension")
   ENSURE(X.is_square,"X is not square")
      opmatkind = .spinorbital_kind
      select case (opmatkind)
        case ("restricted")
           res = .restricted.trace_of_product(X)
        case ("unrestricted")
           res = .alpha.trace_of_product(X)
           res =  .beta.trace_of_product(X) + res
        case ("general_complex")
           res = .general_complex.trace_of_product(X)
        case default; DIE("not implemented, "//trim(opmatkind))
      end
   end

end
