!---------------------------------------------------------------------------
!
! REALMATMAT: Matrix of matrices
!
! Copyright (C) Dylan Jayatilaka, 2002
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id: realmatmat.foo,v 1.2 2003/02/19 07:48:57 reaper Exp $
!---------------------------------------------------------------------------

module REALMATMAT

   implicit none

contains

   create(dim1,dim2)
   ! Create a matvec
      self :: PTR
      dim1,dim2 :: INT
      nullify(self)
      allocate(self(dim1,dim2))
      ADD_MEMORY(dim1*dim2*PTR_SIZE)
      .nullify_ptr_part
   end

   destroy
   ! Destroy a matvec
      self :: PTR
      if (.destroyed) return
      .destroy_ptr_part
      DELETE_MEMORY(size(self)*PTR_SIZE)
      deallocate(self)
   end

   nullify_ptr_part
   ! Nullify the pointer parts of a matvec
      i,j :: INT
      do i = 1,.dim1
      do j = 1,.dim2
         nullify(self(i,j).element)
      end
      end
   end

   destroy_ptr_part
   ! Destroy the pointer parts of a matvec
      i,j :: INT
      do i = 1,.dim1
      do j = 1,.dim2
         self(i,j).element.destroy
      end
      end
   end

!   created result(res)
!   ! Returns true if self has been created
!      self :: PTR
!      res :: BIN
!      res = associated(self)
!   end

!   destroyed result(res)
!   ! Returns true if self has *not* been created
!      self :: PTR
!      res :: BIN
!      res = NOT associated(self)
!   end

   create_copy(m) ::: leaky
   ! Create a copy of "m"
      self :: PTR
      m :: REALMATMAT
      .create(m.dim1,m.dim2)
      .copy(m)
   end

   copy(m) ::: leaky
   ! Make a copy of "m"
     m :: REALMATMAT
     i,j :: INT
   ENSURE(.dim1==m.dim1,"different 1st dimension")
   ENSURE(.dim2==m.dim2,"different 2nd dimension")
      do i = 1,m.dim1
      do j = 1,m.dim2
         self(i,j).element.create_copy(m(i,j).element)
      end
      end
   end

!   dim1 result(res) ::: pure
!   ! Returns the first dimension of self
!      self :: IN
!      res :: INT
!      res = size(self,1)
!   end

!   dim2 result(res) ::: pure
!   ! Returns the second dimension of self
!      self :: IN
!      res :: INT
!      res = size(self,2)
!   end

end
