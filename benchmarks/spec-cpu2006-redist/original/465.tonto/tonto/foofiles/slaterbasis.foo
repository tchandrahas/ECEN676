!-------------------------------------------------------------------------------
!
! SLATERBASIS: For Slater basis sets
!
! Copyright (C) Dylan Jayatilaka, 1998
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id: slaterbasis.foo,v 1.1.2.4 2003/11/13 05:33:55 reaper Exp $
!
!-------------------------------------------------------------------------------

module SLATERBASIS

   use SLATERSHELLVEC, only: density_value_at_radius

   implicit none

   keys :: STRVEC*, private DEFAULT_NULL

contains

!*******************************************************************************
!                             Create and Destroy Routines
!*******************************************************************************

   create ::: get_from(OBJECT), leaky
   ! Create an object
      self :: PTR
   end

   destroy ::: get_from(OBJECT), leaky
   ! Destroy an object
      self :: PTR
   end

   nullify_ptr_part
   ! Nullify the shell parts of self
      nullify(.shell)
      nullify(.interpolator)
   end

   destroy_ptr_part 
   ! Destroy the shell parts of self
      .shell.destroy
      .interpolator.destroy
   end

!   created result(res) ::: pure
!   ! Returns true if self has been created
!      self :: PTR
!      res :: BIN
!      res = associated(self)
!   end

!   destroyed result(res) ::: pure
!   ! Returns true if self has *not* been created
!      self :: PTR
!      res :: BIN
!      res = NOT associated(self)
!   end

   create_copy(b)
   ! Create a copy of the basis "b".
     b :: SELF_TYPE, IN
     self :: PTR
     .create
     .copy(b)
   end

   copy(b) ::: leaky
   ! Copy a basis "b" to "self". Make sure pointer parts are first
   ! destroyed or nullified, as you want.
      b :: SELF_TYPE, IN
      self = b
      if (b.shell.created) .shell.create_copy(b.shell)
      if (b.interpolator.created) .interpolator.create_copy(b.interpolator)
   end

   set_defaults ::: get_from(BASIS)
   ! Create and set up a default basis set
   end

   update ::: get_from(BASIS)
   ! Update the shell data, if it exists
   end

   set_label(label)
   ! Set the basis label
      label :: STR
      .label = label
   end

   resolve_by_label(label,basis,clobber,found)
   ! Resolve "self" by pointer assigning it to the element in "basis" which has
   ! a label which matches "label". If "clobber" is present and TRUE (the
   ! default situation), then "self" is pointer assigned to the matching element
   ! in "basis" irrespective of whether it is already associated; otherwise it
   ! is not pointer assigned. If present, "found" is set TRUE if "self" is
   ! resolved (or was already resolved if clobber was not set), or false
   ! otherwise. If "found" is not present, and a match has not been found, an
   ! error is generated.
      self :: PTR
      label :: STR
      basis :: SLATERBASISVEC*
      clobber,found :: BIN, optional
      b :: INT
      check :: BINVEC*
      fnd :: BIN
   ENSURE(basis.created, "no basis set")
      if (present(clobber)) then
      if (NOT clobber) then
      if (.created) then
      if (.label/=" ") then
         if (present(found)) found = TRUE
         return
      end
      end
      end
      end
      check.create(basis.dim)
      check = basis.label==label
      b = check.index_of_first_true_element
      check.destroy
      fnd = b>0
      if (fnd) self => basis(b) ! NOTE : this is a pointer assign NOT COPY
      if (present(found)) then; found = fnd
      else; ENSURE(fnd,"unknown basis label, "// trim(label))
      end
   end

!  ************
!  I/O Routines
!  ************

   read_keywords ::: get_from(OBJECT), recursive, leaky
   ! Read data from "stdin" using keyword style input.
   end

   process_keyword(keyword) ::: leaky
   ! Process command "keyword". Any required data needed by the "keyword" is
   ! inputted from "stdin".
     keyword :: STR(*), IN
     word :: STR
     word = keyword
     word.to_lower_case
     select case (word)
       case ("-- Regular options --   ")
       case ("}                       "); ! exit surrounding loop
       case ("analyse_configuration   "); .analyse_configuration
       case ("configuration=          "); .read_configuration
       case ("label=                  "); .read_label
       case ("put                     "); .put
       case ("shells=                 "); .read_shell
       case ("tonto-style=            "); .read_tonto_style
       case ("units=                  "); .read_units
       ! These are only for making custom tables for the list type
       case ("-- Options for tables --")
       case ("flush                   "); stdout.flush
       case ("put_label               "); stdout.put(.label,int_width=TRUE)
       case ("put_n_shells            "); stdout.put(.n_shell)
       case ("put_n_bf                "); stdout.put(.n_bf)
       case ("put_n_prim              "); stdout.put(.n_prim)
       case  default ;      UNKNOWN(word)
     end
   end

   read_units ::: get_from(OBJECT)
   ! Read a string which describes the units to be used
   end

   read_junk ::: get_from(OBJECT)
   ! Read in a junk string, useful for ignoring a field
   end

   read_label ::: get_from(BASIS)
   ! Read only the basis label
   end

   read_shell ::: get_from(BASIS), leaky
   ! Read a shell
      .shell.read_list_keywords
      .update
   end

   read_configuration
   ! Read in the configuration string
      stdin.read(.configuration)
   end

   read_tonto_style ::: leaky
   ! Create and read a tonto style basis set
      the_keys :: STRVEC*
      .read_label
      .read_configuration
      the_keys => ("l_chr= kind= n,z,c*=").split
      .shell.set_keys(the_keys)
      the_keys.destroy
      .shell.read_data
      .update
   end

   analyse_configuration 
   ! Analyse the orbital configuration and set the shell occupancies
      configuration,conf_kind :: STR
      split,conf :: STRVEC*
      match :: BINVEC*
      found,keep :: BIN
      i,j,s,occ,ind :: INT
   ENSURE(.configuration/=" ","no configuration")
   ENSURE(.shell.created,"no shells")
   ENSURE(.shell_kinds_created,"not all orbital kinds are there")
      ! Split configuration into separate fields
      configuration = .configuration
      configuration.replace("("," ")
      configuration.replace(")"," ")
      split => configuration.split
      i = 1
      do ! loop over shell/orbital configurations
         if (i>split.dim) exit
         ! Now get orbital configurations only
         keep = FALSE
         select case (split(i))
            case ("K");   conf => ("1S 2").split
            case ("L");   conf => ("2S 2 2P 6").split
            case ("M");   conf => ("3S 2 3P 6 3D 10").split
            case default; conf => split(i:i+1); keep = TRUE
         end
         j = 1
         do ! Loop over orbital configurations 
            if (j>conf.dim) exit
            conf_kind = conf(j)
            occ  = conf(j+1).to_int
            ! Now find the shell with the correct orbital kind
            if (occ>0) then
            found = FALSE 
            do s = 1,.shell.dim
               if (all(.shell(s).kind/=conf_kind)) cycle
               match.create(.shell(s).n_orb)
               match = .shell(s).kind==conf_kind
               ind = match.index_of_first_true_element
               match.destroy
               ENSURE(.shell(s).occupancy.created,"occupancies have not been created")
               .shell(s).occupancy(ind) = occ
               found = TRUE
               exit
            end
            ENSURE(found,"orbital kind "//conf_kind.trim//" not found")
            end
            j = j + 2
         end
         if (NOT keep) conf.destroy
         i = i + 2
      end
      split.destroy
   end

!  ********************
!  Key related routines
!  ********************

   read_keys ::: get_from(OBJECT)
   ! Read the "keys".
   end

   process_keys ::: get_from(OBJECT), leaky
   ! Process each of the words in the "keys" list.
   end

   keys_created result (res) ::: get_from(OBJECT)
   ! Return TRUE if the list-element keys are created.
      res :: BIN
   end

   set_keys(the_keys) ::: get_from(OBJECT)
   ! This is for setting the "keys" externally.
     the_keys :: STRVEC(len=*,:)
   end

   clear_keys ::: get_from(OBJECT)
   ! This is for destroying the "keys" externally.
   end

   put_table_footer ::: get_from(OBJECT)
   ! Output a table footer from the list of "keys". NOTE: not all keywords need
   ! contribute to the banner - any unrecognised keyword is skipped.
   end

   put_table_header
   ! Output a table header from the list of "keys". NOTE: not all keywords need
   ! contribute to the banner - any unrecognised keyword is skipped.
     word :: STR
     width,k :: INT
     ENSURE(keys.created,"no keys")
     width = .table_width
     if (width > 0) then
       stdout.dash(width=width)
       do k = 1,size(keys)
         word = keys(k)
         word.to_lower_case
         select case (word)
           case ("put_configuration"); stdout.put("Config.")
           case ("put_label        "); stdout.put("label",int_width=TRUE)
           case ("put_n_shells     "); stdout.put("n_shells",int_width=TRUE)
           case ("put_n_bf         "); stdout.put("n_bf",int_width=TRUE)
           case ("put_n_prim       "); stdout.put("n_prim",int_width=TRUE)
           case ("flush            "); stdout.flush; exit
         end
         if (k==size(keys)) then
           stdout.flush ! In case they didn't write one.
           WARN("no flush keyword - you may later overrun the output buffer")
         end
       end
       stdout.dash(width=width)
     end
   end

   table_width result (res)
   ! Return the table width in characters, based on "keys".  Note that not all
   ! keywords need to contribute to the banner - if a keyword is not recognised,
   ! then it is skipped.
     res :: INT
     int_dash,real_dash,k :: INT
     word :: STR
     ENSURE(keys.created,"no keys")
     int_dash = 0
     real_dash = 0
     do k = 1,size(keys)
       word = keys(k)
       word.to_lower_case
       select case (word)
         case ("}                "); ! exit surrounding loop
         case ("put_configuration"); real_dash = real_dash + 1
         case ("put_label        "); int_dash = int_dash + 1
         case ("put_n_shells     "); int_dash = int_dash + 1
         case ("put_n_bf         "); int_dash = int_dash + 1
         case ("put_n_prim       "); int_dash = int_dash + 1
         case ("flush            "); exit
         case default
       end
     end
     res = int_dash * stdout.int_width + real_dash * stdout.real_width
   end

!  ***************
!  Inquiry methods
!  ***************

   same_as(b) result(res) ::: get_from(BASIS)
   ! Return TRUE if the basis set "self" is the same as "b". Only the
   ! shell vector is compared to see if they are "really" the same.
      self :: IN
      b :: SELF_TYPE, IN
      res :: BIN
   end

   max_n_orb result(res) 
   ! Return the maximum number of contracted orbitals in any one shell.
      self :: IN
      res :: INT
      res = maxval(.shell.n_orb)
   end

   no_of_shells result(res) ::: get_from(BASIS), pure
   ! Work out and return the number of shells in the basis set
      self :: IN
      res :: INT
   end

   no_of_basis_functions result (res) ::: get_from(BASIS), pure
   ! Work out and return the number of basis functions in the basis set
      self :: IN
      res :: INT
   end

   no_of_primitives result (res) ::: get_from(BASIS), pure
   ! Work out and return the number of primitives in the basis set
      self :: IN
      res :: INT
   end

   min_exponent result (res) ::: get_from(BASIS), pure
   ! Return the minimum exponent in the basis.
     self :: IN
     res :: REAL
   end

   shell_kinds_created result(res) 
   ! Return TRUE if all the .shell.kind vectors are there.
      self :: IN
      res :: BIN
      i :: INT
      if (.shell.destroyed) then
         res = FALSE
      else
         res = TRUE
         do i = 1,.shell.dim
            if (.shell(i).kind.created) cycle
            res = FALSE
            exit
         end
      end
   end

!  **************
!  Output methods
!  **************

   put
   ! Put out the basis information to file "stdout"
      stdout.flush
      stdout.show("Slater basis set : ",trim(.label))
      stdout.flush
      stdout.show("Configuration          =",.configuration)
      stdout.show("No. of shells          =",.n_shell)
      stdout.show("No. of basis functions =",.n_bf)
      stdout.show("No. of primitives      =",.n_prim)
      if (.shell.created) .shell.put
   end

!  ******************
!  Density evaluation
!  ******************

   make_density_grid(density_grid,pt,pos)
   ! Work out the electron "density_grid" on a set of points "pt", assuming the
   ! orbitals are at position "pos".
      self :: IN
      density_grid :: REALVEC, OUT
      pt :: REALMAT, IN
      pos :: REALVEC(3), IN
   ENSURE(density_grid.dim==pt.dim1,"inconsistent number of points")
      if (.interpolator.created) then
         .make_interpolated_density_grid(density_grid,pt,pos)
      else
         .make_normal_density_grid(density_grid,pt,pos)
      end
   end

   make_normal_density_grid(density_grid,pt,pos)
   ! Make the normal (uninterpolated) "density_grid" for the supplied points
   ! "pt" from the real slater atomic orbitals, as fitted by coppens, assuming
   ! the orbital is at position "pos".
     self :: IN
     density_grid :: REALVEC, OUT
     pt :: REALMAT, IN
     pos :: REALVEC(3), IN
     R :: REALVEC*
     n_pt,n :: INT
     x, y, z :: REAL
   ENSURE(pt.dim2==3,"wrong dimension for points array")
   ENSURE(density_grid.dim==pt.dim1,"inconsistent number of points")
   ENSURE(.shell.created,"no shell vector")
     n_pt = pt.dim1
     R.create(n_pt)
     do n = 1,n_pt
        x = pt(n,1) - pos(1)
        y = pt(n,2) - pos(2)
        z = pt(n,3) - pos(3)
        R(n) = sqrt(x*x + y*y + z*z)
     end
     ! Now get the density values
     density_grid = .shell.densities_at_radii(R)
     R.destroy
   end

   make_interpolated_density_grid(density_grid,pt,pos)
   ! Make the interpolated "density_grid" for the supplied points "pt" from the real
   ! slater atomic orbitals, as fitted by coppens, assuming the orbitals are at
   ! position "pos".
     self :: IN
     density_grid :: REALVEC, OUT
     pt :: REALMAT, IN
     pos :: REALVEC(3), IN
     R :: REALVEC*
     n_pt,n :: INT
     x, y, z :: REAL
   ENSURE(pt.dim2==3,"wrong dimension for points array")
   ENSURE(density_grid.dim==pt.dim1,"inconsistent number of points")
   ENSURE(.interpolator.created,"no interpolator defined!")
     n_pt = pt.dim1
     R.create(n_pt)
     do n = 1,n_pt
        x = pt(n,1) - pos(1)
        y = pt(n,2) - pos(2)
        z = pt(n,3) - pos(3)
        R(n) = sqrt(x*x + y*y + z*z)
     end
     ! Now get the interpolated density values
     density_grid = .interpolator.values_for(R)
     R.destroy
   end

   make_interpolator ::: leaky
   ! Make the interpolator for the coppens atom density
   ENSURE(.shell.created,"no coppens orbitals defined!")
     .interpolator.destroy
     .interpolator.create
     .interpolator.kind = "logarithmic"
     .shell.set_saved_self ! Used by function below
#ifdef NOGENERIC
     .interpolator.set_even_spaced_data(first=ZERO,spacing=0.05d0,length=20.0d0, &
        func=SLATERSHELLVEC_density_value_at_radius,tol=TOL(9))
#else
     .interpolator.set_even_spaced_data(first=ZERO,spacing=0.05d0,length=20.0d0, &
        func=density_value_at_radius,tol=TOL(9))
#endif
   end

end
